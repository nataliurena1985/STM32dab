
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b078  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b0  0801b218  0801b218  0002b218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d7c8  0801d7c8  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  0801d7c8  0801d7c8  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d7c8  0801d7c8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d7c8  0801d7c8  0002d7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d7cc  0801d7cc  0002d7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801d7d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c6e4  200001f0  0801d9c0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c8d4  0801d9c0  0003c8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b25  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064be  00000000  00000000  00059d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002158  00000000  00000000  00060248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019ad  00000000  00000000  000623a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a34  00000000  00000000  00063d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032f26  00000000  00000000  0008d781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfe40  00000000  00000000  000c06a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009308  00000000  00000000  001a04e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001a97f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b200 	.word	0x0801b200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801b200 	.word	0x0801b200

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <AppInit>:
unsigned int m_FREC=100;
unsigned int ValorPista1;
unsigned int ValorPista2;

void AppInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b093      	sub	sp, #76	; 0x4c
 8000bd0:	af00      	add	r7, sp, #0
	int NroPIC=0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
	int NroBOT=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	643b      	str	r3, [r7, #64]	; 0x40
	int NroBTX=0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int NroPEL=0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
	int i;
	char a,b,c,d,e,ch;
	char File[50];

	m_ActivarPWM=0;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <AppInit+0x30>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
	m_Pantalla=0;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <AppInit+0x34>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
	//ApagoCanales();
}
 8000bee:	bf00      	nop
 8000bf0:	374c      	adds	r7, #76	; 0x4c
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	2000478c 	.word	0x2000478c

08000c04 <AppLoop>:

void AppLoop(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09e      	sub	sp, #120	; 0x78
 8000c08:	af04      	add	r7, sp, #16
	int i,x,y;
	char str[100];
	UINT br;

	if(m_Pantalla == 2)
 8000c0a:	4bb0      	ldr	r3, [pc, #704]	; (8000ecc <AppLoop+0x2c8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d139      	bne.n	8000c86 <AppLoop+0x82>
	{
		SPI3->CR1  &= ~ SPI_CR1_SPE;
 8000c12:	4baf      	ldr	r3, [pc, #700]	; (8000ed0 <AppLoop+0x2cc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4aae      	ldr	r2, [pc, #696]	; (8000ed0 <AppLoop+0x2cc>)
 8000c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c1c:	6013      	str	r3, [r2, #0]
		MODIFY_REG(SD_SPI_HANDLE.Instance->CR1,SPI_BAUDRATEPRESCALER_256,SPI_BAUDRATEPRESCALER_2);
 8000c1e:	4bad      	ldr	r3, [pc, #692]	; (8000ed4 <AppLoop+0x2d0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4bab      	ldr	r3, [pc, #684]	; (8000ed4 <AppLoop+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000c2c:	601a      	str	r2, [r3, #0]
		SPI3->CR1 |= SPI_CR1_SPE;
 8000c2e:	4ba8      	ldr	r3, [pc, #672]	; (8000ed0 <AppLoop+0x2cc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4aa7      	ldr	r2, [pc, #668]	; (8000ed0 <AppLoop+0x2cc>)
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	6013      	str	r3, [r2, #0]
		//PIC(LOGO_MM,0,0,0);
		f_BMP("REC/LOGO/PIC LOGO_WCH.bmp",0,0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	48a6      	ldr	r0, [pc, #664]	; (8000ed8 <AppLoop+0x2d4>)
 8000c40:	f016 ffb0 	bl	8017ba4 <f_BMP>


		sprintf(str,"%d %d",m_Pantalla,ERROR_SD);
 8000c44:	4ba1      	ldr	r3, [pc, #644]	; (8000ecc <AppLoop+0x2c8>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4ba4      	ldr	r3, [pc, #656]	; (8000edc <AppLoop+0x2d8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	49a4      	ldr	r1, [pc, #656]	; (8000ee0 <AppLoop+0x2dc>)
 8000c50:	f018 fdf2 	bl	8019838 <siprintf>
		ILI9341_Draw_String(10,10, WHITE, 0xf800,str,2);
 8000c54:	2302      	movs	r3, #2
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	463b      	mov	r3, r7
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	210a      	movs	r1, #10
 8000c66:	200a      	movs	r0, #10
 8000c68:	f010 f9e2 	bl	8011030 <ILI9341_Draw_String>
        BOW(34,200,0,18,INGRESAR);
 8000c6c:	4b9d      	ldr	r3, [pc, #628]	; (8000ee4 <AppLoop+0x2e0>)
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2312      	movs	r3, #18
 8000c72:	2200      	movs	r2, #0
 8000c74:	21c8      	movs	r1, #200	; 0xc8
 8000c76:	2022      	movs	r0, #34	; 0x22
 8000c78:	f016 fb90 	bl	801739c <BOW>
        m_Pantalla++;
 8000c7c:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <AppLoop+0x2c8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <AppLoop+0x2c8>)
 8000c84:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == 0)
 8000c86:	4b91      	ldr	r3, [pc, #580]	; (8000ecc <AppLoop+0x2c8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d139      	bne.n	8000d02 <AppLoop+0xfe>
	{
		SPI3->CR1  &= ~ SPI_CR1_SPE;
 8000c8e:	4b90      	ldr	r3, [pc, #576]	; (8000ed0 <AppLoop+0x2cc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a8f      	ldr	r2, [pc, #572]	; (8000ed0 <AppLoop+0x2cc>)
 8000c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c98:	6013      	str	r3, [r2, #0]
		MODIFY_REG(SD_SPI_HANDLE.Instance->CR1,SPI_BAUDRATEPRESCALER_256,SPI_BAUDRATEPRESCALER_2);
 8000c9a:	4b8e      	ldr	r3, [pc, #568]	; (8000ed4 <AppLoop+0x2d0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b8c      	ldr	r3, [pc, #560]	; (8000ed4 <AppLoop+0x2d0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000ca8:	601a      	str	r2, [r3, #0]
		SPI3->CR1 |= SPI_CR1_SPE;
 8000caa:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <AppLoop+0x2cc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a88      	ldr	r2, [pc, #544]	; (8000ed0 <AppLoop+0x2cc>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb4:	6013      	str	r3, [r2, #0]
		f_BMP("REC/LOGO/PIC LOGO_ROT.bmp",0,0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <AppLoop+0x2e4>)
 8000cbc:	f016 ff72 	bl	8017ba4 <f_BMP>
		sprintf(str,"%d %d",m_Pantalla,ERROR_SD);
 8000cc0:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <AppLoop+0x2c8>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b85      	ldr	r3, [pc, #532]	; (8000edc <AppLoop+0x2d8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4638      	mov	r0, r7
 8000cca:	4985      	ldr	r1, [pc, #532]	; (8000ee0 <AppLoop+0x2dc>)
 8000ccc:	f018 fdb4 	bl	8019838 <siprintf>
		ILI9341_Draw_String(10,10, WHITE, 0xf800,str,2);
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f010 f9a4 	bl	8011030 <ILI9341_Draw_String>
        BOW(34,200,0,18,INGRESAR);
 8000ce8:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <AppLoop+0x2e0>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2312      	movs	r3, #18
 8000cee:	2200      	movs	r2, #0
 8000cf0:	21c8      	movs	r1, #200	; 0xc8
 8000cf2:	2022      	movs	r0, #34	; 0x22
 8000cf4:	f016 fb52 	bl	801739c <BOW>
        m_Pantalla++;
 8000cf8:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <AppLoop+0x2c8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a73      	ldr	r2, [pc, #460]	; (8000ecc <AppLoop+0x2c8>)
 8000d00:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == MENU_PRINCIPAL)
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <AppLoop+0x2c8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d129      	bne.n	8000d5e <AppLoop+0x15a>
	{
		FondoCompletoAzul();
 8000d0a:	f017 fd61 	bl	80187d0 <FondoCompletoAzul>
    	Encabezamiento3("MENU PRINCIPAL");
 8000d0e:	4877      	ldr	r0, [pc, #476]	; (8000eec <AppLoop+0x2e8>)
 8000d10:	f017 f9e2 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"ARRANCAR            ",VISOR);
 8000d14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d18:	4975      	ldr	r1, [pc, #468]	; (8000ef0 <AppLoop+0x2ec>)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f017 fe80 	bl	8018a20 <MenuSet>
    	MenuSet( 1,"DESARROLLO DAB      ",DES_DAB);
 8000d20:	f640 0234 	movw	r2, #2100	; 0x834
 8000d24:	4973      	ldr	r1, [pc, #460]	; (8000ef4 <AppLoop+0x2f0>)
 8000d26:	2001      	movs	r0, #1
 8000d28:	f017 fe7a 	bl	8018a20 <MenuSet>
    	MenuSet( 2,"DESARROLLO MPPT     ",DES_MPPT);
 8000d2c:	f640 0298 	movw	r2, #2200	; 0x898
 8000d30:	4971      	ldr	r1, [pc, #452]	; (8000ef8 <AppLoop+0x2f4>)
 8000d32:	2002      	movs	r0, #2
 8000d34:	f017 fe74 	bl	8018a20 <MenuSet>
    	MenuSet( 3,"DESARROLLO INVERTER ",DES_INVERTER);
 8000d38:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000d3c:	496f      	ldr	r1, [pc, #444]	; (8000efc <AppLoop+0x2f8>)
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f017 fe6e 	bl	8018a20 <MenuSet>
    	MenuSet( 4,"CONFIGURAR          ",CONFIGURAR);
 8000d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d48:	496d      	ldr	r1, [pc, #436]	; (8000f00 <AppLoop+0x2fc>)
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f017 fe68 	bl	8018a20 <MenuSet>

    	MenuPrint();
 8000d50:	f017 fec4 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <AppLoop+0x2c8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <AppLoop+0x2c8>)
 8000d5c:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == CONFIGURAR)
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <AppLoop+0x2c8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d117      	bne.n	8000d9a <AppLoop+0x196>
	{
		FondoCompletoAzul();
 8000d6a:	f017 fd31 	bl	80187d0 <FondoCompletoAzul>
    	Encabezamiento3("CONFIGURACION");
 8000d6e:	4865      	ldr	r0, [pc, #404]	; (8000f04 <AppLoop+0x300>)
 8000d70:	f017 f9b2 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"WIFI                ",WIFI);
 8000d74:	f241 4250 	movw	r2, #5200	; 0x1450
 8000d78:	4963      	ldr	r1, [pc, #396]	; (8000f08 <AppLoop+0x304>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f017 fe50 	bl	8018a20 <MenuSet>
    	MenuSet( 1,"HARDWARE            ",HARDWARE_PASS);
 8000d80:	f241 32f6 	movw	r2, #5110	; 0x13f6
 8000d84:	4961      	ldr	r1, [pc, #388]	; (8000f0c <AppLoop+0x308>)
 8000d86:	2001      	movs	r0, #1
 8000d88:	f017 fe4a 	bl	8018a20 <MenuSet>
    	MenuPrint();
 8000d8c:	f017 fea6 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <AppLoop+0x2c8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <AppLoop+0x2c8>)
 8000d98:	6013      	str	r3, [r2, #0]
	}
	////////////////////////////////////////////////////////////////////////
	// CONFIGURAR WIFI
	////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == WIFI)
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <AppLoop+0x2c8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f241 4250 	movw	r2, #5200	; 0x1450
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d123      	bne.n	8000dee <AppLoop+0x1ea>
	{
		FondoCompletoAzul();
 8000da6:	f017 fd13 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("CONFIGURAR WIFI");
 8000daa:	4859      	ldr	r0, [pc, #356]	; (8000f10 <AppLoop+0x30c>)
 8000dac:	f017 f994 	bl	80180d8 <Encabezamiento3>

	   	MenuSet( 0,"SSID                ",WIFI_SSID);
 8000db0:	f241 425a 	movw	r2, #5210	; 0x145a
 8000db4:	4957      	ldr	r1, [pc, #348]	; (8000f14 <AppLoop+0x310>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f017 fe32 	bl	8018a20 <MenuSet>
	   	MenuSet( 1,"CLAVE               ",WIFI_PASS);
 8000dbc:	f241 4264 	movw	r2, #5220	; 0x1464
 8000dc0:	4955      	ldr	r1, [pc, #340]	; (8000f18 <AppLoop+0x314>)
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f017 fe2c 	bl	8018a20 <MenuSet>
	   	MenuSet( 2,"CONECTAR            ",WIFI_CONNECT);
 8000dc8:	f241 426e 	movw	r2, #5230	; 0x146e
 8000dcc:	4953      	ldr	r1, [pc, #332]	; (8000f1c <AppLoop+0x318>)
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f017 fe26 	bl	8018a20 <MenuSet>
	   	MenuSet( 3,"BORRAR CONFIGURACION",WIFI_CLR_CONF);
 8000dd4:	f241 4278 	movw	r2, #5240	; 0x1478
 8000dd8:	4951      	ldr	r1, [pc, #324]	; (8000f20 <AppLoop+0x31c>)
 8000dda:	2003      	movs	r0, #3
 8000ddc:	f017 fe20 	bl	8018a20 <MenuSet>
	   	MenuPrint();
 8000de0:	f017 fe7c 	bl	8018adc <MenuPrint>
	   	m_Pantalla++;
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <AppLoop+0x2c8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <AppLoop+0x2c8>)
 8000dec:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == WIFI_SSID)
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <AppLoop+0x2c8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f241 425a 	movw	r2, #5210	; 0x145a
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10c      	bne.n	8000e14 <AppLoop+0x210>
	{
		FondoCompletoAzul();
 8000dfa:	f017 fce9 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("SSID WIFI");
 8000dfe:	4849      	ldr	r0, [pc, #292]	; (8000f24 <AppLoop+0x320>)
 8000e00:	f017 f96a 	bl	80180d8 <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000e04:	4848      	ldr	r0, [pc, #288]	; (8000f28 <AppLoop+0x324>)
 8000e06:	f015 fd23 	bl	8016850 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <AppLoop+0x2c8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <AppLoop+0x2c8>)
 8000e12:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == WIFI_PASS)
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <AppLoop+0x2c8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f241 4264 	movw	r2, #5220	; 0x1464
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d10c      	bne.n	8000e3a <AppLoop+0x236>
	{
		FondoCompletoAzul();
 8000e20:	f017 fcd6 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("CLAVE WIFI");
 8000e24:	4841      	ldr	r0, [pc, #260]	; (8000f2c <AppLoop+0x328>)
 8000e26:	f017 f957 	bl	80180d8 <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000e2a:	483f      	ldr	r0, [pc, #252]	; (8000f28 <AppLoop+0x324>)
 8000e2c:	f015 fd10 	bl	8016850 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <AppLoop+0x2c8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <AppLoop+0x2c8>)
 8000e38:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla==WIFI_MANDAR_SSID)
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <AppLoop+0x2c8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f241 4282 	movw	r2, #5250	; 0x1482
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10d      	bne.n	8000e62 <AppLoop+0x25e>
	{
		m_TecladoStr[44]=0;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <AppLoop+0x32c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		sprintf(str,"SSI%s;",m_TecladoStr);
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <AppLoop+0x32c>)
 8000e52:	4938      	ldr	r1, [pc, #224]	; (8000f34 <AppLoop+0x330>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f018 fcef 	bl	8019838 <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <AppLoop+0x2c8>)
 8000e5c:	f241 4250 	movw	r2, #5200	; 0x1450
 8000e60:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla==WIFI_MANDAR_PASS)
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <AppLoop+0x2c8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f241 428c 	movw	r2, #5260	; 0x148c
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <AppLoop+0x286>
	{
		m_TecladoStr[44]=0;
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <AppLoop+0x32c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		sprintf(str,"PAS%s;",m_TecladoStr);
 8000e76:	463b      	mov	r3, r7
 8000e78:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <AppLoop+0x32c>)
 8000e7a:	492f      	ldr	r1, [pc, #188]	; (8000f38 <AppLoop+0x334>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f018 fcdb 	bl	8019838 <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <AppLoop+0x2c8>)
 8000e84:	f241 4250 	movw	r2, #5200	; 0x1450
 8000e88:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == WIFI_CONNECT)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <AppLoop+0x2c8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f241 426e 	movw	r2, #5230	; 0x146e
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d108      	bne.n	8000ea8 <AppLoop+0x2a4>
	{
		sprintf(str,"HIG;");
 8000e96:	463b      	mov	r3, r7
 8000e98:	4928      	ldr	r1, [pc, #160]	; (8000f3c <AppLoop+0x338>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f018 fccc 	bl	8019838 <siprintf>
		//mandarWifi(str);
		m_Pantalla=WIFI;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <AppLoop+0x2c8>)
 8000ea2:	f241 4250 	movw	r2, #5200	; 0x1450
 8000ea6:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == WIFI_CLR_CONF)
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <AppLoop+0x2c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f241 4278 	movw	r2, #5240	; 0x1478
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d108      	bne.n	8000ec6 <AppLoop+0x2c2>
	{
		sprintf(str,"CLR;");
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4922      	ldr	r1, [pc, #136]	; (8000f40 <AppLoop+0x33c>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f018 fcbd 	bl	8019838 <siprintf>
		//mandarWifi(str);*/
		m_Pantalla=WIFI;
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <AppLoop+0x2c8>)
 8000ec0:	f241 4250 	movw	r2, #5200	; 0x1450
 8000ec4:	601a      	str	r2, [r3, #0]
	}
	////////////////////////////////////////////////////////////////////////
	// CONFIGURAR HARDWARE
	////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == HARDWARE_PASS)
 8000ec6:	4b01      	ldr	r3, [pc, #4]	; (8000ecc <AppLoop+0x2c8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	e03b      	b.n	8000f44 <AppLoop+0x340>
 8000ecc:	2000478c 	.word	0x2000478c
 8000ed0:	40003c00 	.word	0x40003c00
 8000ed4:	20008b88 	.word	0x20008b88
 8000ed8:	0801b218 	.word	0x0801b218
 8000edc:	20009068 	.word	0x20009068
 8000ee0:	0801b234 	.word	0x0801b234
 8000ee4:	0801ba38 	.word	0x0801ba38
 8000ee8:	0801b23c 	.word	0x0801b23c
 8000eec:	0801b258 	.word	0x0801b258
 8000ef0:	0801b268 	.word	0x0801b268
 8000ef4:	0801b280 	.word	0x0801b280
 8000ef8:	0801b298 	.word	0x0801b298
 8000efc:	0801b2b0 	.word	0x0801b2b0
 8000f00:	0801b2c8 	.word	0x0801b2c8
 8000f04:	0801b2e0 	.word	0x0801b2e0
 8000f08:	0801b2f0 	.word	0x0801b2f0
 8000f0c:	0801b308 	.word	0x0801b308
 8000f10:	0801b320 	.word	0x0801b320
 8000f14:	0801b330 	.word	0x0801b330
 8000f18:	0801b348 	.word	0x0801b348
 8000f1c:	0801b360 	.word	0x0801b360
 8000f20:	0801b378 	.word	0x0801b378
 8000f24:	0801b390 	.word	0x0801b390
 8000f28:	2000362c 	.word	0x2000362c
 8000f2c:	0801b39c 	.word	0x0801b39c
 8000f30:	20009a10 	.word	0x20009a10
 8000f34:	0801b3a8 	.word	0x0801b3a8
 8000f38:	0801b3b0 	.word	0x0801b3b0
 8000f3c:	0801b3b8 	.word	0x0801b3b8
 8000f40:	0801b3c0 	.word	0x0801b3c0
 8000f44:	f241 32f6 	movw	r2, #5110	; 0x13f6
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d10c      	bne.n	8000f66 <AppLoop+0x362>
	{
		FondoCompletoAzul();
 8000f4c:	f017 fc40 	bl	80187d0 <FondoCompletoAzul>
       	Encabezamiento3("INGRESE CLAVE SOPORTE");
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <AppLoop+0x390>)
 8000f52:	f017 f8c1 	bl	80180d8 <Encabezamiento3>
		f_TECLADO_ALFA_open(fBOT);
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <AppLoop+0x394>)
 8000f58:	f015 fc7a 	bl	8016850 <f_TECLADO_ALFA_open>
		m_Pantalla++;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <AppLoop+0x398>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <AppLoop+0x398>)
 8000f64:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == HARDWARE_VERIF_PASS)
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <AppLoop+0x398>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000f6e:	d11c      	bne.n	8000faa <AppLoop+0x3a6>
	{
		if(m_TecladoStr[0]=='1' && m_TecladoStr[1]=='2' && m_TecladoStr[2]=='3') m_Pantalla=HARDWARE;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <AppLoop+0x39c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b31      	cmp	r3, #49	; 0x31
 8000f76:	d115      	bne.n	8000fa4 <AppLoop+0x3a0>
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <AppLoop+0x39c>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b32      	cmp	r3, #50	; 0x32
 8000f7e:	d111      	bne.n	8000fa4 <AppLoop+0x3a0>
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <AppLoop+0x39c>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	2b33      	cmp	r3, #51	; 0x33
 8000f86:	d10d      	bne.n	8000fa4 <AppLoop+0x3a0>
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <AppLoop+0x398>)
 8000f8a:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e00b      	b.n	8000faa <AppLoop+0x3a6>
 8000f92:	bf00      	nop
 8000f94:	0801b3c8 	.word	0x0801b3c8
 8000f98:	2000362c 	.word	0x2000362c
 8000f9c:	2000478c 	.word	0x2000478c
 8000fa0:	20009a10 	.word	0x20009a10
		else m_Pantalla=MENU_PRINCIPAL;
 8000fa4:	4bbb      	ldr	r3, [pc, #748]	; (8001294 <AppLoop+0x690>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	601a      	str	r2, [r3, #0]
	}
	if(m_Pantalla == HARDWARE)
 8000faa:	4bba      	ldr	r3, [pc, #744]	; (8001294 <AppLoop+0x690>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d123      	bne.n	8000ffe <AppLoop+0x3fa>
	{
		FondoCompletoAzul();
 8000fb6:	f017 fc0b 	bl	80187d0 <FondoCompletoAzul>
    	Encabezamiento3("CONFIGURACION HARDWARE");
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <AppLoop+0x694>)
 8000fbc:	f017 f88c 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"CONFIGURACION SISTEMA ",HARDWARE_SET_SISTEMA);
 8000fc0:	f241 420a 	movw	r2, #5130	; 0x140a
 8000fc4:	49b5      	ldr	r1, [pc, #724]	; (800129c <AppLoop+0x698>)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f017 fd2a 	bl	8018a20 <MenuSet>
    	MenuSet( 1,"PRESET INVERTER       ",HARDWARE_PRESET_INVERTER);
 8000fcc:	f241 4228 	movw	r2, #5160	; 0x1428
 8000fd0:	49b3      	ldr	r1, [pc, #716]	; (80012a0 <AppLoop+0x69c>)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f017 fd24 	bl	8018a20 <MenuSet>
    	MenuSet( 2,"PRESET MPPT           ",HARDWARE_PRESET_MPPT);
 8000fd8:	f241 4232 	movw	r2, #5170	; 0x1432
 8000fdc:	49b1      	ldr	r1, [pc, #708]	; (80012a4 <AppLoop+0x6a0>)
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f017 fd1e 	bl	8018a20 <MenuSet>
    	MenuSet( 3,"PRESET DAB            ",HARDWARE_PRESET_DAB);
 8000fe4:	f241 423c 	movw	r2, #5180	; 0x143c
 8000fe8:	49af      	ldr	r1, [pc, #700]	; (80012a8 <AppLoop+0x6a4>)
 8000fea:	2003      	movs	r0, #3
 8000fec:	f017 fd18 	bl	8018a20 <MenuSet>
    	MenuPrint();
 8000ff0:	f017 fd74 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 8000ff4:	4ba7      	ldr	r3, [pc, #668]	; (8001294 <AppLoop+0x690>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4aa6      	ldr	r2, [pc, #664]	; (8001294 <AppLoop+0x690>)
 8000ffc:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_SET_SISTEMA)
 8000ffe:	4ba5      	ldr	r3, [pc, #660]	; (8001294 <AppLoop+0x690>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f241 420a 	movw	r2, #5130	; 0x140a
 8001006:	4293      	cmp	r3, r2
 8001008:	d161      	bne.n	80010ce <AppLoop+0x4ca>
   	{
		FondoCompletoAzul();
 800100a:	f017 fbe1 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("CONFIGURACION SISTEMA");
 800100e:	48a7      	ldr	r0, [pc, #668]	; (80012ac <AppLoop+0x6a8>)
 8001010:	f017 f862 	bl	80180d8 <Encabezamiento3>

	   	ILI9341_Draw_String(4,37,WHITE,0x0010,"POTENCIA",2);
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	4ba5      	ldr	r3, [pc, #660]	; (80012b0 <AppLoop+0x6ac>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2310      	movs	r3, #16
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	2125      	movs	r1, #37	; 0x25
 8001024:	2004      	movs	r0, #4
 8001026:	f010 f803 	bl	8011030 <ILI9341_Draw_String>
		BCO(CORREDERA,4,55,0,4,3,"1K 3K 4K 5K");
 800102a:	4ba2      	ldr	r3, [pc, #648]	; (80012b4 <AppLoop+0x6b0>)
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2303      	movs	r3, #3
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2304      	movs	r3, #4
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	2237      	movs	r2, #55	; 0x37
 800103a:	2104      	movs	r1, #4
 800103c:	489e      	ldr	r0, [pc, #632]	; (80012b8 <AppLoop+0x6b4>)
 800103e:	f015 fee3 	bl	8016e08 <BCO>

		ILI9341_Draw_String(200,37,WHITE,0x0010,"ON-GRID",2);
 8001042:	2302      	movs	r3, #2
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <AppLoop+0x6b8>)
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2310      	movs	r3, #16
 800104c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001050:	2125      	movs	r1, #37	; 0x25
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f00f ffec 	bl	8011030 <ILI9341_Draw_String>
		BCO(CORREDERA,200,55,0,2,1,"SI  NO");
 8001058:	4b99      	ldr	r3, [pc, #612]	; (80012c0 <AppLoop+0x6bc>)
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2237      	movs	r2, #55	; 0x37
 8001068:	21c8      	movs	r1, #200	; 0xc8
 800106a:	4893      	ldr	r0, [pc, #588]	; (80012b8 <AppLoop+0x6b4>)
 800106c:	f015 fecc 	bl	8016e08 <BCO>

		CHECK_CIRC(4,160,"GRUPO","ELECTR.",m_GrupoElectr);
 8001070:	4b94      	ldr	r3, [pc, #592]	; (80012c4 <AppLoop+0x6c0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4b94      	ldr	r3, [pc, #592]	; (80012c8 <AppLoop+0x6c4>)
 8001078:	4a94      	ldr	r2, [pc, #592]	; (80012cc <AppLoop+0x6c8>)
 800107a:	21a0      	movs	r1, #160	; 0xa0
 800107c:	2004      	movs	r0, #4
 800107e:	f016 f904 	bl	801728a <CHECK_CIRC>
		CHECK_CIRC(114,160,"GENER.","EOLICO",m_GenEolico);
 8001082:	4b93      	ldr	r3, [pc, #588]	; (80012d0 <AppLoop+0x6cc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <AppLoop+0x6d0>)
 800108a:	4a93      	ldr	r2, [pc, #588]	; (80012d8 <AppLoop+0x6d4>)
 800108c:	21a0      	movs	r1, #160	; 0xa0
 800108e:	2072      	movs	r0, #114	; 0x72
 8001090:	f016 f8fb 	bl	801728a <CHECK_CIRC>
		CHECK_CIRC(224,160,"RESERV.","",0);
 8001094:	2300      	movs	r3, #0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4b90      	ldr	r3, [pc, #576]	; (80012dc <AppLoop+0x6d8>)
 800109a:	4a91      	ldr	r2, [pc, #580]	; (80012e0 <AppLoop+0x6dc>)
 800109c:	21a0      	movs	r1, #160	; 0xa0
 800109e:	20e0      	movs	r0, #224	; 0xe0
 80010a0:	f016 f8f3 	bl	801728a <CHECK_CIRC>

		BOW(3,202,0,11,"OK");
 80010a4:	4b8f      	ldr	r3, [pc, #572]	; (80012e4 <AppLoop+0x6e0>)
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	230b      	movs	r3, #11
 80010aa:	2200      	movs	r2, #0
 80010ac:	21ca      	movs	r1, #202	; 0xca
 80010ae:	2003      	movs	r0, #3
 80010b0:	f016 f974 	bl	801739c <BOW>
		BOW(162,202,0,11,"SALIR");
 80010b4:	4b8c      	ldr	r3, [pc, #560]	; (80012e8 <AppLoop+0x6e4>)
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	230b      	movs	r3, #11
 80010ba:	2200      	movs	r2, #0
 80010bc:	21ca      	movs	r1, #202	; 0xca
 80010be:	20a2      	movs	r0, #162	; 0xa2
 80010c0:	f016 f96c 	bl	801739c <BOW>
		m_Pantalla++;
 80010c4:	4b73      	ldr	r3, [pc, #460]	; (8001294 <AppLoop+0x690>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a72      	ldr	r2, [pc, #456]	; (8001294 <AppLoop+0x690>)
 80010cc:	6013      	str	r3, [r2, #0]
   	}
   	if(m_Pantalla == HARDWARE_PRESET_INVERTER)
 80010ce:	4b71      	ldr	r3, [pc, #452]	; (8001294 <AppLoop+0x690>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f241 4228 	movw	r2, #5160	; 0x1428
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d111      	bne.n	80010fe <AppLoop+0x4fa>
	{
   		FondoCompletoAzul();
 80010da:	f017 fb79 	bl	80187d0 <FondoCompletoAzul>
		Encabezamiento3("PRESET INVERTER");
 80010de:	4883      	ldr	r0, [pc, #524]	; (80012ec <AppLoop+0x6e8>)
 80010e0:	f016 fffa 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"VCA e ICA DE LINEA    ",HARDWARE_PRESET_INVERTER0);
 80010e4:	f241 422a 	movw	r2, #5162	; 0x142a
 80010e8:	4981      	ldr	r1, [pc, #516]	; (80012f0 <AppLoop+0x6ec>)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f017 fc98 	bl	8018a20 <MenuSet>
    	MenuPrint();
 80010f0:	f017 fcf4 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <AppLoop+0x690>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a66      	ldr	r2, [pc, #408]	; (8001294 <AppLoop+0x690>)
 80010fc:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == HARDWARE_PRESET_MPPT)
 80010fe:	4b65      	ldr	r3, [pc, #404]	; (8001294 <AppLoop+0x690>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f241 4232 	movw	r2, #5170	; 0x1432
 8001106:	4293      	cmp	r3, r2
 8001108:	d111      	bne.n	800112e <AppLoop+0x52a>
	{
		FondoCompletoAzul();
 800110a:	f017 fb61 	bl	80187d0 <FondoCompletoAzul>
		Encabezamiento3("PRESET MPPT");
 800110e:	4879      	ldr	r0, [pc, #484]	; (80012f4 <AppLoop+0x6f0>)
 8001110:	f016 ffe2 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"VCC e ICC PANELES     ",HARDWARE_PRESET_MPPT0);
 8001114:	f241 4234 	movw	r2, #5172	; 0x1434
 8001118:	4977      	ldr	r1, [pc, #476]	; (80012f8 <AppLoop+0x6f4>)
 800111a:	2000      	movs	r0, #0
 800111c:	f017 fc80 	bl	8018a20 <MenuSet>
    	MenuPrint();
 8001120:	f017 fcdc 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 8001124:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <AppLoop+0x690>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <AppLoop+0x690>)
 800112c:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == HARDWARE_PRESET_DAB)
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <AppLoop+0x690>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f241 423c 	movw	r2, #5180	; 0x143c
 8001136:	4293      	cmp	r3, r2
 8001138:	d117      	bne.n	800116a <AppLoop+0x566>
	{
		FondoCompletoAzul();
 800113a:	f017 fb49 	bl	80187d0 <FondoCompletoAzul>
		Encabezamiento3("PRESET DAB");
 800113e:	486f      	ldr	r0, [pc, #444]	; (80012fc <AppLoop+0x6f8>)
 8001140:	f016 ffca 	bl	80180d8 <Encabezamiento3>
    	MenuSet( 0,"VCC e ICC DE BATERIA",HARDWARE_PRESET_DAB0);
 8001144:	f241 423e 	movw	r2, #5182	; 0x143e
 8001148:	496d      	ldr	r1, [pc, #436]	; (8001300 <AppLoop+0x6fc>)
 800114a:	2000      	movs	r0, #0
 800114c:	f017 fc68 	bl	8018a20 <MenuSet>
    	MenuSet( 1,"VCC del BUS         ",HARDWARE_PRESET_DAB1);
 8001150:	f44f 52a2 	mov.w	r2, #5184	; 0x1440
 8001154:	496b      	ldr	r1, [pc, #428]	; (8001304 <AppLoop+0x700>)
 8001156:	2001      	movs	r0, #1
 8001158:	f017 fc62 	bl	8018a20 <MenuSet>
    	MenuPrint();
 800115c:	f017 fcbe 	bl	8018adc <MenuPrint>
    	m_Pantalla++;
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <AppLoop+0x690>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <AppLoop+0x690>)
 8001168:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_PRESET_INVERTER0)
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <AppLoop+0x690>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f241 422a 	movw	r2, #5162	; 0x142a
 8001172:	4293      	cmp	r3, r2
 8001174:	f040 80e9 	bne.w	800134a <AppLoop+0x746>
	{
		FondoCompletoAzul();
 8001178:	f017 fb2a 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("INVERTER VCA/ICA RED");
 800117c:	4862      	ldr	r0, [pc, #392]	; (8001308 <AppLoop+0x704>)
 800117e:	f016 ffab 	bl	80180d8 <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001182:	2312      	movs	r3, #18
 8001184:	4a61      	ldr	r2, [pc, #388]	; (800130c <AppLoop+0x708>)
 8001186:	4962      	ldr	r1, [pc, #392]	; (8001310 <AppLoop+0x70c>)
 8001188:	4862      	ldr	r0, [pc, #392]	; (8001314 <AppLoop+0x710>)
 800118a:	f015 f8b9 	bl	8016300 <f_PEL_open>

		i=0;
 800118e:	2300      	movs	r3, #0
 8001190:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(27,35,WHITE, 0x0010,"TENSION RED",2);
 8001192:	2302      	movs	r3, #2
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <AppLoop+0x714>)
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2310      	movs	r3, #16
 800119c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a0:	2123      	movs	r1, #35	; 0x23
 80011a2:	201b      	movs	r0, #27
 80011a4:	f00f ff44 	bl	8011030 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"220V");
 80011a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011aa:	3325      	adds	r3, #37	; 0x25
 80011ac:	4618      	mov	r0, r3
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <AppLoop+0x718>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011bc:	2206      	movs	r2, #6
 80011be:	2137      	movs	r1, #55	; 0x37
 80011c0:	f017 fb16 	bl	80187f0 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 80011c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011c6:	3302      	adds	r3, #2
 80011c8:	4619      	mov	r1, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	2253      	movs	r2, #83	; 0x53
 80011ce:	4854      	ldr	r0, [pc, #336]	; (8001320 <AppLoop+0x71c>)
 80011d0:	f016 f828 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 80011d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011d6:	337f      	adds	r3, #127	; 0x7f
 80011d8:	4619      	mov	r1, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	2253      	movs	r2, #83	; 0x53
 80011de:	4851      	ldr	r0, [pc, #324]	; (8001324 <AppLoop+0x720>)
 80011e0:	f016 f820 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 80011e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e6:	3323      	adds	r3, #35	; 0x23
 80011e8:	4619      	mov	r1, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2300      	movs	r3, #0
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	225f      	movs	r2, #95	; 0x5f
 80011f6:	4847      	ldr	r0, [pc, #284]	; (8001314 <AppLoop+0x710>)
 80011f8:	f015 f8ca 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 80011fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011fe:	3333      	adds	r3, #51	; 0x33
 8001200:	4618      	mov	r0, r3
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <AppLoop+0x6e0>)
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2304      	movs	r3, #4
 8001208:	2200      	movs	r2, #0
 800120a:	21ca      	movs	r1, #202	; 0xca
 800120c:	f016 f8c6 	bl	801739c <BOW>

		i=160;
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(178,35,WHITE, 0x0010,"CORRIENTE RED",2);
 8001214:	2302      	movs	r3, #2
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <AppLoop+0x724>)
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2310      	movs	r3, #16
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	2123      	movs	r1, #35	; 0x23
 8001224:	20b2      	movs	r0, #178	; 0xb2
 8001226:	f00f ff03 	bl	8011030 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.4A");
 800122a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800122c:	3325      	adds	r3, #37	; 0x25
 800122e:	4618      	mov	r0, r3
 8001230:	4b3e      	ldr	r3, [pc, #248]	; (800132c <AppLoop+0x728>)
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	2206      	movs	r2, #6
 8001240:	2137      	movs	r1, #55	; 0x37
 8001242:	f017 fad5 	bl	80187f0 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 8001246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001248:	3302      	adds	r3, #2
 800124a:	4619      	mov	r1, r3
 800124c:	2300      	movs	r3, #0
 800124e:	2253      	movs	r2, #83	; 0x53
 8001250:	4833      	ldr	r0, [pc, #204]	; (8001320 <AppLoop+0x71c>)
 8001252:	f015 ffe7 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 8001256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001258:	337f      	adds	r3, #127	; 0x7f
 800125a:	4619      	mov	r1, r3
 800125c:	2300      	movs	r3, #0
 800125e:	2253      	movs	r2, #83	; 0x53
 8001260:	4830      	ldr	r0, [pc, #192]	; (8001324 <AppLoop+0x720>)
 8001262:	f015 ffdf 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 8001266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001268:	3323      	adds	r3, #35	; 0x23
 800126a:	4619      	mov	r1, r3
 800126c:	2300      	movs	r3, #0
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	225f      	movs	r2, #95	; 0x5f
 8001278:	4826      	ldr	r0, [pc, #152]	; (8001314 <AppLoop+0x710>)
 800127a:	f015 f889 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 800127e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001280:	3333      	adds	r3, #51	; 0x33
 8001282:	4618      	mov	r0, r3
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <AppLoop+0x6e0>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2304      	movs	r3, #4
 800128a:	2200      	movs	r2, #0
 800128c:	21ca      	movs	r1, #202	; 0xca
 800128e:	f016 f885 	bl	801739c <BOW>
 8001292:	e04d      	b.n	8001330 <AppLoop+0x72c>
 8001294:	2000478c 	.word	0x2000478c
 8001298:	0801b3e0 	.word	0x0801b3e0
 800129c:	0801b3f8 	.word	0x0801b3f8
 80012a0:	0801b410 	.word	0x0801b410
 80012a4:	0801b428 	.word	0x0801b428
 80012a8:	0801b440 	.word	0x0801b440
 80012ac:	0801b458 	.word	0x0801b458
 80012b0:	0801b470 	.word	0x0801b470
 80012b4:	0801b47c 	.word	0x0801b47c
 80012b8:	0801c74c 	.word	0x0801c74c
 80012bc:	0801b488 	.word	0x0801b488
 80012c0:	0801b490 	.word	0x0801b490
 80012c4:	2000484d 	.word	0x2000484d
 80012c8:	0801b498 	.word	0x0801b498
 80012cc:	0801b4a0 	.word	0x0801b4a0
 80012d0:	2000484c 	.word	0x2000484c
 80012d4:	0801b4a8 	.word	0x0801b4a8
 80012d8:	0801b4b0 	.word	0x0801b4b0
 80012dc:	0801b4b8 	.word	0x0801b4b8
 80012e0:	0801b4bc 	.word	0x0801b4bc
 80012e4:	0801b4c4 	.word	0x0801b4c4
 80012e8:	0801b4c8 	.word	0x0801b4c8
 80012ec:	0801b4d0 	.word	0x0801b4d0
 80012f0:	0801b4e0 	.word	0x0801b4e0
 80012f4:	0801b4f8 	.word	0x0801b4f8
 80012f8:	0801b504 	.word	0x0801b504
 80012fc:	0801b51c 	.word	0x0801b51c
 8001300:	0801b528 	.word	0x0801b528
 8001304:	0801b540 	.word	0x0801b540
 8001308:	0801b558 	.word	0x0801b558
 800130c:	0801b570 	.word	0x0801b570
 8001310:	0801b578 	.word	0x0801b578
 8001314:	2000020c 	.word	0x2000020c
 8001318:	0801b584 	.word	0x0801b584
 800131c:	0801b590 	.word	0x0801b590
 8001320:	0801caa8 	.word	0x0801caa8
 8001324:	0801cd84 	.word	0x0801cd84
 8001328:	0801b598 	.word	0x0801b598
 800132c:	0801b5a8 	.word	0x0801b5a8

		BOW(117,202,0,6,"SALIR");
 8001330:	4bc0      	ldr	r3, [pc, #768]	; (8001634 <AppLoop+0xa30>)
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2306      	movs	r3, #6
 8001336:	2200      	movs	r2, #0
 8001338:	21ca      	movs	r1, #202	; 0xca
 800133a:	2075      	movs	r0, #117	; 0x75
 800133c:	f016 f82e 	bl	801739c <BOW>
		m_Pantalla++;
 8001340:	4bbd      	ldr	r3, [pc, #756]	; (8001638 <AppLoop+0xa34>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4abc      	ldr	r2, [pc, #752]	; (8001638 <AppLoop+0xa34>)
 8001348:	6013      	str	r3, [r2, #0]
	}
   	if(m_Pantalla == HARDWARE_PRESET_MPPT0)
 800134a:	4bbb      	ldr	r3, [pc, #748]	; (8001638 <AppLoop+0xa34>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f241 4234 	movw	r2, #5172	; 0x1434
 8001352:	4293      	cmp	r3, r2
 8001354:	f040 809a 	bne.w	800148c <AppLoop+0x888>
	{
		FondoCompletoAzul();
 8001358:	f017 fa3a 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("MPPT VCC-ICC PANELES");
 800135c:	48b7      	ldr	r0, [pc, #732]	; (800163c <AppLoop+0xa38>)
 800135e:	f016 febb 	bl	80180d8 <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001362:	2312      	movs	r3, #18
 8001364:	4ab6      	ldr	r2, [pc, #728]	; (8001640 <AppLoop+0xa3c>)
 8001366:	49b7      	ldr	r1, [pc, #732]	; (8001644 <AppLoop+0xa40>)
 8001368:	48b7      	ldr	r0, [pc, #732]	; (8001648 <AppLoop+0xa44>)
 800136a:	f014 ffc9 	bl	8016300 <f_PEL_open>

		i=0;
 800136e:	2300      	movs	r3, #0
 8001370:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(27,35,WHITE, 0x0010,"TENSION PANEL",2);
 8001372:	2302      	movs	r3, #2
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	4bb5      	ldr	r3, [pc, #724]	; (800164c <AppLoop+0xa48>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2310      	movs	r3, #16
 800137c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001380:	2123      	movs	r1, #35	; 0x23
 8001382:	201b      	movs	r0, #27
 8001384:	f00f fe54 	bl	8011030 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"168V");
 8001388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800138a:	3325      	adds	r3, #37	; 0x25
 800138c:	4618      	mov	r0, r3
 800138e:	4bb0      	ldr	r3, [pc, #704]	; (8001650 <AppLoop+0xa4c>)
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139c:	2206      	movs	r2, #6
 800139e:	2137      	movs	r1, #55	; 0x37
 80013a0:	f017 fa26 	bl	80187f0 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 80013a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013a6:	3302      	adds	r3, #2
 80013a8:	4619      	mov	r1, r3
 80013aa:	2300      	movs	r3, #0
 80013ac:	2253      	movs	r2, #83	; 0x53
 80013ae:	48a9      	ldr	r0, [pc, #676]	; (8001654 <AppLoop+0xa50>)
 80013b0:	f015 ff38 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 80013b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b6:	337f      	adds	r3, #127	; 0x7f
 80013b8:	4619      	mov	r1, r3
 80013ba:	2300      	movs	r3, #0
 80013bc:	2253      	movs	r2, #83	; 0x53
 80013be:	48a6      	ldr	r0, [pc, #664]	; (8001658 <AppLoop+0xa54>)
 80013c0:	f015 ff30 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 80013c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c6:	3323      	adds	r3, #35	; 0x23
 80013c8:	4619      	mov	r1, r3
 80013ca:	2300      	movs	r3, #0
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	225f      	movs	r2, #95	; 0x5f
 80013d6:	489c      	ldr	r0, [pc, #624]	; (8001648 <AppLoop+0xa44>)
 80013d8:	f014 ffda 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 80013dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013de:	3333      	adds	r3, #51	; 0x33
 80013e0:	4618      	mov	r0, r3
 80013e2:	4b9e      	ldr	r3, [pc, #632]	; (800165c <AppLoop+0xa58>)
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2304      	movs	r3, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	21ca      	movs	r1, #202	; 0xca
 80013ec:	f015 ffd6 	bl	801739c <BOW>

		i=160;
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(178,35,WHITE, 0x0010,"CORRIENTE PANEL",2);
 80013f4:	2302      	movs	r3, #2
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <AppLoop+0xa5c>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2310      	movs	r3, #16
 80013fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001402:	2123      	movs	r1, #35	; 0x23
 8001404:	20b2      	movs	r0, #178	; 0xb2
 8001406:	f00f fe13 	bl	8011030 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"35.5A");
 800140a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800140c:	3325      	adds	r3, #37	; 0x25
 800140e:	4618      	mov	r0, r3
 8001410:	4b94      	ldr	r3, [pc, #592]	; (8001664 <AppLoop+0xa60>)
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	2206      	movs	r2, #6
 8001420:	2137      	movs	r1, #55	; 0x37
 8001422:	f017 f9e5 	bl	80187f0 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 8001426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001428:	3302      	adds	r3, #2
 800142a:	4619      	mov	r1, r3
 800142c:	2300      	movs	r3, #0
 800142e:	2253      	movs	r2, #83	; 0x53
 8001430:	4888      	ldr	r0, [pc, #544]	; (8001654 <AppLoop+0xa50>)
 8001432:	f015 fef7 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 8001436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001438:	337f      	adds	r3, #127	; 0x7f
 800143a:	4619      	mov	r1, r3
 800143c:	2300      	movs	r3, #0
 800143e:	2253      	movs	r2, #83	; 0x53
 8001440:	4885      	ldr	r0, [pc, #532]	; (8001658 <AppLoop+0xa54>)
 8001442:	f015 feef 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 8001446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001448:	3323      	adds	r3, #35	; 0x23
 800144a:	4619      	mov	r1, r3
 800144c:	2300      	movs	r3, #0
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	225f      	movs	r2, #95	; 0x5f
 8001458:	487b      	ldr	r0, [pc, #492]	; (8001648 <AppLoop+0xa44>)
 800145a:	f014 ff99 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 800145e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001460:	3333      	adds	r3, #51	; 0x33
 8001462:	4618      	mov	r0, r3
 8001464:	4b7d      	ldr	r3, [pc, #500]	; (800165c <AppLoop+0xa58>)
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2304      	movs	r3, #4
 800146a:	2200      	movs	r2, #0
 800146c:	21ca      	movs	r1, #202	; 0xca
 800146e:	f015 ff95 	bl	801739c <BOW>

		BOW(117,202,0,6,"SALIR");
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <AppLoop+0xa30>)
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2306      	movs	r3, #6
 8001478:	2200      	movs	r2, #0
 800147a:	21ca      	movs	r1, #202	; 0xca
 800147c:	2075      	movs	r0, #117	; 0x75
 800147e:	f015 ff8d 	bl	801739c <BOW>
   		m_Pantalla++;
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <AppLoop+0xa34>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a6b      	ldr	r2, [pc, #428]	; (8001638 <AppLoop+0xa34>)
 800148a:	6013      	str	r3, [r2, #0]
   	}
   	if(m_Pantalla == HARDWARE_PRESET_DAB0)
 800148c:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <AppLoop+0xa34>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f241 423e 	movw	r2, #5182	; 0x143e
 8001494:	4293      	cmp	r3, r2
 8001496:	f040 809a 	bne.w	80015ce <AppLoop+0x9ca>
	{
		FondoCompletoAzul();
 800149a:	f017 f999 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("VCC-ICC BATERIAS");
 800149e:	4872      	ldr	r0, [pc, #456]	; (8001668 <AppLoop+0xa64>)
 80014a0:	f016 fe1a 	bl	80180d8 <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 80014a4:	2312      	movs	r3, #18
 80014a6:	4a66      	ldr	r2, [pc, #408]	; (8001640 <AppLoop+0xa3c>)
 80014a8:	4966      	ldr	r1, [pc, #408]	; (8001644 <AppLoop+0xa40>)
 80014aa:	4867      	ldr	r0, [pc, #412]	; (8001648 <AppLoop+0xa44>)
 80014ac:	f014 ff28 	bl	8016300 <f_PEL_open>

		i=0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(17,35,WHITE, 0x0010,"TENSION BATERIA",2);
 80014b4:	2302      	movs	r3, #2
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	4b6c      	ldr	r3, [pc, #432]	; (800166c <AppLoop+0xa68>)
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2310      	movs	r3, #16
 80014be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c2:	2123      	movs	r1, #35	; 0x23
 80014c4:	2011      	movs	r0, #17
 80014c6:	f00f fdb3 	bl	8011030 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"53.4V");
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014cc:	3325      	adds	r3, #37	; 0x25
 80014ce:	4618      	mov	r0, r3
 80014d0:	4b67      	ldr	r3, [pc, #412]	; (8001670 <AppLoop+0xa6c>)
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014de:	2206      	movs	r2, #6
 80014e0:	2137      	movs	r1, #55	; 0x37
 80014e2:	f017 f985 	bl	80187f0 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 80014e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e8:	3302      	adds	r3, #2
 80014ea:	4619      	mov	r1, r3
 80014ec:	2300      	movs	r3, #0
 80014ee:	2253      	movs	r2, #83	; 0x53
 80014f0:	4858      	ldr	r0, [pc, #352]	; (8001654 <AppLoop+0xa50>)
 80014f2:	f015 fe97 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 80014f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f8:	337f      	adds	r3, #127	; 0x7f
 80014fa:	4619      	mov	r1, r3
 80014fc:	2300      	movs	r3, #0
 80014fe:	2253      	movs	r2, #83	; 0x53
 8001500:	4855      	ldr	r0, [pc, #340]	; (8001658 <AppLoop+0xa54>)
 8001502:	f015 fe8f 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 8001506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001508:	3323      	adds	r3, #35	; 0x23
 800150a:	4619      	mov	r1, r3
 800150c:	2300      	movs	r3, #0
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	225f      	movs	r2, #95	; 0x5f
 8001518:	484b      	ldr	r0, [pc, #300]	; (8001648 <AppLoop+0xa44>)
 800151a:	f014 ff39 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 800151e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001520:	3333      	adds	r3, #51	; 0x33
 8001522:	4618      	mov	r0, r3
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <AppLoop+0xa58>)
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2304      	movs	r3, #4
 800152a:	2200      	movs	r2, #0
 800152c:	21ca      	movs	r1, #202	; 0xca
 800152e:	f015 ff35 	bl	801739c <BOW>

		i=160;
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(168,35,WHITE, 0x0010,"CORRIENTE BATERIAS",2);
 8001536:	2302      	movs	r3, #2
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <AppLoop+0xa70>)
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2310      	movs	r3, #16
 8001540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001544:	2123      	movs	r1, #35	; 0x23
 8001546:	20a8      	movs	r0, #168	; 0xa8
 8001548:	f00f fd72 	bl	8011030 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.1A");
 800154c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800154e:	3325      	adds	r3, #37	; 0x25
 8001550:	4618      	mov	r0, r3
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <AppLoop+0xa74>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001560:	2206      	movs	r2, #6
 8001562:	2137      	movs	r1, #55	; 0x37
 8001564:	f017 f944 	bl	80187f0 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 8001568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800156a:	3302      	adds	r3, #2
 800156c:	4619      	mov	r1, r3
 800156e:	2300      	movs	r3, #0
 8001570:	2253      	movs	r2, #83	; 0x53
 8001572:	4838      	ldr	r0, [pc, #224]	; (8001654 <AppLoop+0xa50>)
 8001574:	f015 fe56 	bl	8017224 <BOT>
   		BOT(BOT_ADER,127+i,83,0);
 8001578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800157a:	337f      	adds	r3, #127	; 0x7f
 800157c:	4619      	mov	r1, r3
 800157e:	2300      	movs	r3, #0
 8001580:	2253      	movs	r2, #83	; 0x53
 8001582:	4835      	ldr	r0, [pc, #212]	; (8001658 <AppLoop+0xa54>)
 8001584:	f015 fe4e 	bl	8017224 <BOT>
   		f_PEL(fPEL1,35+i,95,0,0,0);
 8001588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800158a:	3323      	adds	r3, #35	; 0x23
 800158c:	4619      	mov	r1, r3
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	225f      	movs	r2, #95	; 0x5f
 800159a:	482b      	ldr	r0, [pc, #172]	; (8001648 <AppLoop+0xa44>)
 800159c:	f014 fef8 	bl	8016390 <f_PEL>
   		BOW(51+i,202,0,4,"OK");
 80015a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a2:	3333      	adds	r3, #51	; 0x33
 80015a4:	4618      	mov	r0, r3
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <AppLoop+0xa58>)
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2304      	movs	r3, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	21ca      	movs	r1, #202	; 0xca
 80015b0:	f015 fef4 	bl	801739c <BOW>

   		BOW(117,202,0,6,"SALIR");
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <AppLoop+0xa30>)
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2306      	movs	r3, #6
 80015ba:	2200      	movs	r2, #0
 80015bc:	21ca      	movs	r1, #202	; 0xca
 80015be:	2075      	movs	r0, #117	; 0x75
 80015c0:	f015 feec 	bl	801739c <BOW>
   	   	m_Pantalla++;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <AppLoop+0xa34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <AppLoop+0xa34>)
 80015cc:	6013      	str	r3, [r2, #0]
   	}

   	if(m_Pantalla == HARDWARE_PRESET_DAB1)
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <AppLoop+0xa34>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f5b3 5fa2 	cmp.w	r3, #5184	; 0x1440
 80015d6:	f040 80c4 	bne.w	8001762 <AppLoop+0xb5e>
	{
		FondoCompletoAzul();
 80015da:	f017 f8f9 	bl	80187d0 <FondoCompletoAzul>
	   	Encabezamiento3("VCC-ICC BUS");
 80015de:	4827      	ldr	r0, [pc, #156]	; (800167c <AppLoop+0xa78>)
 80015e0:	f016 fd7a 	bl	80180d8 <Encabezamiento3>
		f_PEL_open(fPEL1,"INVERTER","POT_CUR",18);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 80015e4:	2312      	movs	r3, #18
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <AppLoop+0xa3c>)
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <AppLoop+0xa40>)
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <AppLoop+0xa44>)
 80015ec:	f014 fe88 	bl	8016300 <f_PEL_open>

		i=0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
	   	ILI9341_Draw_String(33,35,WHITE, 0x0010,"TENSION BUS",2);
 80015f4:	2302      	movs	r3, #2
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <AppLoop+0xa7c>)
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2310      	movs	r3, #16
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	2123      	movs	r1, #35	; 0x23
 8001604:	2021      	movs	r0, #33	; 0x21
 8001606:	f00f fd13 	bl	8011030 <ILI9341_Draw_String>
	   	DPMChico(37+i,55,6,WHITE,RED,"53.4V");
 800160a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800160c:	3325      	adds	r3, #37	; 0x25
 800160e:	4618      	mov	r0, r3
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <AppLoop+0xa6c>)
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161e:	2206      	movs	r2, #6
 8001620:	2137      	movs	r1, #55	; 0x37
 8001622:	f017 f8e5 	bl	80187f0 <DPMChico>
		BOT(BOT_AIZQ,2+i,83,0),
 8001626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001628:	3302      	adds	r3, #2
 800162a:	4619      	mov	r1, r3
 800162c:	2300      	movs	r3, #0
 800162e:	2253      	movs	r2, #83	; 0x53
 8001630:	e028      	b.n	8001684 <AppLoop+0xa80>
 8001632:	bf00      	nop
 8001634:	0801b4c8 	.word	0x0801b4c8
 8001638:	2000478c 	.word	0x2000478c
 800163c:	0801b5b0 	.word	0x0801b5b0
 8001640:	0801b570 	.word	0x0801b570
 8001644:	0801b578 	.word	0x0801b578
 8001648:	2000020c 	.word	0x2000020c
 800164c:	0801b5c8 	.word	0x0801b5c8
 8001650:	0801b5d8 	.word	0x0801b5d8
 8001654:	0801caa8 	.word	0x0801caa8
 8001658:	0801cd84 	.word	0x0801cd84
 800165c:	0801b4c4 	.word	0x0801b4c4
 8001660:	0801b5e0 	.word	0x0801b5e0
 8001664:	0801b5f0 	.word	0x0801b5f0
 8001668:	0801b5f8 	.word	0x0801b5f8
 800166c:	0801b60c 	.word	0x0801b60c
 8001670:	0801b61c 	.word	0x0801b61c
 8001674:	0801b624 	.word	0x0801b624
 8001678:	0801b638 	.word	0x0801b638
 800167c:	0801b640 	.word	0x0801b640
 8001680:	0801b64c 	.word	0x0801b64c
 8001684:	48aa      	ldr	r0, [pc, #680]	; (8001930 <AppLoop+0xd2c>)
 8001686:	f015 fdcd 	bl	8017224 <BOT>
		BOT(BOT_ADER,127+i,83,0);
 800168a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800168c:	337f      	adds	r3, #127	; 0x7f
 800168e:	4619      	mov	r1, r3
 8001690:	2300      	movs	r3, #0
 8001692:	2253      	movs	r2, #83	; 0x53
 8001694:	48a7      	ldr	r0, [pc, #668]	; (8001934 <AppLoop+0xd30>)
 8001696:	f015 fdc5 	bl	8017224 <BOT>
		f_PEL(fPEL1,35+i,95,0,0,0);
 800169a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800169c:	3323      	adds	r3, #35	; 0x23
 800169e:	4619      	mov	r1, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2300      	movs	r3, #0
 80016aa:	225f      	movs	r2, #95	; 0x5f
 80016ac:	48a2      	ldr	r0, [pc, #648]	; (8001938 <AppLoop+0xd34>)
 80016ae:	f014 fe6f 	bl	8016390 <f_PEL>
		BOW(51+i,202,0,4,"OK");
 80016b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016b4:	3333      	adds	r3, #51	; 0x33
 80016b6:	4618      	mov	r0, r3
 80016b8:	4ba0      	ldr	r3, [pc, #640]	; (800193c <AppLoop+0xd38>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2304      	movs	r3, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	21ca      	movs	r1, #202	; 0xca
 80016c2:	f015 fe6b 	bl	801739c <BOW>

		i=160;
 80016c6:	23a0      	movs	r3, #160	; 0xa0
 80016c8:	667b      	str	r3, [r7, #100]	; 0x64
		ILI9341_Draw_String(187,35,WHITE, 0x0010,"CORRIENTE BUS",2);
 80016ca:	2302      	movs	r3, #2
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	4b9c      	ldr	r3, [pc, #624]	; (8001940 <AppLoop+0xd3c>)
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2310      	movs	r3, #16
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	2123      	movs	r1, #35	; 0x23
 80016da:	20bb      	movs	r0, #187	; 0xbb
 80016dc:	f00f fca8 	bl	8011030 <ILI9341_Draw_String>
		DPMChico(37+i,55,6,WHITE,RED,"12.1A");
 80016e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e2:	3325      	adds	r3, #37	; 0x25
 80016e4:	4618      	mov	r0, r3
 80016e6:	4b97      	ldr	r3, [pc, #604]	; (8001944 <AppLoop+0xd40>)
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	2206      	movs	r2, #6
 80016f6:	2137      	movs	r1, #55	; 0x37
 80016f8:	f017 f87a 	bl	80187f0 <DPMChico>

		BOT(BOT_AIZQ,2+i,83,0),
 80016fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016fe:	3302      	adds	r3, #2
 8001700:	4619      	mov	r1, r3
 8001702:	2300      	movs	r3, #0
 8001704:	2253      	movs	r2, #83	; 0x53
 8001706:	488a      	ldr	r0, [pc, #552]	; (8001930 <AppLoop+0xd2c>)
 8001708:	f015 fd8c 	bl	8017224 <BOT>
   		BOT(BOT_ADER,127+i,83,0);
 800170c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800170e:	337f      	adds	r3, #127	; 0x7f
 8001710:	4619      	mov	r1, r3
 8001712:	2300      	movs	r3, #0
 8001714:	2253      	movs	r2, #83	; 0x53
 8001716:	4887      	ldr	r0, [pc, #540]	; (8001934 <AppLoop+0xd30>)
 8001718:	f015 fd84 	bl	8017224 <BOT>
   		f_PEL(fPEL1,35+i,95,0,0,0);
 800171c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800171e:	3323      	adds	r3, #35	; 0x23
 8001720:	4619      	mov	r1, r3
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	225f      	movs	r2, #95	; 0x5f
 800172e:	4882      	ldr	r0, [pc, #520]	; (8001938 <AppLoop+0xd34>)
 8001730:	f014 fe2e 	bl	8016390 <f_PEL>
   		BOW(51+i,202,0,4,"OK");
 8001734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001736:	3333      	adds	r3, #51	; 0x33
 8001738:	4618      	mov	r0, r3
 800173a:	4b80      	ldr	r3, [pc, #512]	; (800193c <AppLoop+0xd38>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2304      	movs	r3, #4
 8001740:	2200      	movs	r2, #0
 8001742:	21ca      	movs	r1, #202	; 0xca
 8001744:	f015 fe2a 	bl	801739c <BOW>

   		BOW(117,202,0,6,"SALIR");
 8001748:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <AppLoop+0xd44>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2306      	movs	r3, #6
 800174e:	2200      	movs	r2, #0
 8001750:	21ca      	movs	r1, #202	; 0xca
 8001752:	2075      	movs	r0, #117	; 0x75
 8001754:	f015 fe22 	bl	801739c <BOW>
   	   	m_Pantalla++;
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <AppLoop+0xd48>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a7b      	ldr	r2, [pc, #492]	; (800194c <AppLoop+0xd48>)
 8001760:	6013      	str	r3, [r2, #0]

	///////////////////////////////////////////////////////////
	// VISORES
	///////////////////////////////////////////////////////////

	if(m_Pantalla == VISOR)//Pantalla PAR inicializa los fondos y variables, pasa la primera vez y luego va a la pantalla impar
 8001762:	4b7a      	ldr	r3, [pc, #488]	; (800194c <AppLoop+0xd48>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800176a:	d126      	bne.n	80017ba <AppLoop+0xbb6>
	{
		m_IndicePel=1;
 800176c:	4b78      	ldr	r3, [pc, #480]	; (8001950 <AppLoop+0xd4c>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
		FondoCompletoAzul();
 8001772:	f017 f82d 	bl	80187d0 <FondoCompletoAzul>
		f_BMP("INVERTER/PIC/PIC VISOR1.bmp",0,0);//Dibujo fondo de pantalla
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	4876      	ldr	r0, [pc, #472]	; (8001954 <AppLoop+0xd50>)
 800177c:	f016 fa12 	bl	8017ba4 <f_BMP>
		f_PEL_open(fPEL1,"INVERTER","EOLICO",12);//Cargo película EÓLICO desde SD y declaro que tiene 12 fotogramas
 8001780:	230c      	movs	r3, #12
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <AppLoop+0xd54>)
 8001784:	4975      	ldr	r1, [pc, #468]	; (800195c <AppLoop+0xd58>)
 8001786:	486c      	ldr	r0, [pc, #432]	; (8001938 <AppLoop+0xd34>)
 8001788:	f014 fdba 	bl	8016300 <f_PEL_open>
		f_PEL(fPEL1,204,0,96,33,0);//Dibujo fondo del eólico en la posición 204,0
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2321      	movs	r3, #33	; 0x21
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2360      	movs	r3, #96	; 0x60
 8001796:	2200      	movs	r2, #0
 8001798:	21cc      	movs	r1, #204	; 0xcc
 800179a:	4867      	ldr	r0, [pc, #412]	; (8001938 <AppLoop+0xd34>)
 800179c:	f014 fdf8 	bl	8016390 <f_PEL>
		BOW(118,03,0,6,SALIR);
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <AppLoop+0xd5c>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2306      	movs	r3, #6
 80017a6:	2200      	movs	r2, #0
 80017a8:	2103      	movs	r1, #3
 80017aa:	2076      	movs	r0, #118	; 0x76
 80017ac:	f015 fdf6 	bl	801739c <BOW>
		m_Pantalla++;
 80017b0:	4b66      	ldr	r3, [pc, #408]	; (800194c <AppLoop+0xd48>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a65      	ldr	r2, [pc, #404]	; (800194c <AppLoop+0xd48>)
 80017b8:	6013      	str	r3, [r2, #0]
	}

	if(m_Pantalla == VISOR+1)//Pantallas IMPAR solo actualiza
 80017ba:	4b64      	ldr	r3, [pc, #400]	; (800194c <AppLoop+0xd48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f240 72d1 	movw	r2, #2001	; 0x7d1
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d174      	bne.n	80018b0 <AppLoop+0xcac>
	{
		m_IndicePel++;
 80017c6:	4b62      	ldr	r3, [pc, #392]	; (8001950 <AppLoop+0xd4c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a60      	ldr	r2, [pc, #384]	; (8001950 <AppLoop+0xd4c>)
 80017ce:	6013      	str	r3, [r2, #0]
		if(m_IndicePel>12) m_IndicePel=1;
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <AppLoop+0xd4c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	d902      	bls.n	80017de <AppLoop+0xbda>
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <AppLoop+0xd4c>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
		f_PEL(fPEL1,204,0,0,0,m_IndicePel);
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <AppLoop+0xd4c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2300      	movs	r3, #0
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	2200      	movs	r2, #0
 80017ee:	21cc      	movs	r1, #204	; 0xcc
 80017f0:	4851      	ldr	r0, [pc, #324]	; (8001938 <AppLoop+0xd34>)
 80017f2:	f014 fdcd 	bl	8016390 <f_PEL>

		m_IndiceGel++;
 80017f6:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <AppLoop+0xd60>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a59      	ldr	r2, [pc, #356]	; (8001964 <AppLoop+0xd60>)
 80017fe:	6013      	str	r3, [r2, #0]
		if(m_IndiceGel==10) f_BMP("INVERTER/PIC/PIC GEL_PREN.bmp",230,188);
 8001800:	4b58      	ldr	r3, [pc, #352]	; (8001964 <AppLoop+0xd60>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b0a      	cmp	r3, #10
 8001806:	d104      	bne.n	8001812 <AppLoop+0xc0e>
 8001808:	22bc      	movs	r2, #188	; 0xbc
 800180a:	21e6      	movs	r1, #230	; 0xe6
 800180c:	4856      	ldr	r0, [pc, #344]	; (8001968 <AppLoop+0xd64>)
 800180e:	f016 f9c9 	bl	8017ba4 <f_BMP>
		if(m_IndiceGel==20) f_BMP("INVERTER/PIC/PIC GEL_APAG.bmp",230,188),m_IndiceGel=0;
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <AppLoop+0xd60>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b14      	cmp	r3, #20
 8001818:	d107      	bne.n	800182a <AppLoop+0xc26>
 800181a:	22bc      	movs	r2, #188	; 0xbc
 800181c:	21e6      	movs	r1, #230	; 0xe6
 800181e:	4853      	ldr	r0, [pc, #332]	; (800196c <AppLoop+0xd68>)
 8001820:	f016 f9c0 	bl	8017ba4 <f_BMP>
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <AppLoop+0xd60>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

		m_IndiceSol++;
 800182a:	4b51      	ldr	r3, [pc, #324]	; (8001970 <AppLoop+0xd6c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <AppLoop+0xd6c>)
 8001832:	6013      	str	r3, [r2, #0]
		if(m_IndiceSol==100) f_BMP("INVERTER/PIC/PIC SOL_PREN.bmp",57,0);
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <AppLoop+0xd6c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d104      	bne.n	8001846 <AppLoop+0xc42>
 800183c:	2200      	movs	r2, #0
 800183e:	2139      	movs	r1, #57	; 0x39
 8001840:	484c      	ldr	r0, [pc, #304]	; (8001974 <AppLoop+0xd70>)
 8001842:	f016 f9af 	bl	8017ba4 <f_BMP>
		if(m_IndiceSol==200) f_BMP("INVERTER/PIC/PIC SOL_APAG.bmp",57,0),m_IndiceSol=0;
 8001846:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <AppLoop+0xd6c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2bc8      	cmp	r3, #200	; 0xc8
 800184c:	d107      	bne.n	800185e <AppLoop+0xc5a>
 800184e:	2200      	movs	r2, #0
 8001850:	2139      	movs	r1, #57	; 0x39
 8001852:	4849      	ldr	r0, [pc, #292]	; (8001978 <AppLoop+0xd74>)
 8001854:	f016 f9a6 	bl	8017ba4 <f_BMP>
 8001858:	4b45      	ldr	r3, [pc, #276]	; (8001970 <AppLoop+0xd6c>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

		m_IndiceBat++;
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <AppLoop+0xd78>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <AppLoop+0xd78>)
 8001866:	6013      	str	r3, [r2, #0]
		if(m_IndiceBat==34) m_IndiceBat=0;
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <AppLoop+0xd78>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b22      	cmp	r3, #34	; 0x22
 800186e:	d102      	bne.n	8001876 <AppLoop+0xc72>
 8001870:	4b42      	ldr	r3, [pc, #264]	; (800197c <AppLoop+0xd78>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
		FillReg(23,200,55,34-m_IndiceBat,0x0000);
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <AppLoop+0xd78>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f1c3 0322 	rsb	r3, r3, #34	; 0x22
 800187e:	461a      	mov	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	2237      	movs	r2, #55	; 0x37
 8001888:	21c8      	movs	r1, #200	; 0xc8
 800188a:	2017      	movs	r0, #23
 800188c:	f016 fb4c 	bl	8017f28 <FillReg>
		FillReg(23,235-m_IndiceBat,55,m_IndiceBat,0xffff);
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <AppLoop+0xd78>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1c3 03eb 	rsb	r3, r3, #235	; 0xeb
 8001898:	4619      	mov	r1, r3
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <AppLoop+0xd78>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	2237      	movs	r2, #55	; 0x37
 80018aa:	2017      	movs	r0, #23
 80018ac:	f016 fb3c 	bl	8017f28 <FillReg>

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO DAB
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_DAB)
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <AppLoop+0xd48>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f640 0234 	movw	r2, #2100	; 0x834
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d11b      	bne.n	80018f4 <AppLoop+0xcf0>
	{
		m_BTO=0;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <AppLoop+0xd7c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 80018c2:	f016 ff85 	bl	80187d0 <FondoCompletoAzul>

		OSCCanal1=&OSCCanal[0];
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <AppLoop+0xd80>)
 80018c8:	4a2f      	ldr	r2, [pc, #188]	; (8001988 <AppLoop+0xd84>)
 80018ca:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <AppLoop+0xd88>)
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <AppLoop+0xd8c>)
 80018d0:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <AppLoop+0xd90>)
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <AppLoop+0xd94>)
 80018d6:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <AppLoop+0xd98>)
 80018da:	4a31      	ldr	r2, [pc, #196]	; (80019a0 <AppLoop+0xd9c>)
 80018dc:	601a      	str	r2, [r3, #0]

		SetBT();
 80018de:	f000 fa81 	bl	8001de4 <SetBT>
	    TomarCanales();
 80018e2:	f000 f93d 	bl	8001b60 <TomarCanales>
	    GraficarOSC();
 80018e6:	f016 fc25 	bl	8018134 <GraficarOSC>
	    m_Pantalla++;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <AppLoop+0xd48>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4a16      	ldr	r2, [pc, #88]	; (800194c <AppLoop+0xd48>)
 80018f2:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == DES_DAB+1)
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <AppLoop+0xd48>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f640 0235 	movw	r2, #2101	; 0x835
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d166      	bne.n	80019ce <AppLoop+0xdca>
	{
		m_Fase=m_Fase+10;
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <AppLoop+0xda0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	330a      	adds	r3, #10
 8001906:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <AppLoop+0xda0>)
 8001908:	6013      	str	r3, [r2, #0]
    	if(m_Fase==800) m_Fase=0;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <AppLoop+0xda0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001912:	d102      	bne.n	800191a <AppLoop+0xd16>
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <AppLoop+0xda0>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

    	TIM8->CCR1=800-m_Fase;
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <AppLoop+0xda0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <AppLoop+0xda4>)
 8001920:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8001924:	6353      	str	r3, [r2, #52]	; 0x34
    	TIM8->CCR2=m_Fase;
 8001926:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <AppLoop+0xda4>)
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <AppLoop+0xda0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	e03e      	b.n	80019ac <AppLoop+0xda8>
 800192e:	bf00      	nop
 8001930:	0801caa8 	.word	0x0801caa8
 8001934:	0801cd84 	.word	0x0801cd84
 8001938:	2000020c 	.word	0x2000020c
 800193c:	0801b4c4 	.word	0x0801b4c4
 8001940:	0801b658 	.word	0x0801b658
 8001944:	0801b638 	.word	0x0801b638
 8001948:	0801b4c8 	.word	0x0801b4c8
 800194c:	2000478c 	.word	0x2000478c
 8001950:	20009a48 	.word	0x20009a48
 8001954:	0801b668 	.word	0x0801b668
 8001958:	0801b4a8 	.word	0x0801b4a8
 800195c:	0801b578 	.word	0x0801b578
 8001960:	0801ba44 	.word	0x0801ba44
 8001964:	20004838 	.word	0x20004838
 8001968:	0801b684 	.word	0x0801b684
 800196c:	0801b6a4 	.word	0x0801b6a4
 8001970:	2000483c 	.word	0x2000483c
 8001974:	0801b6c4 	.word	0x0801b6c4
 8001978:	0801b6e4 	.word	0x0801b6e4
 800197c:	20004840 	.word	0x20004840
 8001980:	200088d4 	.word	0x200088d4
 8001984:	200088c4 	.word	0x200088c4
 8001988:	200048b4 	.word	0x200048b4
 800198c:	200088c8 	.word	0x200088c8
 8001990:	200058b4 	.word	0x200058b4
 8001994:	200088cc 	.word	0x200088cc
 8001998:	200068b4 	.word	0x200068b4
 800199c:	200088d0 	.word	0x200088d0
 80019a0:	200078b4 	.word	0x200078b4
 80019a4:	20004834 	.word	0x20004834
 80019a8:	40013400 	.word	0x40013400
 80019ac:	6393      	str	r3, [r2, #56]	; 0x38

    	TIM8->CCR3=m_Fase;
 80019ae:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <AppLoop+0xf1c>)
 80019b0:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <AppLoop+0xf20>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM8->CCR4=800-m_Fase;
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <AppLoop+0xf20>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a59      	ldr	r2, [pc, #356]	; (8001b20 <AppLoop+0xf1c>)
 80019bc:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40

    	SetBT();
 80019c2:	f000 fa0f 	bl	8001de4 <SetBT>
		TomarCanales();
 80019c6:	f000 f8cb 	bl	8001b60 <TomarCanales>
		GraficarOSC();
 80019ca:	f016 fbb3 	bl	8018134 <GraficarOSC>

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO MPPT
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_MPPT)
 80019ce:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <AppLoop+0xf24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f640 0298 	movw	r2, #2200	; 0x898
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d11e      	bne.n	8001a18 <AppLoop+0xe14>
	{
		m_BTO=0;
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <AppLoop+0xf28>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
		m_BTG=0;
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <AppLoop+0xf2c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 80019e6:	f016 fef3 	bl	80187d0 <FondoCompletoAzul>

		OSCCanal1=&OSCCanal[0];
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <AppLoop+0xf30>)
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <AppLoop+0xf34>)
 80019ee:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <AppLoop+0xf38>)
 80019f2:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <AppLoop+0xf3c>)
 80019f4:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <AppLoop+0xf40>)
 80019f8:	4a53      	ldr	r2, [pc, #332]	; (8001b48 <AppLoop+0xf44>)
 80019fa:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <AppLoop+0xf48>)
 80019fe:	4a54      	ldr	r2, [pc, #336]	; (8001b50 <AppLoop+0xf4c>)
 8001a00:	601a      	str	r2, [r3, #0]

		SetBT();
 8001a02:	f000 f9ef 	bl	8001de4 <SetBT>
	    TomarCanales();
 8001a06:	f000 f8ab 	bl	8001b60 <TomarCanales>
	    GraficarOSC();
 8001a0a:	f016 fb93 	bl	8018134 <GraficarOSC>
	    m_Pantalla++;
 8001a0e:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <AppLoop+0xf24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a44      	ldr	r2, [pc, #272]	; (8001b28 <AppLoop+0xf24>)
 8001a16:	6013      	str	r3, [r2, #0]

	}
	if(m_Pantalla == DES_MPPT+1)
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <AppLoop+0xf24>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f640 0299 	movw	r2, #2201	; 0x899
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d122      	bne.n	8001a6a <AppLoop+0xe66>
	{
		m_Fase=m_Fase+10;
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <AppLoop+0xf20>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	330a      	adds	r3, #10
 8001a2a:	4a3e      	ldr	r2, [pc, #248]	; (8001b24 <AppLoop+0xf20>)
 8001a2c:	6013      	str	r3, [r2, #0]
    	if(m_Fase==800) m_Fase=0;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <AppLoop+0xf20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a36:	d102      	bne.n	8001a3e <AppLoop+0xe3a>
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <AppLoop+0xf20>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

    	TIM8->CCR1=m_Fase;
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <AppLoop+0xf1c>)
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <AppLoop+0xf20>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6353      	str	r3, [r2, #52]	; 0x34
    	TIM8->CCR2=500;
 8001a46:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <AppLoop+0xf1c>)
 8001a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38

    	TIM8->CCR3=m_Fase;
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <AppLoop+0xf1c>)
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <AppLoop+0xf20>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	63d3      	str	r3, [r2, #60]	; 0x3c
		TIM8->CCR4=800;
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <AppLoop+0xf1c>)
 8001a58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

    	SetBT();
 8001a5e:	f000 f9c1 	bl	8001de4 <SetBT>
		TomarCanales();
 8001a62:	f000 f87d 	bl	8001b60 <TomarCanales>
		GraficarOSC();
 8001a66:	f016 fb65 	bl	8018134 <GraficarOSC>
	}
	/////////////////////////////////////////////////////////////////////////////
	// DESARROLLO INVERTER
	/////////////////////////////////////////////////////////////////////////////
	if(m_Pantalla == DES_INVERTER)
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <AppLoop+0xf24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d136      	bne.n	8001ae4 <AppLoop+0xee0>
	{
		for(i=0;i<250;i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	667b      	str	r3, [r7, #100]	; 0x64
 8001a7a:	e014      	b.n	8001aa6 <AppLoop+0xea2>
		{
			SPWM1[i] = (unsigned int)(SPWM[i]*2500);
 8001a7c:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <AppLoop+0xf50>)
 8001a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b58 <AppLoop+0xf54>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a94:	ee17 1a90 	vmov	r1, s15
 8001a98:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <AppLoop+0xf58>)
 8001a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0;i<250;i++)
 8001aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8001aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa8:	2bf9      	cmp	r3, #249	; 0xf9
 8001aaa:	dde7      	ble.n	8001a7c <AppLoop+0xe78>
		}

		m_BTO=8;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <AppLoop+0xf28>)
 8001aae:	2208      	movs	r2, #8
 8001ab0:	601a      	str	r2, [r3, #0]

		FondoCompletoAzul();
 8001ab2:	f016 fe8d 	bl	80187d0 <FondoCompletoAzul>
		OSCCanal1=&OSCCanal[0];
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <AppLoop+0xf30>)
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <AppLoop+0xf34>)
 8001aba:	601a      	str	r2, [r3, #0]
		OSCCanal2=&OSCCanal[1024];
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <AppLoop+0xf38>)
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <AppLoop+0xf3c>)
 8001ac0:	601a      	str	r2, [r3, #0]
		OSCCanal3=&OSCCanal[2048];
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <AppLoop+0xf40>)
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <AppLoop+0xf44>)
 8001ac6:	601a      	str	r2, [r3, #0]
		OSCCanal4=&OSCCanal[3072];
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <AppLoop+0xf48>)
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <AppLoop+0xf4c>)
 8001acc:	601a      	str	r2, [r3, #0]

		SetBT();
 8001ace:	f000 f989 	bl	8001de4 <SetBT>
	    TomarCanales();
 8001ad2:	f000 f845 	bl	8001b60 <TomarCanales>
	    GraficarOSC();
 8001ad6:	f016 fb2d 	bl	8018134 <GraficarOSC>
	    m_Pantalla++;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <AppLoop+0xf24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <AppLoop+0xf24>)
 8001ae2:	6013      	str	r3, [r2, #0]
	}
	if(m_Pantalla == DES_INVERTER+1)
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <AppLoop+0xf24>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f640 02fd 	movw	r2, #2301	; 0x8fd
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d112      	bne.n	8001b16 <AppLoop+0xf12>
	{
		m_Fase=m_Fase+10;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <AppLoop+0xf20>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	330a      	adds	r3, #10
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <AppLoop+0xf20>)
 8001af8:	6013      	str	r3, [r2, #0]
    	if(m_Fase==800) m_Fase=0;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <AppLoop+0xf20>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001b02:	d102      	bne.n	8001b0a <AppLoop+0xf06>
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <AppLoop+0xf20>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

    	SetBT();
 8001b0a:	f000 f96b 	bl	8001de4 <SetBT>
		TomarCanales();
 8001b0e:	f000 f827 	bl	8001b60 <TomarCanales>
		GraficarOSC();
 8001b12:	f016 fb0f 	bl	8018134 <GraficarOSC>
	}
}
 8001b16:	bf00      	nop
 8001b18:	3768      	adds	r7, #104	; 0x68
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40013400 	.word	0x40013400
 8001b24:	20004834 	.word	0x20004834
 8001b28:	2000478c 	.word	0x2000478c
 8001b2c:	200088d4 	.word	0x200088d4
 8001b30:	200088d8 	.word	0x200088d8
 8001b34:	200088c4 	.word	0x200088c4
 8001b38:	200048b4 	.word	0x200048b4
 8001b3c:	200088c8 	.word	0x200088c8
 8001b40:	200058b4 	.word	0x200058b4
 8001b44:	200088cc 	.word	0x200088cc
 8001b48:	200068b4 	.word	0x200068b4
 8001b4c:	200088d0 	.word	0x200088d0
 8001b50:	200078b4 	.word	0x200078b4
 8001b54:	0801ba4c 	.word	0x0801ba4c
 8001b58:	451c4000 	.word	0x451c4000
 8001b5c:	2000906c 	.word	0x2000906c

08001b60 <TomarCanales>:
void TomarCanales(void);



void TomarCanales(void)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
	unsigned int i;

	//uint8_t CAN_data[8]={0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55};
    //Can_TxMessage(0,0x555,8,CAN_data);

	HAL_ADC_Start_DMA(&hadc1,OSCCanal1,1024);
 8001b66:	4b96      	ldr	r3, [pc, #600]	; (8001dc0 <TomarCanales+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4894      	ldr	r0, [pc, #592]	; (8001dc4 <TomarCanales+0x264>)
 8001b72:	f003 fad9 	bl	8005128 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2,OSCCanal2,1024);
 8001b76:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <TomarCanales+0x268>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4892      	ldr	r0, [pc, #584]	; (8001dcc <TomarCanales+0x26c>)
 8001b82:	f003 fad1 	bl	8005128 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3,OSCCanal3,1024);
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <TomarCanales+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4890      	ldr	r0, [pc, #576]	; (8001dd4 <TomarCanales+0x274>)
 8001b92:	f003 fac9 	bl	8005128 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc4,OSCCanal4,1024);
 8001b96:	4b90      	ldr	r3, [pc, #576]	; (8001dd8 <TomarCanales+0x278>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	488e      	ldr	r0, [pc, #568]	; (8001ddc <TomarCanales+0x27c>)
 8001ba2:	f003 fac1 	bl	8005128 <HAL_ADC_Start_DMA>

    while(hadc2.Instance->DR>1500);
 8001ba6:	bf00      	nop
 8001ba8:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <TomarCanales+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d8f8      	bhi.n	8001ba8 <TomarCanales+0x48>
    while(hadc2.Instance->DR<1500);
 8001bb6:	bf00      	nop
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <TomarCanales+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f240 52db 	movw	r2, #1499	; 0x5db
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d9f8      	bls.n	8001bb8 <TomarCanales+0x58>

    //__disable_irq();

    (hadc1.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <TomarCanales+0x264>)
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <TomarCanales+0x264>)
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0201 	bic.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
	(hadc2.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001bda:	4b7c      	ldr	r3, [pc, #496]	; (8001dcc <TomarCanales+0x26c>)
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <TomarCanales+0x26c>)
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
	(hadc3.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001bee:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <TomarCanales+0x274>)
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <TomarCanales+0x274>)
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
	(hadc4.DMA_Handle)->Instance->CCR &= ~DMA_CCR_EN; // disable
 8001c02:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <TomarCanales+0x27c>)
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b74      	ldr	r3, [pc, #464]	; (8001ddc <TomarCanales+0x27c>)
 8001c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

	(hadc1.DMA_Handle)->Instance->CNDTR=1024;
 8001c16:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <TomarCanales+0x264>)
 8001c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c20:	605a      	str	r2, [r3, #4]
	(hadc2.DMA_Handle)->Instance->CNDTR=1024;
 8001c22:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <TomarCanales+0x26c>)
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2c:	605a      	str	r2, [r3, #4]
	(hadc3.DMA_Handle)->Instance->CNDTR=1024;
 8001c2e:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <TomarCanales+0x274>)
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c38:	605a      	str	r2, [r3, #4]
	(hadc4.DMA_Handle)->Instance->CNDTR=1024;
 8001c3a:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <TomarCanales+0x27c>)
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c44:	605a      	str	r2, [r3, #4]

	(hadc1.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <TomarCanales+0x264>)
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <TomarCanales+0x264>)
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
	(hadc2.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <TomarCanales+0x26c>)
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <TomarCanales+0x26c>)
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
	(hadc3.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8001c6e:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <TomarCanales+0x274>)
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <TomarCanales+0x274>)
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
	(hadc4.DMA_Handle)->Instance->CCR |= DMA_CCR_EN; // re-enable
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <TomarCanales+0x27c>)
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <TomarCanales+0x27c>)
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

	//__enable_irq();

	do
	{
		i=__HAL_DMA_GET_COUNTER(hadc4.DMA_Handle);
 8001c96:	4b51      	ldr	r3, [pc, #324]	; (8001ddc <TomarCanales+0x27c>)
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	607b      	str	r3, [r7, #4]

 	}while(i>1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d8f7      	bhi.n	8001c96 <TomarCanales+0x136>
 	HAL_Delay(10);
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f003 f802 	bl	8004cb0 <HAL_Delay>

 	HAL_ADC_Stop_DMA(&hadc1);
 8001cac:	4845      	ldr	r0, [pc, #276]	; (8001dc4 <TomarCanales+0x264>)
 8001cae:	f003 fb57 	bl	8005360 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_DMA(&hadc2);
 8001cb2:	4846      	ldr	r0, [pc, #280]	; (8001dcc <TomarCanales+0x26c>)
 8001cb4:	f003 fb54 	bl	8005360 <HAL_ADC_Stop_DMA>
 	HAL_ADC_Stop_DMA(&hadc3);
 8001cb8:	4846      	ldr	r0, [pc, #280]	; (8001dd4 <TomarCanales+0x274>)
 8001cba:	f003 fb51 	bl	8005360 <HAL_ADC_Stop_DMA>
 	HAL_ADC_Stop_DMA(&hadc4);
 8001cbe:	4847      	ldr	r0, [pc, #284]	; (8001ddc <TomarCanales+0x27c>)
 8001cc0:	f003 fb4e 	bl	8005360 <HAL_ADC_Stop_DMA>

 	if(m_BTO<3)
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <TomarCanales+0x280>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d871      	bhi.n	8001db0 <TomarCanales+0x250>
 	for(i=0;i<1000;i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	e06a      	b.n	8001da8 <TomarCanales+0x248>
    {
		OSCCanal1[i]=OSCCanal1[(int)(i*1.024)];
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <TomarCanales+0x260>)
 8001cd4:	681c      	ldr	r4, [r3, #0]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fc1c 	bl	8000514 <__aeabi_ui2d>
 8001cdc:	a336      	add	r3, pc, #216	; (adr r3, 8001db8 <TomarCanales+0x258>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fc91 	bl	8000608 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7fe ff25 	bl	8000b3c <__aeabi_d2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	18e2      	adds	r2, r4, r3
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <TomarCanales+0x260>)
 8001cfa:	6819      	ldr	r1, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	601a      	str	r2, [r3, #0]
		OSCCanal2[i]=OSCCanal2[(int)(i*1.024)];
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <TomarCanales+0x268>)
 8001d08:	681c      	ldr	r4, [r3, #0]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fc02 	bl	8000514 <__aeabi_ui2d>
 8001d10:	a329      	add	r3, pc, #164	; (adr r3, 8001db8 <TomarCanales+0x258>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe ff0b 	bl	8000b3c <__aeabi_d2iz>
 8001d26:	4603      	mov	r3, r0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	18e2      	adds	r2, r4, r3
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <TomarCanales+0x268>)
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	601a      	str	r2, [r3, #0]
	    OSCCanal3[i]=OSCCanal3[(int)(i*1.024)];
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <TomarCanales+0x270>)
 8001d3c:	681c      	ldr	r4, [r3, #0]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fbe8 	bl	8000514 <__aeabi_ui2d>
 8001d44:	a31c      	add	r3, pc, #112	; (adr r3, 8001db8 <TomarCanales+0x258>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fc5d 	bl	8000608 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	f7fe fef1 	bl	8000b3c <__aeabi_d2iz>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	18e2      	adds	r2, r4, r3
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <TomarCanales+0x270>)
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
	    OSCCanal4[i]=OSCCanal4[(int)(i*1.024)];
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <TomarCanales+0x278>)
 8001d70:	681c      	ldr	r4, [r3, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fbce 	bl	8000514 <__aeabi_ui2d>
 8001d78:	a30f      	add	r3, pc, #60	; (adr r3, 8001db8 <TomarCanales+0x258>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe fed7 	bl	8000b3c <__aeabi_d2iz>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	18e2      	adds	r2, r4, r3
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <TomarCanales+0x278>)
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	601a      	str	r2, [r3, #0]
 	for(i=0;i<1000;i++)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3301      	adds	r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dae:	d390      	bcc.n	8001cd2 <TomarCanales+0x172>
    }
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dbc:	3ff0624d 	.word	0x3ff0624d
 8001dc0:	200088c4 	.word	0x200088c4
 8001dc4:	200088e0 	.word	0x200088e0
 8001dc8:	200088c8 	.word	0x200088c8
 8001dcc:	20008930 	.word	0x20008930
 8001dd0:	200088cc 	.word	0x200088cc
 8001dd4:	20008980 	.word	0x20008980
 8001dd8:	200088d0 	.word	0x200088d0
 8001ddc:	200089d0 	.word	0x200089d0
 8001de0:	200088d4 	.word	0x200088d4

08001de4 <SetBT>:

void SetBT()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	switch(m_BTO)
 8001de8:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <SetBT+0x23c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b0e      	cmp	r3, #14
 8001dee:	f200 8676 	bhi.w	8002ade <SetBT+0xcfa>
 8001df2:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <SetBT+0x14>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e35 	.word	0x08001e35
 8001dfc:	08001ed9 	.word	0x08001ed9
 8001e00:	08001f7d 	.word	0x08001f7d
 8001e04:	08002035 	.word	0x08002035
 8001e08:	08002113 	.word	0x08002113
 8001e0c:	080021f1 	.word	0x080021f1
 8001e10:	080022e9 	.word	0x080022e9
 8001e14:	080023c5 	.word	0x080023c5
 8001e18:	080024a1 	.word	0x080024a1
 8001e1c:	08002595 	.word	0x08002595
 8001e20:	08002671 	.word	0x08002671
 8001e24:	0800274d 	.word	0x0800274d
 8001e28:	08002845 	.word	0x08002845
 8001e2c:	08002923 	.word	0x08002923
 8001e30:	08002a01 	.word	0x08002a01
  	{
		  	  		case 0://10us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001e34:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <SetBT+0x240>)
 8001e36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3a:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e3c:	4b79      	ldr	r3, [pc, #484]	; (8002024 <SetBT+0x240>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001e42:	4b78      	ldr	r3, [pc, #480]	; (8002024 <SetBT+0x240>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 8001e48:	4b76      	ldr	r3, [pc, #472]	; (8002024 <SetBT+0x240>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e4e:	4b75      	ldr	r3, [pc, #468]	; (8002024 <SetBT+0x240>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 8001e56:	4873      	ldr	r0, [pc, #460]	; (8002024 <SetBT+0x240>)
 8001e58:	f002 ff6c 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001e5c:	4b72      	ldr	r3, [pc, #456]	; (8002028 <SetBT+0x244>)
 8001e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e62:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e64:	4b70      	ldr	r3, [pc, #448]	; (8002028 <SetBT+0x244>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <SetBT+0x244>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <SetBT+0x244>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <SetBT+0x244>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 8001e7e:	486a      	ldr	r0, [pc, #424]	; (8002028 <SetBT+0x244>)
 8001e80:	f002 ff58 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001e84:	4b69      	ldr	r3, [pc, #420]	; (800202c <SetBT+0x248>)
 8001e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e8a:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e8c:	4b67      	ldr	r3, [pc, #412]	; (800202c <SetBT+0x248>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001e92:	4b66      	ldr	r3, [pc, #408]	; (800202c <SetBT+0x248>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 8001e98:	4b64      	ldr	r3, [pc, #400]	; (800202c <SetBT+0x248>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <SetBT+0x248>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 8001ea6:	4861      	ldr	r0, [pc, #388]	; (800202c <SetBT+0x248>)
 8001ea8:	f002 ff44 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001eac:	4b60      	ldr	r3, [pc, #384]	; (8002030 <SetBT+0x24c>)
 8001eae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001eb2:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <SetBT+0x24c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <SetBT+0x24c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <SetBT+0x24c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <SetBT+0x24c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <SetBT+0x24c>)
 8001ed0:	f002 ff30 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 8001ed4:	f000 be03 	b.w	8002ade <SetBT+0xcfa>

		  	  		case 1://10us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ed8:	4b52      	ldr	r3, [pc, #328]	; (8002024 <SetBT+0x240>)
 8001eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ede:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <SetBT+0x240>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001ee6:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <SetBT+0x240>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 8001eec:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <SetBT+0x240>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ef2:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <SetBT+0x240>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 8001efa:	484a      	ldr	r0, [pc, #296]	; (8002024 <SetBT+0x240>)
 8001efc:	f002 ff1a 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f00:	4b49      	ldr	r3, [pc, #292]	; (8002028 <SetBT+0x244>)
 8001f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f06:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <SetBT+0x244>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <SetBT+0x244>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <SetBT+0x244>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 8001f1a:	4b43      	ldr	r3, [pc, #268]	; (8002028 <SetBT+0x244>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 8001f22:	4841      	ldr	r0, [pc, #260]	; (8002028 <SetBT+0x244>)
 8001f24:	f002 ff06 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <SetBT+0x248>)
 8001f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2e:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f30:	4b3e      	ldr	r3, [pc, #248]	; (800202c <SetBT+0x248>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <SetBT+0x248>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <SetBT+0x248>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <SetBT+0x248>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 8001f4a:	4838      	ldr	r0, [pc, #224]	; (800202c <SetBT+0x248>)
 8001f4c:	f002 fef2 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <SetBT+0x24c>)
 8001f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f56:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f58:	4b35      	ldr	r3, [pc, #212]	; (8002030 <SetBT+0x24c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <SetBT+0x24c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <SetBT+0x24c>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <SetBT+0x24c>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 8001f72:	482f      	ldr	r0, [pc, #188]	; (8002030 <SetBT+0x24c>)
 8001f74:	f002 fede 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 8001f78:	f000 bdb1 	b.w	8002ade <SetBT+0xcfa>

		  	  		case 2://20us
			  		hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <SetBT+0x240>)
 8001f7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f82:	605a      	str	r2, [r3, #4]
			  		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <SetBT+0x240>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
			  		hadc1.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <SetBT+0x240>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
			  		hadc1.Init.ContinuousConvMode = ENABLE;
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <SetBT+0x240>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	765a      	strb	r2, [r3, #25]
			  		hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <SetBT+0x240>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc1);
 8001f9e:	4821      	ldr	r0, [pc, #132]	; (8002024 <SetBT+0x240>)
 8001fa0:	f002 fec8 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <SetBT+0x244>)
 8001fa6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001faa:	605a      	str	r2, [r3, #4]
		  	  		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <SetBT+0x244>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc2.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <SetBT+0x244>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc2.Init.ContinuousConvMode = ENABLE;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <SetBT+0x244>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	765a      	strb	r2, [r3, #25]
		  	  		hadc2.Init.DMAContinuousRequests = ENABLE;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <SetBT+0x244>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc2);
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <SetBT+0x244>)
 8001fc8:	f002 feb4 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <SetBT+0x248>)
 8001fce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fd2:	605a      	str	r2, [r3, #4]
		  	  		hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <SetBT+0x248>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc3.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <SetBT+0x248>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc3.Init.ContinuousConvMode = ENABLE;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <SetBT+0x248>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	765a      	strb	r2, [r3, #25]
		  	  		hadc3.Init.DMAContinuousRequests = ENABLE;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <SetBT+0x248>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc3);
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <SetBT+0x248>)
 8001ff0:	f002 fea0 	bl	8004d34 <HAL_ADC_Init>
		  	  		hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <SetBT+0x24c>)
 8001ff6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ffa:	605a      	str	r2, [r3, #4]
		  	  		hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <SetBT+0x24c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  		hadc4.Init.ExternalTrigConv= ADC_SOFTWARE_START;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SetBT+0x24c>)
 8002004:	2201      	movs	r2, #1
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
		  	  		hadc4.Init.ContinuousConvMode = ENABLE;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <SetBT+0x24c>)
 800200a:	2201      	movs	r2, #1
 800200c:	765a      	strb	r2, [r3, #25]
		  	  		hadc4.Init.DMAContinuousRequests = ENABLE;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <SetBT+0x24c>)
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  		HAL_ADC_Init(&hadc4);
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <SetBT+0x24c>)
 8002018:	f002 fe8c 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800201c:	f000 bd5f 	b.w	8002ade <SetBT+0xcfa>
 8002020:	200088d4 	.word	0x200088d4
 8002024:	200088e0 	.word	0x200088e0
 8002028:	20008930 	.word	0x20008930
 800202c:	20008980 	.word	0x20008980
 8002030:	200089d0 	.word	0x200089d0

		  	  	    case 3://50us
	    	  	   	htim3.Instance = TIM3;
 8002034:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <SetBT+0x4ec>)
 8002036:	4aa7      	ldr	r2, [pc, #668]	; (80022d4 <SetBT+0x4f0>)
 8002038:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 800203a:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <SetBT+0x4ec>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <SetBT+0x4ec>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 72-1;
 8002046:	4ba2      	ldr	r3, [pc, #648]	; (80022d0 <SetBT+0x4ec>)
 8002048:	2247      	movs	r2, #71	; 0x47
 800204a:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204c:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <SetBT+0x4ec>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002052:	4b9f      	ldr	r3, [pc, #636]	; (80022d0 <SetBT+0x4ec>)
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002058:	489d      	ldr	r0, [pc, #628]	; (80022d0 <SetBT+0x4ec>)
 800205a:	f008 fd5d 	bl	800ab18 <HAL_TIM_Base_Init>
		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800205e:	4b9e      	ldr	r3, [pc, #632]	; (80022d8 <SetBT+0x4f4>)
 8002060:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002064:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002066:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <SetBT+0x4f4>)
 8002068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800206e:	4b9a      	ldr	r3, [pc, #616]	; (80022d8 <SetBT+0x4f4>)
 8002070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002076:	4b98      	ldr	r3, [pc, #608]	; (80022d8 <SetBT+0x4f4>)
 8002078:	2200      	movs	r2, #0
 800207a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 800207c:	4b96      	ldr	r3, [pc, #600]	; (80022d8 <SetBT+0x4f4>)
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002084:	4894      	ldr	r0, [pc, #592]	; (80022d8 <SetBT+0x4f4>)
 8002086:	f002 fe55 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800208a:	4b94      	ldr	r3, [pc, #592]	; (80022dc <SetBT+0x4f8>)
 800208c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002090:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002092:	4b92      	ldr	r3, [pc, #584]	; (80022dc <SetBT+0x4f8>)
 8002094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800209a:	4b90      	ldr	r3, [pc, #576]	; (80022dc <SetBT+0x4f8>)
 800209c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80020a2:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <SetBT+0x4f8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <SetBT+0x4f8>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80020b0:	488a      	ldr	r0, [pc, #552]	; (80022dc <SetBT+0x4f8>)
 80020b2:	f002 fe3f 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80020b6:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <SetBT+0x4fc>)
 80020b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020bc:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <SetBT+0x4fc>)
 80020c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80020c6:	4b86      	ldr	r3, [pc, #536]	; (80022e0 <SetBT+0x4fc>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80020ce:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <SetBT+0x4fc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80020d4:	4b82      	ldr	r3, [pc, #520]	; (80022e0 <SetBT+0x4fc>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80020dc:	4880      	ldr	r0, [pc, #512]	; (80022e0 <SetBT+0x4fc>)
 80020de:	f002 fe29 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80020e2:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <SetBT+0x500>)
 80020e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020e8:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80020ea:	4b7e      	ldr	r3, [pc, #504]	; (80022e4 <SetBT+0x500>)
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <SetBT+0x500>)
 80020f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80020fa:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <SetBT+0x500>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002100:	4b78      	ldr	r3, [pc, #480]	; (80022e4 <SetBT+0x500>)
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002108:	4876      	ldr	r0, [pc, #472]	; (80022e4 <SetBT+0x500>)
 800210a:	f002 fe13 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800210e:	f000 bce6 	b.w	8002ade <SetBT+0xcfa>

		  	  	    case 4://100us
	    	  	   	htim3.Instance = TIM3;
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <SetBT+0x4ec>)
 8002114:	4a6f      	ldr	r2, [pc, #444]	; (80022d4 <SetBT+0x4f0>)
 8002116:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <SetBT+0x4ec>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <SetBT+0x4ec>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 144-1;
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <SetBT+0x4ec>)
 8002126:	228f      	movs	r2, #143	; 0x8f
 8002128:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212a:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <SetBT+0x4ec>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <SetBT+0x4ec>)
 8002132:	2280      	movs	r2, #128	; 0x80
 8002134:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002136:	4866      	ldr	r0, [pc, #408]	; (80022d0 <SetBT+0x4ec>)
 8002138:	f008 fcee 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <SetBT+0x4f4>)
 800213e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002142:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002144:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <SetBT+0x4f4>)
 8002146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800214c:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <SetBT+0x4f4>)
 800214e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002154:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <SetBT+0x4f4>)
 8002156:	2200      	movs	r2, #0
 8002158:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 800215a:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <SetBT+0x4f4>)
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002162:	485d      	ldr	r0, [pc, #372]	; (80022d8 <SetBT+0x4f4>)
 8002164:	f002 fde6 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002168:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <SetBT+0x4f8>)
 800216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216e:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002170:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <SetBT+0x4f8>)
 8002172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002178:	4b58      	ldr	r3, [pc, #352]	; (80022dc <SetBT+0x4f8>)
 800217a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002180:	4b56      	ldr	r3, [pc, #344]	; (80022dc <SetBT+0x4f8>)
 8002182:	2200      	movs	r2, #0
 8002184:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002186:	4b55      	ldr	r3, [pc, #340]	; (80022dc <SetBT+0x4f8>)
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 800218e:	4853      	ldr	r0, [pc, #332]	; (80022dc <SetBT+0x4f8>)
 8002190:	f002 fdd0 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <SetBT+0x4fc>)
 8002196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800219a:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <SetBT+0x4fc>)
 800219e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80021a4:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <SetBT+0x4fc>)
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <SetBT+0x4fc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests =ENABLE;
 80021b2:	4b4b      	ldr	r3, [pc, #300]	; (80022e0 <SetBT+0x4fc>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80021ba:	4849      	ldr	r0, [pc, #292]	; (80022e0 <SetBT+0x4fc>)
 80021bc:	f002 fdba 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80021c0:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <SetBT+0x500>)
 80021c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021c6:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <SetBT+0x500>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <SetBT+0x500>)
 80021d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <SetBT+0x500>)
 80021da:	2200      	movs	r2, #0
 80021dc:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <SetBT+0x500>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 80021e6:	483f      	ldr	r0, [pc, #252]	; (80022e4 <SetBT+0x500>)
 80021e8:	f002 fda4 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 80021ec:	f000 bc77 	b.w	8002ade <SetBT+0xcfa>

		  	  	    case 5://200us
	    	  	   	htim3.Instance = TIM3;
 80021f0:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <SetBT+0x4ec>)
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <SetBT+0x4f0>)
 80021f4:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 0;
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <SetBT+0x4ec>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <SetBT+0x4ec>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 288-1;
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <SetBT+0x4ec>)
 8002204:	f240 121f 	movw	r2, #287	; 0x11f
 8002208:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <SetBT+0x4ec>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <SetBT+0x4ec>)
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002216:	482e      	ldr	r0, [pc, #184]	; (80022d0 <SetBT+0x4ec>)
 8002218:	f008 fc7e 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <SetBT+0x4f4>)
 800221e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002222:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <SetBT+0x4f4>)
 8002226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <SetBT+0x4f4>)
 800222e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <SetBT+0x4f4>)
 8002236:	2200      	movs	r2, #0
 8002238:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests =ENABLE;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <SetBT+0x4f4>)
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <SetBT+0x4f4>)
 8002244:	f002 fd76 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <SetBT+0x4f8>)
 800224a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800224e:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <SetBT+0x4f8>)
 8002252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <SetBT+0x4f8>)
 800225a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <SetBT+0x4f8>)
 8002262:	2200      	movs	r2, #0
 8002264:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <SetBT+0x4f8>)
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 800226e:	481b      	ldr	r0, [pc, #108]	; (80022dc <SetBT+0x4f8>)
 8002270:	f002 fd60 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <SetBT+0x4fc>)
 8002276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800227a:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <SetBT+0x4fc>)
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <SetBT+0x4fc>)
 8002286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <SetBT+0x4fc>)
 800228e:	2200      	movs	r2, #0
 8002290:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <SetBT+0x4fc>)
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 800229a:	4811      	ldr	r0, [pc, #68]	; (80022e0 <SetBT+0x4fc>)
 800229c:	f002 fd4a 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <SetBT+0x500>)
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <SetBT+0x500>)
 80022aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <SetBT+0x500>)
 80022b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <SetBT+0x500>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests =ENABLE;
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <SetBT+0x500>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <SetBT+0x500>)
 80022c8:	f002 fd34 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 80022cc:	f000 bc07 	b.w	8002ade <SetBT+0xcfa>
 80022d0:	20008c84 	.word	0x20008c84
 80022d4:	40000400 	.word	0x40000400
 80022d8:	200088e0 	.word	0x200088e0
 80022dc:	20008930 	.word	0x20008930
 80022e0:	20008980 	.word	0x20008980
 80022e4:	200089d0 	.word	0x200089d0

		  	  	    case 6://.5ms
	    	  	   	htim3.Instance = TIM3;
 80022e8:	4ba4      	ldr	r3, [pc, #656]	; (800257c <SetBT+0x798>)
 80022ea:	4aa5      	ldr	r2, [pc, #660]	; (8002580 <SetBT+0x79c>)
 80022ec:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 80022ee:	4ba3      	ldr	r3, [pc, #652]	; (800257c <SetBT+0x798>)
 80022f0:	2247      	movs	r2, #71	; 0x47
 80022f2:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4ba1      	ldr	r3, [pc, #644]	; (800257c <SetBT+0x798>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 10-1;
 80022fa:	4ba0      	ldr	r3, [pc, #640]	; (800257c <SetBT+0x798>)
 80022fc:	2209      	movs	r2, #9
 80022fe:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <SetBT+0x798>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002306:	4b9d      	ldr	r3, [pc, #628]	; (800257c <SetBT+0x798>)
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 800230c:	489b      	ldr	r0, [pc, #620]	; (800257c <SetBT+0x798>)
 800230e:	f008 fc03 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002312:	4b9c      	ldr	r3, [pc, #624]	; (8002584 <SetBT+0x7a0>)
 8002314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002318:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800231a:	4b9a      	ldr	r3, [pc, #616]	; (8002584 <SetBT+0x7a0>)
 800231c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002322:	4b98      	ldr	r3, [pc, #608]	; (8002584 <SetBT+0x7a0>)
 8002324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 800232a:	4b96      	ldr	r3, [pc, #600]	; (8002584 <SetBT+0x7a0>)
 800232c:	2200      	movs	r2, #0
 800232e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002330:	4b94      	ldr	r3, [pc, #592]	; (8002584 <SetBT+0x7a0>)
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002338:	4892      	ldr	r0, [pc, #584]	; (8002584 <SetBT+0x7a0>)
 800233a:	f002 fcfb 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800233e:	4b92      	ldr	r3, [pc, #584]	; (8002588 <SetBT+0x7a4>)
 8002340:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002344:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002346:	4b90      	ldr	r3, [pc, #576]	; (8002588 <SetBT+0x7a4>)
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800234e:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <SetBT+0x7a4>)
 8002350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002356:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <SetBT+0x7a4>)
 8002358:	2200      	movs	r2, #0
 800235a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 800235c:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <SetBT+0x7a4>)
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002364:	4888      	ldr	r0, [pc, #544]	; (8002588 <SetBT+0x7a4>)
 8002366:	f002 fce5 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <SetBT+0x7a8>)
 800236c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002370:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <SetBT+0x7a8>)
 8002374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <SetBT+0x7a8>)
 800237c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002382:	4b82      	ldr	r3, [pc, #520]	; (800258c <SetBT+0x7a8>)
 8002384:	2200      	movs	r2, #0
 8002386:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <SetBT+0x7a8>)
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002390:	487e      	ldr	r0, [pc, #504]	; (800258c <SetBT+0x7a8>)
 8002392:	f002 fccf 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002396:	4b7e      	ldr	r3, [pc, #504]	; (8002590 <SetBT+0x7ac>)
 8002398:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800239c:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800239e:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <SetBT+0x7ac>)
 80023a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80023a6:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <SetBT+0x7ac>)
 80023a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80023ae:	4b78      	ldr	r3, [pc, #480]	; (8002590 <SetBT+0x7ac>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 80023b4:	4b76      	ldr	r3, [pc, #472]	; (8002590 <SetBT+0x7ac>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 80023bc:	4874      	ldr	r0, [pc, #464]	; (8002590 <SetBT+0x7ac>)
 80023be:	f002 fcb9 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 80023c2:	e38c      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 7://1ms
	    	  	   	htim3.Instance = TIM3;
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <SetBT+0x798>)
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <SetBT+0x79c>)
 80023c8:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <SetBT+0x798>)
 80023cc:	2247      	movs	r2, #71	; 0x47
 80023ce:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <SetBT+0x798>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 20-1;
 80023d6:	4b69      	ldr	r3, [pc, #420]	; (800257c <SetBT+0x798>)
 80023d8:	2213      	movs	r2, #19
 80023da:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <SetBT+0x798>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <SetBT+0x798>)
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80023e8:	4864      	ldr	r0, [pc, #400]	; (800257c <SetBT+0x798>)
 80023ea:	f008 fb95 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80023ee:	4b65      	ldr	r3, [pc, #404]	; (8002584 <SetBT+0x7a0>)
 80023f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023f4:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <SetBT+0x7a0>)
 80023f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <SetBT+0x7a0>)
 8002400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <SetBT+0x7a0>)
 8002408:	2200      	movs	r2, #0
 800240a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 800240c:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <SetBT+0x7a0>)
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002414:	485b      	ldr	r0, [pc, #364]	; (8002584 <SetBT+0x7a0>)
 8002416:	f002 fc8d 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800241a:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <SetBT+0x7a4>)
 800241c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002420:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002422:	4b59      	ldr	r3, [pc, #356]	; (8002588 <SetBT+0x7a4>)
 8002424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800242a:	4b57      	ldr	r3, [pc, #348]	; (8002588 <SetBT+0x7a4>)
 800242c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <SetBT+0x7a4>)
 8002434:	2200      	movs	r2, #0
 8002436:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <SetBT+0x7a4>)
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002440:	4851      	ldr	r0, [pc, #324]	; (8002588 <SetBT+0x7a4>)
 8002442:	f002 fc77 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <SetBT+0x7a8>)
 8002448:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800244c:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800244e:	4b4f      	ldr	r3, [pc, #316]	; (800258c <SetBT+0x7a8>)
 8002450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002456:	4b4d      	ldr	r3, [pc, #308]	; (800258c <SetBT+0x7a8>)
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <SetBT+0x7a8>)
 8002460:	2200      	movs	r2, #0
 8002462:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002464:	4b49      	ldr	r3, [pc, #292]	; (800258c <SetBT+0x7a8>)
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 800246c:	4847      	ldr	r0, [pc, #284]	; (800258c <SetBT+0x7a8>)
 800246e:	f002 fc61 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <SetBT+0x7ac>)
 8002474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002478:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <SetBT+0x7ac>)
 800247c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <SetBT+0x7ac>)
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 800248a:	4b41      	ldr	r3, [pc, #260]	; (8002590 <SetBT+0x7ac>)
 800248c:	2200      	movs	r2, #0
 800248e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <SetBT+0x7ac>)
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002498:	483d      	ldr	r0, [pc, #244]	; (8002590 <SetBT+0x7ac>)
 800249a:	f002 fc4b 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800249e:	e31e      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 8://2ms
	    	  	   	htim3.Instance = TIM3;
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <SetBT+0x798>)
 80024a2:	4a37      	ldr	r2, [pc, #220]	; (8002580 <SetBT+0x79c>)
 80024a4:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 80024a6:	4b35      	ldr	r3, [pc, #212]	; (800257c <SetBT+0x798>)
 80024a8:	2247      	movs	r2, #71	; 0x47
 80024aa:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <SetBT+0x798>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 40-1;
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <SetBT+0x798>)
 80024b4:	2227      	movs	r2, #39	; 0x27
 80024b6:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <SetBT+0x798>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <SetBT+0x798>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80024c4:	482d      	ldr	r0, [pc, #180]	; (800257c <SetBT+0x798>)
 80024c6:	f008 fb27 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <SetBT+0x7a0>)
 80024cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024d0:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <SetBT+0x7a0>)
 80024d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <SetBT+0x7a0>)
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <SetBT+0x7a0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <SetBT+0x7a0>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80024f0:	4824      	ldr	r0, [pc, #144]	; (8002584 <SetBT+0x7a0>)
 80024f2:	f002 fc1f 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <SetBT+0x7a4>)
 80024f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024fc:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <SetBT+0x7a4>)
 8002500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <SetBT+0x7a4>)
 8002508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <SetBT+0x7a4>)
 8002510:	2200      	movs	r2, #0
 8002512:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <SetBT+0x7a4>)
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 800251c:	481a      	ldr	r0, [pc, #104]	; (8002588 <SetBT+0x7a4>)
 800251e:	f002 fc09 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002522:	4b1a      	ldr	r3, [pc, #104]	; (800258c <SetBT+0x7a8>)
 8002524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002528:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <SetBT+0x7a8>)
 800252c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <SetBT+0x7a8>)
 8002534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <SetBT+0x7a8>)
 800253c:	2200      	movs	r2, #0
 800253e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <SetBT+0x7a8>)
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002548:	4810      	ldr	r0, [pc, #64]	; (800258c <SetBT+0x7a8>)
 800254a:	f002 fbf3 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <SetBT+0x7ac>)
 8002550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002554:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <SetBT+0x7ac>)
 8002558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <SetBT+0x7ac>)
 8002560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <SetBT+0x7ac>)
 8002568:	2200      	movs	r2, #0
 800256a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <SetBT+0x7ac>)
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <SetBT+0x7ac>)
 8002576:	f002 fbdd 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800257a:	e2b0      	b.n	8002ade <SetBT+0xcfa>
 800257c:	20008c84 	.word	0x20008c84
 8002580:	40000400 	.word	0x40000400
 8002584:	200088e0 	.word	0x200088e0
 8002588:	20008930 	.word	0x20008930
 800258c:	20008980 	.word	0x20008980
 8002590:	200089d0 	.word	0x200089d0

		  	  	    case 9://5ms
	    	  	   	htim3.Instance = TIM3;
 8002594:	4ba5      	ldr	r3, [pc, #660]	; (800282c <SetBT+0xa48>)
 8002596:	4aa6      	ldr	r2, [pc, #664]	; (8002830 <SetBT+0xa4c>)
 8002598:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 800259a:	4ba4      	ldr	r3, [pc, #656]	; (800282c <SetBT+0xa48>)
 800259c:	2247      	movs	r2, #71	; 0x47
 800259e:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4ba2      	ldr	r3, [pc, #648]	; (800282c <SetBT+0xa48>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 100-1;
 80025a6:	4ba1      	ldr	r3, [pc, #644]	; (800282c <SetBT+0xa48>)
 80025a8:	2263      	movs	r2, #99	; 0x63
 80025aa:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ac:	4b9f      	ldr	r3, [pc, #636]	; (800282c <SetBT+0xa48>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025b2:	4b9e      	ldr	r3, [pc, #632]	; (800282c <SetBT+0xa48>)
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 80025b8:	489c      	ldr	r0, [pc, #624]	; (800282c <SetBT+0xa48>)
 80025ba:	f008 faad 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80025be:	4b9d      	ldr	r3, [pc, #628]	; (8002834 <SetBT+0xa50>)
 80025c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025c4:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025c6:	4b9b      	ldr	r3, [pc, #620]	; (8002834 <SetBT+0xa50>)
 80025c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80025ce:	4b99      	ldr	r3, [pc, #612]	; (8002834 <SetBT+0xa50>)
 80025d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80025d6:	4b97      	ldr	r3, [pc, #604]	; (8002834 <SetBT+0xa50>)
 80025d8:	2200      	movs	r2, #0
 80025da:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80025dc:	4b95      	ldr	r3, [pc, #596]	; (8002834 <SetBT+0xa50>)
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80025e4:	4893      	ldr	r0, [pc, #588]	; (8002834 <SetBT+0xa50>)
 80025e6:	f002 fba5 	bl	8004d34 <HAL_ADC_Init>

		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80025ea:	4b93      	ldr	r3, [pc, #588]	; (8002838 <SetBT+0xa54>)
 80025ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025f0:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025f2:	4b91      	ldr	r3, [pc, #580]	; (8002838 <SetBT+0xa54>)
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80025fa:	4b8f      	ldr	r3, [pc, #572]	; (8002838 <SetBT+0xa54>)
 80025fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002602:	4b8d      	ldr	r3, [pc, #564]	; (8002838 <SetBT+0xa54>)
 8002604:	2200      	movs	r2, #0
 8002606:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002608:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <SetBT+0xa54>)
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002610:	4889      	ldr	r0, [pc, #548]	; (8002838 <SetBT+0xa54>)
 8002612:	f002 fb8f 	bl	8004d34 <HAL_ADC_Init>

		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <SetBT+0xa58>)
 8002618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800261c:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <SetBT+0xa58>)
 8002620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <SetBT+0xa58>)
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800262e:	4b83      	ldr	r3, [pc, #524]	; (800283c <SetBT+0xa58>)
 8002630:	2200      	movs	r2, #0
 8002632:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002634:	4b81      	ldr	r3, [pc, #516]	; (800283c <SetBT+0xa58>)
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 800263c:	487f      	ldr	r0, [pc, #508]	; (800283c <SetBT+0xa58>)
 800263e:	f002 fb79 	bl	8004d34 <HAL_ADC_Init>

		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002642:	4b7f      	ldr	r3, [pc, #508]	; (8002840 <SetBT+0xa5c>)
 8002644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002648:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <SetBT+0xa5c>)
 800264c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002652:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <SetBT+0xa5c>)
 8002654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 800265a:	4b79      	ldr	r3, [pc, #484]	; (8002840 <SetBT+0xa5c>)
 800265c:	2200      	movs	r2, #0
 800265e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002660:	4b77      	ldr	r3, [pc, #476]	; (8002840 <SetBT+0xa5c>)
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002668:	4875      	ldr	r0, [pc, #468]	; (8002840 <SetBT+0xa5c>)
 800266a:	f002 fb63 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800266e:	e236      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 10://10ms
	    	  	   	htim3.Instance = TIM3;
 8002670:	4b6e      	ldr	r3, [pc, #440]	; (800282c <SetBT+0xa48>)
 8002672:	4a6f      	ldr	r2, [pc, #444]	; (8002830 <SetBT+0xa4c>)
 8002674:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002676:	4b6d      	ldr	r3, [pc, #436]	; (800282c <SetBT+0xa48>)
 8002678:	2247      	movs	r2, #71	; 0x47
 800267a:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <SetBT+0xa48>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 200-1;
 8002682:	4b6a      	ldr	r3, [pc, #424]	; (800282c <SetBT+0xa48>)
 8002684:	22c7      	movs	r2, #199	; 0xc7
 8002686:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <SetBT+0xa48>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <SetBT+0xa48>)
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002694:	4865      	ldr	r0, [pc, #404]	; (800282c <SetBT+0xa48>)
 8002696:	f008 fa3f 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800269a:	4b66      	ldr	r3, [pc, #408]	; (8002834 <SetBT+0xa50>)
 800269c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026a0:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <SetBT+0xa50>)
 80026a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80026aa:	4b62      	ldr	r3, [pc, #392]	; (8002834 <SetBT+0xa50>)
 80026ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 80026b2:	4b60      	ldr	r3, [pc, #384]	; (8002834 <SetBT+0xa50>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <SetBT+0xa50>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 80026c0:	485c      	ldr	r0, [pc, #368]	; (8002834 <SetBT+0xa50>)
 80026c2:	f002 fb37 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <SetBT+0xa54>)
 80026c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026cc:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026ce:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <SetBT+0xa54>)
 80026d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <SetBT+0xa54>)
 80026d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <SetBT+0xa54>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <SetBT+0xa54>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80026ec:	4852      	ldr	r0, [pc, #328]	; (8002838 <SetBT+0xa54>)
 80026ee:	f002 fb21 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80026f2:	4b52      	ldr	r3, [pc, #328]	; (800283c <SetBT+0xa58>)
 80026f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026f8:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026fa:	4b50      	ldr	r3, [pc, #320]	; (800283c <SetBT+0xa58>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <SetBT+0xa58>)
 8002704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <SetBT+0xa58>)
 800270c:	2200      	movs	r2, #0
 800270e:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002710:	4b4a      	ldr	r3, [pc, #296]	; (800283c <SetBT+0xa58>)
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002718:	4848      	ldr	r0, [pc, #288]	; (800283c <SetBT+0xa58>)
 800271a:	f002 fb0b 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800271e:	4b48      	ldr	r3, [pc, #288]	; (8002840 <SetBT+0xa5c>)
 8002720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002724:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002726:	4b46      	ldr	r3, [pc, #280]	; (8002840 <SetBT+0xa5c>)
 8002728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <SetBT+0xa5c>)
 8002730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002736:	4b42      	ldr	r3, [pc, #264]	; (8002840 <SetBT+0xa5c>)
 8002738:	2200      	movs	r2, #0
 800273a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 800273c:	4b40      	ldr	r3, [pc, #256]	; (8002840 <SetBT+0xa5c>)
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002744:	483e      	ldr	r0, [pc, #248]	; (8002840 <SetBT+0xa5c>)
 8002746:	f002 faf5 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 800274a:	e1c8      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 11://20ms
	    	  	   	htim3.Instance = TIM3;
 800274c:	4b37      	ldr	r3, [pc, #220]	; (800282c <SetBT+0xa48>)
 800274e:	4a38      	ldr	r2, [pc, #224]	; (8002830 <SetBT+0xa4c>)
 8002750:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <SetBT+0xa48>)
 8002754:	2247      	movs	r2, #71	; 0x47
 8002756:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <SetBT+0xa48>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 400-1;
 800275e:	4b33      	ldr	r3, [pc, #204]	; (800282c <SetBT+0xa48>)
 8002760:	f240 128f 	movw	r2, #399	; 0x18f
 8002764:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002766:	4b31      	ldr	r3, [pc, #196]	; (800282c <SetBT+0xa48>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800276c:	4b2f      	ldr	r3, [pc, #188]	; (800282c <SetBT+0xa48>)
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002772:	482e      	ldr	r0, [pc, #184]	; (800282c <SetBT+0xa48>)
 8002774:	f008 f9d0 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <SetBT+0xa50>)
 800277a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800277e:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002780:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <SetBT+0xa50>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <SetBT+0xa50>)
 800278a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <SetBT+0xa50>)
 8002792:	2200      	movs	r2, #0
 8002794:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <SetBT+0xa50>)
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 800279e:	4825      	ldr	r0, [pc, #148]	; (8002834 <SetBT+0xa50>)
 80027a0:	f002 fac8 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <SetBT+0xa54>)
 80027a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027aa:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <SetBT+0xa54>)
 80027ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <SetBT+0xa54>)
 80027b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <SetBT+0xa54>)
 80027be:	2200      	movs	r2, #0
 80027c0:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <SetBT+0xa54>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80027ca:	481b      	ldr	r0, [pc, #108]	; (8002838 <SetBT+0xa54>)
 80027cc:	f002 fab2 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <SetBT+0xa58>)
 80027d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027d6:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <SetBT+0xa58>)
 80027da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <SetBT+0xa58>)
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <SetBT+0xa58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <SetBT+0xa58>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80027f6:	4811      	ldr	r0, [pc, #68]	; (800283c <SetBT+0xa58>)
 80027f8:	f002 fa9c 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <SetBT+0xa5c>)
 80027fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002802:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <SetBT+0xa5c>)
 8002806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <SetBT+0xa5c>)
 800280e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <SetBT+0xa5c>)
 8002816:	2200      	movs	r2, #0
 8002818:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <SetBT+0xa5c>)
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <SetBT+0xa5c>)
 8002824:	f002 fa86 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 8002828:	e159      	b.n	8002ade <SetBT+0xcfa>
 800282a:	bf00      	nop
 800282c:	20008c84 	.word	0x20008c84
 8002830:	40000400 	.word	0x40000400
 8002834:	200088e0 	.word	0x200088e0
 8002838:	20008930 	.word	0x20008930
 800283c:	20008980 	.word	0x20008980
 8002840:	200089d0 	.word	0x200089d0

		  	  	    case 12://50ms
	    	  	   	htim3.Instance = TIM3;
 8002844:	4ba7      	ldr	r3, [pc, #668]	; (8002ae4 <SetBT+0xd00>)
 8002846:	4aa8      	ldr	r2, [pc, #672]	; (8002ae8 <SetBT+0xd04>)
 8002848:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 800284a:	4ba6      	ldr	r3, [pc, #664]	; (8002ae4 <SetBT+0xd00>)
 800284c:	2247      	movs	r2, #71	; 0x47
 800284e:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002850:	4ba4      	ldr	r3, [pc, #656]	; (8002ae4 <SetBT+0xd00>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 1000-1;
 8002856:	4ba3      	ldr	r3, [pc, #652]	; (8002ae4 <SetBT+0xd00>)
 8002858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800285c:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285e:	4ba1      	ldr	r3, [pc, #644]	; (8002ae4 <SetBT+0xd00>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002864:	4b9f      	ldr	r3, [pc, #636]	; (8002ae4 <SetBT+0xd00>)
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 800286a:	489e      	ldr	r0, [pc, #632]	; (8002ae4 <SetBT+0xd00>)
 800286c:	f008 f954 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002870:	4b9e      	ldr	r3, [pc, #632]	; (8002aec <SetBT+0xd08>)
 8002872:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002876:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002878:	4b9c      	ldr	r3, [pc, #624]	; (8002aec <SetBT+0xd08>)
 800287a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002880:	4b9a      	ldr	r3, [pc, #616]	; (8002aec <SetBT+0xd08>)
 8002882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002888:	4b98      	ldr	r3, [pc, #608]	; (8002aec <SetBT+0xd08>)
 800288a:	2200      	movs	r2, #0
 800288c:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 800288e:	4b97      	ldr	r3, [pc, #604]	; (8002aec <SetBT+0xd08>)
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002896:	4895      	ldr	r0, [pc, #596]	; (8002aec <SetBT+0xd08>)
 8002898:	f002 fa4c 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800289c:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <SetBT+0xd0c>)
 800289e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028a2:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <SetBT+0xd0c>)
 80028a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80028ac:	4b90      	ldr	r3, [pc, #576]	; (8002af0 <SetBT+0xd0c>)
 80028ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 80028b4:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <SetBT+0xd0c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 80028ba:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <SetBT+0xd0c>)
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80028c2:	488b      	ldr	r0, [pc, #556]	; (8002af0 <SetBT+0xd0c>)
 80028c4:	f002 fa36 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028c8:	4b8a      	ldr	r3, [pc, #552]	; (8002af4 <SetBT+0xd10>)
 80028ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ce:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028d0:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <SetBT+0xd10>)
 80028d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80028d8:	4b86      	ldr	r3, [pc, #536]	; (8002af4 <SetBT+0xd10>)
 80028da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80028e0:	4b84      	ldr	r3, [pc, #528]	; (8002af4 <SetBT+0xd10>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80028e6:	4b83      	ldr	r3, [pc, #524]	; (8002af4 <SetBT+0xd10>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80028ee:	4881      	ldr	r0, [pc, #516]	; (8002af4 <SetBT+0xd10>)
 80028f0:	f002 fa20 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028f4:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <SetBT+0xd14>)
 80028f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028fa:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <SetBT+0xd14>)
 80028fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002904:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <SetBT+0xd14>)
 8002906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 800290c:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <SetBT+0xd14>)
 800290e:	2200      	movs	r2, #0
 8002910:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002912:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <SetBT+0xd14>)
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 800291a:	4877      	ldr	r0, [pc, #476]	; (8002af8 <SetBT+0xd14>)
 800291c:	f002 fa0a 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 8002920:	e0dd      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 13://100ms
	    	  	   	htim3.Instance = TIM3;
 8002922:	4b70      	ldr	r3, [pc, #448]	; (8002ae4 <SetBT+0xd00>)
 8002924:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <SetBT+0xd04>)
 8002926:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002928:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <SetBT+0xd00>)
 800292a:	2247      	movs	r2, #71	; 0x47
 800292c:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b6d      	ldr	r3, [pc, #436]	; (8002ae4 <SetBT+0xd00>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 2000-1;
 8002934:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <SetBT+0xd00>)
 8002936:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800293a:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293c:	4b69      	ldr	r3, [pc, #420]	; (8002ae4 <SetBT+0xd00>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002942:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <SetBT+0xd00>)
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002948:	4866      	ldr	r0, [pc, #408]	; (8002ae4 <SetBT+0xd00>)
 800294a:	f008 f8e5 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <SetBT+0xd08>)
 8002950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002954:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002956:	4b65      	ldr	r3, [pc, #404]	; (8002aec <SetBT+0xd08>)
 8002958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <SetBT+0xd08>)
 8002960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002966:	4b61      	ldr	r3, [pc, #388]	; (8002aec <SetBT+0xd08>)
 8002968:	2200      	movs	r2, #0
 800296a:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 800296c:	4b5f      	ldr	r3, [pc, #380]	; (8002aec <SetBT+0xd08>)
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002974:	485d      	ldr	r0, [pc, #372]	; (8002aec <SetBT+0xd08>)
 8002976:	f002 f9dd 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <SetBT+0xd0c>)
 800297c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002980:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <SetBT+0xd0c>)
 8002984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800298a:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <SetBT+0xd0c>)
 800298c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <SetBT+0xd0c>)
 8002994:	2200      	movs	r2, #0
 8002996:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <SetBT+0xd0c>)
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 80029a0:	4853      	ldr	r0, [pc, #332]	; (8002af0 <SetBT+0xd0c>)
 80029a2:	f002 f9c7 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80029a6:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <SetBT+0xd10>)
 80029a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ac:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029ae:	4b51      	ldr	r3, [pc, #324]	; (8002af4 <SetBT+0xd10>)
 80029b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80029b6:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <SetBT+0xd10>)
 80029b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 80029be:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <SetBT+0xd10>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <SetBT+0xd10>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 80029cc:	4849      	ldr	r0, [pc, #292]	; (8002af4 <SetBT+0xd10>)
 80029ce:	f002 f9b1 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <SetBT+0xd14>)
 80029d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d8:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <SetBT+0xd14>)
 80029dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <SetBT+0xd14>)
 80029e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <SetBT+0xd14>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <SetBT+0xd14>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 80029f8:	483f      	ldr	r0, [pc, #252]	; (8002af8 <SetBT+0xd14>)
 80029fa:	f002 f99b 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 80029fe:	e06e      	b.n	8002ade <SetBT+0xcfa>

		  	  	    case 14://200ms
	    	  	   	htim3.Instance = TIM3;
 8002a00:	4b38      	ldr	r3, [pc, #224]	; (8002ae4 <SetBT+0xd00>)
 8002a02:	4a39      	ldr	r2, [pc, #228]	; (8002ae8 <SetBT+0xd04>)
 8002a04:	601a      	str	r2, [r3, #0]
	    	  	    htim3.Init.Prescaler = 72-1;
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <SetBT+0xd00>)
 8002a08:	2247      	movs	r2, #71	; 0x47
 8002a0a:	605a      	str	r2, [r3, #4]
	    	  	    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <SetBT+0xd00>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
		  	  	    htim3.Init.Period = 4000-1;
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <SetBT+0xd00>)
 8002a14:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002a18:	60da      	str	r2, [r3, #12]
		  	  	    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <SetBT+0xd00>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
		  	  	    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <SetBT+0xd00>)
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	619a      	str	r2, [r3, #24]
		  	  	    HAL_TIM_Base_Init(&htim3);
 8002a26:	482f      	ldr	r0, [pc, #188]	; (8002ae4 <SetBT+0xd00>)
 8002a28:	f008 f876 	bl	800ab18 <HAL_TIM_Base_Init>

		  	  	    hadc1.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <SetBT+0xd08>)
 8002a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a32:	605a      	str	r2, [r3, #4]
		  	  	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <SetBT+0xd08>)
 8002a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <SetBT+0xd08>)
 8002a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc1.Init.ContinuousConvMode = DISABLE;
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <SetBT+0xd08>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	765a      	strb	r2, [r3, #25]
		  	  	    hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <SetBT+0xd08>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc1);
 8002a52:	4826      	ldr	r0, [pc, #152]	; (8002aec <SetBT+0xd08>)
 8002a54:	f002 f96e 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc2.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <SetBT+0xd0c>)
 8002a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a5e:	605a      	str	r2, [r3, #4]
		  	  	    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <SetBT+0xd0c>)
 8002a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <SetBT+0xd0c>)
 8002a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc2.Init.ContinuousConvMode = DISABLE;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <SetBT+0xd0c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	765a      	strb	r2, [r3, #25]
		  	  	    hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <SetBT+0xd0c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc2);
 8002a7e:	481c      	ldr	r0, [pc, #112]	; (8002af0 <SetBT+0xd0c>)
 8002a80:	f002 f958 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc3.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <SetBT+0xd10>)
 8002a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a8a:	605a      	str	r2, [r3, #4]
		  	  	    hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <SetBT+0xd10>)
 8002a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <SetBT+0xd10>)
 8002a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc3.Init.ContinuousConvMode = DISABLE;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <SetBT+0xd10>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	765a      	strb	r2, [r3, #25]
		  	  	    hadc3.Init.DMAContinuousRequests = ENABLE;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <SetBT+0xd10>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc3);
 8002aaa:	4812      	ldr	r0, [pc, #72]	; (8002af4 <SetBT+0xd10>)
 8002aac:	f002 f942 	bl	8004d34 <HAL_ADC_Init>
		  	  	    hadc4.Init.ClockPrescaler  = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <SetBT+0xd14>)
 8002ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ab6:	605a      	str	r2, [r3, #4]
		  	  	    hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <SetBT+0xd14>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
		  	  	    hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <SetBT+0xd14>)
 8002ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
		  	  	    hadc4.Init.ContinuousConvMode = DISABLE;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <SetBT+0xd14>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	765a      	strb	r2, [r3, #25]
		  	  	    hadc4.Init.DMAContinuousRequests = ENABLE;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <SetBT+0xd14>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		  	  	    HAL_ADC_Init(&hadc4);
 8002ad6:	4808      	ldr	r0, [pc, #32]	; (8002af8 <SetBT+0xd14>)
 8002ad8:	f002 f92c 	bl	8004d34 <HAL_ADC_Init>
		  	  	    break;
 8002adc:	bf00      	nop

  	}
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20008c84 	.word	0x20008c84
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	200088e0 	.word	0x200088e0
 8002af0:	20008930 	.word	0x20008930
 8002af4:	20008980 	.word	0x20008980
 8002af8:	200089d0 	.word	0x200089d0

08002afc <AtencionTecla>:
//*********************************************************************************************
// TOUCH
//*********************************************************************************************

void AtencionTecla()
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af04      	add	r7, sp, #16
	char str[23],i;

	unsigned char l_m_Pantalla=m_Pantalla;
 8002b02:	4ba5      	ldr	r3, [pc, #660]	; (8002d98 <AtencionTecla+0x29c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	75fb      	strb	r3, [r7, #23]
	unsigned int ValorPista1,ValorPista2;

	XPT2046_TouchGetCoordinates();
 8002b08:	f016 f8a6 	bl	8018c58 <XPT2046_TouchGetCoordinates>

	if(m_Pantalla==1 || m_Pantalla==3)
 8002b0c:	4ba2      	ldr	r3, [pc, #648]	; (8002d98 <AtencionTecla+0x29c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d003      	beq.n	8002b1c <AtencionTecla+0x20>
 8002b14:	4ba0      	ldr	r3, [pc, #640]	; (8002d98 <AtencionTecla+0x29c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d116      	bne.n	8002b4a <AtencionTecla+0x4e>
	{
		if(BOW_Activo(34,200,18) )
 8002b1c:	2212      	movs	r2, #18
 8002b1e:	21c8      	movs	r1, #200	; 0xc8
 8002b20:	2022      	movs	r0, #34	; 0x22
 8002b22:	f015 fed9 	bl	80188d8 <BOW_Activo>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00e      	beq.n	8002b4a <AtencionTecla+0x4e>
		{ 
			BOW(34,200,2,18,INGRESAR);									
 8002b2c:	4b9b      	ldr	r3, [pc, #620]	; (8002d9c <AtencionTecla+0x2a0>)
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2312      	movs	r3, #18
 8002b32:	2202      	movs	r2, #2
 8002b34:	21c8      	movs	r1, #200	; 0xc8
 8002b36:	2022      	movs	r0, #34	; 0x22
 8002b38:	f014 fc30 	bl	801739c <BOW>
			FondoTeclas();
 8002b3c:	f015 fe38 	bl	80187b0 <FondoTeclas>
			m_Pantalla++;
 8002b40:	4b95      	ldr	r3, [pc, #596]	; (8002d98 <AtencionTecla+0x29c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a94      	ldr	r2, [pc, #592]	; (8002d98 <AtencionTecla+0x29c>)
 8002b48:	6013      	str	r3, [r2, #0]
		}	 
	}
	if(m_Pantalla== MENU_PRINCIPAL+1)
 8002b4a:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <AtencionTecla+0x29c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d101      	bne.n	8002b56 <AtencionTecla+0x5a>
	{
		MenuAtencion();
 8002b52:	f016 f80d 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla==CONFIGURAR+1)
 8002b56:	4b90      	ldr	r3, [pc, #576]	; (8002d98 <AtencionTecla+0x29c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f241 3289 	movw	r2, #5001	; 0x1389
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <AtencionTecla+0x6a>
	{
		MenuAtencion();
 8002b62:	f016 f805 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla==WIFI+1)
 8002b66:	4b8c      	ldr	r3, [pc, #560]	; (8002d98 <AtencionTecla+0x29c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f241 4251 	movw	r2, #5201	; 0x1451
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <AtencionTecla+0x7a>
	{
		MenuAtencion();
 8002b72:	f015 fffd 	bl	8018b70 <MenuAtencion>
	}

	if(m_Pantalla==WIFI_SSID+1)
 8002b76:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <AtencionTecla+0x29c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f241 425b 	movw	r2, #5211	; 0x145b
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d106      	bne.n	8002b90 <AtencionTecla+0x94>
	{
		f_TECLADO_ALFA_Input(fBOT,WIFI_MANDAR_SSID,WIFI);
 8002b82:	f241 4250 	movw	r2, #5200	; 0x1450
 8002b86:	f241 4182 	movw	r1, #5250	; 0x1482
 8002b8a:	4885      	ldr	r0, [pc, #532]	; (8002da0 <AtencionTecla+0x2a4>)
 8002b8c:	f013 fc2a 	bl	80163e4 <f_TECLADO_ALFA_Input>
	}
	if(m_Pantalla==WIFI_PASS+1 )
 8002b90:	4b81      	ldr	r3, [pc, #516]	; (8002d98 <AtencionTecla+0x29c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f241 4265 	movw	r2, #5221	; 0x1465
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d106      	bne.n	8002baa <AtencionTecla+0xae>
	{
		f_TECLADO_ALFA_Input(fBOT,WIFI_MANDAR_PASS,WIFI);
 8002b9c:	f241 4250 	movw	r2, #5200	; 0x1450
 8002ba0:	f241 418c 	movw	r1, #5260	; 0x148c
 8002ba4:	487e      	ldr	r0, [pc, #504]	; (8002da0 <AtencionTecla+0x2a4>)
 8002ba6:	f013 fc1d 	bl	80163e4 <f_TECLADO_ALFA_Input>





	if(m_Pantalla==HARDWARE_PASS+1)
 8002baa:	4b7b      	ldr	r3, [pc, #492]	; (8002d98 <AtencionTecla+0x29c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f241 32f7 	movw	r2, #5111	; 0x13f7
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d105      	bne.n	8002bc2 <AtencionTecla+0xc6>
	{
		f_TECLADO_ALFA_Input(fBOT,HARDWARE_VERIF_PASS,MENU_PRINCIPAL);
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002bbc:	4878      	ldr	r0, [pc, #480]	; (8002da0 <AtencionTecla+0x2a4>)
 8002bbe:	f013 fc11 	bl	80163e4 <f_TECLADO_ALFA_Input>
	}
	if(m_Pantalla==HARDWARE+1)
 8002bc2:	4b75      	ldr	r3, [pc, #468]	; (8002d98 <AtencionTecla+0x29c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f241 32ed 	movw	r2, #5101	; 0x13ed
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <AtencionTecla+0xd6>
	{
		MenuAtencion();
 8002bce:	f015 ffcf 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_INVERTER+1)
 8002bd2:	4b71      	ldr	r3, [pc, #452]	; (8002d98 <AtencionTecla+0x29c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f241 4229 	movw	r2, #5161	; 0x1429
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <AtencionTecla+0xe6>
	{
		MenuAtencion();
 8002bde:	f015 ffc7 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_MPPT+1)
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <AtencionTecla+0x29c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f241 4233 	movw	r2, #5171	; 0x1433
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <AtencionTecla+0xf6>
	{
		MenuAtencion();
 8002bee:	f015 ffbf 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_PRESET_DAB+1)
 8002bf2:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <AtencionTecla+0x29c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f241 423d 	movw	r2, #5181	; 0x143d
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <AtencionTecla+0x106>
	{
		MenuAtencion();
 8002bfe:	f015 ffb7 	bl	8018b70 <MenuAtencion>
	}
	if(m_Pantalla == HARDWARE_SET_SISTEMA+1)
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <AtencionTecla+0x29c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f241 420b 	movw	r2, #5131	; 0x140b
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	f040 810b 	bne.w	8002e26 <AtencionTecla+0x32a>
	{
		//CONFIGURACION VERTICAL CANAL X

		if(BCO_Activo(4,55,0,4)==1)
 8002c10:	2304      	movs	r3, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	2137      	movs	r1, #55	; 0x37
 8002c16:	2004      	movs	r0, #4
 8002c18:	f014 fa7e 	bl	8017118 <BCO_Activo>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10b      	bne.n	8002c3a <AtencionTecla+0x13e>
			BCO(CORREDERA,4,55,1,4,1,"NO DC AC GND");
 8002c22:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <AtencionTecla+0x2a8>)
 8002c24:	9302      	str	r3, [sp, #8]
 8002c26:	2301      	movs	r3, #1
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	2237      	movs	r2, #55	; 0x37
 8002c32:	2104      	movs	r1, #4
 8002c34:	485c      	ldr	r0, [pc, #368]	; (8002da8 <AtencionTecla+0x2ac>)
 8002c36:	f014 f8e7 	bl	8016e08 <BCO>
		if(BCO_Activo(4,55,0,4)==2)
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2137      	movs	r1, #55	; 0x37
 8002c40:	2004      	movs	r0, #4
 8002c42:	f014 fa69 	bl	8017118 <BCO_Activo>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d10b      	bne.n	8002c64 <AtencionTecla+0x168>
			BCO(CORREDERA,4,55,1,4,2,"NO DC AC GND");
 8002c4c:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <AtencionTecla+0x2a8>)
 8002c4e:	9302      	str	r3, [sp, #8]
 8002c50:	2302      	movs	r3, #2
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2304      	movs	r3, #4
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	2237      	movs	r2, #55	; 0x37
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4852      	ldr	r0, [pc, #328]	; (8002da8 <AtencionTecla+0x2ac>)
 8002c60:	f014 f8d2 	bl	8016e08 <BCO>
		if(BCO_Activo(4,55,0,4)==3)
 8002c64:	2304      	movs	r3, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	2137      	movs	r1, #55	; 0x37
 8002c6a:	2004      	movs	r0, #4
 8002c6c:	f014 fa54 	bl	8017118 <BCO_Activo>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d10b      	bne.n	8002c8e <AtencionTecla+0x192>
			BCO(CORREDERA,4,55,1,4,3,"NO DC AC GND");
 8002c76:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <AtencionTecla+0x2a8>)
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	2304      	movs	r3, #4
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2301      	movs	r3, #1
 8002c84:	2237      	movs	r2, #55	; 0x37
 8002c86:	2104      	movs	r1, #4
 8002c88:	4847      	ldr	r0, [pc, #284]	; (8002da8 <AtencionTecla+0x2ac>)
 8002c8a:	f014 f8bd 	bl	8016e08 <BCO>
		if(BCO_Activo(4,55,0,4)==4)
 8002c8e:	2304      	movs	r3, #4
 8002c90:	2200      	movs	r2, #0
 8002c92:	2137      	movs	r1, #55	; 0x37
 8002c94:	2004      	movs	r0, #4
 8002c96:	f014 fa3f 	bl	8017118 <BCO_Activo>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d10b      	bne.n	8002cb8 <AtencionTecla+0x1bc>
			BCO(CORREDERA,4,55,1,4,4,"NO DC AC GND");
 8002ca0:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <AtencionTecla+0x2a8>)
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2304      	movs	r3, #4
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2301      	movs	r3, #1
 8002cae:	2237      	movs	r2, #55	; 0x37
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	483d      	ldr	r0, [pc, #244]	; (8002da8 <AtencionTecla+0x2ac>)
 8002cb4:	f014 f8a8 	bl	8016e08 <BCO>
		if(BCO_Activo(210,55,0,2)==1)
 8002cb8:	2302      	movs	r3, #2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2137      	movs	r1, #55	; 0x37
 8002cbe:	20d2      	movs	r0, #210	; 0xd2
 8002cc0:	f014 fa2a 	bl	8017118 <BCO_Activo>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10b      	bne.n	8002ce2 <AtencionTecla+0x1e6>
			BCO(CORREDERA,200,55,1,2,1,"SI  NO");
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <AtencionTecla+0x2b0>)
 8002ccc:	9302      	str	r3, [sp, #8]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	2237      	movs	r2, #55	; 0x37
 8002cda:	21c8      	movs	r1, #200	; 0xc8
 8002cdc:	4832      	ldr	r0, [pc, #200]	; (8002da8 <AtencionTecla+0x2ac>)
 8002cde:	f014 f893 	bl	8016e08 <BCO>
		if(BCO_Activo(210,55,0,2)==2)
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2137      	movs	r1, #55	; 0x37
 8002ce8:	20d2      	movs	r0, #210	; 0xd2
 8002cea:	f014 fa15 	bl	8017118 <BCO_Activo>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d10b      	bne.n	8002d0c <AtencionTecla+0x210>
			BCO(CORREDERA,200,55,1,2,2,"SI  NO");
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <AtencionTecla+0x2b0>)
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2301      	movs	r3, #1
 8002d02:	2237      	movs	r2, #55	; 0x37
 8002d04:	21c8      	movs	r1, #200	; 0xc8
 8002d06:	4828      	ldr	r0, [pc, #160]	; (8002da8 <AtencionTecla+0x2ac>)
 8002d08:	f014 f87e 	bl	8016e08 <BCO>

		if(CHECK_CIRC_Activo(4,160))
 8002d0c:	21a0      	movs	r1, #160	; 0xa0
 8002d0e:	2004      	movs	r0, #4
 8002d10:	f014 fb16 	bl	8017340 <CHECK_CIRC_Activo>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <AtencionTecla+0x246>
		{
			if(m_GrupoElectr==0) m_GrupoElectr=1;
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <AtencionTecla+0x22e>
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e002      	b.n	8002d30 <AtencionTecla+0x234>
			else				 m_GrupoElectr=0;
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(4,160,"GRUPO","ELECTR.",m_GrupoElectr);
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <AtencionTecla+0x2b8>)
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <AtencionTecla+0x2bc>)
 8002d3a:	21a0      	movs	r1, #160	; 0xa0
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	f014 faa4 	bl	801728a <CHECK_CIRC>
		}
		if(CHECK_CIRC_Activo(114,160))
 8002d42:	21a0      	movs	r1, #160	; 0xa0
 8002d44:	2072      	movs	r0, #114	; 0x72
 8002d46:	f014 fafb 	bl	8017340 <CHECK_CIRC_Activo>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <AtencionTecla+0x27c>
		{
			if(m_GenEolico==0) 	m_GenEolico=1;
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <AtencionTecla+0x2c0>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <AtencionTecla+0x264>
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <AtencionTecla+0x2c0>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <AtencionTecla+0x26a>
			else				m_GenEolico=0;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <AtencionTecla+0x2c0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(114,160,"GENER.","EOLICO",m_GenEolico);
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <AtencionTecla+0x2c0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <AtencionTecla+0x2c4>)
 8002d6e:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <AtencionTecla+0x2c8>)
 8002d70:	21a0      	movs	r1, #160	; 0xa0
 8002d72:	2072      	movs	r0, #114	; 0x72
 8002d74:	f014 fa89 	bl	801728a <CHECK_CIRC>
		}
		if(CHECK_CIRC_Activo(224,160))
 8002d78:	21a0      	movs	r1, #160	; 0xa0
 8002d7a:	20e0      	movs	r0, #224	; 0xe0
 8002d7c:	f014 fae0 	bl	8017340 <CHECK_CIRC_Activo>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02b      	beq.n	8002dde <AtencionTecla+0x2e2>
		{
			if(m_GrupoElectr==0) m_GrupoElectr=1;
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11c      	bne.n	8002dc8 <AtencionTecla+0x2cc>
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <AtencionTecla+0x2b4>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e01b      	b.n	8002dce <AtencionTecla+0x2d2>
 8002d96:	bf00      	nop
 8002d98:	2000478c 	.word	0x2000478c
 8002d9c:	0801ba38 	.word	0x0801ba38
 8002da0:	2000362c 	.word	0x2000362c
 8002da4:	0801b704 	.word	0x0801b704
 8002da8:	0801c74c 	.word	0x0801c74c
 8002dac:	0801b714 	.word	0x0801b714
 8002db0:	2000484d 	.word	0x2000484d
 8002db4:	0801b71c 	.word	0x0801b71c
 8002db8:	0801b724 	.word	0x0801b724
 8002dbc:	2000484c 	.word	0x2000484c
 8002dc0:	0801b72c 	.word	0x0801b72c
 8002dc4:	0801b734 	.word	0x0801b734
			else				 m_GrupoElectr=0;
 8002dc8:	4bb5      	ldr	r3, [pc, #724]	; (80030a0 <AtencionTecla+0x5a4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
			CHECK_CIRC(224,160,"RESERV.","",0);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4bb4      	ldr	r3, [pc, #720]	; (80030a4 <AtencionTecla+0x5a8>)
 8002dd4:	4ab4      	ldr	r2, [pc, #720]	; (80030a8 <AtencionTecla+0x5ac>)
 8002dd6:	21a0      	movs	r1, #160	; 0xa0
 8002dd8:	20e0      	movs	r0, #224	; 0xe0
 8002dda:	f014 fa56 	bl	801728a <CHECK_CIRC>
		}
		if(BOW_Activo(3,202,11) )
 8002dde:	220b      	movs	r2, #11
 8002de0:	21ca      	movs	r1, #202	; 0xca
 8002de2:	2003      	movs	r0, #3
 8002de4:	f015 fd78 	bl	80188d8 <BOW_Activo>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <AtencionTecla+0x302>
		{
			BOW(3,202,2,11,"OK");
 8002dee:	4baf      	ldr	r3, [pc, #700]	; (80030ac <AtencionTecla+0x5b0>)
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	230b      	movs	r3, #11
 8002df4:	2202      	movs	r2, #2
 8002df6:	21ca      	movs	r1, #202	; 0xca
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f014 facf 	bl	801739c <BOW>
			//Grabar Datos en SD
		}

		if(BOW_Activo(162,202,11) )
 8002dfe:	220b      	movs	r2, #11
 8002e00:	21ca      	movs	r1, #202	; 0xca
 8002e02:	20a2      	movs	r0, #162	; 0xa2
 8002e04:	f015 fd68 	bl	80188d8 <BOW_Activo>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <AtencionTecla+0x32a>
		{
			BOW(162,202,2,11,SALIR);
 8002e0e:	4ba8      	ldr	r3, [pc, #672]	; (80030b0 <AtencionTecla+0x5b4>)
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	230b      	movs	r3, #11
 8002e14:	2202      	movs	r2, #2
 8002e16:	21ca      	movs	r1, #202	; 0xca
 8002e18:	20a2      	movs	r0, #162	; 0xa2
 8002e1a:	f014 fabf 	bl	801739c <BOW>
			m_Pantalla=HARDWARE;
 8002e1e:	4ba5      	ldr	r3, [pc, #660]	; (80030b4 <AtencionTecla+0x5b8>)
 8002e20:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8002e24:	601a      	str	r2, [r3, #0]

	}

	if
	(
		m_Pantalla == HARDWARE_PRESET_INVERTER0+1 	||
 8002e26:	4ba3      	ldr	r3, [pc, #652]	; (80030b4 <AtencionTecla+0x5b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
	(
 8002e2a:	f241 422b 	movw	r2, #5163	; 0x142b
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d012      	beq.n	8002e58 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_MPPT0+1  		||
 8002e32:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <AtencionTecla+0x5b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_INVERTER0+1 	||
 8002e36:	f241 4235 	movw	r2, #5173	; 0x1435
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00c      	beq.n	8002e58 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_DAB0+1 		||
 8002e3e:	4b9d      	ldr	r3, [pc, #628]	; (80030b4 <AtencionTecla+0x5b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_MPPT0+1  		||
 8002e42:	f241 423f 	movw	r2, #5183	; 0x143f
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d006      	beq.n	8002e58 <AtencionTecla+0x35c>
		m_Pantalla == HARDWARE_PRESET_DAB1+1
 8002e4a:	4b9a      	ldr	r3, [pc, #616]	; (80030b4 <AtencionTecla+0x5b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
		m_Pantalla == HARDWARE_PRESET_DAB0+1 		||
 8002e4e:	f241 4241 	movw	r2, #5185	; 0x1441
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 8104 	bne.w	8003060 <AtencionTecla+0x564>
	)
	{
		if( BOT_Activo(BOT_AIZQ,2,83))
 8002e58:	2253      	movs	r2, #83	; 0x53
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	4896      	ldr	r0, [pc, #600]	; (80030b8 <AtencionTecla+0x5bc>)
 8002e5e:	f015 fd6d 	bl	801893c <BOT_Activo>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02a      	beq.n	8002ebe <AtencionTecla+0x3c2>
		{
			BOT(BOT_AIZQ,2,83,1);
 8002e68:	2301      	movs	r3, #1
 8002e6a:	2253      	movs	r2, #83	; 0x53
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4892      	ldr	r0, [pc, #584]	; (80030b8 <AtencionTecla+0x5bc>)
 8002e70:	f014 f9d8 	bl	8017224 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8002e74:	f015 fef0 	bl	8018c58 <XPT2046_TouchGetCoordinates>
				if(m_IndicePot1>1) m_IndicePot1--;
 8002e78:	4b90      	ldr	r3, [pc, #576]	; (80030bc <AtencionTecla+0x5c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	dd04      	ble.n	8002e8a <AtencionTecla+0x38e>
 8002e80:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <AtencionTecla+0x5c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	4a8d      	ldr	r2, [pc, #564]	; (80030bc <AtencionTecla+0x5c0>)
 8002e88:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,35,95,2,0,m_IndicePot1);
 8002e8a:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <AtencionTecla+0x5c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2302      	movs	r3, #2
 8002e98:	225f      	movs	r2, #95	; 0x5f
 8002e9a:	2123      	movs	r1, #35	; 0x23
 8002e9c:	4888      	ldr	r0, [pc, #544]	; (80030c0 <AtencionTecla+0x5c4>)
 8002e9e:	f013 fa77 	bl	8016390 <f_PEL>

			}while(BOT_Activo(BOT_AIZQ,2,83) );
 8002ea2:	2253      	movs	r2, #83	; 0x53
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4884      	ldr	r0, [pc, #528]	; (80030b8 <AtencionTecla+0x5bc>)
 8002ea8:	f015 fd48 	bl	801893c <BOT_Activo>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1e0      	bne.n	8002e74 <AtencionTecla+0x378>
	        BOT(BOT_AIZQ,2,83,0);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2253      	movs	r2, #83	; 0x53
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	487f      	ldr	r0, [pc, #508]	; (80030b8 <AtencionTecla+0x5bc>)
 8002eba:	f014 f9b3 	bl	8017224 <BOT>
		}
		if( BOT_Activo(BOT_ADER,127,83))
 8002ebe:	2253      	movs	r2, #83	; 0x53
 8002ec0:	217f      	movs	r1, #127	; 0x7f
 8002ec2:	4880      	ldr	r0, [pc, #512]	; (80030c4 <AtencionTecla+0x5c8>)
 8002ec4:	f015 fd3a 	bl	801893c <BOT_Activo>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d02a      	beq.n	8002f24 <AtencionTecla+0x428>
		{
			BOT(BOT_ADER,127,83,1);
 8002ece:	2301      	movs	r3, #1
 8002ed0:	2253      	movs	r2, #83	; 0x53
 8002ed2:	217f      	movs	r1, #127	; 0x7f
 8002ed4:	487b      	ldr	r0, [pc, #492]	; (80030c4 <AtencionTecla+0x5c8>)
 8002ed6:	f014 f9a5 	bl	8017224 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8002eda:	f015 febd 	bl	8018c58 <XPT2046_TouchGetCoordinates>
				if(m_IndicePot1<18) m_IndicePot1++;
 8002ede:	4b77      	ldr	r3, [pc, #476]	; (80030bc <AtencionTecla+0x5c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	dc04      	bgt.n	8002ef0 <AtencionTecla+0x3f4>
 8002ee6:	4b75      	ldr	r3, [pc, #468]	; (80030bc <AtencionTecla+0x5c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a73      	ldr	r2, [pc, #460]	; (80030bc <AtencionTecla+0x5c0>)
 8002eee:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,35,95,2,0,m_IndicePot1);
 8002ef0:	4b72      	ldr	r3, [pc, #456]	; (80030bc <AtencionTecla+0x5c0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2302      	movs	r3, #2
 8002efe:	225f      	movs	r2, #95	; 0x5f
 8002f00:	2123      	movs	r1, #35	; 0x23
 8002f02:	486f      	ldr	r0, [pc, #444]	; (80030c0 <AtencionTecla+0x5c4>)
 8002f04:	f013 fa44 	bl	8016390 <f_PEL>

			}while(BOT_Activo(BOT_ADER,127,83) );
 8002f08:	2253      	movs	r2, #83	; 0x53
 8002f0a:	217f      	movs	r1, #127	; 0x7f
 8002f0c:	486d      	ldr	r0, [pc, #436]	; (80030c4 <AtencionTecla+0x5c8>)
 8002f0e:	f015 fd15 	bl	801893c <BOT_Activo>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e0      	bne.n	8002eda <AtencionTecla+0x3de>
	        BOT(BOT_ADER,127,83,0);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2253      	movs	r2, #83	; 0x53
 8002f1c:	217f      	movs	r1, #127	; 0x7f
 8002f1e:	4869      	ldr	r0, [pc, #420]	; (80030c4 <AtencionTecla+0x5c8>)
 8002f20:	f014 f980 	bl	8017224 <BOT>
		}
		if( BOT_Activo(BOT_AIZQ,162,83))
 8002f24:	2253      	movs	r2, #83	; 0x53
 8002f26:	21a2      	movs	r1, #162	; 0xa2
 8002f28:	4863      	ldr	r0, [pc, #396]	; (80030b8 <AtencionTecla+0x5bc>)
 8002f2a:	f015 fd07 	bl	801893c <BOT_Activo>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02a      	beq.n	8002f8a <AtencionTecla+0x48e>
		{
			BOT(BOT_AIZQ,162,83,1);
 8002f34:	2301      	movs	r3, #1
 8002f36:	2253      	movs	r2, #83	; 0x53
 8002f38:	21a2      	movs	r1, #162	; 0xa2
 8002f3a:	485f      	ldr	r0, [pc, #380]	; (80030b8 <AtencionTecla+0x5bc>)
 8002f3c:	f014 f972 	bl	8017224 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8002f40:	f015 fe8a 	bl	8018c58 <XPT2046_TouchGetCoordinates>
				if(m_IndicePot2>1) m_IndicePot2--;
 8002f44:	4b60      	ldr	r3, [pc, #384]	; (80030c8 <AtencionTecla+0x5cc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	dd04      	ble.n	8002f56 <AtencionTecla+0x45a>
 8002f4c:	4b5e      	ldr	r3, [pc, #376]	; (80030c8 <AtencionTecla+0x5cc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <AtencionTecla+0x5cc>)
 8002f54:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,195,95,2,0,m_IndicePot2);
 8002f56:	4b5c      	ldr	r3, [pc, #368]	; (80030c8 <AtencionTecla+0x5cc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2302      	movs	r3, #2
 8002f64:	225f      	movs	r2, #95	; 0x5f
 8002f66:	21c3      	movs	r1, #195	; 0xc3
 8002f68:	4855      	ldr	r0, [pc, #340]	; (80030c0 <AtencionTecla+0x5c4>)
 8002f6a:	f013 fa11 	bl	8016390 <f_PEL>

			}while(BOT_Activo(BOT_AIZQ,162,83) );
 8002f6e:	2253      	movs	r2, #83	; 0x53
 8002f70:	21a2      	movs	r1, #162	; 0xa2
 8002f72:	4851      	ldr	r0, [pc, #324]	; (80030b8 <AtencionTecla+0x5bc>)
 8002f74:	f015 fce2 	bl	801893c <BOT_Activo>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e0      	bne.n	8002f40 <AtencionTecla+0x444>
	        BOT(BOT_AIZQ,162,83,0);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2253      	movs	r2, #83	; 0x53
 8002f82:	21a2      	movs	r1, #162	; 0xa2
 8002f84:	484c      	ldr	r0, [pc, #304]	; (80030b8 <AtencionTecla+0x5bc>)
 8002f86:	f014 f94d 	bl	8017224 <BOT>
		}
		if( BOT_Activo(BOT_ADER,287,83))
 8002f8a:	2253      	movs	r2, #83	; 0x53
 8002f8c:	f240 111f 	movw	r1, #287	; 0x11f
 8002f90:	484c      	ldr	r0, [pc, #304]	; (80030c4 <AtencionTecla+0x5c8>)
 8002f92:	f015 fcd3 	bl	801893c <BOT_Activo>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02d      	beq.n	8002ff8 <AtencionTecla+0x4fc>
		{
			BOT(BOT_ADER,287,83,1);
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	2253      	movs	r2, #83	; 0x53
 8002fa0:	f240 111f 	movw	r1, #287	; 0x11f
 8002fa4:	4847      	ldr	r0, [pc, #284]	; (80030c4 <AtencionTecla+0x5c8>)
 8002fa6:	f014 f93d 	bl	8017224 <BOT>
			do
			{
				XPT2046_TouchGetCoordinates();
 8002faa:	f015 fe55 	bl	8018c58 <XPT2046_TouchGetCoordinates>
				if(m_IndicePot2<18) m_IndicePot2++;
 8002fae:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <AtencionTecla+0x5cc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	dc04      	bgt.n	8002fc0 <AtencionTecla+0x4c4>
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <AtencionTecla+0x5cc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <AtencionTecla+0x5cc>)
 8002fbe:	6013      	str	r3, [r2, #0]
				f_PEL(fPEL1,195,95,2,0,m_IndicePot2);
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <AtencionTecla+0x5cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	225f      	movs	r2, #95	; 0x5f
 8002fd0:	21c3      	movs	r1, #195	; 0xc3
 8002fd2:	483b      	ldr	r0, [pc, #236]	; (80030c0 <AtencionTecla+0x5c4>)
 8002fd4:	f013 f9dc 	bl	8016390 <f_PEL>

			}while(BOT_Activo(BOT_ADER,287,83) );
 8002fd8:	2253      	movs	r2, #83	; 0x53
 8002fda:	f240 111f 	movw	r1, #287	; 0x11f
 8002fde:	4839      	ldr	r0, [pc, #228]	; (80030c4 <AtencionTecla+0x5c8>)
 8002fe0:	f015 fcac 	bl	801893c <BOT_Activo>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1df      	bne.n	8002faa <AtencionTecla+0x4ae>
			BOT(BOT_ADER,287,83,0);
 8002fea:	2300      	movs	r3, #0
 8002fec:	2253      	movs	r2, #83	; 0x53
 8002fee:	f240 111f 	movw	r1, #287	; 0x11f
 8002ff2:	4834      	ldr	r0, [pc, #208]	; (80030c4 <AtencionTecla+0x5c8>)
 8002ff4:	f014 f916 	bl	8017224 <BOT>
		}

		if(BOW_Activo(51,202,4) )
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	21ca      	movs	r1, #202	; 0xca
 8002ffc:	2033      	movs	r0, #51	; 0x33
 8002ffe:	f015 fc6b 	bl	80188d8 <BOW_Activo>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <AtencionTecla+0x51c>
		{
			BOW(51,202,2,4,"OK");
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <AtencionTecla+0x5b0>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2304      	movs	r3, #4
 800300e:	2202      	movs	r2, #2
 8003010:	21ca      	movs	r1, #202	; 0xca
 8003012:	2033      	movs	r0, #51	; 0x33
 8003014:	f014 f9c2 	bl	801739c <BOW>
		}
		if(BOW_Activo(211,202,4) )
 8003018:	2204      	movs	r2, #4
 800301a:	21ca      	movs	r1, #202	; 0xca
 800301c:	20d3      	movs	r0, #211	; 0xd3
 800301e:	f015 fc5b 	bl	80188d8 <BOW_Activo>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <AtencionTecla+0x53c>
		{
			BOW(211,202,2,4,"OK");
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <AtencionTecla+0x5b0>)
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2304      	movs	r3, #4
 800302e:	2202      	movs	r2, #2
 8003030:	21ca      	movs	r1, #202	; 0xca
 8003032:	20d3      	movs	r0, #211	; 0xd3
 8003034:	f014 f9b2 	bl	801739c <BOW>
		}

		if(BOW_Activo(117,202,6) )
 8003038:	2206      	movs	r2, #6
 800303a:	21ca      	movs	r1, #202	; 0xca
 800303c:	2075      	movs	r0, #117	; 0x75
 800303e:	f015 fc4b 	bl	80188d8 <BOW_Activo>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <AtencionTecla+0x564>
		{
			BOW(117,202,2,6,SALIR);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <AtencionTecla+0x5b4>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2306      	movs	r3, #6
 800304e:	2202      	movs	r2, #2
 8003050:	21ca      	movs	r1, #202	; 0xca
 8003052:	2075      	movs	r0, #117	; 0x75
 8003054:	f014 f9a2 	bl	801739c <BOW>
			m_Pantalla=HARDWARE;
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <AtencionTecla+0x5b8>)
 800305a:	f241 32ec 	movw	r2, #5100	; 0x13ec
 800305e:	601a      	str	r2, [r3, #0]
		}
	}
	if(	m_Pantalla == VISOR+1)
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <AtencionTecla+0x5b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8003068:	4293      	cmp	r3, r2
 800306a:	d112      	bne.n	8003092 <AtencionTecla+0x596>
	{
		if(BOW_Activo(118,3,6) )
 800306c:	2206      	movs	r2, #6
 800306e:	2103      	movs	r1, #3
 8003070:	2076      	movs	r0, #118	; 0x76
 8003072:	f015 fc31 	bl	80188d8 <BOW_Activo>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <AtencionTecla+0x596>
		{
			BOW(118,3,2,6,SALIR);
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <AtencionTecla+0x5b4>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2306      	movs	r3, #6
 8003082:	2202      	movs	r2, #2
 8003084:	2103      	movs	r1, #3
 8003086:	2076      	movs	r0, #118	; 0x76
 8003088:	f014 f988 	bl	801739c <BOW>
			m_Pantalla=MENU_PRINCIPAL;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <AtencionTecla+0x5b8>)
 800308e:	2204      	movs	r2, #4
 8003090:	601a      	str	r2, [r3, #0]
		}
	}

	if(	m_Pantalla == DES_DAB+1)
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <AtencionTecla+0x5b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f640 0235 	movw	r2, #2101	; 0x835
 800309a:	4293      	cmp	r3, r2
 800309c:	d119      	bne.n	80030d2 <AtencionTecla+0x5d6>
 800309e:	e015      	b.n	80030cc <AtencionTecla+0x5d0>
 80030a0:	2000484d 	.word	0x2000484d
 80030a4:	0801b73c 	.word	0x0801b73c
 80030a8:	0801b740 	.word	0x0801b740
 80030ac:	0801b748 	.word	0x0801b748
 80030b0:	0801ba44 	.word	0x0801ba44
 80030b4:	2000478c 	.word	0x2000478c
 80030b8:	0801caa8 	.word	0x0801caa8
 80030bc:	20004844 	.word	0x20004844
 80030c0:	2000020c 	.word	0x2000020c
 80030c4:	0801cd84 	.word	0x0801cd84
 80030c8:	20004848 	.word	0x20004848
	{
		m_Pantalla=MENU_PRINCIPAL;
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <AtencionTecla+0x65c>)
 80030ce:	2204      	movs	r2, #4
 80030d0:	601a      	str	r2, [r3, #0]
	}

	if(	m_Pantalla == DES_MPPT+1)
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <AtencionTecla+0x65c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f640 0299 	movw	r2, #2201	; 0x899
 80030da:	4293      	cmp	r3, r2
 80030dc:	d102      	bne.n	80030e4 <AtencionTecla+0x5e8>
	{
		m_Pantalla=MENU_PRINCIPAL;
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <AtencionTecla+0x65c>)
 80030e0:	2204      	movs	r2, #4
 80030e2:	601a      	str	r2, [r3, #0]
	}

	if(	m_Pantalla == DES_INVERTER+1)
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <AtencionTecla+0x65c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f640 02fd 	movw	r2, #2301	; 0x8fd
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d12c      	bne.n	800314a <AtencionTecla+0x64e>
	{
		if(m_XPanel<100 && m_BTO>0 ) m_BTO--;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <AtencionTecla+0x660>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b63      	cmp	r3, #99	; 0x63
 80030f6:	d808      	bhi.n	800310a <AtencionTecla+0x60e>
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <AtencionTecla+0x664>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <AtencionTecla+0x60e>
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <AtencionTecla+0x664>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	4a16      	ldr	r2, [pc, #88]	; (8003160 <AtencionTecla+0x664>)
 8003108:	6013      	str	r3, [r2, #0]
		if(m_XPanel>210 && m_BTO<14) m_BTO++;
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <AtencionTecla+0x660>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2bd2      	cmp	r3, #210	; 0xd2
 8003110:	d908      	bls.n	8003124 <AtencionTecla+0x628>
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <AtencionTecla+0x664>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b0d      	cmp	r3, #13
 8003118:	d804      	bhi.n	8003124 <AtencionTecla+0x628>
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <AtencionTecla+0x664>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <AtencionTecla+0x664>)
 8003122:	6013      	str	r3, [r2, #0]
		if(m_XPanel>100 && m_XPanel<210  ) m_Pantalla=MENU_PRINCIPAL;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <AtencionTecla+0x660>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d906      	bls.n	800313a <AtencionTecla+0x63e>
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <AtencionTecla+0x660>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2bd1      	cmp	r3, #209	; 0xd1
 8003132:	d802      	bhi.n	800313a <AtencionTecla+0x63e>
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <AtencionTecla+0x65c>)
 8003136:	2204      	movs	r2, #4
 8003138:	601a      	str	r2, [r3, #0]
		while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 800313a:	bf00      	nop
 800313c:	2102      	movs	r1, #2
 800313e:	4809      	ldr	r0, [pc, #36]	; (8003164 <AtencionTecla+0x668>)
 8003140:	f003 fd8e 	bl	8006c60 <HAL_GPIO_ReadPin>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f8      	beq.n	800313c <AtencionTecla+0x640>
	 }
*/



	PedidoPanel=0;
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <AtencionTecla+0x66c>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000478c 	.word	0x2000478c
 800315c:	20009d48 	.word	0x20009d48
 8003160:	200088d4 	.word	0x200088d4
 8003164:	48000400 	.word	0x48000400
 8003168:	200088dc 	.word	0x200088dc
 800316c:	00000000 	.word	0x00000000

08003170 <GenOnda>:

//uint8_t BufferRX[100];
//uint8_t Canal=1;

void GenOnda()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
	int i;

	for(i=0;i<100;i++)
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	e038      	b.n	80031ee <GenOnda+0x7e>
	{
		Seno[i]=(sin(2*PI*i/100)*1000+2048);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd f9d9 	bl	8000534 <__aeabi_i2d>
 8003182:	a323      	add	r3, pc, #140	; (adr r3, 8003210 <GenOnda+0xa0>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fa3e 	bl	8000608 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <GenOnda+0x90>)
 800319a:	f7fd fb5f 	bl	800085c <__aeabi_ddiv>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	ec43 2b17 	vmov	d7, r2, r3
 80031a6:	eeb0 0a47 	vmov.f32	s0, s14
 80031aa:	eef0 0a67 	vmov.f32	s1, s15
 80031ae:	f016 ffe7 	bl	801a180 <sin>
 80031b2:	ec51 0b10 	vmov	r0, r1, d0
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <GenOnda+0x94>)
 80031bc:	f7fd fa24 	bl	8000608 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <GenOnda+0x98>)
 80031ce:	f7fd f865 	bl	800029c <__adddf3>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fcd7 	bl	8000b8c <__aeabi_d2uiz>
 80031de:	4602      	mov	r2, r0
 80031e0:	490a      	ldr	r1, [pc, #40]	; (800320c <GenOnda+0x9c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<100;i++)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b63      	cmp	r3, #99	; 0x63
 80031f2:	ddc3      	ble.n	800317c <GenOnda+0xc>
	}
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40590000 	.word	0x40590000
 8003204:	408f4000 	.word	0x408f4000
 8003208:	40a00000 	.word	0x40a00000
 800320c:	2000946c 	.word	0x2000946c
 8003210:	1569f490 	.word	0x1569f490
 8003214:	401921fd 	.word	0x401921fd

08003218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800321e:	f001 fce1 	bl	8004be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003222:	f000 f8ad 	bl	8003380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003226:	f000 fe4f 	bl	8003ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 800322a:	f000 fdfb 	bl	8003e24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800322e:	f000 fdc9 	bl	8003dc4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8003232:	f015 fe61 	bl	8018ef8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8003236:	f000 fbc3 	bl	80039c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800323a:	f000 f90d 	bl	8003458 <MX_ADC1_Init>
  MX_ADC3_Init();
 800323e:	f000 f9d9 	bl	80035f4 <MX_ADC3_Init>
  MX_ADC4_Init();
 8003242:	f000 fa49 	bl	80036d8 <MX_ADC4_Init>
  MX_ADC2_Init();
 8003246:	f000 f977 	bl	8003538 <MX_ADC2_Init>
  MX_TIM1_Init();
 800324a:	f000 fb0b 	bl	8003864 <MX_TIM1_Init>
  MX_DAC1_Init();
 800324e:	f000 faa1 	bl	8003794 <MX_DAC1_Init>
  MX_TIM3_Init();
 8003252:	f000 fc35 	bl	8003ac0 <MX_TIM3_Init>
  MX_SPI3_Init();
 8003256:	f000 fac7 	bl	80037e8 <MX_SPI3_Init>
  MX_FATFS_Init();
 800325a:	f00c fc2d 	bl	800fab8 <MX_FATFS_Init>
  MX_TIM7_Init();
 800325e:	f000 fc7d 	bl	8003b5c <MX_TIM7_Init>
  MX_TIM8_Init();
 8003262:	f000 fcb1 	bl	8003bc8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  SD_CS_OFF;
 8003266:	2201      	movs	r2, #1
 8003268:	2108      	movs	r1, #8
 800326a:	4839      	ldr	r0, [pc, #228]	; (8003350 <main+0x138>)
 800326c:	f003 fd10 	bl	8006c90 <HAL_GPIO_WritePin>
  TFT_CS_OFF;
 8003270:	2201      	movs	r2, #1
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	4836      	ldr	r0, [pc, #216]	; (8003350 <main+0x138>)
 8003276:	f003 fd0b 	bl	8006c90 <HAL_GPIO_WritePin>
  TP_CS_OFF;
 800327a:	2201      	movs	r2, #1
 800327c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003280:	4834      	ldr	r0, [pc, #208]	; (8003354 <main+0x13c>)
 8003282:	f003 fd05 	bl	8006c90 <HAL_GPIO_WritePin>

  ILI9341_Init();
 8003286:	f00d fa1b 	bl	80106c0 <ILI9341_Init>
  ERROR_SD=0;
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <main+0x140>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
  TFT_CS_OFF;
 8003290:	2201      	movs	r2, #1
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	482e      	ldr	r0, [pc, #184]	; (8003350 <main+0x138>)
 8003296:	f003 fcfb 	bl	8006c90 <HAL_GPIO_WritePin>
  // Mount SD Card
  SD_CS_ON;
 800329a:	2200      	movs	r2, #0
 800329c:	2108      	movs	r1, #8
 800329e:	482c      	ldr	r0, [pc, #176]	; (8003350 <main+0x138>)
 80032a0:	f003 fcf6 	bl	8006c90 <HAL_GPIO_WritePin>
  if(f_mount(&fs, "",1) != FR_OK) ERROR_SD=0x01;// _Error_Handler(__FILE__, __LINE__);
 80032a4:	2201      	movs	r2, #1
 80032a6:	492d      	ldr	r1, [pc, #180]	; (800335c <main+0x144>)
 80032a8:	482d      	ldr	r0, [pc, #180]	; (8003360 <main+0x148>)
 80032aa:	f011 ffed 	bl	8015288 <f_mount>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <main+0xa2>
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <main+0x140>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* =============Initialization=============== */
  ILI9341_Init();
 80032ba:	f00d fa01 	bl	80106c0 <ILI9341_Init>
  /* USER CODE BEGIN WHILE */
  //HAL_CAN_Start(&hcan);
  //CAN1_Config();

  //HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80032be:	2100      	movs	r1, #0
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <main+0x14c>)
 80032c2:	f007 fe57 	bl	800af74 <HAL_TIM_PWM_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80032c6:	2100      	movs	r1, #0
 80032c8:	4826      	ldr	r0, [pc, #152]	; (8003364 <main+0x14c>)
 80032ca:	f009 fa3d 	bl	800c748 <HAL_TIMEx_PWMN_Start>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //Inverter
  //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2); //Inverter

  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_1,SPWM1, 256);
 80032ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <main+0x150>)
 80032d4:	2100      	movs	r1, #0
 80032d6:	4825      	ldr	r0, [pc, #148]	; (800336c <main+0x154>)
 80032d8:	f007 ffa4 	bl	800b224 <HAL_TIM_PWM_Start_DMA>
 // HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

  HAL_TIM_Base_Start(&htim3);// OSC
 80032dc:	4824      	ldr	r0, [pc, #144]	; (8003370 <main+0x158>)
 80032de:	f007 fc73 	bl	800abc8 <HAL_TIM_Base_Start>

//  HAL_TIM_Base_Start(&htim8);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80032e2:	2100      	movs	r1, #0
 80032e4:	4823      	ldr	r0, [pc, #140]	; (8003374 <main+0x15c>)
 80032e6:	f007 fd39 	bl	800ad5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_1);
 80032ea:	2100      	movs	r1, #0
 80032ec:	4821      	ldr	r0, [pc, #132]	; (8003374 <main+0x15c>)
 80032ee:	f009 fa2b 	bl	800c748 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80032f2:	2104      	movs	r1, #4
 80032f4:	481f      	ldr	r0, [pc, #124]	; (8003374 <main+0x15c>)
 80032f6:	f007 fd31 	bl	800ad5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_2);
 80032fa:	2104      	movs	r1, #4
 80032fc:	481d      	ldr	r0, [pc, #116]	; (8003374 <main+0x15c>)
 80032fe:	f009 fa23 	bl	800c748 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003302:	2108      	movs	r1, #8
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <main+0x15c>)
 8003306:	f007 fd29 	bl	800ad5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8,TIM_CHANNEL_3);
 800330a:	2108      	movs	r1, #8
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <main+0x15c>)
 800330e:	f009 fa1b 	bl	800c748 <HAL_TIMEx_PWMN_Start>

  GenOnda();
 8003312:	f7ff ff2d 	bl	8003170 <GenOnda>
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1, Seno, 100, DAC_ALIGN_12B_R);
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2364      	movs	r3, #100	; 0x64
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <main+0x160>)
 800331e:	2100      	movs	r1, #0
 8003320:	4816      	ldr	r0, [pc, #88]	; (800337c <main+0x164>)
 8003322:	f002 ff93 	bl	800624c <HAL_DAC_Start_DMA>

  AppInit();
 8003326:	f7fd fc51 	bl	8000bcc <AppInit>

  while(1)
  {
	  if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0)
 800332a:	2102      	movs	r1, #2
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <main+0x13c>)
 800332e:	f003 fc97 	bl	8006c60 <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <main+0x126>
	  {
       	  AtencionTecla();
 8003338:	f7ff fbe0 	bl	8002afc <AtencionTecla>
 800333c:	e001      	b.n	8003342 <main+0x12a>
	  }
	  else
	  {
		  AppLoop();
 800333e:	f7fd fc61 	bl	8000c04 <AppLoop>
	  }

	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8003342:	2120      	movs	r1, #32
 8003344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003348:	f003 fcba 	bl	8006cc0 <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0)
 800334c:	e7ed      	b.n	800332a <main+0x112>
 800334e:	bf00      	nop
 8003350:	48000800 	.word	0x48000800
 8003354:	48000400 	.word	0x48000400
 8003358:	20009068 	.word	0x20009068
 800335c:	0801b74c 	.word	0x0801b74c
 8003360:	20008e38 	.word	0x20008e38
 8003364:	20008bec 	.word	0x20008bec
 8003368:	2000906c 	.word	0x2000906c
 800336c:	20008c38 	.word	0x20008c38
 8003370:	20008c84 	.word	0x20008c84
 8003374:	20008d1c 	.word	0x20008d1c
 8003378:	2000946c 	.word	0x2000946c
 800337c:	20008b30 	.word	0x20008b30

08003380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0a6      	sub	sp, #152	; 0x98
 8003384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003386:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800338a:	2228      	movs	r2, #40	; 0x28
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f016 fa72 	bl	8019878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003394:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2258      	movs	r2, #88	; 0x58
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f016 fa64 	bl	8019878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80033b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80033b8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033ba:	2301      	movs	r3, #1
 80033bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033be:	2302      	movs	r3, #2
 80033c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 f94c 	bl	800867c <HAL_RCC_OscConfig>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80033ea:	f000 fe2f 	bl	800404c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ee:	230f      	movs	r3, #15
 80033f0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f2:	2302      	movs	r3, #2
 80033f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003400:	2300      	movs	r3, #0
 8003402:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003404:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f006 f98a 	bl	8009724 <HAL_RCC_ClockConfig>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003416:	f000 fe19 	bl	800404c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <SystemClock_Config+0xd4>)
 800341c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800341e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003422:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003424:	2300      	movs	r3, #0
 8003426:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003428:	2300      	movs	r3, #0
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800342c:	2300      	movs	r3, #0
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003430:	2300      	movs	r3, #0
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8003434:	2300      	movs	r3, #0
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4618      	mov	r0, r3
 800343c:	f006 fba8 	bl	8009b90 <HAL_RCCEx_PeriphCLKConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003446:	f000 fe01 	bl	800404c <Error_Handler>
  }
}
 800344a:	bf00      	nop
 800344c:	3798      	adds	r7, #152	; 0x98
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	00323002 	.word	0x00323002

08003458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800345e:	f107 031c 	add.w	r3, r7, #28
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
 8003478:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <MX_ADC1_Init+0xdc>)
 800347c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <MX_ADC1_Init+0xdc>)
 8003484:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800348a:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <MX_ADC1_Init+0xdc>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003490:	4b28      	ldr	r3, [pc, #160]	; (8003534 <MX_ADC1_Init+0xdc>)
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003496:	4b27      	ldr	r3, [pc, #156]	; (8003534 <MX_ADC1_Init+0xdc>)
 8003498:	2201      	movs	r2, #1
 800349a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <MX_ADC1_Init+0xdc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034aa:	4b22      	ldr	r3, [pc, #136]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80034b6:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034c6:	2208      	movs	r2, #8
 80034c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034d6:	4817      	ldr	r0, [pc, #92]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034d8:	f001 fc2c 	bl	8004d34 <HAL_ADC_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80034e2:	f000 fdb3 	bl	800404c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034ea:	f107 031c 	add.w	r3, r7, #28
 80034ee:	4619      	mov	r1, r3
 80034f0:	4810      	ldr	r0, [pc, #64]	; (8003534 <MX_ADC1_Init+0xdc>)
 80034f2:	f002 fa81 	bl	80059f8 <HAL_ADCEx_MultiModeConfigChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80034fc:	f000 fda6 	bl	800404c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003500:	230e      	movs	r3, #14
 8003502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003504:	2301      	movs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <MX_ADC1_Init+0xdc>)
 800351e:	f001 ff81 	bl	8005424 <HAL_ADC_ConfigChannel>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8003528:	f000 fd90 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200088e0 	.word	0x200088e0

08003538 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800353e:	463b      	mov	r3, r7
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
 800354c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <MX_ADC2_Init+0xb8>)
 8003552:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800355a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <MX_ADC2_Init+0xb4>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <MX_ADC2_Init+0xb4>)
 800356a:	2201      	movs	r2, #1
 800356c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800356e:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003578:	2200      	movs	r2, #0
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <MX_ADC2_Init+0xb4>)
 800357e:	2201      	movs	r2, #1
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003584:	2200      	movs	r2, #0
 8003586:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <MX_ADC2_Init+0xb4>)
 800358a:	2201      	movs	r2, #1
 800358c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <MX_ADC2_Init+0xb4>)
 8003598:	2204      	movs	r2, #4
 800359a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <MX_ADC2_Init+0xb4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <MX_ADC2_Init+0xb4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035a8:	4810      	ldr	r0, [pc, #64]	; (80035ec <MX_ADC2_Init+0xb4>)
 80035aa:	f001 fbc3 	bl	8004d34 <HAL_ADC_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80035b4:	f000 fd4a 	bl	800404c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80035b8:	230b      	movs	r3, #11
 80035ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035bc:	2301      	movs	r3, #1
 80035be:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035d0:	463b      	mov	r3, r7
 80035d2:	4619      	mov	r1, r3
 80035d4:	4805      	ldr	r0, [pc, #20]	; (80035ec <MX_ADC2_Init+0xb4>)
 80035d6:	f001 ff25 	bl	8005424 <HAL_ADC_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80035e0:	f000 fd34 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20008930 	.word	0x20008930
 80035f0:	50000100 	.word	0x50000100

080035f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
 8003614:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003616:	4b2e      	ldr	r3, [pc, #184]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003618:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <MX_ADC3_Init+0xe0>)
 800361a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <MX_ADC3_Init+0xdc>)
 800361e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003622:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <MX_ADC3_Init+0xdc>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003632:	2201      	movs	r2, #1
 8003634:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003640:	2200      	movs	r2, #0
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003646:	2201      	movs	r2, #1
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <MX_ADC3_Init+0xdc>)
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003650:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003652:	2201      	movs	r2, #1
 8003654:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003660:	2204      	movs	r2, #4
 8003662:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003666:	2200      	movs	r2, #0
 8003668:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <MX_ADC3_Init+0xdc>)
 800366c:	2200      	movs	r2, #0
 800366e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003670:	4817      	ldr	r0, [pc, #92]	; (80036d0 <MX_ADC3_Init+0xdc>)
 8003672:	f001 fb5f 	bl	8004d34 <HAL_ADC_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 800367c:	f000 fce6 	bl	800404c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	4619      	mov	r1, r3
 800368a:	4811      	ldr	r0, [pc, #68]	; (80036d0 <MX_ADC3_Init+0xdc>)
 800368c:	f002 f9b4 	bl	80059f8 <HAL_ADCEx_MultiModeConfigChannel>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8003696:	f000 fcd9 	bl	800404c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800369a:	230c      	movs	r3, #12
 800369c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800369e:	2301      	movs	r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <MX_ADC3_Init+0xdc>)
 80036b8:	f001 feb4 	bl	8005424 <HAL_ADC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80036c2:	f000 fcc3 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20008980 	.word	0x20008980
 80036d4:	50000400 	.word	0x50000400

080036d8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036de:	463b      	mov	r3, r7
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
 80036ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <MX_ADC4_Init+0xb4>)
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <MX_ADC4_Init+0xb8>)
 80036f2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <MX_ADC4_Init+0xb4>)
 80036f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036fa:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <MX_ADC4_Init+0xb4>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <MX_ADC4_Init+0xb4>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8003708:	4b20      	ldr	r3, [pc, #128]	; (800378c <MX_ADC4_Init+0xb4>)
 800370a:	2201      	movs	r2, #1
 800370c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800370e:	4b1f      	ldr	r3, [pc, #124]	; (800378c <MX_ADC4_Init+0xb4>)
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <MX_ADC4_Init+0xb4>)
 8003718:	2200      	movs	r2, #0
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <MX_ADC4_Init+0xb4>)
 800371e:	2201      	movs	r2, #1
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <MX_ADC4_Init+0xb4>)
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <MX_ADC4_Init+0xb4>)
 800372a:	2201      	movs	r2, #1
 800372c:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = ENABLE;
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <MX_ADC4_Init+0xb4>)
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <MX_ADC4_Init+0xb4>)
 8003738:	2204      	movs	r2, #4
 800373a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <MX_ADC4_Init+0xb4>)
 800373e:	2200      	movs	r2, #0
 8003740:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <MX_ADC4_Init+0xb4>)
 8003744:	2200      	movs	r2, #0
 8003746:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003748:	4810      	ldr	r0, [pc, #64]	; (800378c <MX_ADC4_Init+0xb4>)
 800374a:	f001 faf3 	bl	8004d34 <HAL_ADC_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8003754:	f000 fc7a 	bl	800404c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003758:	2303      	movs	r3, #3
 800375a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800375c:	2301      	movs	r3, #1
 800375e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003768:	2300      	movs	r3, #0
 800376a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003770:	463b      	mov	r3, r7
 8003772:	4619      	mov	r1, r3
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <MX_ADC4_Init+0xb4>)
 8003776:	f001 fe55 	bl	8005424 <HAL_ADC_ConfigChannel>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8003780:	f000 fc64 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8003784:	bf00      	nop
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200089d0 	.word	0x200089d0
 8003790:	50000500 	.word	0x50000500

08003794 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_DAC1_Init+0x4c>)
 80037a6:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <MX_DAC1_Init+0x50>)
 80037a8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80037aa:	480d      	ldr	r0, [pc, #52]	; (80037e0 <MX_DAC1_Init+0x4c>)
 80037ac:	f002 fd0d 	bl	80061ca <HAL_DAC_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80037b6:	f000 fc49 	bl	800404c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80037ba:	2324      	movs	r3, #36	; 0x24
 80037bc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	2200      	movs	r2, #0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_DAC1_Init+0x4c>)
 80037ca:	f002 fdfb 	bl	80063c4 <HAL_DAC_ConfigChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80037d4:	f000 fc3a 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20008b30 	.word	0x20008b30
 80037e4:	40007400 	.word	0x40007400

080037e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <MX_SPI3_Init+0x74>)
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <MX_SPI3_Init+0x78>)
 80037f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <MX_SPI3_Init+0x74>)
 80037f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80037fa:	4b18      	ldr	r3, [pc, #96]	; (800385c <MX_SPI3_Init+0x74>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <MX_SPI3_Init+0x74>)
 8003802:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003806:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <MX_SPI3_Init+0x74>)
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <MX_SPI3_Init+0x74>)
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <MX_SPI3_Init+0x74>)
 8003816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <MX_SPI3_Init+0x74>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <MX_SPI3_Init+0x74>)
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <MX_SPI3_Init+0x74>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <MX_SPI3_Init+0x74>)
 8003830:	2200      	movs	r2, #0
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <MX_SPI3_Init+0x74>)
 8003836:	2207      	movs	r2, #7
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <MX_SPI3_Init+0x74>)
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <MX_SPI3_Init+0x74>)
 8003842:	2208      	movs	r2, #8
 8003844:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <MX_SPI3_Init+0x74>)
 8003848:	f006 fbc0 	bl	8009fcc <HAL_SPI_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003852:	f000 fbfb 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20008b88 	.word	0x20008b88
 8003860:	40003c00 	.word	0x40003c00

08003864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b09a      	sub	sp, #104	; 0x68
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800386a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003878:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
 8003894:	615a      	str	r2, [r3, #20]
 8003896:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	222c      	movs	r2, #44	; 0x2c
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f015 ffea 	bl	8019878 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038a4:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038a6:	4a45      	ldr	r2, [pc, #276]	; (80039bc <MX_TIM1_Init+0x158>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 80038aa:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038ac:	f240 22cf 	movw	r2, #719	; 0x2cf
 80038b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80038b8:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80038be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c0:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038c6:	4b3c      	ldr	r3, [pc, #240]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038d2:	4839      	ldr	r0, [pc, #228]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038d4:	f007 f920 	bl	800ab18 <HAL_TIM_Base_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80038de:	f000 fbb5 	bl	800404c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ec:	4619      	mov	r1, r3
 80038ee:	4832      	ldr	r0, [pc, #200]	; (80039b8 <MX_TIM1_Init+0x154>)
 80038f0:	f008 f8f0 	bl	800bad4 <HAL_TIM_ConfigClockSource>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80038fa:	f000 fba7 	bl	800404c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80038fe:	482e      	ldr	r0, [pc, #184]	; (80039b8 <MX_TIM1_Init+0x154>)
 8003900:	f007 f9ca 	bl	800ac98 <HAL_TIM_PWM_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800390a:	f000 fb9f 	bl	800404c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390e:	2300      	movs	r3, #0
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800391a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800391e:	4619      	mov	r1, r3
 8003920:	4825      	ldr	r0, [pc, #148]	; (80039b8 <MX_TIM1_Init+0x154>)
 8003922:	f008 ffcb 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800392c:	f000 fb8e 	bl	800404c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003930:	2360      	movs	r3, #96	; 0x60
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000-1;
 8003934:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800393a:	2300      	movs	r3, #0
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800393e:	2300      	movs	r3, #0
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003942:	2304      	movs	r3, #4
 8003944:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003952:	2200      	movs	r2, #0
 8003954:	4619      	mov	r1, r3
 8003956:	4818      	ldr	r0, [pc, #96]	; (80039b8 <MX_TIM1_Init+0x154>)
 8003958:	f007 ffa8 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8003962:	f000 fb73 	bl	800404c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8003972:	23ff      	movs	r3, #255	; 0xff
 8003974:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800397a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <MX_TIM1_Init+0x154>)
 800399c:	f009 f81a 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80039a6:	f000 fb51 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039aa:	4803      	ldr	r0, [pc, #12]	; (80039b8 <MX_TIM1_Init+0x154>)
 80039ac:	f000 fe98 	bl	80046e0 <HAL_TIM_MspPostInit>

}
 80039b0:	bf00      	nop
 80039b2:	3768      	adds	r7, #104	; 0x68
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20008bec 	.word	0x20008bec
 80039bc:	40012c00 	.word	0x40012c00

080039c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e0:	463b      	mov	r3, r7
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	60da      	str	r2, [r3, #12]
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	615a      	str	r2, [r3, #20]
 80039f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <MX_TIM2_Init+0xfc>)
 80039f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039fa:	4b30      	ldr	r3, [pc, #192]	; (8003abc <MX_TIM2_Init+0xfc>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600-1;
 8003a06:	4b2d      	ldr	r3, [pc, #180]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a08:	f640 620f 	movw	r2, #3599	; 0xe0f
 8003a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a14:	4b29      	ldr	r3, [pc, #164]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a1a:	4828      	ldr	r0, [pc, #160]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a1c:	f007 f87c 	bl	800ab18 <HAL_TIM_Base_Init>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a26:	f000 fb11 	bl	800404c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a34:	4619      	mov	r1, r3
 8003a36:	4821      	ldr	r0, [pc, #132]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a38:	f008 f84c 	bl	800bad4 <HAL_TIM_ConfigClockSource>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003a42:	f000 fb03 	bl	800404c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a46:	481d      	ldr	r0, [pc, #116]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a48:	f007 f926 	bl	800ac98 <HAL_TIM_PWM_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003a52:	f000 fafb 	bl	800404c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a5e:	f107 031c 	add.w	r3, r7, #28
 8003a62:	4619      	mov	r1, r3
 8003a64:	4815      	ldr	r0, [pc, #84]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a66:	f008 ff29 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003a70:	f000 faec 	bl	800404c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a74:	2360      	movs	r3, #96	; 0x60
 8003a76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1200;
 8003a78:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8003a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a86:	463b      	mov	r3, r7
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480b      	ldr	r0, [pc, #44]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a8e:	f007 ff0d 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003a98:	f000 fad8 	bl	800404c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0208 	bic.w	r2, r2, #8
 8003aaa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <MX_TIM2_Init+0xfc>)
 8003aae:	f000 fe17 	bl	80046e0 <HAL_TIM_MspPostInit>

}
 8003ab2:	bf00      	nop
 8003ab4:	3738      	adds	r7, #56	; 0x38
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20008c38 	.word	0x20008c38

08003ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ac6:	f107 0310 	add.w	r3, r7, #16
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <MX_TIM3_Init+0x98>)
 8003ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003ae6:	2248      	movs	r2, #72	; 0x48
 8003ae8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003af2:	220a      	movs	r2, #10
 8003af4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af6:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b02:	4814      	ldr	r0, [pc, #80]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003b04:	f007 f808 	bl	800ab18 <HAL_TIM_Base_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003b0e:	f000 fa9d 	bl	800404c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480d      	ldr	r0, [pc, #52]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003b20:	f007 ffd8 	bl	800bad4 <HAL_TIM_ConfigClockSource>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003b2a:	f000 fa8f 	bl	800404c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b2e:	2320      	movs	r3, #32
 8003b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4806      	ldr	r0, [pc, #24]	; (8003b54 <MX_TIM3_Init+0x94>)
 8003b3c:	f008 febe 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b46:	f000 fa81 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b4a:	bf00      	nop
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20008c84 	.word	0x20008c84
 8003b58:	40000400 	.word	0x40000400

08003b5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b6e:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <MX_TIM7_Init+0x68>)
 8003b70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 300;
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b80:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003b8e:	f006 ffc3 	bl	800ab18 <HAL_TIM_Base_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003b98:	f000 fa58 	bl	800404c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_TIM7_Init+0x64>)
 8003baa:	f008 fe87 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003bb4:	f000 fa4a 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20008cd0 	.word	0x20008cd0
 8003bc4:	40001400 	.word	0x40001400

08003bc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b09a      	sub	sp, #104	; 0x68
 8003bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
 8003bf8:	615a      	str	r2, [r3, #20]
 8003bfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	222c      	movs	r2, #44	; 0x2c
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f015 fe38 	bl	8019878 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c08:	4b6b      	ldr	r3, [pc, #428]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <MX_TIM8_Init+0x1f4>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003c14:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c16:	2220      	movs	r2, #32
 8003c18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 800;
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c28:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003c34:	4860      	ldr	r0, [pc, #384]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c36:	f006 ff6f 	bl	800ab18 <HAL_TIM_Base_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003c40:	f000 fa04 	bl	800404c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4859      	ldr	r0, [pc, #356]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c52:	f007 ff3f 	bl	800bad4 <HAL_TIM_ConfigClockSource>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003c5c:	f000 f9f6 	bl	800404c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003c60:	4855      	ldr	r0, [pc, #340]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c62:	f007 f819 	bl	800ac98 <HAL_TIM_PWM_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003c6c:	f000 f9ee 	bl	800404c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8003c74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c78:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c82:	4619      	mov	r1, r3
 8003c84:	484c      	ldr	r0, [pc, #304]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003c86:	f008 fe19 	bl	800c8bc <HAL_TIMEx_MasterConfigSynchronization>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8003c90:	f000 f9dc 	bl	800404c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;
 8003c94:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <MX_TIM8_Init+0x1f8>)
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8003c98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483f      	ldr	r0, [pc, #252]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003cbc:	f007 fdf6 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM8_Init+0x102>
  {
    Error_Handler();
 8003cc6:	f000 f9c1 	bl	800404c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0208 	bic.w	r2, r2, #8
 8003cd8:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4834      	ldr	r0, [pc, #208]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003ce8:	f007 fde0 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003cf2:	f000 f9ab 	bl	800404c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 500;
 8003d06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d14:	2208      	movs	r2, #8
 8003d16:	4619      	mov	r1, r3
 8003d18:	4827      	ldr	r0, [pc, #156]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d1a:	f007 fdc7 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 8003d24:	f000 f992 	bl	800404c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_3);
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0208 	bic.w	r2, r2, #8
 8003d36:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d40:	220c      	movs	r2, #12
 8003d42:	4619      	mov	r1, r3
 8003d44:	481c      	ldr	r0, [pc, #112]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d46:	f007 fdb1 	bl	800b8ac <HAL_TIM_PWM_ConfigChannel>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8003d50:	f000 f97c 	bl	800404c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_4);
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8003d70:	2364      	movs	r3, #100	; 0x64
 8003d72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4807      	ldr	r0, [pc, #28]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003d9a:	f008 fe1b 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM8_Init+0x1e0>
  {
    Error_Handler();
 8003da4:	f000 f952 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003da8:	4803      	ldr	r0, [pc, #12]	; (8003db8 <MX_TIM8_Init+0x1f0>)
 8003daa:	f000 fc99 	bl	80046e0 <HAL_TIM_MspPostInit>

}
 8003dae:	bf00      	nop
 8003db0:	3768      	adds	r7, #104	; 0x68
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20008d1c 	.word	0x20008d1c
 8003dbc:	40013400 	.word	0x40013400
 8003dc0:	00010060 	.word	0x00010060

08003dc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <MX_USART2_UART_Init+0x5c>)
 8003dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dd0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003de2:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dea:	220c      	movs	r2, #12
 8003dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e06:	4805      	ldr	r0, [pc, #20]	; (8003e1c <MX_USART2_UART_Init+0x58>)
 8003e08:	f008 fead 	bl	800cb66 <HAL_UART_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e12:	f000 f91b 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20008dac 	.word	0x20008dac
 8003e20:	40004400 	.word	0x40004400

08003e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6153      	str	r3, [r2, #20]
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6153      	str	r3, [r2, #20]
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <MX_DMA_Init+0xa0>)
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	200b      	movs	r0, #11
 8003e60:	f002 f97d 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e64:	200b      	movs	r0, #11
 8003e66:	f002 f996 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	200d      	movs	r0, #13
 8003e70:	f002 f975 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e74:	200d      	movs	r0, #13
 8003e76:	f002 f98e 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	200f      	movs	r0, #15
 8003e80:	f002 f96d 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003e84:	200f      	movs	r0, #15
 8003e86:	f002 f986 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	203a      	movs	r0, #58	; 0x3a
 8003e90:	f002 f965 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003e94:	203a      	movs	r0, #58	; 0x3a
 8003e96:	f002 f97e 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	203b      	movs	r0, #59	; 0x3b
 8003ea0:	f002 f95d 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003ea4:	203b      	movs	r0, #59	; 0x3b
 8003ea6:	f002 f976 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	203c      	movs	r0, #60	; 0x3c
 8003eb0:	f002 f955 	bl	800615e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003eb4:	203c      	movs	r0, #60	; 0x3c
 8003eb6:	f002 f96e 	bl	8006196 <HAL_NVIC_EnableIRQ>

}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ee8:	6153      	str	r3, [r2, #20]
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ef6:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003efc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f00:	6153      	str	r3, [r2, #20]
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4a39      	ldr	r2, [pc, #228]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f18:	6153      	str	r3, [r2, #20]
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f30:	6153      	str	r3, [r2, #20]
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <MX_GPIO_Init+0x130>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f44f 7166 	mov.w	r1, #920	; 0x398
 8003f44:	482d      	ldr	r0, [pc, #180]	; (8003ffc <MX_GPIO_Init+0x134>)
 8003f46:	f002 fea3 	bl	8006c90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f52:	f002 fe9d 	bl	8006c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003f56:	2200      	movs	r2, #0
 8003f58:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8003f5c:	4828      	ldr	r0, [pc, #160]	; (8004000 <MX_GPIO_Init+0x138>)
 8003f5e:	f002 fe97 	bl	8006c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
 8003f62:	f44f 7366 	mov.w	r3, #920	; 0x398
 8003f66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f70:	2300      	movs	r3, #0
 8003f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4820      	ldr	r0, [pc, #128]	; (8003ffc <MX_GPIO_Init+0x134>)
 8003f7c:	f002 fce6 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f80:	2320      	movs	r3, #32
 8003f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f84:	2301      	movs	r3, #1
 8003f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4619      	mov	r1, r3
 8003f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9a:	f002 fcd7 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003f9e:	f248 0302 	movw	r3, #32770	; 0x8002
 8003fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4813      	ldr	r0, [pc, #76]	; (8004000 <MX_GPIO_Init+0x138>)
 8003fb4:	f002 fcca 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc6:	f107 0314 	add.w	r3, r7, #20
 8003fca:	4619      	mov	r1, r3
 8003fcc:	480c      	ldr	r0, [pc, #48]	; (8004000 <MX_GPIO_Init+0x138>)
 8003fce:	f002 fcbd 	bl	800694c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14;
 8003fd2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4805      	ldr	r0, [pc, #20]	; (8004000 <MX_GPIO_Init+0x138>)
 8003fec:	f002 fcae 	bl	800694c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ff0:	bf00      	nop
 8003ff2:	3728      	adds	r7, #40	; 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	48000800 	.word	0x48000800
 8004000:	48000400 	.word	0x48000400

08004004 <HAL_TIM_PeriodElapsedCallback>:

*/


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10f      	bne.n	8004036 <HAL_TIM_PeriodElapsedCallback+0x32>
  {

	  DMA1_Channel5->CCR &= ~DMA_CCR_EN; // disable
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6013      	str	r3, [r2, #0]
	  DMA1_Channel5->CNDTR = 256;
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004028:	605a      	str	r2, [r3, #4]
	  DMA1_Channel5->CCR |= DMA_CCR_EN; // re-enable
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a06      	ldr	r2, [pc, #24]	; (8004048 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6013      	str	r3, [r2, #0]
		}
		break;
	}
  }
  */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40020058 	.word	0x40020058

0800404c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <HAL_MspInit+0x44>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <HAL_MspInit+0x44>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6193      	str	r3, [r2, #24]
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_MspInit+0x44>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_MspInit+0x44>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <HAL_MspInit+0x44>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	61d3      	str	r3, [r2, #28]
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_MspInit+0x44>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004092:	2007      	movs	r0, #7
 8004094:	f002 f858 	bl	8006148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b090      	sub	sp, #64	; 0x40
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d157      	bne.n	8004176 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	4a89      	ldr	r2, [pc, #548]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 80040ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040d0:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10b      	bne.n	80040f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80040d8:	4b87      	ldr	r3, [pc, #540]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4a86      	ldr	r2, [pc, #536]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6153      	str	r3, [r2, #20]
 80040e4:	4b84      	ldr	r3, [pc, #528]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f0:	4b81      	ldr	r3, [pc, #516]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4a80      	ldr	r2, [pc, #512]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040fa:	6153      	str	r3, [r2, #20]
 80040fc:	4b7e      	ldr	r3, [pc, #504]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410e:	2303      	movs	r3, #3
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411a:	4619      	mov	r1, r3
 800411c:	4877      	ldr	r0, [pc, #476]	; (80042fc <HAL_ADC_MspInit+0x258>)
 800411e:	f002 fc15 	bl	800694c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004122:	4b77      	ldr	r3, [pc, #476]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004124:	4a77      	ldr	r2, [pc, #476]	; (8004304 <HAL_ADC_MspInit+0x260>)
 8004126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004128:	4b75      	ldr	r3, [pc, #468]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800412e:	4b74      	ldr	r3, [pc, #464]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004134:	4b72      	ldr	r3, [pc, #456]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800413a:	4b71      	ldr	r3, [pc, #452]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 800413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004142:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800414a:	4b6d      	ldr	r3, [pc, #436]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 800414c:	2200      	movs	r2, #0
 800414e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004150:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004152:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004156:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004158:	4869      	ldr	r0, [pc, #420]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 800415a:	f002 fa0a 	bl	8006572 <HAL_DMA_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8004164:	f7ff ff72 	bl	800404c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a65      	ldr	r2, [pc, #404]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
 800416e:	4a64      	ldr	r2, [pc, #400]	; (8004300 <HAL_ADC_MspInit+0x25c>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004174:	e13c      	b.n	80043f0 <HAL_ADC_MspInit+0x34c>
  else if(hadc->Instance==ADC2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a63      	ldr	r2, [pc, #396]	; (8004308 <HAL_ADC_MspInit+0x264>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d15c      	bne.n	800423a <HAL_ADC_MspInit+0x196>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004180:	4b5c      	ldr	r3, [pc, #368]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a5b      	ldr	r2, [pc, #364]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 8004188:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800418a:	4b5a      	ldr	r3, [pc, #360]	; (80042f4 <HAL_ADC_MspInit+0x250>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10b      	bne.n	80041aa <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004192:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6153      	str	r3, [r2, #20]
 800419e:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	623b      	str	r3, [r7, #32]
 80041a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041aa:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80041b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b4:	6153      	str	r3, [r2, #20]
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80041c2:	2320      	movs	r3, #32
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c6:	2303      	movs	r3, #3
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d2:	4619      	mov	r1, r3
 80041d4:	484d      	ldr	r0, [pc, #308]	; (800430c <HAL_ADC_MspInit+0x268>)
 80041d6:	f002 fbb9 	bl	800694c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel3;
 80041da:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041dc:	4a4d      	ldr	r2, [pc, #308]	; (8004314 <HAL_ADC_MspInit+0x270>)
 80041de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e0:	4b4b      	ldr	r3, [pc, #300]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80041ec:	4b48      	ldr	r3, [pc, #288]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041fa:	4b45      	ldr	r3, [pc, #276]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 80041fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004200:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004208:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 800420a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800420e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004210:	483f      	ldr	r0, [pc, #252]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 8004212:	f002 f9ae 	bl	8006572 <HAL_DMA_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 800421c:	f7ff ff16 	bl	800404c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 8004220:	4b3d      	ldr	r3, [pc, #244]	; (8004318 <HAL_ADC_MspInit+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3c      	ldr	r2, [pc, #240]	; (8004318 <HAL_ADC_MspInit+0x274>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422a:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a38      	ldr	r2, [pc, #224]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <HAL_ADC_MspInit+0x26c>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004238:	e0da      	b.n	80043f0 <HAL_ADC_MspInit+0x34c>
  else if(hadc->Instance==ADC3)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a37      	ldr	r2, [pc, #220]	; (800431c <HAL_ADC_MspInit+0x278>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d173      	bne.n	800432c <HAL_ADC_MspInit+0x288>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_ADC_MspInit+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a35      	ldr	r2, [pc, #212]	; (8004320 <HAL_ADC_MspInit+0x27c>)
 800424c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800424e:	4b34      	ldr	r3, [pc, #208]	; (8004320 <HAL_ADC_MspInit+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10b      	bne.n	800426e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 800425c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004260:	6153      	str	r3, [r2, #20]
 8004262:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004278:	6153      	str	r3, [r2, #20]
 800427a:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_ADC_MspInit+0x254>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004286:	2301      	movs	r3, #1
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800428a:	2303      	movs	r3, #3
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004296:	4619      	mov	r1, r3
 8004298:	4818      	ldr	r0, [pc, #96]	; (80042fc <HAL_ADC_MspInit+0x258>)
 800429a:	f002 fb57 	bl	800694c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800429e:	4b21      	ldr	r3, [pc, #132]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042a0:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_ADC_MspInit+0x284>)
 80042a2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042bc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042c4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80042d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80042d4:	4813      	ldr	r0, [pc, #76]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042d6:	f002 f94c 	bl	8006572 <HAL_DMA_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_ADC_MspInit+0x240>
      Error_Handler();
 80042e0:	f7ff feb4 	bl	800404c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_ADC_MspInit+0x280>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6253      	str	r3, [r2, #36]	; 0x24
}
 80042f0:	e07e      	b.n	80043f0 <HAL_ADC_MspInit+0x34c>
 80042f2:	bf00      	nop
 80042f4:	200095fc 	.word	0x200095fc
 80042f8:	40021000 	.word	0x40021000
 80042fc:	48000400 	.word	0x48000400
 8004300:	20008a20 	.word	0x20008a20
 8004304:	40020008 	.word	0x40020008
 8004308:	50000100 	.word	0x50000100
 800430c:	48000800 	.word	0x48000800
 8004310:	20008a64 	.word	0x20008a64
 8004314:	40020430 	.word	0x40020430
 8004318:	40010000 	.word	0x40010000
 800431c:	50000400 	.word	0x50000400
 8004320:	20009600 	.word	0x20009600
 8004324:	20008aa8 	.word	0x20008aa8
 8004328:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_ADC_MspInit+0x354>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d15c      	bne.n	80043f0 <HAL_ADC_MspInit+0x34c>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_ADC_MspInit+0x358>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <HAL_ADC_MspInit+0x358>)
 800433e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_ADC_MspInit+0x358>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10b      	bne.n	8004360 <HAL_ADC_MspInit+0x2bc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8004348:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 800434e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004352:	6153      	str	r3, [r2, #20]
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004360:	4b27      	ldr	r3, [pc, #156]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 8004366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436a:	6153      	str	r3, [r2, #20]
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_ADC_MspInit+0x35c>)
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800437e:	2303      	movs	r3, #3
 8004380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800438a:	4619      	mov	r1, r3
 800438c:	481d      	ldr	r0, [pc, #116]	; (8004404 <HAL_ADC_MspInit+0x360>)
 800438e:	f002 fadd 	bl	800694c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel4;
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_ADC_MspInit+0x364>)
 8004394:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_ADC_MspInit+0x368>)
 8004396:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_ADC_MspInit+0x364>)
 800439a:	2200      	movs	r2, #0
 800439c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043b8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043c0:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80043c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80043c8:	480f      	ldr	r0, [pc, #60]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043ca:	f002 f8d2 	bl	8006572 <HAL_DMA_Init>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_ADC_MspInit+0x334>
      Error_Handler();
 80043d4:	f7ff fe3a 	bl	800404c <Error_Handler>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_ADC24_DMA2_CH34);
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_ADC_MspInit+0x36c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <HAL_ADC_MspInit+0x36c>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ea:	4a07      	ldr	r2, [pc, #28]	; (8004408 <HAL_ADC_MspInit+0x364>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6253      	str	r3, [r2, #36]	; 0x24
}
 80043f0:	bf00      	nop
 80043f2:	3740      	adds	r7, #64	; 0x40
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	50000500 	.word	0x50000500
 80043fc:	20009600 	.word	0x20009600
 8004400:	40021000 	.word	0x40021000
 8004404:	48000400 	.word	0x48000400
 8004408:	20008aec 	.word	0x20008aec
 800440c:	40020444 	.word	0x40020444
 8004410:	40010000 	.word	0x40010000

08004414 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2c      	ldr	r2, [pc, #176]	; (80044e4 <HAL_DAC_MspInit+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d152      	bne.n	80044dc <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a2b      	ldr	r2, [pc, #172]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 800443c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004440:	61d3      	str	r3, [r2, #28]
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	6153      	str	r3, [r2, #20]
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_DAC_MspInit+0xd4>)
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004466:	2310      	movs	r3, #16
 8004468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800446a:	2303      	movs	r3, #3
 800446c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004472:	f107 0314 	add.w	r3, r7, #20
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800447c:	f002 fa66 	bl	800694c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_DAC_MspInit+0xdc>)
 8004484:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004486:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 8004488:	2210      	movs	r2, #16
 800448a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004498:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 800449a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044aa:	2220      	movs	r2, #32
 80044ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044b6:	f002 f85c 	bl	8006572 <HAL_DMA_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80044c0:	f7ff fdc4 	bl	800404c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_DAC_MspInit+0xe0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_DAC_MspInit+0xe0>)
 80044ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044ce:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	4a05      	ldr	r2, [pc, #20]	; (80044ec <HAL_DAC_MspInit+0xd8>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80044dc:	bf00      	nop
 80044de:	3728      	adds	r7, #40	; 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40007400 	.word	0x40007400
 80044e8:	40021000 	.word	0x40021000
 80044ec:	20008b44 	.word	0x20008b44
 80044f0:	40020030 	.word	0x40020030
 80044f4:	40010000 	.word	0x40010000

080044f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_SPI_MspInit+0x7c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d128      	bne.n	800456c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_SPI_MspInit+0x80>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_SPI_MspInit+0x80>)
 8004520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004524:	61d3      	str	r3, [r2, #28]
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <HAL_SPI_MspInit+0x80>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <HAL_SPI_MspInit+0x80>)
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <HAL_SPI_MspInit+0x80>)
 8004538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453c:	6153      	str	r3, [r2, #20]
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_SPI_MspInit+0x80>)
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800454a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800454e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004558:	2303      	movs	r3, #3
 800455a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800455c:	2306      	movs	r3, #6
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	4619      	mov	r1, r3
 8004566:	4805      	ldr	r0, [pc, #20]	; (800457c <HAL_SPI_MspInit+0x84>)
 8004568:	f002 f9f0 	bl	800694c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800456c:	bf00      	nop
 800456e:	3728      	adds	r7, #40	; 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40003c00 	.word	0x40003c00
 8004578:	40021000 	.word	0x40021000
 800457c:	48000800 	.word	0x48000800

08004580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4d      	ldr	r2, [pc, #308]	; (80046c4 <HAL_TIM_Base_MspInit+0x144>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d114      	bne.n	80045bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800459c:	6193      	str	r3, [r2, #24]
 800459e:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	2100      	movs	r1, #0
 80045ae:	2019      	movs	r0, #25
 80045b0:	f001 fdd5 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80045b4:	2019      	movs	r0, #25
 80045b6:	f001 fdee 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045ba:	e07e      	b.n	80046ba <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d134      	bne.n	8004630 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045c6:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	61d3      	str	r3, [r2, #28]
 80045d2:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 80045e0:	4a3b      	ldr	r2, [pc, #236]	; (80046d0 <HAL_TIM_Base_MspInit+0x150>)
 80045e2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 80045e6:	2210      	movs	r2, #16
 80045e8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ea:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045f6:	4b35      	ldr	r3, [pc, #212]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 80045f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 8004600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004604:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 8004608:	2220      	movs	r2, #32
 800460a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800460c:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 800460e:	2200      	movs	r2, #0
 8004610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004612:	482e      	ldr	r0, [pc, #184]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 8004614:	f001 ffad 	bl	8006572 <HAL_DMA_Init>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_Base_MspInit+0xa2>
      Error_Handler();
 800461e:	f7ff fd15 	bl	800404c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a29      	ldr	r2, [pc, #164]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
 8004628:	4a28      	ldr	r2, [pc, #160]	; (80046cc <HAL_TIM_Base_MspInit+0x14c>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800462e:	e044      	b.n	80046ba <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM3)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a27      	ldr	r2, [pc, #156]	; (80046d4 <HAL_TIM_Base_MspInit+0x154>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d114      	bne.n	8004664 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	61d3      	str	r3, [r2, #28]
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 7);
 8004652:	2207      	movs	r2, #7
 8004654:	2100      	movs	r1, #0
 8004656:	201d      	movs	r0, #29
 8004658:	f001 fd81 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800465c:	201d      	movs	r0, #29
 800465e:	f001 fd9a 	bl	8006196 <HAL_NVIC_EnableIRQ>
}
 8004662:	e02a      	b.n	80046ba <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM7)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_MspInit+0x158>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d114      	bne.n	8004698 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800466e:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	61d3      	str	r3, [r2, #28]
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	2037      	movs	r0, #55	; 0x37
 800468c:	f001 fd67 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004690:	2037      	movs	r0, #55	; 0x37
 8004692:	f001 fd80 	bl	8006196 <HAL_NVIC_EnableIRQ>
}
 8004696:	e010      	b.n	80046ba <HAL_TIM_Base_MspInit+0x13a>
  else if(htim_base->Instance==TIM8)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <HAL_TIM_Base_MspInit+0x15c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10b      	bne.n	80046ba <HAL_TIM_Base_MspInit+0x13a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80046a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046ac:	6193      	str	r3, [r2, #24]
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_TIM_Base_MspInit+0x148>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	bf00      	nop
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40021000 	.word	0x40021000
 80046cc:	20008d68 	.word	0x20008d68
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40001400 	.word	0x40001400
 80046dc:	40013400 	.word	0x40013400

080046e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08c      	sub	sp, #48	; 0x30
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 031c 	add.w	r3, r7, #28
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a61      	ldr	r2, [pc, #388]	; (8004884 <HAL_TIM_MspPostInit+0x1a4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d12d      	bne.n	800475e <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4a60      	ldr	r2, [pc, #384]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 8004708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800470c:	6153      	str	r3, [r2, #20]
 800470e:	4b5e      	ldr	r3, [pc, #376]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800471a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800471e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004720:	2302      	movs	r3, #2
 8004722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004728:	2300      	movs	r3, #0
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800472c:	2304      	movs	r3, #4
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004730:	f107 031c 	add.w	r3, r7, #28
 8004734:	4619      	mov	r1, r3
 8004736:	4855      	ldr	r0, [pc, #340]	; (800488c <HAL_TIM_MspPostInit+0x1ac>)
 8004738:	f002 f908 	bl	800694c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800473c:	2301      	movs	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	2300      	movs	r3, #0
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800474c:	2302      	movs	r3, #2
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	4619      	mov	r1, r3
 8004756:	484d      	ldr	r0, [pc, #308]	; (800488c <HAL_TIM_MspPostInit+0x1ac>)
 8004758:	f002 f8f8 	bl	800694c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800475c:	e08d      	b.n	800487a <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d11d      	bne.n	80047a4 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004768:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	4a46      	ldr	r2, [pc, #280]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004772:	6153      	str	r3, [r2, #20]
 8004774:	4b44      	ldr	r3, [pc, #272]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPWM_SemicicloPositivo_Pin;
 8004780:	2301      	movs	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004784:	2302      	movs	r3, #2
 8004786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	2300      	movs	r3, #0
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004790:	2301      	movs	r3, #1
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPWM_SemicicloPositivo_GPIO_Port, &GPIO_InitStruct);
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	4619      	mov	r1, r3
 800479a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800479e:	f002 f8d5 	bl	800694c <HAL_GPIO_Init>
}
 80047a2:	e06a      	b.n	800487a <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a39      	ldr	r2, [pc, #228]	; (8004890 <HAL_TIM_MspPostInit+0x1b0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d165      	bne.n	800487a <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4a35      	ldr	r2, [pc, #212]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b8:	6153      	str	r3, [r2, #20]
 80047ba:	4b33      	ldr	r3, [pc, #204]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c6:	4b30      	ldr	r3, [pc, #192]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d0:	6153      	str	r3, [r2, #20]
 80047d2:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4a29      	ldr	r2, [pc, #164]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6153      	str	r3, [r2, #20]
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_TIM_MspPostInit+0x1a8>)
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fa:	2302      	movs	r3, #2
 80047fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004802:	2300      	movs	r3, #0
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004806:	2304      	movs	r3, #4
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800480a:	f107 031c 	add.w	r3, r7, #28
 800480e:	4619      	mov	r1, r3
 8004810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004814:	f002 f89a 	bl	800694c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004818:	2340      	movs	r3, #64	; 0x40
 800481a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481c:	2302      	movs	r3, #2
 800481e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	2300      	movs	r3, #0
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004828:	2304      	movs	r3, #4
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800482c:	f107 031c 	add.w	r3, r7, #28
 8004830:	4619      	mov	r1, r3
 8004832:	4816      	ldr	r0, [pc, #88]	; (800488c <HAL_TIM_MspPostInit+0x1ac>)
 8004834:	f002 f88a 	bl	800694c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004838:	2320      	movs	r3, #32
 800483a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	2300      	movs	r3, #0
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	2300      	movs	r3, #0
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004848:	2303      	movs	r3, #3
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484c:	f107 031c 	add.w	r3, r7, #28
 8004850:	4619      	mov	r1, r3
 8004852:	4810      	ldr	r0, [pc, #64]	; (8004894 <HAL_TIM_MspPostInit+0x1b4>)
 8004854:	f002 f87a 	bl	800694c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	2302      	movs	r3, #2
 8004860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004866:	2300      	movs	r3, #0
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800486a:	230a      	movs	r3, #10
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	4619      	mov	r1, r3
 8004874:	4807      	ldr	r0, [pc, #28]	; (8004894 <HAL_TIM_MspPostInit+0x1b4>)
 8004876:	f002 f869 	bl	800694c <HAL_GPIO_Init>
}
 800487a:	bf00      	nop
 800487c:	3730      	adds	r7, #48	; 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40021000 	.word	0x40021000
 800488c:	48000800 	.word	0x48000800
 8004890:	40013400 	.word	0x40013400
 8004894:	48000400 	.word	0x48000400

08004898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <HAL_UART_MspInit+0x7c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d128      	bne.n	800490c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a16      	ldr	r2, [pc, #88]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c4:	61d3      	str	r3, [r2, #28]
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048dc:	6153      	str	r3, [r2, #20]
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_UART_MspInit+0x80>)
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048ea:	230c      	movs	r3, #12
 80048ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048fa:	2307      	movs	r3, #7
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fe:	f107 0314 	add.w	r3, r7, #20
 8004902:	4619      	mov	r1, r3
 8004904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004908:	f002 f820 	bl	800694c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800490c:	bf00      	nop
 800490e:	3728      	adds	r7, #40	; 0x28
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40004400 	.word	0x40004400
 8004918:	40021000 	.word	0x40021000

0800491c <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <SDTimer_Handler+0x38>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <SDTimer_Handler+0x18>
    Timer1--;
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <SDTimer_Handler+0x38>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b08      	ldr	r3, [pc, #32]	; (8004954 <SDTimer_Handler+0x38>)
 8004932:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <SDTimer_Handler+0x3c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <SDTimer_Handler+0x2c>
    Timer2--;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <SDTimer_Handler+0x3c>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <SDTimer_Handler+0x3c>)
 8004946:	701a      	strb	r2, [r3, #0]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20009605 	.word	0x20009605
 8004958:	20009606 	.word	0x20009606

0800495c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800496e:	e7fe      	b.n	800496e <HardFault_Handler+0x4>

08004970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004974:	e7fe      	b.n	8004974 <MemManage_Handler+0x4>

08004976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800497a:	e7fe      	b.n	800497a <BusFault_Handler+0x4>

0800497c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004980:	e7fe      	b.n	8004980 <UsageFault_Handler+0x4>

08004982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
 FatFsCnt++;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <SysTick_Handler+0x2c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <SysTick_Handler+0x2c>)
 80049ba:	701a      	strb	r2, [r3, #0]
 if(FatFsCnt >= 10)
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <SysTick_Handler+0x2c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	d904      	bls.n	80049ce <SysTick_Handler+0x22>
 {
   FatFsCnt = 0;
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <SysTick_Handler+0x2c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
   SDTimer_Handler();
 80049ca:	f7ff ffa7 	bl	800491c <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ce:	f000 f94f 	bl	8004c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20009604 	.word	0x20009604

080049dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049e0:	4802      	ldr	r0, [pc, #8]	; (80049ec <DMA1_Channel1_IRQHandler+0x10>)
 80049e2:	f001 fea5 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20008a20 	.word	0x20008a20

080049f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <DMA1_Channel3_IRQHandler+0x10>)
 80049f6:	f001 fe9b 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20008b44 	.word	0x20008b44

08004a04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <DMA1_Channel5_IRQHandler+0x10>)
 8004a0a:	f001 fe91 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20008d68 	.word	0x20008d68

08004a18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a1e:	f006 fe25 	bl	800b66c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20008bec 	.word	0x20008bec

08004a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <TIM3_IRQHandler+0x10>)
 8004a32:	f006 fe1b 	bl	800b66c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20008c84 	.word	0x20008c84

08004a40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <TIM7_IRQHandler+0x10>)
 8004a46:	f006 fe11 	bl	800b66c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20008cd0 	.word	0x20008cd0

08004a54 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <DMA2_Channel3_IRQHandler+0x10>)
 8004a5a:	f001 fe69 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20008a64 	.word	0x20008a64

08004a68 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <DMA2_Channel4_IRQHandler+0x10>)
 8004a6e:	f001 fe5f 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20008aec 	.word	0x20008aec

08004a7c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA2_Channel5_IRQHandler+0x10>)
 8004a82:	f001 fe55 	bl	8006730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20008aa8 	.word	0x20008aa8

08004a90 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <USB_LP_IRQHandler+0x10>)
 8004a96:	f002 fa25 	bl	8006ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000c280 	.word	0x2000c280

08004aa4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <_sbrk+0x50>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <_sbrk+0x16>
		heap_end = &end;
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <_sbrk+0x50>)
 8004ab6:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <_sbrk+0x54>)
 8004ab8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <_sbrk+0x50>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <_sbrk+0x50>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	466a      	mov	r2, sp
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d907      	bls.n	8004ade <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004ace:	f014 fedb 	bl	8019888 <__errno>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	220c      	movs	r2, #12
 8004ad6:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	e006      	b.n	8004aec <_sbrk+0x48>
	}

	heap_end += incr;
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_sbrk+0x50>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <_sbrk+0x50>)
 8004ae8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004aea:	68fb      	ldr	r3, [r7, #12]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20009608 	.word	0x20009608
 8004af8:	2000c8d8 	.word	0x2000c8d8

08004afc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b00:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <SystemInit+0x84>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <SystemInit+0x84>)
 8004b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004b10:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <SystemInit+0x88>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <SystemInit+0x88>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <SystemInit+0x88>)
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4918      	ldr	r1, [pc, #96]	; (8004b84 <SystemInit+0x88>)
 8004b22:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <SystemInit+0x8c>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004b28:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <SystemInit+0x88>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <SystemInit+0x88>)
 8004b2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <SystemInit+0x88>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <SystemInit+0x88>)
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004b44:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <SystemInit+0x88>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <SystemInit+0x88>)
 8004b4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004b4e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <SystemInit+0x88>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <SystemInit+0x88>)
 8004b56:	f023 030f 	bic.w	r3, r3, #15
 8004b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <SystemInit+0x88>)
 8004b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b60:	4908      	ldr	r1, [pc, #32]	; (8004b84 <SystemInit+0x88>)
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <SystemInit+0x90>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <SystemInit+0x88>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <SystemInit+0x84>)
 8004b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b74:	609a      	str	r2, [r3, #8]
#endif
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00
 8004b84:	40021000 	.word	0x40021000
 8004b88:	f87fc00c 	.word	0xf87fc00c
 8004b8c:	ff00fccc 	.word	0xff00fccc

08004b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004b94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004b96:	e003      	b.n	8004ba0 <LoopCopyDataInit>

08004b98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004b9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004b9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004b9e:	3104      	adds	r1, #4

08004ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ba0:	480b      	ldr	r0, [pc, #44]	; (8004bd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ba4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004ba6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ba8:	d3f6      	bcc.n	8004b98 <CopyDataInit>
	ldr	r2, =_sbss
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004bac:	e002      	b.n	8004bb4 <LoopFillZerobss>

08004bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004bae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004bb0:	f842 3b04 	str.w	r3, [r2], #4

08004bb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <LoopForever+0x16>)
	cmp	r2, r3
 8004bb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004bb8:	d3f9      	bcc.n	8004bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004bba:	f7ff ff9f 	bl	8004afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bbe:	f014 fe69 	bl	8019894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004bc2:	f7fe fb29 	bl	8003218 <main>

08004bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8004bc6:	e7fe      	b.n	8004bc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bc8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004bcc:	0801d7d0 	.word	0x0801d7d0
	ldr	r0, =_sdata
 8004bd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004bd4:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8004bd8:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8004bdc:	2000c8d4 	.word	0x2000c8d4

08004be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004be0:	e7fe      	b.n	8004be0 <ADC1_2_IRQHandler>
	...

08004be4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_Init+0x28>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <HAL_Init+0x28>)
 8004bee:	f043 0310 	orr.w	r3, r3, #16
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	f001 faa7 	bl	8006148 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f000 f808 	bl	8004c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c00:	f7ff fa2c 	bl	800405c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40022000 	.word	0x40022000

08004c10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_InitTick+0x54>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_InitTick+0x58>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fabf 	bl	80061b2 <HAL_SYSTICK_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00e      	b.n	8004c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b0f      	cmp	r3, #15
 8004c42:	d80a      	bhi.n	8004c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c44:	2200      	movs	r2, #0
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	f001 fa87 	bl	800615e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <HAL_InitTick+0x5c>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000004 	.word	0x20000004
 8004c68:	2000000c 	.word	0x2000000c
 8004c6c:	20000008 	.word	0x20000008

08004c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_IncTick+0x20>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_IncTick+0x24>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_IncTick+0x24>)
 8004c82:	6013      	str	r3, [r2, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	2000960c 	.word	0x2000960c

08004c98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_GetTick+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	2000960c 	.word	0x2000960c

08004cb0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7ff ffee 	bl	8004c98 <HAL_GetTick>
 8004cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d005      	beq.n	8004cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_Delay+0x44>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004cd6:	bf00      	nop
 8004cd8:	f7ff ffde 	bl	8004c98 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d8f7      	bhi.n	8004cd8 <HAL_Delay+0x28>
  {
  }
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c

08004cf8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b09a      	sub	sp, #104	; 0x68
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e1e3      	b.n	800511c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d176      	bne.n	8004e54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d152      	bne.n	8004e14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff f98b 	bl	80040a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d13b      	bne.n	8004e14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 ffe7 	bl	8005d70 <ADC_Disable>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d12f      	bne.n	8004e14 <HAL_ADC_Init+0xe0>
 8004db4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d12b      	bne.n	8004e14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dc4:	f023 0302 	bic.w	r3, r3, #2
 8004dc8:	f043 0202 	orr.w	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004df0:	4b92      	ldr	r3, [pc, #584]	; (800503c <HAL_ADC_Init+0x308>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a92      	ldr	r2, [pc, #584]	; (8005040 <HAL_ADC_Init+0x30c>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	0c9a      	lsrs	r2, r3, #18
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e06:	e002      	b.n	8004e0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f9      	bne.n	8004e08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e30:	d110      	bne.n	8004e54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f023 0312 	bic.w	r3, r3, #18
 8004e3a:	f043 0210 	orr.w	r2, r3, #16
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f043 0201 	orr.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 8150 	bne.w	8005102 <HAL_ADC_Init+0x3ce>
 8004e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f040 814b 	bne.w	8005102 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 8143 	bne.w	8005102 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e84:	f043 0202 	orr.w	r2, r3, #2
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e94:	d004      	beq.n	8004ea0 <HAL_ADC_Init+0x16c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6a      	ldr	r2, [pc, #424]	; (8005044 <HAL_ADC_Init+0x310>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_Init+0x170>
 8004ea0:	4b69      	ldr	r3, [pc, #420]	; (8005048 <HAL_ADC_Init+0x314>)
 8004ea2:	e000      	b.n	8004ea6 <HAL_ADC_Init+0x172>
 8004ea4:	4b69      	ldr	r3, [pc, #420]	; (800504c <HAL_ADC_Init+0x318>)
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb0:	d102      	bne.n	8004eb8 <HAL_ADC_Init+0x184>
 8004eb2:	4b64      	ldr	r3, [pc, #400]	; (8005044 <HAL_ADC_Init+0x310>)
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e01a      	b.n	8004eee <HAL_ADC_Init+0x1ba>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a61      	ldr	r2, [pc, #388]	; (8005044 <HAL_ADC_Init+0x310>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d103      	bne.n	8004eca <HAL_ADC_Init+0x196>
 8004ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e011      	b.n	8004eee <HAL_ADC_Init+0x1ba>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a60      	ldr	r2, [pc, #384]	; (8005050 <HAL_ADC_Init+0x31c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d102      	bne.n	8004eda <HAL_ADC_Init+0x1a6>
 8004ed4:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <HAL_ADC_Init+0x320>)
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e009      	b.n	8004eee <HAL_ADC_Init+0x1ba>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_ADC_Init+0x320>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d102      	bne.n	8004eea <HAL_ADC_Init+0x1b6>
 8004ee4:	4b5a      	ldr	r3, [pc, #360]	; (8005050 <HAL_ADC_Init+0x31c>)
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e001      	b.n	8004eee <HAL_ADC_Init+0x1ba>
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d108      	bne.n	8004f0e <HAL_ADC_Init+0x1da>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_Init+0x1da>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_ADC_Init+0x1dc>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11c      	bne.n	8004f4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_ADC_Init+0x202>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_ADC_Init+0x202>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_ADC_Init+0x204>
 8004f36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d108      	bne.n	8004f4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7e5b      	ldrb	r3, [r3, #25]
 8004f52:	035b      	lsls	r3, r3, #13
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f58:	2a01      	cmp	r2, #1
 8004f5a:	d002      	beq.n	8004f62 <HAL_ADC_Init+0x22e>
 8004f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f60:	e000      	b.n	8004f64 <HAL_ADC_Init+0x230>
 8004f62:	2200      	movs	r2, #0
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f74:	4313      	orrs	r3, r2
 8004f76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d11b      	bne.n	8004fba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7e5b      	ldrb	r3, [r3, #25]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	045a      	lsls	r2, r3, #17
 8004f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f9c:	e00d      	b.n	8004fba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	f043 0201 	orr.w	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d054      	beq.n	800506c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a22      	ldr	r2, [pc, #136]	; (8005050 <HAL_ADC_Init+0x31c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_ADC_Init+0x2a2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_ADC_Init+0x320>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d140      	bne.n	8005058 <HAL_ADC_Init+0x324>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004fde:	d02a      	beq.n	8005036 <HAL_ADC_Init+0x302>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe8:	d022      	beq.n	8005030 <HAL_ADC_Init+0x2fc>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004ff2:	d01a      	beq.n	800502a <HAL_ADC_Init+0x2f6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004ffc:	d012      	beq.n	8005024 <HAL_ADC_Init+0x2f0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8005006:	d00a      	beq.n	800501e <HAL_ADC_Init+0x2ea>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8005010:	d002      	beq.n	8005018 <HAL_ADC_Init+0x2e4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	e023      	b.n	8005060 <HAL_ADC_Init+0x32c>
 8005018:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800501c:	e020      	b.n	8005060 <HAL_ADC_Init+0x32c>
 800501e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005022:	e01d      	b.n	8005060 <HAL_ADC_Init+0x32c>
 8005024:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005028:	e01a      	b.n	8005060 <HAL_ADC_Init+0x32c>
 800502a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800502e:	e017      	b.n	8005060 <HAL_ADC_Init+0x32c>
 8005030:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005034:	e014      	b.n	8005060 <HAL_ADC_Init+0x32c>
 8005036:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800503a:	e011      	b.n	8005060 <HAL_ADC_Init+0x32c>
 800503c:	20000004 	.word	0x20000004
 8005040:	431bde83 	.word	0x431bde83
 8005044:	50000100 	.word	0x50000100
 8005048:	50000300 	.word	0x50000300
 800504c:	50000700 	.word	0x50000700
 8005050:	50000400 	.word	0x50000400
 8005054:	50000500 	.word	0x50000500
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005064:	4313      	orrs	r3, r2
 8005066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005068:	4313      	orrs	r3, r2
 800506a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b00      	cmp	r3, #0
 8005078:	d114      	bne.n	80050a4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005088:	f023 0302 	bic.w	r3, r3, #2
 800508c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	7e1b      	ldrb	r3, [r3, #24]
 8005092:	039a      	lsls	r2, r3, #14
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4313      	orrs	r3, r2
 800509e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050a0:	4313      	orrs	r3, r2
 80050a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <HAL_ADC_Init+0x3f0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80050b4:	430b      	orrs	r3, r1
 80050b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10c      	bne.n	80050da <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f023 010f 	bic.w	r1, r3, #15
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	1e5a      	subs	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
 80050d8:	e007      	b.n	80050ea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 020f 	bic.w	r2, r2, #15
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	f043 0201 	orr.w	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005100:	e00a      	b.n	8005118 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f023 0312 	bic.w	r3, r3, #18
 800510a:	f043 0210 	orr.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005118:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800511c:	4618      	mov	r0, r3
 800511e:	3768      	adds	r7, #104	; 0x68
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	fff0c007 	.word	0xfff0c007

08005128 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80f7 	bne.w	8005336 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_ADC_Start_DMA+0x2e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0f2      	b.n	800533c <HAL_ADC_Start_DMA+0x214>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005166:	d004      	beq.n	8005172 <HAL_ADC_Start_DMA+0x4a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a75      	ldr	r2, [pc, #468]	; (8005344 <HAL_ADC_Start_DMA+0x21c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d109      	bne.n	8005186 <HAL_ADC_Start_DMA+0x5e>
 8005172:	4b75      	ldr	r3, [pc, #468]	; (8005348 <HAL_ADC_Start_DMA+0x220>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e008      	b.n	8005198 <HAL_ADC_Start_DMA+0x70>
 8005186:	4b71      	ldr	r3, [pc, #452]	; (800534c <HAL_ADC_Start_DMA+0x224>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf0c      	ite	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	2300      	movne	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80c5 	beq.w	8005328 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fd82 	bl	8005ca8 <ADC_Enable>
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f040 80b7 	bne.w	800531e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051cc:	d004      	beq.n	80051d8 <HAL_ADC_Start_DMA+0xb0>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5c      	ldr	r2, [pc, #368]	; (8005344 <HAL_ADC_Start_DMA+0x21c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d106      	bne.n	80051e6 <HAL_ADC_Start_DMA+0xbe>
 80051d8:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <HAL_ADC_Start_DMA+0x220>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d010      	beq.n	8005206 <HAL_ADC_Start_DMA+0xde>
 80051e4:	e005      	b.n	80051f2 <HAL_ADC_Start_DMA+0xca>
 80051e6:	4b59      	ldr	r3, [pc, #356]	; (800534c <HAL_ADC_Start_DMA+0x224>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_ADC_Start_DMA+0xde>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051fa:	d004      	beq.n	8005206 <HAL_ADC_Start_DMA+0xde>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a53      	ldr	r2, [pc, #332]	; (8005350 <HAL_ADC_Start_DMA+0x228>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d115      	bne.n	8005232 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d036      	beq.n	800528e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005228:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005230:	e02d      	b.n	800528e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005246:	d004      	beq.n	8005252 <HAL_ADC_Start_DMA+0x12a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <HAL_ADC_Start_DMA+0x21c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10a      	bne.n	8005268 <HAL_ADC_Start_DMA+0x140>
 8005252:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e008      	b.n	800527a <HAL_ADC_Start_DMA+0x152>
 8005268:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_ADC_Start_DMA+0x228>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005286:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529a:	d106      	bne.n	80052aa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f023 0206 	bic.w	r2, r3, #6
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
 80052a8:	e002      	b.n	80052b0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <HAL_ADC_Start_DMA+0x22c>)
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <HAL_ADC_Start_DMA+0x230>)
 80052c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	4a23      	ldr	r2, [pc, #140]	; (800535c <HAL_ADC_Start_DMA+0x234>)
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	221c      	movs	r2, #28
 80052d6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0210 	orr.w	r2, r2, #16
 80052e6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3340      	adds	r3, #64	; 0x40
 8005302:	4619      	mov	r1, r3
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f001 f97a 	bl	8006600 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0204 	orr.w	r2, r2, #4
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e00d      	b.n	800533a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005326:	e008      	b.n	800533a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005334:	e001      	b.n	800533a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	50000100 	.word	0x50000100
 8005348:	50000300 	.word	0x50000300
 800534c:	50000700 	.word	0x50000700
 8005350:	50000400 	.word	0x50000400
 8005354:	08005bdd 	.word	0x08005bdd
 8005358:	08005c57 	.word	0x08005c57
 800535c:	08005c73 	.word	0x08005c73

08005360 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_ADC_Stop_DMA+0x1a>
 8005376:	2302      	movs	r3, #2
 8005378:	e050      	b.n	800541c <HAL_ADC_Stop_DMA+0xbc>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005382:	216c      	movs	r1, #108	; 0x6c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fd59 	bl	8005e3c <ADC_ConversionStop>
 800538a:	4603      	mov	r3, r0
 800538c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d13e      	bne.n	8005412 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d10f      	bne.n	80053d0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 f982 	bl	80066be <HAL_DMA_Abort>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0210 	bic.w	r2, r2, #16
 80053de:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fcc2 	bl	8005d70 <ADC_Disable>
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	e002      	b.n	80053f8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fcbc 	bl	8005d70 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005424:	b480      	push	{r7}
 8005426:	b09b      	sub	sp, #108	; 0x6c
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x22>
 8005442:	2302      	movs	r3, #2
 8005444:	e2c8      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x5b4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 82ac 	bne.w	80059b6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b04      	cmp	r3, #4
 8005464:	d81c      	bhi.n	80054a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	461a      	mov	r2, r3
 800547a:	231f      	movs	r3, #31
 800547c:	4093      	lsls	r3, r2
 800547e:	43db      	mvns	r3, r3
 8005480:	4019      	ands	r1, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	fa00 f203 	lsl.w	r2, r0, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
 800549e:	e063      	b.n	8005568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d81e      	bhi.n	80054e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	3b1e      	subs	r3, #30
 80054bc:	221f      	movs	r2, #31
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	4019      	ands	r1, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4413      	add	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	3b1e      	subs	r3, #30
 80054d8:	fa00 f203 	lsl.w	r2, r0, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	635a      	str	r2, [r3, #52]	; 0x34
 80054e4:	e040      	b.n	8005568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	d81e      	bhi.n	800552c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	3b3c      	subs	r3, #60	; 0x3c
 8005502:	221f      	movs	r2, #31
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	4019      	ands	r1, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	3b3c      	subs	r3, #60	; 0x3c
 800551e:	fa00 f203 	lsl.w	r2, r0, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
 800552a:	e01d      	b.n	8005568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	3b5a      	subs	r3, #90	; 0x5a
 8005540:	221f      	movs	r2, #31
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	4019      	ands	r1, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	3b5a      	subs	r3, #90	; 0x5a
 800555c:	fa00 f203 	lsl.w	r2, r0, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b00      	cmp	r3, #0
 8005574:	f040 80e5 	bne.w	8005742 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b09      	cmp	r3, #9
 800557e:	d91c      	bls.n	80055ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6999      	ldr	r1, [r3, #24]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	3b1e      	subs	r3, #30
 8005592:	2207      	movs	r2, #7
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	4019      	ands	r1, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6898      	ldr	r0, [r3, #8]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	3b1e      	subs	r3, #30
 80055ac:	fa00 f203 	lsl.w	r2, r0, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	619a      	str	r2, [r3, #24]
 80055b8:	e019      	b.n	80055ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6959      	ldr	r1, [r3, #20]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	2207      	movs	r2, #7
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	4019      	ands	r1, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6898      	ldr	r0, [r3, #8]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	fa00 f203 	lsl.w	r2, r0, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	3b01      	subs	r3, #1
 800560c:	2b03      	cmp	r3, #3
 800560e:	d84f      	bhi.n	80056b0 <HAL_ADC_ConfigChannel+0x28c>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_ADC_ConfigChannel+0x1f4>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005629 	.word	0x08005629
 800561c:	0800564b 	.word	0x0800564b
 8005620:	0800566d 	.word	0x0800566d
 8005624:	0800568f 	.word	0x0800568f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800562e:	4b99      	ldr	r3, [pc, #612]	; (8005894 <HAL_ADC_ConfigChannel+0x470>)
 8005630:	4013      	ands	r3, r2
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	0691      	lsls	r1, r2, #26
 8005638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800563a:	430a      	orrs	r2, r1
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005646:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005648:	e07b      	b.n	8005742 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005650:	4b90      	ldr	r3, [pc, #576]	; (8005894 <HAL_ADC_ConfigChannel+0x470>)
 8005652:	4013      	ands	r3, r2
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	0691      	lsls	r1, r2, #26
 800565a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800565c:	430a      	orrs	r2, r1
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005668:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800566a:	e06a      	b.n	8005742 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005672:	4b88      	ldr	r3, [pc, #544]	; (8005894 <HAL_ADC_ConfigChannel+0x470>)
 8005674:	4013      	ands	r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	0691      	lsls	r1, r2, #26
 800567c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800567e:	430a      	orrs	r2, r1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800568a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800568c:	e059      	b.n	8005742 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005694:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <HAL_ADC_ConfigChannel+0x470>)
 8005696:	4013      	ands	r3, r2
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	0691      	lsls	r1, r2, #26
 800569e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056a0:	430a      	orrs	r2, r1
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056ac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80056ae:	e048      	b.n	8005742 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	069b      	lsls	r3, r3, #26
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d107      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056d2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	069b      	lsls	r3, r3, #26
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80056f6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	069b      	lsls	r3, r3, #26
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800571a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	069b      	lsls	r3, r3, #26
 800572c:	429a      	cmp	r2, r3
 800572e:	d107      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800573e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005740:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d108      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x33e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x33e>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_ADC_ConfigChannel+0x340>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 8131 	bne.w	80059cc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d00f      	beq.n	8005792 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43da      	mvns	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	400a      	ands	r2, r1
 800578c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005790:	e049      	b.n	8005826 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	409a      	lsls	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b09      	cmp	r3, #9
 80057b2:	d91c      	bls.n	80057ee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	3b1b      	subs	r3, #27
 80057c6:	2207      	movs	r2, #7
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	4019      	ands	r1, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6898      	ldr	r0, [r3, #8]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	3b1b      	subs	r3, #27
 80057e0:	fa00 f203 	lsl.w	r2, r0, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	619a      	str	r2, [r3, #24]
 80057ec:	e01b      	b.n	8005826 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6959      	ldr	r1, [r3, #20]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	2207      	movs	r2, #7
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	4019      	ands	r1, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6898      	ldr	r0, [r3, #8]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	fa00 f203 	lsl.w	r2, r0, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800582e:	d004      	beq.n	800583a <HAL_ADC_ConfigChannel+0x416>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_ADC_ConfigChannel+0x474>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <HAL_ADC_ConfigChannel+0x41a>
 800583a:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_ADC_ConfigChannel+0x478>)
 800583c:	e000      	b.n	8005840 <HAL_ADC_ConfigChannel+0x41c>
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_ADC_ConfigChannel+0x47c>)
 8005840:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b10      	cmp	r3, #16
 8005848:	d105      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800584a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005852:	2b00      	cmp	r3, #0
 8005854:	d015      	beq.n	8005882 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800585a:	2b11      	cmp	r3, #17
 800585c:	d105      	bne.n	800586a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800586e:	2b12      	cmp	r3, #18
 8005870:	f040 80ac 	bne.w	80059cc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 80a5 	bne.w	80059cc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800588a:	d10b      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x480>
 800588c:	4b02      	ldr	r3, [pc, #8]	; (8005898 <HAL_ADC_ConfigChannel+0x474>)
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e023      	b.n	80058da <HAL_ADC_ConfigChannel+0x4b6>
 8005892:	bf00      	nop
 8005894:	83fff000 	.word	0x83fff000
 8005898:	50000100 	.word	0x50000100
 800589c:	50000300 	.word	0x50000300
 80058a0:	50000700 	.word	0x50000700
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a4e      	ldr	r2, [pc, #312]	; (80059e4 <HAL_ADC_ConfigChannel+0x5c0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d103      	bne.n	80058b6 <HAL_ADC_ConfigChannel+0x492>
 80058ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	e011      	b.n	80058da <HAL_ADC_ConfigChannel+0x4b6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4b      	ldr	r2, [pc, #300]	; (80059e8 <HAL_ADC_ConfigChannel+0x5c4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d102      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x4a2>
 80058c0:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_ADC_ConfigChannel+0x5c8>)
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e009      	b.n	80058da <HAL_ADC_ConfigChannel+0x4b6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a48      	ldr	r2, [pc, #288]	; (80059ec <HAL_ADC_ConfigChannel+0x5c8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d102      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x4b2>
 80058d0:	4b45      	ldr	r3, [pc, #276]	; (80059e8 <HAL_ADC_ConfigChannel+0x5c4>)
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e001      	b.n	80058da <HAL_ADC_ConfigChannel+0x4b6>
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d108      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x4d6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x4d6>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_ADC_ConfigChannel+0x4d8>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d150      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005900:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d107      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x4fe>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x4fe>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <HAL_ADC_ConfigChannel+0x500>
 8005922:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005924:	2b00      	cmp	r3, #0
 8005926:	d13c      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b10      	cmp	r3, #16
 800592e:	d11d      	bne.n	800596c <HAL_ADC_ConfigChannel+0x548>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005938:	d118      	bne.n	800596c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800593a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005944:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_ADC_ConfigChannel+0x5cc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2a      	ldr	r2, [pc, #168]	; (80059f4 <HAL_ADC_ConfigChannel+0x5d0>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	0c9a      	lsrs	r2, r3, #18
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800595c:	e002      	b.n	8005964 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3b01      	subs	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f9      	bne.n	800595e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800596a:	e02e      	b.n	80059ca <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b11      	cmp	r3, #17
 8005972:	d10b      	bne.n	800598c <HAL_ADC_ConfigChannel+0x568>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800597c:	d106      	bne.n	800598c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800597e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005988:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800598a:	e01e      	b.n	80059ca <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b12      	cmp	r3, #18
 8005992:	d11a      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800599c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800599e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059a0:	e013      	b.n	80059ca <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059b4:	e00a      	b.n	80059cc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059c8:	e000      	b.n	80059cc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059ca:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80059d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80059d8:	4618      	mov	r0, r3
 80059da:	376c      	adds	r7, #108	; 0x6c
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	50000100 	.word	0x50000100
 80059e8:	50000400 	.word	0x50000400
 80059ec:	50000500 	.word	0x50000500
 80059f0:	20000004 	.word	0x20000004
 80059f4:	431bde83 	.word	0x431bde83

080059f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b099      	sub	sp, #100	; 0x64
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a10:	d102      	bne.n	8005a18 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005a12:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	e01a      	b.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a6a      	ldr	r2, [pc, #424]	; (8005bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d103      	bne.n	8005a2a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	e011      	b.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a67      	ldr	r2, [pc, #412]	; (8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d102      	bne.n	8005a3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005a34:	4b66      	ldr	r3, [pc, #408]	; (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005a36:	60bb      	str	r3, [r7, #8]
 8005a38:	e009      	b.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a64      	ldr	r2, [pc, #400]	; (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d102      	bne.n	8005a4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a44:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	e001      	b.n	8005a4e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b0      	b.n	8005bba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e0a9      	b.n	8005bba <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 808d 	bne.w	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f040 8086 	bne.w	8005b98 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a94:	d004      	beq.n	8005aa0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4b      	ldr	r2, [pc, #300]	; (8005bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d101      	bne.n	8005aa4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005aa0:	4b4c      	ldr	r3, [pc, #304]	; (8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005aa2:	e000      	b.n	8005aa6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005aa4:	4b4c      	ldr	r3, [pc, #304]	; (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005aa6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d040      	beq.n	8005b32 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6859      	ldr	r1, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ac2:	035b      	lsls	r3, r3, #13
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d108      	bne.n	8005aec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d15c      	bne.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d107      	bne.n	8005b0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005b0e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d14b      	bne.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b1c:	f023 030f 	bic.w	r3, r3, #15
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	6811      	ldr	r1, [r2, #0]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	6892      	ldr	r2, [r2, #8]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b30:	e03c      	b.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d108      	bne.n	8005b5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d123      	bne.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d107      	bne.n	8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005b80:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d112      	bne.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005b8e:	f023 030f 	bic.w	r3, r3, #15
 8005b92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b94:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b96:	e009      	b.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005baa:	e000      	b.n	8005bae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3764      	adds	r7, #100	; 0x64
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	50000100 	.word	0x50000100
 8005bcc:	50000400 	.word	0x50000400
 8005bd0:	50000500 	.word	0x50000500
 8005bd4:	50000300 	.word	0x50000300
 8005bd8:	50000700 	.word	0x50000700

08005bdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d126      	bne.n	8005c44 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d115      	bne.n	8005c3c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d111      	bne.n	8005c3c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f043 0201 	orr.w	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff f85b 	bl	8004cf8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005c42:	e004      	b.n	8005c4e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff f851 	bl	8004d0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	f043 0204 	orr.w	r2, r3, #4
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff f841 	bl	8004d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d108      	bne.n	8005cd4 <ADC_Enable+0x2c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <ADC_Enable+0x2c>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <ADC_Enable+0x2e>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d143      	bne.n	8005d62 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <ADC_Enable+0xc4>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	f043 0210 	orr.w	r2, r3, #16
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02f      	b.n	8005d64 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005d14:	f7fe ffc0 	bl	8004c98 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d1a:	e01b      	b.n	8005d54 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d1c:	f7fe ffbc 	bl	8004c98 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d914      	bls.n	8005d54 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d00d      	beq.n	8005d54 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f043 0210 	orr.w	r2, r3, #16
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e007      	b.n	8005d64 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d1dc      	bne.n	8005d1c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	8000003f 	.word	0x8000003f

08005d70 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d108      	bne.n	8005d9c <ADC_Disable+0x2c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <ADC_Disable+0x2c>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <ADC_Disable+0x2e>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d047      	beq.n	8005e32 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030d 	and.w	r3, r3, #13
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0202 	orr.w	r2, r2, #2
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005dc8:	f7fe ff66 	bl	8004c98 <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005dce:	e029      	b.n	8005e24 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	f043 0210 	orr.w	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e023      	b.n	8005e34 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dec:	f7fe ff54 	bl	8004c98 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d914      	bls.n	8005e24 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10d      	bne.n	8005e24 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	f043 0210 	orr.w	r2, r3, #16
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	f043 0201 	orr.w	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e007      	b.n	8005e34 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d0dc      	beq.n	8005dec <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 809b 	beq.w	8005f98 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e70:	d12a      	bne.n	8005ec8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d126      	bne.n	8005ec8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d122      	bne.n	8005ec8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8005e82:	230c      	movs	r3, #12
 8005e84:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005e86:	e014      	b.n	8005eb2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4a46      	ldr	r2, [pc, #280]	; (8005fa4 <ADC_ConversionStop+0x168>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d90d      	bls.n	8005eac <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0210 	orr.w	r2, r3, #16
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	f043 0201 	orr.w	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e076      	b.n	8005f9a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d1e3      	bne.n	8005e88 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b60      	cmp	r3, #96	; 0x60
 8005ecc:	d015      	beq.n	8005efa <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d10e      	bne.n	8005efa <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d107      	bne.n	8005efa <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0210 	orr.w	r2, r2, #16
 8005ef8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d015      	beq.n	8005f2c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d10e      	bne.n	8005f2c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d107      	bne.n	8005f2c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0220 	orr.w	r2, r2, #32
 8005f2a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b60      	cmp	r3, #96	; 0x60
 8005f30:	d005      	beq.n	8005f3e <ADC_ConversionStop+0x102>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b6c      	cmp	r3, #108	; 0x6c
 8005f36:	d105      	bne.n	8005f44 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005f38:	230c      	movs	r3, #12
 8005f3a:	617b      	str	r3, [r7, #20]
        break;
 8005f3c:	e005      	b.n	8005f4a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005f3e:	2308      	movs	r3, #8
 8005f40:	617b      	str	r3, [r7, #20]
        break;
 8005f42:	e002      	b.n	8005f4a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005f44:	2304      	movs	r3, #4
 8005f46:	617b      	str	r3, [r7, #20]
        break;
 8005f48:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005f4a:	f7fe fea5 	bl	8004c98 <HAL_GetTick>
 8005f4e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f50:	e01b      	b.n	8005f8a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005f52:	f7fe fea1 	bl	8004c98 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b0b      	cmp	r3, #11
 8005f5e:	d914      	bls.n	8005f8a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0210 	orr.w	r2, r3, #16
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e007      	b.n	8005f9a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1dc      	bne.n	8005f52 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	000993ff 	.word	0x000993ff

08005fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fda:	4a04      	ldr	r2, [pc, #16]	; (8005fec <__NVIC_SetPriorityGrouping+0x44>)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	60d3      	str	r3, [r2, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ff4:	4b04      	ldr	r3, [pc, #16]	; (8006008 <__NVIC_GetPriorityGrouping+0x18>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	0a1b      	lsrs	r3, r3, #8
 8005ffa:	f003 0307 	and.w	r3, r3, #7
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	e000ed00 	.word	0xe000ed00

0800600c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	2b00      	cmp	r3, #0
 800601c:	db0b      	blt.n	8006036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	f003 021f 	and.w	r2, r3, #31
 8006024:	4907      	ldr	r1, [pc, #28]	; (8006044 <__NVIC_EnableIRQ+0x38>)
 8006026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	2001      	movs	r0, #1
 800602e:	fa00 f202 	lsl.w	r2, r0, r2
 8006032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	e000e100 	.word	0xe000e100

08006048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	6039      	str	r1, [r7, #0]
 8006052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db0a      	blt.n	8006072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	490c      	ldr	r1, [pc, #48]	; (8006094 <__NVIC_SetPriority+0x4c>)
 8006062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006066:	0112      	lsls	r2, r2, #4
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	440b      	add	r3, r1
 800606c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006070:	e00a      	b.n	8006088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	4908      	ldr	r1, [pc, #32]	; (8006098 <__NVIC_SetPriority+0x50>)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	3b04      	subs	r3, #4
 8006080:	0112      	lsls	r2, r2, #4
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	440b      	add	r3, r1
 8006086:	761a      	strb	r2, [r3, #24]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	e000e100 	.word	0xe000e100
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800609c:	b480      	push	{r7}
 800609e:	b089      	sub	sp, #36	; 0x24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f1c3 0307 	rsb	r3, r3, #7
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	bf28      	it	cs
 80060ba:	2304      	movcs	r3, #4
 80060bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	3304      	adds	r3, #4
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d902      	bls.n	80060cc <NVIC_EncodePriority+0x30>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3b03      	subs	r3, #3
 80060ca:	e000      	b.n	80060ce <NVIC_EncodePriority+0x32>
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060d0:	f04f 32ff 	mov.w	r2, #4294967295
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43da      	mvns	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	401a      	ands	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060e4:	f04f 31ff 	mov.w	r1, #4294967295
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	fa01 f303 	lsl.w	r3, r1, r3
 80060ee:	43d9      	mvns	r1, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f4:	4313      	orrs	r3, r2
         );
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3724      	adds	r7, #36	; 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3b01      	subs	r3, #1
 8006110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006114:	d301      	bcc.n	800611a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006116:	2301      	movs	r3, #1
 8006118:	e00f      	b.n	800613a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800611a:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <SysTick_Config+0x40>)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3b01      	subs	r3, #1
 8006120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006122:	210f      	movs	r1, #15
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	f7ff ff8e 	bl	8006048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <SysTick_Config+0x40>)
 800612e:	2200      	movs	r2, #0
 8006130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <SysTick_Config+0x40>)
 8006134:	2207      	movs	r2, #7
 8006136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	e000e010 	.word	0xe000e010

08006148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff29 	bl	8005fa8 <__NVIC_SetPriorityGrouping>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af00      	add	r7, sp, #0
 8006164:	4603      	mov	r3, r0
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006170:	f7ff ff3e 	bl	8005ff0 <__NVIC_GetPriorityGrouping>
 8006174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	6978      	ldr	r0, [r7, #20]
 800617c:	f7ff ff8e 	bl	800609c <NVIC_EncodePriority>
 8006180:	4602      	mov	r2, r0
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff5d 	bl	8006048 <__NVIC_SetPriority>
}
 800618e:	bf00      	nop
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	4603      	mov	r3, r0
 800619e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff ff31 	bl	800600c <__NVIC_EnableIRQ>
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ffa2 	bl	8006104 <SysTick_Config>
 80061c0:	4603      	mov	r3, r0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e014      	b.n	8006206 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	791b      	ldrb	r3, [r3, #4]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fe f911 	bl	8004414 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	795b      	ldrb	r3, [r3, #5]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_DAC_Start_DMA+0x1e>
 8006266:	2302      	movs	r3, #2
 8006268:	e09b      	b.n	80063a2 <HAL_DAC_Start_DMA+0x156>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2202      	movs	r2, #2
 8006274:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d12f      	bne.n	80062dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a4a      	ldr	r2, [pc, #296]	; (80063ac <HAL_DAC_Start_DMA+0x160>)
 8006282:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a49      	ldr	r2, [pc, #292]	; (80063b0 <HAL_DAC_Start_DMA+0x164>)
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a48      	ldr	r2, [pc, #288]	; (80063b4 <HAL_DAC_Start_DMA+0x168>)
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d013      	beq.n	80062d2 <HAL_DAC_Start_DMA+0x86>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d845      	bhi.n	800633c <HAL_DAC_Start_DMA+0xf0>
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_DAC_Start_DMA+0x72>
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d005      	beq.n	80062c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80062bc:	e03e      	b.n	800633c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	617b      	str	r3, [r7, #20]
        break;
 80062c6:	e03c      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	617b      	str	r3, [r7, #20]
        break;
 80062d0:	e037      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3310      	adds	r3, #16
 80062d8:	617b      	str	r3, [r7, #20]
        break;
 80062da:	e032      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4a35      	ldr	r2, [pc, #212]	; (80063b8 <HAL_DAC_Start_DMA+0x16c>)
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a34      	ldr	r2, [pc, #208]	; (80063bc <HAL_DAC_Start_DMA+0x170>)
 80062ea:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a33      	ldr	r2, [pc, #204]	; (80063c0 <HAL_DAC_Start_DMA+0x174>)
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d013      	beq.n	8006332 <HAL_DAC_Start_DMA+0xe6>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d817      	bhi.n	8006340 <HAL_DAC_Start_DMA+0xf4>
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_DAC_Start_DMA+0xd2>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d005      	beq.n	8006328 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800631c:	e010      	b.n	8006340 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	617b      	str	r3, [r7, #20]
        break;
 8006326:	e00c      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3318      	adds	r3, #24
 800632e:	617b      	str	r3, [r7, #20]
        break;
 8006330:	e007      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	331c      	adds	r3, #28
 8006338:	617b      	str	r3, [r7, #20]
        break;
 800633a:	e002      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_DAC_Start_DMA+0xf6>
        break;
 8006340:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10f      	bne.n	8006368 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006356:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6898      	ldr	r0, [r3, #8]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	f000 f94d 	bl	8006600 <HAL_DMA_Start_IT>
 8006366:	e00e      	b.n	8006386 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006376:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68d8      	ldr	r0, [r3, #12]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	f000 f93d 	bl	8006600 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	2201      	movs	r2, #1
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	409a      	lsls	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	0800649b 	.word	0x0800649b
 80063b0:	080064bd 	.word	0x080064bd
 80063b4:	080064d9 	.word	0x080064d9
 80063b8:	08006507 	.word	0x08006507
 80063bc:	08006529 	.word	0x08006529
 80063c0:	08006545 	.word	0x08006545

080063c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	795b      	ldrb	r3, [r3, #5]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_DAC_ConfigChannel+0x20>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e036      	b.n	8006452 <HAL_DAC_ConfigChannel+0x8e>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2202      	movs	r2, #2
 80063ee:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80063f8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4013      	ands	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6819      	ldr	r1, [r3, #0]
 8006432:	22c0      	movs	r2, #192	; 0xc0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43da      	mvns	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	400a      	ands	r2, r1
 8006442:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff feb0 	bl	800620e <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	711a      	strb	r2, [r3, #4]
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff fea9 	bl	8006222 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f043 0204 	orr.w	r2, r3, #4
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff fe9f 	bl	8006236 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	711a      	strb	r2, [r3, #4]
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff ffa2 	bl	800645e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	711a      	strb	r2, [r3, #4]
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff ff9b 	bl	8006472 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff91 	bl	8006486 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	711a      	strb	r2, [r3, #4]
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e037      	b.n	80065f8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800659e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80065a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80065ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f97a 	bl	80068d4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}  
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_DMA_Start_IT+0x20>
 800661c:	2302      	movs	r3, #2
 800661e:	e04a      	b.n	80066b6 <HAL_DMA_Start_IT+0xb6>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800662e:	2b01      	cmp	r3, #1
 8006630:	d13a      	bne.n	80066a8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f90d 	bl	8006876 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 020e 	orr.w	r2, r2, #14
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e00f      	b.n	8006696 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 020a 	orr.w	r2, r2, #10
 8006684:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0204 	bic.w	r2, r2, #4
 8006694:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0201 	orr.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e005      	b.n	80066b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80066b0:	2302      	movs	r3, #2
 80066b2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d008      	beq.n	80066e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e020      	b.n	8006724 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 020e 	bic.w	r2, r2, #14
 80066f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	2101      	movs	r1, #1
 800670c:	fa01 f202 	lsl.w	r2, r1, r2
 8006710:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	2204      	movs	r2, #4
 800674e:	409a      	lsls	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4013      	ands	r3, r2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d024      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x72>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01f      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0204 	bic.w	r2, r2, #4
 800677e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	2104      	movs	r1, #4
 800678a:	fa01 f202 	lsl.w	r2, r1, r2
 800678e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d06a      	beq.n	800686e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80067a0:	e065      	b.n	800686e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2202      	movs	r2, #2
 80067a8:	409a      	lsls	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02c      	beq.n	800680c <HAL_DMA_IRQHandler+0xdc>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d027      	beq.n	800680c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 020a 	bic.w	r2, r2, #10
 80067d8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	2102      	movs	r1, #2
 80067ec:	fa01 f202 	lsl.w	r2, r1, r2
 80067f0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d035      	beq.n	800686e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800680a:	e030      	b.n	800686e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	2208      	movs	r2, #8
 8006812:	409a      	lsls	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d028      	beq.n	800686e <HAL_DMA_IRQHandler+0x13e>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d023      	beq.n	800686e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 020e 	bic.w	r2, r2, #14
 8006834:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	2101      	movs	r1, #1
 8006840:	fa01 f202 	lsl.w	r2, r1, r2
 8006844:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
    }
  }
}  
 800686c:	e7ff      	b.n	800686e <HAL_DMA_IRQHandler+0x13e>
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f202 	lsl.w	r2, r1, r2
 8006892:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d108      	bne.n	80068b6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80068b4:	e007      	b.n	80068c6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
}
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b14      	ldr	r3, [pc, #80]	; (8006934 <DMA_CalcBaseAndBitshift+0x60>)
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d80f      	bhi.n	8006908 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <DMA_CalcBaseAndBitshift+0x64>)
 80068f0:	4413      	add	r3, r2
 80068f2:	4a12      	ldr	r2, [pc, #72]	; (800693c <DMA_CalcBaseAndBitshift+0x68>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	009a      	lsls	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <DMA_CalcBaseAndBitshift+0x6c>)
 8006904:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006906:	e00e      	b.n	8006926 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <DMA_CalcBaseAndBitshift+0x70>)
 8006910:	4413      	add	r3, r2
 8006912:	4a0a      	ldr	r2, [pc, #40]	; (800693c <DMA_CalcBaseAndBitshift+0x68>)
 8006914:	fba2 2303 	umull	r2, r3, r2, r3
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	009a      	lsls	r2, r3, #2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <DMA_CalcBaseAndBitshift+0x74>)
 8006924:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40020407 	.word	0x40020407
 8006938:	bffdfff8 	.word	0xbffdfff8
 800693c:	cccccccd 	.word	0xcccccccd
 8006940:	40020000 	.word	0x40020000
 8006944:	bffdfbf8 	.word	0xbffdfbf8
 8006948:	40020400 	.word	0x40020400

0800694c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800695a:	e160      	b.n	8006c1e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	2101      	movs	r1, #1
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	fa01 f303 	lsl.w	r3, r1, r3
 8006968:	4013      	ands	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8152 	beq.w	8006c18 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b01      	cmp	r3, #1
 800697e:	d005      	beq.n	800698c <HAL_GPIO_Init+0x40>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d130      	bne.n	80069ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	2203      	movs	r2, #3
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069c2:	2201      	movs	r2, #1
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	f003 0201 	and.w	r2, r3, #1
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d017      	beq.n	8006a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	2203      	movs	r2, #3
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d123      	bne.n	8006a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	08da      	lsrs	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3208      	adds	r2, #8
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	220f      	movs	r2, #15
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4013      	ands	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	08da      	lsrs	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3208      	adds	r2, #8
 8006a78:	6939      	ldr	r1, [r7, #16]
 8006a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	2203      	movs	r2, #3
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4013      	ands	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0203 	and.w	r2, r3, #3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80ac 	beq.w	8006c18 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	4a5d      	ldr	r2, [pc, #372]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6193      	str	r3, [r2, #24]
 8006acc:	4b5b      	ldr	r3, [pc, #364]	; (8006c3c <HAL_GPIO_Init+0x2f0>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ad8:	4a59      	ldr	r2, [pc, #356]	; (8006c40 <HAL_GPIO_Init+0x2f4>)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	089b      	lsrs	r3, r3, #2
 8006ade:	3302      	adds	r3, #2
 8006ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	220f      	movs	r2, #15
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	43db      	mvns	r3, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4013      	ands	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006b02:	d025      	beq.n	8006b50 <HAL_GPIO_Init+0x204>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a4f      	ldr	r2, [pc, #316]	; (8006c44 <HAL_GPIO_Init+0x2f8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01f      	beq.n	8006b4c <HAL_GPIO_Init+0x200>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a4e      	ldr	r2, [pc, #312]	; (8006c48 <HAL_GPIO_Init+0x2fc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d019      	beq.n	8006b48 <HAL_GPIO_Init+0x1fc>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a4d      	ldr	r2, [pc, #308]	; (8006c4c <HAL_GPIO_Init+0x300>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <HAL_GPIO_Init+0x1f8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a4c      	ldr	r2, [pc, #304]	; (8006c50 <HAL_GPIO_Init+0x304>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00d      	beq.n	8006b40 <HAL_GPIO_Init+0x1f4>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a4b      	ldr	r2, [pc, #300]	; (8006c54 <HAL_GPIO_Init+0x308>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <HAL_GPIO_Init+0x1f0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a4a      	ldr	r2, [pc, #296]	; (8006c58 <HAL_GPIO_Init+0x30c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d101      	bne.n	8006b38 <HAL_GPIO_Init+0x1ec>
 8006b34:	2306      	movs	r3, #6
 8006b36:	e00c      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b38:	2307      	movs	r3, #7
 8006b3a:	e00a      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b3c:	2305      	movs	r3, #5
 8006b3e:	e008      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b40:	2304      	movs	r3, #4
 8006b42:	e006      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b44:	2303      	movs	r3, #3
 8006b46:	e004      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e002      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <HAL_GPIO_Init+0x206>
 8006b50:	2300      	movs	r3, #0
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	f002 0203 	and.w	r2, r2, #3
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	4093      	lsls	r3, r2
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006b62:	4937      	ldr	r1, [pc, #220]	; (8006c40 <HAL_GPIO_Init+0x2f4>)
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	3302      	adds	r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b70:	4b3a      	ldr	r3, [pc, #232]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006b94:	4a31      	ldr	r2, [pc, #196]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b9a:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006bbe:	4a27      	ldr	r2, [pc, #156]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bc4:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006be8:	4a1c      	ldr	r2, [pc, #112]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bee:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d003      	beq.n	8006c12 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006c12:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <HAL_GPIO_Init+0x310>)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f ae97 	bne.w	800695c <HAL_GPIO_Init+0x10>
  }
}
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40010000 	.word	0x40010000
 8006c44:	48000400 	.word	0x48000400
 8006c48:	48000800 	.word	0x48000800
 8006c4c:	48000c00 	.word	0x48000c00
 8006c50:	48001000 	.word	0x48001000
 8006c54:	48001400 	.word	0x48001400
 8006c58:	48001800 	.word	0x48001800
 8006c5c:	40010400 	.word	0x40010400

08006c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	887b      	ldrh	r3, [r7, #2]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e001      	b.n	8006c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	807b      	strh	r3, [r7, #2]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ca0:	787b      	ldrb	r3, [r7, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ca6:	887a      	ldrh	r2, [r7, #2]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006cac:	e002      	b.n	8006cb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cd2:	887a      	ldrh	r2, [r7, #2]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	041a      	lsls	r2, r3, #16
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	43d9      	mvns	r1, r3
 8006cde:	887b      	ldrh	r3, [r7, #2]
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	619a      	str	r2, [r3, #24]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	b08b      	sub	sp, #44	; 0x2c
 8006cf8:	af06      	add	r7, sp, #24
 8006cfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e0c4      	b.n	8006e90 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f012 fad2 	bl	80192c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2203      	movs	r2, #3
 8006d24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f006 fb69 	bl	800d404 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	e040      	b.n	8006dba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	3301      	adds	r3, #1
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	440b      	add	r3, r1
 8006d5e:	7bfa      	ldrb	r2, [r7, #15]
 8006d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	440b      	add	r3, r1
 8006d72:	3303      	adds	r3, #3
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d78:	7bfa      	ldrb	r2, [r7, #15]
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	440b      	add	r3, r1
 8006d86:	3338      	adds	r3, #56	; 0x38
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	440b      	add	r3, r1
 8006d9a:	333c      	adds	r3, #60	; 0x3c
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006da0:	7bfa      	ldrb	r2, [r7, #15]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	440b      	add	r3, r1
 8006dae:	3340      	adds	r3, #64	; 0x40
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	3301      	adds	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	7bfa      	ldrb	r2, [r7, #15]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d3b9      	bcc.n	8006d38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e044      	b.n	8006e54 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4413      	add	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006df2:	7bfa      	ldrb	r2, [r7, #15]
 8006df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006df6:	7bfa      	ldrb	r2, [r7, #15]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	440b      	add	r3, r1
 8006e04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	440b      	add	r3, r1
 8006e1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	440b      	add	r3, r1
 8006e46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3301      	adds	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	7bfa      	ldrb	r2, [r7, #15]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3b5      	bcc.n	8006dca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	687e      	ldr	r6, [r7, #4]
 8006e66:	466d      	mov	r5, sp
 8006e68:	f106 0410 	add.w	r4, r6, #16
 8006e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	1d33      	adds	r3, r6, #4
 8006e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e78:	6838      	ldr	r0, [r7, #0]
 8006e7a:	f006 fade 	bl	800d43a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <HAL_PCD_Start+0x16>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	e016      	b.n	8006edc <HAL_PCD_Start+0x44>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f006 fa8b 	bl	800d3d6 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f012 fc80 	bl	80197c8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f008 fd4a 	bl	800f966 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f008 fd43 	bl	800f97c <USB_ReadInterrupts>
 8006ef6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fab2 	bl	800746c <PCD_EP_ISR_Handler>

    return;
 8006f08:	e0bd      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f26:	b292      	uxth	r2, r2
 8006f28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f012 fa4c 	bl	80193ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f32:	2100      	movs	r1, #0
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8a9 	bl	800708c <HAL_PCD_SetAddress>

    return;
 8006f3a:	e0a4      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f5e:	e092      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f7c:	b292      	uxth	r2, r2
 8006f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f82:	e080      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d027      	beq.n	8006fde <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0204 	bic.w	r2, r2, #4
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0208 	bic.w	r2, r2, #8
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f012 fa3c 	bl	801943c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006fdc:	e053      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d027      	beq.n	8007038 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0208 	orr.w	r2, r2, #8
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007008:	b29a      	uxth	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007012:	b292      	uxth	r2, r2
 8007014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007020:	b29a      	uxth	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0204 	orr.w	r2, r2, #4
 800702a:	b292      	uxth	r2, r2
 800702c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f012 f9e9 	bl	8019408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007036:	e026      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00f      	beq.n	8007062 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007054:	b292      	uxth	r2, r2
 8007056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f012 f9a7 	bl	80193ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007060:	e011      	b.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800707e:	b292      	uxth	r2, r2
 8007080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007084:	bf00      	nop
  }
}
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_PCD_SetAddress+0x1a>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e013      	b.n	80070ce <HAL_PCD_SetAddress+0x42>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f008 fc3d 	bl	800f93e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	4603      	mov	r3, r0
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	460b      	mov	r3, r1
 80070ea:	803b      	strh	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da0e      	bge.n	800711a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	705a      	strb	r2, [r3, #1]
 8007118:	e00e      	b.n	8007138 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	f003 0207 	and.w	r2, r3, #7
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	b2da      	uxtb	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007144:	883a      	ldrh	r2, [r7, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	78ba      	ldrb	r2, [r7, #2]
 800714e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007150:	78bb      	ldrb	r3, [r7, #2]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d102      	bne.n	800715c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_PCD_EP_Open+0x94>
 8007166:	2302      	movs	r3, #2
 8007168:	e00e      	b.n	8007188 <HAL_PCD_EP_Open+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	4618      	mov	r0, r3
 800717a:	f006 f97f 	bl	800d47c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007186:	7afb      	ldrb	r3, [r7, #11]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800719c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da0e      	bge.n	80071c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	4413      	add	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	705a      	strb	r2, [r3, #1]
 80071c0:	e00e      	b.n	80071e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	f003 0207 	and.w	r2, r3, #7
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	4413      	add	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_PCD_EP_Close+0x6a>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e00e      	b.n	8007218 <HAL_PCD_EP_Close+0x88>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	4618      	mov	r0, r3
 800720a:	f006 fcfb 	bl	800dc04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	460b      	mov	r3, r1
 800722e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007230:	7afb      	ldrb	r3, [r7, #11]
 8007232:	f003 0207 	and.w	r2, r3, #7
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	b2da      	uxtb	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	4618      	mov	r0, r3
 8007274:	f006 feb3 	bl	800dfde <USB_EPStartXfer>

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 0207 	and.w	r2, r3, #7
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	440b      	add	r3, r1
 80072a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80072a4:	681b      	ldr	r3, [r3, #0]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	460b      	mov	r3, r1
 80072c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2200      	movs	r2, #0
 80072f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2201      	movs	r2, #1
 80072fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	b2da      	uxtb	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6979      	ldr	r1, [r7, #20]
 8007310:	4618      	mov	r0, r3
 8007312:	f006 fe64 	bl	800dfde <USB_EPStartXfer>

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	f003 0207 	and.w	r2, r3, #7
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	429a      	cmp	r2, r3
 8007338:	d901      	bls.n	800733e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e03e      	b.n	80073bc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800733e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007342:	2b00      	cmp	r3, #0
 8007344:	da0e      	bge.n	8007364 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	4413      	add	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	705a      	strb	r2, [r3, #1]
 8007362:	e00c      	b.n	800737e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	b2da      	uxtb	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_PCD_EP_SetStall+0x7e>
 800739a:	2302      	movs	r3, #2
 800739c:	e00e      	b.n	80073bc <HAL_PCD_EP_SetStall+0x9c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f008 f9c7 	bl	800f740 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073d0:	78fb      	ldrb	r3, [r7, #3]
 80073d2:	f003 020f 	and.w	r2, r3, #15
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d901      	bls.n	80073e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e040      	b.n	8007464 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da0e      	bge.n	8007408 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	705a      	strb	r2, [r3, #1]
 8007406:	e00e      	b.n	8007426 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	f003 0207 	and.w	r2, r3, #7
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_PCD_EP_ClrStall+0x82>
 8007442:	2302      	movs	r3, #2
 8007444:	e00e      	b.n	8007464 <HAL_PCD_EP_ClrStall+0xa0>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	4618      	mov	r0, r3
 8007456:	f008 f9c4 	bl	800f7e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b096      	sub	sp, #88	; 0x58
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007474:	e3b1      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800747e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007490:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007494:	2b00      	cmp	r3, #0
 8007496:	f040 8173 	bne.w	8007780 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800749a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d150      	bne.n	8007548 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	81fb      	strh	r3, [r7, #14]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3328      	adds	r3, #40	; 0x28
 80074ce:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d8:	b29b      	uxth	r3, r3
 80074da:	461a      	mov	r2, r3
 80074dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80074f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fa:	695a      	ldr	r2, [r3, #20]
 80074fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	441a      	add	r2, r3
 8007502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007504:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f011 ff36 	bl	801937a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 835f 	beq.w	8007bda <PCD_EP_ISR_Handler+0x76e>
 800751c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f040 835a 	bne.w	8007bda <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007532:	b2da      	uxtb	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	b292      	uxth	r2, r2
 800753a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007546:	e348      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800754e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800755a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800755e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007562:	2b00      	cmp	r3, #0
 8007564:	d032      	beq.n	80075cc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756e:	b29b      	uxth	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	4413      	add	r3, r2
 8007580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800758a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800759c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f008 fa3d 	bl	800fa20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80075b2:	4013      	ands	r3, r2
 80075b4:	823b      	strh	r3, [r7, #16]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	8a3a      	ldrh	r2, [r7, #16]
 80075bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075c0:	b292      	uxth	r2, r2
 80075c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f011 feab 	bl	8019320 <HAL_PCD_SetupStageCallback>
 80075ca:	e306      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80075cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f280 8302 	bge.w	8007bda <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80075e2:	4013      	ands	r3, r2
 80075e4:	83fb      	strh	r3, [r7, #30]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	8bfa      	ldrh	r2, [r7, #30]
 80075ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075f0:	b292      	uxth	r2, r2
 80075f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4413      	add	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	4413      	add	r3, r2
 800760e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800761c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d019      	beq.n	8007658 <PCD_EP_ISR_Handler+0x1ec>
 8007624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d015      	beq.n	8007658 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007632:	6959      	ldr	r1, [r3, #20]
 8007634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007636:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800763c:	b29b      	uxth	r3, r3
 800763e:	f008 f9ef 	bl	800fa20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007644:	695a      	ldr	r2, [r3, #20]
 8007646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	441a      	add	r2, r3
 800764c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800764e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f011 fe76 	bl	8019344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007662:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766a:	2b00      	cmp	r3, #0
 800766c:	f040 82b5 	bne.w	8007bda <PCD_EP_ISR_Handler+0x76e>
 8007670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007674:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800767c:	f000 82ad 	beq.w	8007bda <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	4413      	add	r3, r2
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b3e      	cmp	r3, #62	; 0x3e
 80076b6:	d91d      	bls.n	80076f4 <PCD_EP_ISR_Handler+0x288>
 80076b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	095b      	lsrs	r3, r3, #5
 80076be:	647b      	str	r3, [r7, #68]	; 0x44
 80076c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <PCD_EP_ISR_Handler+0x266>
 80076cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ce:	3b01      	subs	r3, #1
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076da:	b29b      	uxth	r3, r3
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	b29b      	uxth	r3, r3
 80076e0:	4313      	orrs	r3, r2
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e026      	b.n	8007742 <PCD_EP_ISR_Handler+0x2d6>
 80076f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <PCD_EP_ISR_Handler+0x2a6>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770a:	b29a      	uxth	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	801a      	strh	r2, [r3, #0]
 8007710:	e017      	b.n	8007742 <PCD_EP_ISR_Handler+0x2d6>
 8007712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	647b      	str	r3, [r7, #68]	; 0x44
 800771a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <PCD_EP_ISR_Handler+0x2c0>
 8007726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007728:	3301      	adds	r3, #1
 800772a:	647b      	str	r3, [r7, #68]	; 0x44
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	b29a      	uxth	r2, r3
 8007732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007734:	b29b      	uxth	r3, r3
 8007736:	029b      	lsls	r3, r3, #10
 8007738:	b29b      	uxth	r3, r3
 800773a:	4313      	orrs	r3, r2
 800773c:	b29a      	uxth	r2, r3
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	827b      	strh	r3, [r7, #18]
 8007754:	8a7b      	ldrh	r3, [r7, #18]
 8007756:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800775a:	827b      	strh	r3, [r7, #18]
 800775c:	8a7b      	ldrh	r3, [r7, #18]
 800775e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007762:	827b      	strh	r3, [r7, #18]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	8a7b      	ldrh	r3, [r7, #18]
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]
 800777e:	e22c      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007794:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007798:	2b00      	cmp	r3, #0
 800779a:	f280 80f6 	bge.w	800798a <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80077b4:	4013      	ands	r3, r2
 80077b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80077cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077d0:	b292      	uxth	r2, r2
 80077d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80077d4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	4413      	add	r3, r2
 80077e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80077ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ec:	7b1b      	ldrb	r3, [r3, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d123      	bne.n	800783a <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	4413      	add	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	4413      	add	r3, r2
 800780c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007816:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800781a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 808e 	beq.w	8007940 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782a:	6959      	ldr	r1, [r3, #20]
 800782c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782e:	88da      	ldrh	r2, [r3, #6]
 8007830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007834:	f008 f8f4 	bl	800fa20 <USB_ReadPMA>
 8007838:	e082      	b.n	8007940 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800783a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783c:	78db      	ldrb	r3, [r3, #3]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d10a      	bne.n	8007858 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007842:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007846:	461a      	mov	r2, r3
 8007848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9d3 	bl	8007bf6 <HAL_PCD_EP_DB_Receive>
 8007850:	4603      	mov	r3, r0
 8007852:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007856:	e073      	b.n	8007940 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	441a      	add	r2, r3
 8007884:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800788c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007898:	b29b      	uxth	r3, r3
 800789a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d022      	beq.n	80078fc <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078be:	b29b      	uxth	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4413      	add	r3, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80078de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d02c      	beq.n	8007940 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ec:	6959      	ldr	r1, [r3, #20]
 80078ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f0:	891a      	ldrh	r2, [r3, #8]
 80078f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80078f6:	f008 f893 	bl	800fa20 <USB_ReadPMA>
 80078fa:	e021      	b.n	8007940 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007904:	b29b      	uxth	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4413      	add	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	4413      	add	r3, r2
 8007916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007920:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007932:	6959      	ldr	r1, [r3, #20]
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	895a      	ldrh	r2, [r3, #10]
 8007938:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800793c:	f008 f870 	bl	800fa20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007948:	441a      	add	r2, r3
 800794a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800794e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007950:	695a      	ldr	r2, [r3, #20]
 8007952:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007956:	441a      	add	r2, r3
 8007958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800795c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <PCD_EP_ISR_Handler+0x504>
 8007964:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	429a      	cmp	r2, r3
 800796e:	d206      	bcs.n	800797e <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f011 fce4 	bl	8019344 <HAL_PCD_DataOutStageCallback>
 800797c:	e005      	b.n	800798a <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007984:	4618      	mov	r0, r3
 8007986:	f006 fb2a 	bl	800dfde <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800798a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8121 	beq.w	8007bda <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007998:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	4413      	add	r3, r2
 80079aa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80079dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80079e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ea:	78db      	ldrb	r3, [r3, #3]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 80a2 	bne.w	8007b36 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80079f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f4:	2200      	movs	r2, #0
 80079f6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80079f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079fa:	7b1b      	ldrb	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8093 	beq.w	8007b28 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d046      	beq.n	8007a9c <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d126      	bne.n	8007a64 <PCD_EP_ISR_Handler+0x5f8>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	4413      	add	r3, r2
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	00da      	lsls	r2, r3, #3
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	4413      	add	r3, r2
 8007a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	e061      	b.n	8007b28 <PCD_EP_ISR_Handler+0x6bc>
 8007a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d15d      	bne.n	8007b28 <PCD_EP_ISR_Handler+0x6bc>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	4413      	add	r3, r2
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	00da      	lsls	r2, r3, #3
 8007a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	2200      	movs	r2, #0
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e045      	b.n	8007b28 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d126      	bne.n	8007af8 <PCD_EP_ISR_Handler+0x68c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abe:	4413      	add	r3, r2
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	00da      	lsls	r2, r3, #3
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e017      	b.n	8007b28 <PCD_EP_ISR_Handler+0x6bc>
 8007af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d113      	bne.n	8007b28 <PCD_EP_ISR_Handler+0x6bc>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0e:	4413      	add	r3, r2
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	00da      	lsls	r2, r3, #3
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	2200      	movs	r2, #0
 8007b26:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f011 fc23 	bl	801937a <HAL_PCD_DataInStageCallback>
 8007b34:	e051      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007b36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d144      	bne.n	8007bcc <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d907      	bls.n	8007b86 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8007b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b82:	619a      	str	r2, [r3, #24]
 8007b84:	e002      	b.n	8007b8c <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8007b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b88:	2200      	movs	r2, #0
 8007b8a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f011 fbed 	bl	801937a <HAL_PCD_DataInStageCallback>
 8007ba0:	e01b      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba4:	695a      	ldr	r2, [r3, #20]
 8007ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007baa:	441a      	add	r2, r3
 8007bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bae:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bb8:	441a      	add	r2, r3
 8007bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f006 fa0a 	bl	800dfde <USB_EPStartXfer>
 8007bca:	e006      	b.n	8007bda <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007bcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f917 	bl	8007e08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f6ff ac45 	blt.w	8007476 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3758      	adds	r7, #88	; 0x58
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4613      	mov	r3, r2
 8007c02:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d07c      	beq.n	8007d08 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4413      	add	r3, r2
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	6812      	ldr	r2, [r2, #0]
 8007c26:	4413      	add	r3, r2
 8007c28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	8b7b      	ldrh	r3, [r7, #26]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d306      	bcc.n	8007c4c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	8b7b      	ldrh	r3, [r7, #26]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	619a      	str	r2, [r3, #24]
 8007c4a:	e002      	b.n	8007c52 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d123      	bne.n	8007ca2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	833b      	strh	r3, [r7, #24]
 8007c76:	8b3b      	ldrh	r3, [r7, #24]
 8007c78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c7c:	833b      	strh	r3, [r7, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	441a      	add	r2, r3
 8007c8c:	8b3b      	ldrh	r3, [r7, #24]
 8007c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01f      	beq.n	8007cec <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	82fb      	strh	r3, [r7, #22]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	441a      	add	r2, r3
 8007cd6:	8afb      	ldrh	r3, [r7, #22]
 8007cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007cec:	8b7b      	ldrh	r3, [r7, #26]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8085 	beq.w	8007dfe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6959      	ldr	r1, [r3, #20]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	891a      	ldrh	r2, [r3, #8]
 8007d00:	8b7b      	ldrh	r3, [r7, #26]
 8007d02:	f007 fe8d 	bl	800fa20 <USB_ReadPMA>
 8007d06:	e07a      	b.n	8007dfe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	8b7b      	ldrh	r3, [r7, #26]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d306      	bcc.n	8007d46 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	8b7b      	ldrh	r3, [r7, #26]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	619a      	str	r2, [r3, #24]
 8007d44:	e002      	b.n	8007d4c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d123      	bne.n	8007d9c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	83fb      	strh	r3, [r7, #30]
 8007d70:	8bfb      	ldrh	r3, [r7, #30]
 8007d72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d76:	83fb      	strh	r3, [r7, #30]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	441a      	add	r2, r3
 8007d86:	8bfb      	ldrh	r3, [r7, #30]
 8007d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11f      	bne.n	8007de6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc0:	83bb      	strh	r3, [r7, #28]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	8bbb      	ldrh	r3, [r7, #28]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007de6:	8b7b      	ldrh	r3, [r7, #26]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6959      	ldr	r1, [r3, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	895a      	ldrh	r2, [r3, #10]
 8007df8:	8b7b      	ldrh	r3, [r7, #26]
 8007dfa:	f007 fe11 	bl	800fa20 <USB_ReadPMA>
    }
  }

  return count;
 8007dfe:	8b7b      	ldrh	r3, [r7, #26]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b0a4      	sub	sp, #144	; 0x90
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e16:	88fb      	ldrh	r3, [r7, #6]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 81db 	beq.w	80081d8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d907      	bls.n	8007e66 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	619a      	str	r2, [r3, #24]
 8007e64:	e002      	b.n	8007e6c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 80b9 	bne.w	8007fe8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d126      	bne.n	8007ecc <HAL_PCD_EP_DB_Transmit+0xc4>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	4413      	add	r3, r2
 8007e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	00da      	lsls	r2, r3, #3
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	e01a      	b.n	8007f02 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d116      	bne.n	8007f02 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	4413      	add	r3, r2
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	00da      	lsls	r2, r3, #3
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007efa:	633b      	str	r3, [r7, #48]	; 0x30
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2200      	movs	r2, #0
 8007f00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d126      	bne.n	8007f5e <HAL_PCD_EP_DB_Transmit+0x156>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00da      	lsls	r2, r3, #3
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e017      	b.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x186>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d113      	bne.n	8007f8e <HAL_PCD_EP_DB_Transmit+0x186>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	4413      	add	r3, r2
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	00da      	lsls	r2, r3, #3
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	4413      	add	r3, r2
 8007f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f86:	623b      	str	r3, [r7, #32]
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f011 f9f0 	bl	801937a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 82fa 	beq.w	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	82fb      	strh	r3, [r7, #22]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	441a      	add	r2, r3
 8007fd0:	8afb      	ldrh	r3, [r7, #22]
 8007fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8013      	strh	r3, [r2, #0]
 8007fe6:	e2d8      	b.n	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d021      	beq.n	8008036 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	441a      	add	r2, r3
 800801e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800803c:	2b01      	cmp	r3, #1
 800803e:	f040 82ac 	bne.w	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800804a:	441a      	add	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008058:	441a      	add	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6a1a      	ldr	r2, [r3, #32]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	429a      	cmp	r2, r3
 8008068:	d30b      	bcc.n	8008082 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6a1a      	ldr	r2, [r3, #32]
 8008076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	621a      	str	r2, [r3, #32]
 8008080:	e017      	b.n	80080b2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d108      	bne.n	800809c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800808a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800808e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800809a:	e00a      	b.n	80080b2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d165      	bne.n	8008186 <HAL_PCD_EP_DB_Transmit+0x37e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ce:	4413      	add	r3, r2
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	00da      	lsls	r2, r3, #3
 80080d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080da:	4413      	add	r3, r2
 80080dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	801a      	strh	r2, [r3, #0]
 80080f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080f6:	2b3e      	cmp	r3, #62	; 0x3e
 80080f8:	d91d      	bls.n	8008136 <HAL_PCD_EP_DB_Transmit+0x32e>
 80080fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	64bb      	str	r3, [r7, #72]	; 0x48
 8008102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008106:	f003 031f 	and.w	r3, r3, #31
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <HAL_PCD_EP_DB_Transmit+0x30c>
 800810e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008110:	3b01      	subs	r3, #1
 8008112:	64bb      	str	r3, [r7, #72]	; 0x48
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29a      	uxth	r2, r3
 800811a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811c:	b29b      	uxth	r3, r3
 800811e:	029b      	lsls	r3, r3, #10
 8008120:	b29b      	uxth	r3, r3
 8008122:	4313      	orrs	r3, r2
 8008124:	b29b      	uxth	r3, r3
 8008126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812e:	b29a      	uxth	r2, r3
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	e044      	b.n	80081c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <HAL_PCD_EP_DB_Transmit+0x34c>
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814c:	b29a      	uxth	r2, r3
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e035      	b.n	80081c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	64bb      	str	r3, [r7, #72]	; 0x48
 800815c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_PCD_EP_DB_Transmit+0x366>
 8008168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816a:	3301      	adds	r3, #1
 800816c:	64bb      	str	r3, [r7, #72]	; 0x48
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29a      	uxth	r2, r3
 8008174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008176:	b29b      	uxth	r3, r3
 8008178:	029b      	lsls	r3, r3, #10
 800817a:	b29b      	uxth	r3, r3
 800817c:	4313      	orrs	r3, r2
 800817e:	b29a      	uxth	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	e01c      	b.n	80081c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d118      	bne.n	80081c0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	647b      	str	r3, [r7, #68]	; 0x44
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819c:	b29b      	uxth	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a2:	4413      	add	r3, r2
 80081a4:	647b      	str	r3, [r7, #68]	; 0x44
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	00da      	lsls	r2, r3, #3
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081b4:	643b      	str	r3, [r7, #64]	; 0x40
 80081b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6959      	ldr	r1, [r3, #20]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	891a      	ldrh	r2, [r3, #8]
 80081cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f007 fbe3 	bl	800f99c <USB_WritePMA>
 80081d6:	e1e0      	b.n	800859a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081fc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008208:	429a      	cmp	r2, r3
 800820a:	d307      	bcc.n	800821c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008214:	1ad2      	subs	r2, r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	619a      	str	r2, [r3, #24]
 800821a:	e002      	b.n	8008222 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f040 80c0 	bne.w	80083ac <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d126      	bne.n	8008282 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	67fb      	str	r3, [r7, #124]	; 0x7c
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008248:	4413      	add	r3, r2
 800824a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	00da      	lsls	r2, r3, #3
 8008252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008254:	4413      	add	r3, r2
 8008256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800825a:	67bb      	str	r3, [r7, #120]	; 0x78
 800825c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008266:	b29a      	uxth	r2, r3
 8008268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827a:	b29a      	uxth	r2, r3
 800827c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e01a      	b.n	80082b8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d116      	bne.n	80082b8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	667b      	str	r3, [r7, #100]	; 0x64
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008298:	b29b      	uxth	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800829e:	4413      	add	r3, r2
 80082a0:	667b      	str	r3, [r7, #100]	; 0x64
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	00da      	lsls	r2, r3, #3
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	4413      	add	r3, r2
 80082ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b0:	663b      	str	r3, [r7, #96]	; 0x60
 80082b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b4:	2200      	movs	r2, #0
 80082b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	677b      	str	r3, [r7, #116]	; 0x74
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d12b      	bne.n	800831e <HAL_PCD_EP_DB_Transmit+0x516>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082da:	4413      	add	r3, r2
 80082dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	00da      	lsls	r2, r3, #3
 80082e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e6:	4413      	add	r3, r2
 80082e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	e017      	b.n	800834e <HAL_PCD_EP_DB_Transmit+0x546>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d113      	bne.n	800834e <HAL_PCD_EP_DB_Transmit+0x546>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008334:	4413      	add	r3, r2
 8008336:	677b      	str	r3, [r7, #116]	; 0x74
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	00da      	lsls	r2, r3, #3
 800833e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008340:	4413      	add	r3, r2
 8008342:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008346:	673b      	str	r3, [r7, #112]	; 0x70
 8008348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800834a:	2200      	movs	r2, #0
 800834c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f011 f810 	bl	801937a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 811a 	bne.w	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8013      	strh	r3, [r2, #0]
 80083aa:	e0f6      	b.n	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083ac:	88fb      	ldrh	r3, [r7, #6]
 80083ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d121      	bne.n	80083fa <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008400:	2b01      	cmp	r3, #1
 8008402:	f040 80ca 	bne.w	800859a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	695a      	ldr	r2, [r3, #20]
 800840a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800840e:	441a      	add	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800841c:	441a      	add	r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	429a      	cmp	r2, r3
 800842c:	d30b      	bcc.n	8008446 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6a1a      	ldr	r2, [r3, #32]
 800843a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	621a      	str	r2, [r3, #32]
 8008444:	e017      	b.n	8008476 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d108      	bne.n	8008460 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800844e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800845e:	e00a      	b.n	8008476 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2200      	movs	r2, #0
 800846c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	657b      	str	r3, [r7, #84]	; 0x54
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	785b      	ldrb	r3, [r3, #1]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d165      	bne.n	8008550 <HAL_PCD_EP_DB_Transmit+0x748>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008492:	b29b      	uxth	r3, r3
 8008494:	461a      	mov	r2, r3
 8008496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008498:	4413      	add	r3, r2
 800849a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	00da      	lsls	r2, r3, #3
 80084a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a4:	4413      	add	r3, r2
 80084a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80084ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c0:	2b3e      	cmp	r3, #62	; 0x3e
 80084c2:	d91d      	bls.n	8008500 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80084c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80084cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <HAL_PCD_EP_DB_Transmit+0x6d6>
 80084d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084da:	3b01      	subs	r3, #1
 80084dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4313      	orrs	r3, r2
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	e041      	b.n	8008584 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <HAL_PCD_EP_DB_Transmit+0x716>
 8008508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008516:	b29a      	uxth	r2, r3
 8008518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	e032      	b.n	8008584 <HAL_PCD_EP_DB_Transmit+0x77c>
 800851e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	66bb      	str	r3, [r7, #104]	; 0x68
 8008526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_PCD_EP_DB_Transmit+0x730>
 8008532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008534:	3301      	adds	r3, #1
 8008536:	66bb      	str	r3, [r7, #104]	; 0x68
 8008538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008540:	b29b      	uxth	r3, r3
 8008542:	029b      	lsls	r3, r3, #10
 8008544:	b29b      	uxth	r3, r3
 8008546:	4313      	orrs	r3, r2
 8008548:	b29a      	uxth	r2, r3
 800854a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	e019      	b.n	8008584 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d115      	bne.n	8008584 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008566:	4413      	add	r3, r2
 8008568:	657b      	str	r3, [r7, #84]	; 0x54
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	00da      	lsls	r2, r3, #3
 8008570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008572:	4413      	add	r3, r2
 8008574:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008578:	653b      	str	r3, [r7, #80]	; 0x50
 800857a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800857e:	b29a      	uxth	r2, r3
 8008580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008582:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6959      	ldr	r1, [r3, #20]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	895a      	ldrh	r2, [r3, #10]
 8008590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008594:	b29b      	uxth	r3, r3
 8008596:	f007 fa01 	bl	800f99c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b4:	82bb      	strh	r3, [r7, #20]
 80085b6:	8abb      	ldrh	r3, [r7, #20]
 80085b8:	f083 0310 	eor.w	r3, r3, #16
 80085bc:	82bb      	strh	r3, [r7, #20]
 80085be:	8abb      	ldrh	r3, [r7, #20]
 80085c0:	f083 0320 	eor.w	r3, r3, #32
 80085c4:	82bb      	strh	r3, [r7, #20]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	8abb      	ldrh	r3, [r7, #20]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3790      	adds	r7, #144	; 0x90
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	817b      	strh	r3, [r7, #10]
 8008602:	4613      	mov	r3, r2
 8008604:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008612:	897b      	ldrh	r3, [r7, #10]
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e009      	b.n	800863e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800862a:	897a      	ldrh	r2, [r7, #10]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d107      	bne.n	8008654 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2200      	movs	r2, #0
 8008648:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	b29a      	uxth	r2, r3
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	80da      	strh	r2, [r3, #6]
 8008652:	e00b      	b.n	800866c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2201      	movs	r2, #1
 8008658:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	b29a      	uxth	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	b29a      	uxth	r2, r3
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	371c      	adds	r7, #28
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008682:	af00      	add	r7, sp, #0
 8008684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800868c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800868e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008692:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	f001 b83a 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80086a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 816f 	beq.w	8008996 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80086b8:	4bb5      	ldr	r3, [pc, #724]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f003 030c 	and.w	r3, r3, #12
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d00c      	beq.n	80086de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086c4:	4bb2      	ldr	r3, [pc, #712]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f003 030c 	and.w	r3, r3, #12
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d15c      	bne.n	800878a <HAL_RCC_OscConfig+0x10e>
 80086d0:	4baf      	ldr	r3, [pc, #700]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d155      	bne.n	800878a <HAL_RCC_OscConfig+0x10e>
 80086de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80086ea:	fa93 f3a3 	rbit	r3, r3
 80086ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80086f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086f6:	fab3 f383 	clz	r3, r3
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b01      	cmp	r3, #1
 8008708:	d102      	bne.n	8008710 <HAL_RCC_OscConfig+0x94>
 800870a:	4ba1      	ldr	r3, [pc, #644]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	e015      	b.n	800873c <HAL_RCC_OscConfig+0xc0>
 8008710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008714:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008718:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800871c:	fa93 f3a3 	rbit	r3, r3
 8008720:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008728:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800872c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008730:	fa93 f3a3 	rbit	r3, r3
 8008734:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008738:	4b95      	ldr	r3, [pc, #596]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008740:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008744:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008748:	fa92 f2a2 	rbit	r2, r2
 800874c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008750:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008754:	fab2 f282 	clz	r2, r2
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	f042 0220 	orr.w	r2, r2, #32
 800875e:	b2d2      	uxtb	r2, r2
 8008760:	f002 021f 	and.w	r2, r2, #31
 8008764:	2101      	movs	r1, #1
 8008766:	fa01 f202 	lsl.w	r2, r1, r2
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8111 	beq.w	8008994 <HAL_RCC_OscConfig+0x318>
 8008772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008776:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 8108 	bne.w	8008994 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f000 bfc6 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800878a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800878e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879a:	d106      	bne.n	80087aa <HAL_RCC_OscConfig+0x12e>
 800879c:	4b7c      	ldr	r3, [pc, #496]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a7b      	ldr	r2, [pc, #492]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e036      	b.n	8008818 <HAL_RCC_OscConfig+0x19c>
 80087aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCC_OscConfig+0x158>
 80087ba:	4b75      	ldr	r3, [pc, #468]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a74      	ldr	r2, [pc, #464]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	4b72      	ldr	r3, [pc, #456]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a71      	ldr	r2, [pc, #452]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e021      	b.n	8008818 <HAL_RCC_OscConfig+0x19c>
 80087d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80087d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087e4:	d10c      	bne.n	8008800 <HAL_RCC_OscConfig+0x184>
 80087e6:	4b6a      	ldr	r3, [pc, #424]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a69      	ldr	r2, [pc, #420]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	4b67      	ldr	r3, [pc, #412]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a66      	ldr	r2, [pc, #408]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80087f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	e00b      	b.n	8008818 <HAL_RCC_OscConfig+0x19c>
 8008800:	4b63      	ldr	r3, [pc, #396]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a62      	ldr	r2, [pc, #392]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 8008806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b60      	ldr	r3, [pc, #384]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a5f      	ldr	r2, [pc, #380]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 8008812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008816:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800881c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d059      	beq.n	80088dc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008828:	f7fc fa36 	bl	8004c98 <HAL_GetTick>
 800882c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008830:	e00a      	b.n	8008848 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008832:	f7fc fa31 	bl	8004c98 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	; 0x64
 8008840:	d902      	bls.n	8008848 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	f000 bf67 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 8008848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800884c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008850:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008854:	fa93 f3a3 	rbit	r3, r3
 8008858:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800885c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008860:	fab3 f383 	clz	r3, r3
 8008864:	b2db      	uxtb	r3, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d102      	bne.n	800887a <HAL_RCC_OscConfig+0x1fe>
 8008874:	4b46      	ldr	r3, [pc, #280]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	e015      	b.n	80088a6 <HAL_RCC_OscConfig+0x22a>
 800887a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800887e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008882:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008886:	fa93 f3a3 	rbit	r3, r3
 800888a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800888e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008892:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008896:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800889a:	fa93 f3a3 	rbit	r3, r3
 800889e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80088a2:	4b3b      	ldr	r3, [pc, #236]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80088aa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80088ae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80088b2:	fa92 f2a2 	rbit	r2, r2
 80088b6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80088ba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80088be:	fab2 f282 	clz	r2, r2
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	f042 0220 	orr.w	r2, r2, #32
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	f002 021f 	and.w	r2, r2, #31
 80088ce:	2101      	movs	r1, #1
 80088d0:	fa01 f202 	lsl.w	r2, r1, r2
 80088d4:	4013      	ands	r3, r2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0ab      	beq.n	8008832 <HAL_RCC_OscConfig+0x1b6>
 80088da:	e05c      	b.n	8008996 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088dc:	f7fc f9dc 	bl	8004c98 <HAL_GetTick>
 80088e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088e4:	e00a      	b.n	80088fc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e6:	f7fc f9d7 	bl	8004c98 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b64      	cmp	r3, #100	; 0x64
 80088f4:	d902      	bls.n	80088fc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	f000 bf0d 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 80088fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008900:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008904:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008908:	fa93 f3a3 	rbit	r3, r3
 800890c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008910:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008914:	fab3 f383 	clz	r3, r3
 8008918:	b2db      	uxtb	r3, r3
 800891a:	095b      	lsrs	r3, r3, #5
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d102      	bne.n	800892e <HAL_RCC_OscConfig+0x2b2>
 8008928:	4b19      	ldr	r3, [pc, #100]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	e015      	b.n	800895a <HAL_RCC_OscConfig+0x2de>
 800892e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008932:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008936:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800893a:	fa93 f3a3 	rbit	r3, r3
 800893e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008946:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800894a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800894e:	fa93 f3a3 	rbit	r3, r3
 8008952:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_RCC_OscConfig+0x314>)
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800895e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008962:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008966:	fa92 f2a2 	rbit	r2, r2
 800896a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800896e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008972:	fab2 f282 	clz	r2, r2
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	f042 0220 	orr.w	r2, r2, #32
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	f002 021f 	and.w	r2, r2, #31
 8008982:	2101      	movs	r1, #1
 8008984:	fa01 f202 	lsl.w	r2, r1, r2
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1ab      	bne.n	80088e6 <HAL_RCC_OscConfig+0x26a>
 800898e:	e002      	b.n	8008996 <HAL_RCC_OscConfig+0x31a>
 8008990:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800899a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 817f 	beq.w	8008caa <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80089ac:	4ba7      	ldr	r3, [pc, #668]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f003 030c 	and.w	r3, r3, #12
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00c      	beq.n	80089d2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80089b8:	4ba4      	ldr	r3, [pc, #656]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f003 030c 	and.w	r3, r3, #12
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d173      	bne.n	8008aac <HAL_RCC_OscConfig+0x430>
 80089c4:	4ba1      	ldr	r3, [pc, #644]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80089cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d0:	d16c      	bne.n	8008aac <HAL_RCC_OscConfig+0x430>
 80089d2:	2302      	movs	r3, #2
 80089d4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80089dc:	fa93 f3a3 	rbit	r3, r3
 80089e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80089e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089e8:	fab3 f383 	clz	r3, r3
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d102      	bne.n	8008a02 <HAL_RCC_OscConfig+0x386>
 80089fc:	4b93      	ldr	r3, [pc, #588]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	e013      	b.n	8008a2a <HAL_RCC_OscConfig+0x3ae>
 8008a02:	2302      	movs	r3, #2
 8008a04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008a0c:	fa93 f3a3 	rbit	r3, r3
 8008a10:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008a14:	2302      	movs	r3, #2
 8008a16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008a1a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008a1e:	fa93 f3a3 	rbit	r3, r3
 8008a22:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008a26:	4b89      	ldr	r3, [pc, #548]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008a30:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008a34:	fa92 f2a2 	rbit	r2, r2
 8008a38:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008a3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008a40:	fab2 f282 	clz	r2, r2
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	f042 0220 	orr.w	r2, r2, #32
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	f002 021f 	and.w	r2, r2, #31
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f202 	lsl.w	r2, r1, r2
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00a      	beq.n	8008a72 <HAL_RCC_OscConfig+0x3f6>
 8008a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d002      	beq.n	8008a72 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	f000 be52 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a72:	4b76      	ldr	r3, [pc, #472]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008a7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	21f8      	movs	r1, #248	; 0xf8
 8008a88:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a8c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008a90:	fa91 f1a1 	rbit	r1, r1
 8008a94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008a98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008a9c:	fab1 f181 	clz	r1, r1
 8008aa0:	b2c9      	uxtb	r1, r1
 8008aa2:	408b      	lsls	r3, r1
 8008aa4:	4969      	ldr	r1, [pc, #420]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aaa:	e0fe      	b.n	8008caa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ab0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8088 	beq.w	8008bce <HAL_RCC_OscConfig+0x552>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008ac8:	fa93 f3a3 	rbit	r3, r3
 8008acc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008ad0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ad4:	fab3 f383 	clz	r3, r3
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008ade:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aea:	f7fc f8d5 	bl	8004c98 <HAL_GetTick>
 8008aee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008af2:	e00a      	b.n	8008b0a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008af4:	f7fc f8d0 	bl	8004c98 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d902      	bls.n	8008b0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	f000 be06 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008b14:	fa93 f3a3 	rbit	r3, r3
 8008b18:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8008b1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b20:	fab3 f383 	clz	r3, r3
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	095b      	lsrs	r3, r3, #5
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d102      	bne.n	8008b3a <HAL_RCC_OscConfig+0x4be>
 8008b34:	4b45      	ldr	r3, [pc, #276]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	e013      	b.n	8008b62 <HAL_RCC_OscConfig+0x4e6>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008b44:	fa93 f3a3 	rbit	r3, r3
 8008b48:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008b52:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008b56:	fa93 f3a3 	rbit	r3, r3
 8008b5a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008b5e:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2202      	movs	r2, #2
 8008b64:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008b6c:	fa92 f2a2 	rbit	r2, r2
 8008b70:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8008b74:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008b78:	fab2 f282 	clz	r2, r2
 8008b7c:	b2d2      	uxtb	r2, r2
 8008b7e:	f042 0220 	orr.w	r2, r2, #32
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	f002 021f 	and.w	r2, r2, #31
 8008b88:	2101      	movs	r1, #1
 8008b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0af      	beq.n	8008af4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b94:	4b2d      	ldr	r3, [pc, #180]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ba0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	21f8      	movs	r1, #248	; 0xf8
 8008baa:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bae:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8008bb2:	fa91 f1a1 	rbit	r1, r1
 8008bb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8008bba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008bbe:	fab1 f181 	clz	r1, r1
 8008bc2:	b2c9      	uxtb	r1, r1
 8008bc4:	408b      	lsls	r3, r1
 8008bc6:	4921      	ldr	r1, [pc, #132]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	600b      	str	r3, [r1, #0]
 8008bcc:	e06d      	b.n	8008caa <HAL_RCC_OscConfig+0x62e>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008bd8:	fa93 f3a3 	rbit	r3, r3
 8008bdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8008be0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008be4:	fab3 f383 	clz	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008bee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bfa:	f7fc f84d 	bl	8004c98 <HAL_GetTick>
 8008bfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c02:	e00a      	b.n	8008c1a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c04:	f7fc f848 	bl	8004c98 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d902      	bls.n	8008c1a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	f000 bd7e 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c24:	fa93 f3a3 	rbit	r3, r3
 8008c28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8008c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c30:	fab3 f383 	clz	r3, r3
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d105      	bne.n	8008c50 <HAL_RCC_OscConfig+0x5d4>
 8008c44:	4b01      	ldr	r3, [pc, #4]	; (8008c4c <HAL_RCC_OscConfig+0x5d0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	e016      	b.n	8008c78 <HAL_RCC_OscConfig+0x5fc>
 8008c4a:	bf00      	nop
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	2302      	movs	r3, #2
 8008c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5a:	fa93 f3a3 	rbit	r3, r3
 8008c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c62:	2302      	movs	r3, #2
 8008c64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008c68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008c6c:	fa93 f3a3 	rbit	r3, r3
 8008c70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c74:	4bbf      	ldr	r3, [pc, #764]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	2202      	movs	r2, #2
 8008c7a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008c7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8008c82:	fa92 f2a2 	rbit	r2, r2
 8008c86:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8008c8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008c8e:	fab2 f282 	clz	r2, r2
 8008c92:	b2d2      	uxtb	r2, r2
 8008c94:	f042 0220 	orr.w	r2, r2, #32
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	f002 021f 	and.w	r2, r2, #31
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1ac      	bne.n	8008c04 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8113 	beq.w	8008ee6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008cc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d07c      	beq.n	8008dca <HAL_RCC_OscConfig+0x74e>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cda:	fa93 f3a3 	rbit	r3, r3
 8008cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8008ce2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ce6:	fab3 f383 	clz	r3, r3
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	461a      	mov	r2, r3
 8008cee:	4ba2      	ldr	r3, [pc, #648]	; (8008f78 <HAL_RCC_OscConfig+0x8fc>)
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cfa:	f7fb ffcd 	bl	8004c98 <HAL_GetTick>
 8008cfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d04:	f7fb ffc8 	bl	8004c98 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d902      	bls.n	8008d1a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	f000 bcfe 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d24:	fa93 f2a3 	rbit	r2, r3
 8008d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	fa93 f2a3 	rbit	r2, r3
 8008d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d5e:	2202      	movs	r2, #2
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	fa93 f2a3 	rbit	r2, r3
 8008d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d7a:	4b7e      	ldr	r3, [pc, #504]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008d86:	2102      	movs	r1, #2
 8008d88:	6019      	str	r1, [r3, #0]
 8008d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	fa93 f1a3 	rbit	r1, r3
 8008d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008da0:	6019      	str	r1, [r3, #0]
  return result;
 8008da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008da6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d09d      	beq.n	8008d04 <HAL_RCC_OscConfig+0x688>
 8008dc8:	e08d      	b.n	8008ee6 <HAL_RCC_OscConfig+0x86a>
 8008dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008dda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	fa93 f2a3 	rbit	r2, r3
 8008de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008de8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008dec:	601a      	str	r2, [r3, #0]
  return result;
 8008dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008df2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008df6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008df8:	fab3 f383 	clz	r3, r3
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4b5d      	ldr	r3, [pc, #372]	; (8008f78 <HAL_RCC_OscConfig+0x8fc>)
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	461a      	mov	r2, r3
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e0c:	f7fb ff44 	bl	8004c98 <HAL_GetTick>
 8008e10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e14:	e00a      	b.n	8008e2c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e16:	f7fb ff3f 	bl	8004c98 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d902      	bls.n	8008e2c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	f000 bc75 	b.w	8009716 <HAL_RCC_OscConfig+0x109a>
 8008e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e34:	2202      	movs	r2, #2
 8008e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	fa93 f2a3 	rbit	r2, r3
 8008e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e58:	2202      	movs	r2, #2
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	fa93 f2a3 	rbit	r2, r3
 8008e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	fa93 f2a3 	rbit	r2, r3
 8008e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008e96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e98:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ea0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008ea4:	2102      	movs	r1, #2
 8008ea6:	6019      	str	r1, [r3, #0]
 8008ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	fa93 f1a3 	rbit	r1, r3
 8008eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008ebe:	6019      	str	r1, [r3, #0]
  return result;
 8008ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ec4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	fab3 f383 	clz	r3, r3
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2101      	movs	r1, #1
 8008edc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d197      	bne.n	8008e16 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 81a5 	beq.w	8009246 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008efc:	2300      	movs	r3, #0
 8008efe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d116      	bne.n	8008f3c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f0e:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008f10:	69db      	ldr	r3, [r3, #28]
 8008f12:	4a18      	ldr	r2, [pc, #96]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f18:	61d3      	str	r3, [r2, #28]
 8008f1a:	4b16      	ldr	r3, [pc, #88]	; (8008f74 <HAL_RCC_OscConfig+0x8f8>)
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <HAL_RCC_OscConfig+0x900>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d121      	bne.n	8008f8c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f48:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <HAL_RCC_OscConfig+0x900>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <HAL_RCC_OscConfig+0x900>)
 8008f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f54:	f7fb fea0 	bl	8004c98 <HAL_GetTick>
 8008f58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f5c:	e010      	b.n	8008f80 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f5e:	f7fb fe9b 	bl	8004c98 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b64      	cmp	r3, #100	; 0x64
 8008f6c:	d908      	bls.n	8008f80 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e3d1      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 8008f72:	bf00      	nop
 8008f74:	40021000 	.word	0x40021000
 8008f78:	10908120 	.word	0x10908120
 8008f7c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f80:	4b8d      	ldr	r3, [pc, #564]	; (80091b8 <HAL_RCC_OscConfig+0xb3c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0e8      	beq.n	8008f5e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d106      	bne.n	8008faa <HAL_RCC_OscConfig+0x92e>
 8008f9c:	4b87      	ldr	r3, [pc, #540]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	4a86      	ldr	r2, [pc, #536]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	6213      	str	r3, [r2, #32]
 8008fa8:	e035      	b.n	8009016 <HAL_RCC_OscConfig+0x99a>
 8008faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x958>
 8008fba:	4b80      	ldr	r3, [pc, #512]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	4a7f      	ldr	r2, [pc, #508]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6213      	str	r3, [r2, #32]
 8008fc6:	4b7d      	ldr	r3, [pc, #500]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	4a7c      	ldr	r2, [pc, #496]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fcc:	f023 0304 	bic.w	r3, r3, #4
 8008fd0:	6213      	str	r3, [r2, #32]
 8008fd2:	e020      	b.n	8009016 <HAL_RCC_OscConfig+0x99a>
 8008fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008fd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b05      	cmp	r3, #5
 8008fe2:	d10c      	bne.n	8008ffe <HAL_RCC_OscConfig+0x982>
 8008fe4:	4b75      	ldr	r3, [pc, #468]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	4a74      	ldr	r2, [pc, #464]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008fea:	f043 0304 	orr.w	r3, r3, #4
 8008fee:	6213      	str	r3, [r2, #32]
 8008ff0:	4b72      	ldr	r3, [pc, #456]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	4a71      	ldr	r2, [pc, #452]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6213      	str	r3, [r2, #32]
 8008ffc:	e00b      	b.n	8009016 <HAL_RCC_OscConfig+0x99a>
 8008ffe:	4b6f      	ldr	r3, [pc, #444]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	4a6e      	ldr	r2, [pc, #440]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	6213      	str	r3, [r2, #32]
 800900a:	4b6c      	ldr	r3, [pc, #432]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	4a6b      	ldr	r2, [pc, #428]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 8009010:	f023 0304 	bic.w	r3, r3, #4
 8009014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800901a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8081 	beq.w	800912a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009028:	f7fb fe36 	bl	8004c98 <HAL_GetTick>
 800902c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009030:	e00b      	b.n	800904a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009032:	f7fb fe31 	bl	8004c98 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009042:	4293      	cmp	r3, r2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e365      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 800904a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800904e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009052:	2202      	movs	r2, #2
 8009054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800905a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	fa93 f2a3 	rbit	r2, r3
 8009064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009068:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009072:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009076:	2202      	movs	r2, #2
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800907e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	fa93 f2a3 	rbit	r2, r3
 8009088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800908c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009090:	601a      	str	r2, [r3, #0]
  return result;
 8009092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009096:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800909a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800909c:	fab3 f383 	clz	r3, r3
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	095b      	lsrs	r3, r3, #5
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f043 0302 	orr.w	r3, r3, #2
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d102      	bne.n	80090b6 <HAL_RCC_OscConfig+0xa3a>
 80090b0:	4b42      	ldr	r3, [pc, #264]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	e013      	b.n	80090de <HAL_RCC_OscConfig+0xa62>
 80090b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80090be:	2202      	movs	r2, #2
 80090c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	fa93 f2a3 	rbit	r2, r3
 80090d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80090d4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	4b38      	ldr	r3, [pc, #224]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80090e6:	2102      	movs	r1, #2
 80090e8:	6011      	str	r1, [r2, #0]
 80090ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80090f2:	6812      	ldr	r2, [r2, #0]
 80090f4:	fa92 f1a2 	rbit	r1, r2
 80090f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80090fc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8009100:	6011      	str	r1, [r2, #0]
  return result;
 8009102:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009106:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	fab2 f282 	clz	r2, r2
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	f002 021f 	and.w	r2, r2, #31
 800911c:	2101      	movs	r1, #1
 800911e:	fa01 f202 	lsl.w	r2, r1, r2
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d084      	beq.n	8009032 <HAL_RCC_OscConfig+0x9b6>
 8009128:	e083      	b.n	8009232 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800912a:	f7fb fdb5 	bl	8004c98 <HAL_GetTick>
 800912e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009132:	e00b      	b.n	800914c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009134:	f7fb fdb0 	bl	8004c98 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	f241 3288 	movw	r2, #5000	; 0x1388
 8009144:	4293      	cmp	r3, r2
 8009146:	d901      	bls.n	800914c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e2e4      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 800914c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009150:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009154:	2202      	movs	r2, #2
 8009156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800915c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	fa93 f2a3 	rbit	r2, r3
 8009166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800916a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009174:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009178:	2202      	movs	r2, #2
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009180:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	fa93 f2a3 	rbit	r2, r3
 800918a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800918e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009192:	601a      	str	r2, [r3, #0]
  return result;
 8009194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009198:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800919c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800919e:	fab3 f383 	clz	r3, r3
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d106      	bne.n	80091c0 <HAL_RCC_OscConfig+0xb44>
 80091b2:	4b02      	ldr	r3, [pc, #8]	; (80091bc <HAL_RCC_OscConfig+0xb40>)
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	e017      	b.n	80091e8 <HAL_RCC_OscConfig+0xb6c>
 80091b8:	40007000 	.word	0x40007000
 80091bc:	40021000 	.word	0x40021000
 80091c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80091c8:	2202      	movs	r2, #2
 80091ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	fa93 f2a3 	rbit	r2, r3
 80091da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80091de:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	4bb3      	ldr	r3, [pc, #716]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80091f0:	2102      	movs	r1, #2
 80091f2:	6011      	str	r1, [r2, #0]
 80091f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80091f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	fa92 f1a2 	rbit	r1, r2
 8009202:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009206:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800920a:	6011      	str	r1, [r2, #0]
  return result;
 800920c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009210:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8009214:	6812      	ldr	r2, [r2, #0]
 8009216:	fab2 f282 	clz	r2, r2
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	f002 021f 	and.w	r2, r2, #31
 8009226:	2101      	movs	r1, #1
 8009228:	fa01 f202 	lsl.w	r2, r1, r2
 800922c:	4013      	ands	r3, r2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d180      	bne.n	8009134 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009232:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009236:	2b01      	cmp	r3, #1
 8009238:	d105      	bne.n	8009246 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800923a:	4b9e      	ldr	r3, [pc, #632]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	4a9d      	ldr	r2, [pc, #628]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 8009240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009244:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800924a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 825e 	beq.w	8009714 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009258:	4b96      	ldr	r3, [pc, #600]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f003 030c 	and.w	r3, r3, #12
 8009260:	2b08      	cmp	r3, #8
 8009262:	f000 821f 	beq.w	80096a4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800926a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	2b02      	cmp	r3, #2
 8009274:	f040 8170 	bne.w	8009558 <HAL_RCC_OscConfig+0xedc>
 8009278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800927c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800928a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	fa93 f2a3 	rbit	r2, r3
 8009294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009298:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800929c:	601a      	str	r2, [r3, #0]
  return result;
 800929e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80092a6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a8:	fab3 f383 	clz	r3, r3
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	461a      	mov	r2, r3
 80092ba:	2300      	movs	r3, #0
 80092bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092be:	f7fb fceb 	bl	8004c98 <HAL_GetTick>
 80092c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092c6:	e009      	b.n	80092dc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092c8:	f7fb fce6 	bl	8004c98 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e21c      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 80092dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80092e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80092e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092ee:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	fa93 f2a3 	rbit	r2, r3
 80092f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80092fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009300:	601a      	str	r2, [r3, #0]
  return result;
 8009302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009306:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800930a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800930c:	fab3 f383 	clz	r3, r3
 8009310:	b2db      	uxtb	r3, r3
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	b2db      	uxtb	r3, r3
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d102      	bne.n	8009326 <HAL_RCC_OscConfig+0xcaa>
 8009320:	4b64      	ldr	r3, [pc, #400]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	e027      	b.n	8009376 <HAL_RCC_OscConfig+0xcfa>
 8009326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800932a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800932e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009338:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	fa93 f2a3 	rbit	r2, r3
 8009342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009346:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009350:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800935e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	fa93 f2a3 	rbit	r2, r3
 8009368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800936c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	4b50      	ldr	r3, [pc, #320]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800937a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800937e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009382:	6011      	str	r1, [r2, #0]
 8009384:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009388:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	fa92 f1a2 	rbit	r1, r2
 8009392:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009396:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800939a:	6011      	str	r1, [r2, #0]
  return result;
 800939c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80093a0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80093a4:	6812      	ldr	r2, [r2, #0]
 80093a6:	fab2 f282 	clz	r2, r2
 80093aa:	b2d2      	uxtb	r2, r2
 80093ac:	f042 0220 	orr.w	r2, r2, #32
 80093b0:	b2d2      	uxtb	r2, r2
 80093b2:	f002 021f 	and.w	r2, r2, #31
 80093b6:	2101      	movs	r1, #1
 80093b8:	fa01 f202 	lsl.w	r2, r1, r2
 80093bc:	4013      	ands	r3, r2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d182      	bne.n	80092c8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093c2:	4b3c      	ldr	r3, [pc, #240]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	f023 020f 	bic.w	r2, r3, #15
 80093ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	4937      	ldr	r1, [pc, #220]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	62cb      	str	r3, [r1, #44]	; 0x2c
 80093dc:	4b35      	ldr	r3, [pc, #212]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80093e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6a19      	ldr	r1, [r3, #32]
 80093f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69db      	ldr	r3, [r3, #28]
 80093fc:	430b      	orrs	r3, r1
 80093fe:	492d      	ldr	r1, [pc, #180]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 8009400:	4313      	orrs	r3, r2
 8009402:	604b      	str	r3, [r1, #4]
 8009404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009408:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800940c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009416:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	fa93 f2a3 	rbit	r2, r3
 8009420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009424:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009428:	601a      	str	r2, [r3, #0]
  return result;
 800942a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800942e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009432:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009434:	fab3 f383 	clz	r3, r3
 8009438:	b2db      	uxtb	r3, r3
 800943a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800943e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	461a      	mov	r2, r3
 8009446:	2301      	movs	r3, #1
 8009448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800944a:	f7fb fc25 	bl	8004c98 <HAL_GetTick>
 800944e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009452:	e009      	b.n	8009468 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009454:	f7fb fc20 	bl	8004c98 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e156      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 8009468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800946c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800947a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	fa93 f2a3 	rbit	r2, r3
 8009484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009488:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800948c:	601a      	str	r2, [r3, #0]
  return result;
 800948e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009492:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009496:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009498:	fab3 f383 	clz	r3, r3
 800949c:	b2db      	uxtb	r3, r3
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f043 0301 	orr.w	r3, r3, #1
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d105      	bne.n	80094b8 <HAL_RCC_OscConfig+0xe3c>
 80094ac:	4b01      	ldr	r3, [pc, #4]	; (80094b4 <HAL_RCC_OscConfig+0xe38>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	e02a      	b.n	8009508 <HAL_RCC_OscConfig+0xe8c>
 80094b2:	bf00      	nop
 80094b4:	40021000 	.word	0x40021000
 80094b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094bc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80094c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094ca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	fa93 f2a3 	rbit	r2, r3
 80094d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80094e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094f0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	fa93 f2a3 	rbit	r2, r3
 80094fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094fe:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	4b86      	ldr	r3, [pc, #536]	; (8009720 <HAL_RCC_OscConfig+0x10a4>)
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800950c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009510:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009514:	6011      	str	r1, [r2, #0]
 8009516:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800951a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800951e:	6812      	ldr	r2, [r2, #0]
 8009520:	fa92 f1a2 	rbit	r1, r2
 8009524:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009528:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800952c:	6011      	str	r1, [r2, #0]
  return result;
 800952e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009532:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009536:	6812      	ldr	r2, [r2, #0]
 8009538:	fab2 f282 	clz	r2, r2
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	f042 0220 	orr.w	r2, r2, #32
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	f002 021f 	and.w	r2, r2, #31
 8009548:	2101      	movs	r1, #1
 800954a:	fa01 f202 	lsl.w	r2, r1, r2
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	f43f af7f 	beq.w	8009454 <HAL_RCC_OscConfig+0xdd8>
 8009556:	e0dd      	b.n	8009714 <HAL_RCC_OscConfig+0x1098>
 8009558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800955c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800956a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	fa93 f2a3 	rbit	r2, r3
 8009574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009578:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800957c:	601a      	str	r2, [r3, #0]
  return result;
 800957e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009582:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009586:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009588:	fab3 f383 	clz	r3, r3
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	461a      	mov	r2, r3
 800959a:	2300      	movs	r3, #0
 800959c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800959e:	f7fb fb7b 	bl	8004c98 <HAL_GetTick>
 80095a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095a6:	e009      	b.n	80095bc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095a8:	f7fb fb76 	bl	8004c98 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d901      	bls.n	80095bc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e0ac      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
 80095bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80095c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80095c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095ce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	fa93 f2a3 	rbit	r2, r3
 80095d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80095e0:	601a      	str	r2, [r3, #0]
  return result;
 80095e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80095ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095ec:	fab3 f383 	clz	r3, r3
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d102      	bne.n	8009606 <HAL_RCC_OscConfig+0xf8a>
 8009600:	4b47      	ldr	r3, [pc, #284]	; (8009720 <HAL_RCC_OscConfig+0x10a4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	e027      	b.n	8009656 <HAL_RCC_OscConfig+0xfda>
 8009606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800960a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800960e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009618:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	fa93 f2a3 	rbit	r2, r3
 8009622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009626:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009630:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800963e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	fa93 f2a3 	rbit	r2, r3
 8009648:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800964c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	4b33      	ldr	r3, [pc, #204]	; (8009720 <HAL_RCC_OscConfig+0x10a4>)
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800965a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800965e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009662:	6011      	str	r1, [r2, #0]
 8009664:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009668:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	fa92 f1a2 	rbit	r1, r2
 8009672:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009676:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800967a:	6011      	str	r1, [r2, #0]
  return result;
 800967c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009680:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009684:	6812      	ldr	r2, [r2, #0]
 8009686:	fab2 f282 	clz	r2, r2
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	f042 0220 	orr.w	r2, r2, #32
 8009690:	b2d2      	uxtb	r2, r2
 8009692:	f002 021f 	and.w	r2, r2, #31
 8009696:	2101      	movs	r1, #1
 8009698:	fa01 f202 	lsl.w	r2, r1, r2
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d182      	bne.n	80095a8 <HAL_RCC_OscConfig+0xf2c>
 80096a2:	e037      	b.n	8009714 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e02e      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80096b8:	4b19      	ldr	r3, [pc, #100]	; (8009720 <HAL_RCC_OscConfig+0x10a4>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80096c0:	4b17      	ldr	r3, [pc, #92]	; (8009720 <HAL_RCC_OscConfig+0x10a4>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80096c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80096cc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80096d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d117      	bne.n	8009710 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80096e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80096e4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80096e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d10b      	bne.n	8009710 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80096f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009704:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800970c:	429a      	cmp	r2, r3
 800970e:	d001      	beq.n	8009714 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40021000 	.word	0x40021000

08009724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b09e      	sub	sp, #120	; 0x78
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d101      	bne.n	800973c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e162      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800973c:	4b90      	ldr	r3, [pc, #576]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d910      	bls.n	800976c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974a:	4b8d      	ldr	r3, [pc, #564]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f023 0207 	bic.w	r2, r3, #7
 8009752:	498b      	ldr	r1, [pc, #556]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	4313      	orrs	r3, r2
 8009758:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800975a:	4b89      	ldr	r3, [pc, #548]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d001      	beq.n	800976c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e14a      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d008      	beq.n	800978a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009778:	4b82      	ldr	r3, [pc, #520]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	497f      	ldr	r1, [pc, #508]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 8009786:	4313      	orrs	r3, r2
 8009788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80dc 	beq.w	8009950 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d13c      	bne.n	800981a <HAL_RCC_ClockConfig+0xf6>
 80097a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097a8:	fa93 f3a3 	rbit	r3, r3
 80097ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80097ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097b0:	fab3 f383 	clz	r3, r3
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	095b      	lsrs	r3, r3, #5
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d102      	bne.n	80097ca <HAL_RCC_ClockConfig+0xa6>
 80097c4:	4b6f      	ldr	r3, [pc, #444]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	e00f      	b.n	80097ea <HAL_RCC_ClockConfig+0xc6>
 80097ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097d2:	fa93 f3a3 	rbit	r3, r3
 80097d6:	667b      	str	r3, [r7, #100]	; 0x64
 80097d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097dc:	663b      	str	r3, [r7, #96]	; 0x60
 80097de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097e0:	fa93 f3a3 	rbit	r3, r3
 80097e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097e6:	4b67      	ldr	r3, [pc, #412]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80097ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80097f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097f2:	fa92 f2a2 	rbit	r2, r2
 80097f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80097f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097fa:	fab2 f282 	clz	r2, r2
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	f042 0220 	orr.w	r2, r2, #32
 8009804:	b2d2      	uxtb	r2, r2
 8009806:	f002 021f 	and.w	r2, r2, #31
 800980a:	2101      	movs	r1, #1
 800980c:	fa01 f202 	lsl.w	r2, r1, r2
 8009810:	4013      	ands	r3, r2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d17b      	bne.n	800990e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e0f3      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d13c      	bne.n	800989c <HAL_RCC_ClockConfig+0x178>
 8009822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009826:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800982a:	fa93 f3a3 	rbit	r3, r3
 800982e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009832:	fab3 f383 	clz	r3, r3
 8009836:	b2db      	uxtb	r3, r3
 8009838:	095b      	lsrs	r3, r3, #5
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f043 0301 	orr.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b01      	cmp	r3, #1
 8009844:	d102      	bne.n	800984c <HAL_RCC_ClockConfig+0x128>
 8009846:	4b4f      	ldr	r3, [pc, #316]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	e00f      	b.n	800986c <HAL_RCC_ClockConfig+0x148>
 800984c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009850:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009854:	fa93 f3a3 	rbit	r3, r3
 8009858:	647b      	str	r3, [r7, #68]	; 0x44
 800985a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800985e:	643b      	str	r3, [r7, #64]	; 0x40
 8009860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009862:	fa93 f3a3 	rbit	r3, r3
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009868:	4b46      	ldr	r3, [pc, #280]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009870:	63ba      	str	r2, [r7, #56]	; 0x38
 8009872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009874:	fa92 f2a2 	rbit	r2, r2
 8009878:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800987a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800987c:	fab2 f282 	clz	r2, r2
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	f042 0220 	orr.w	r2, r2, #32
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	f002 021f 	and.w	r2, r2, #31
 800988c:	2101      	movs	r1, #1
 800988e:	fa01 f202 	lsl.w	r2, r1, r2
 8009892:	4013      	ands	r3, r2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d13a      	bne.n	800990e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e0b2      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
 800989c:	2302      	movs	r3, #2
 800989e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	fa93 f3a3 	rbit	r3, r3
 80098a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098aa:	fab3 f383 	clz	r3, r3
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d102      	bne.n	80098c4 <HAL_RCC_ClockConfig+0x1a0>
 80098be:	4b31      	ldr	r3, [pc, #196]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	e00d      	b.n	80098e0 <HAL_RCC_ClockConfig+0x1bc>
 80098c4:	2302      	movs	r3, #2
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	fa93 f3a3 	rbit	r3, r3
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
 80098d0:	2302      	movs	r3, #2
 80098d2:	623b      	str	r3, [r7, #32]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	fa93 f3a3 	rbit	r3, r3
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	4b29      	ldr	r3, [pc, #164]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 80098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e0:	2202      	movs	r2, #2
 80098e2:	61ba      	str	r2, [r7, #24]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	fa92 f2a2 	rbit	r2, r2
 80098ea:	617a      	str	r2, [r7, #20]
  return result;
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	fab2 f282 	clz	r2, r2
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	f042 0220 	orr.w	r2, r2, #32
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	f002 021f 	and.w	r2, r2, #31
 80098fe:	2101      	movs	r1, #1
 8009900:	fa01 f202 	lsl.w	r2, r1, r2
 8009904:	4013      	ands	r3, r2
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e079      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800990e:	4b1d      	ldr	r3, [pc, #116]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f023 0203 	bic.w	r2, r3, #3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	491a      	ldr	r1, [pc, #104]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 800991c:	4313      	orrs	r3, r2
 800991e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009920:	f7fb f9ba 	bl	8004c98 <HAL_GetTick>
 8009924:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009926:	e00a      	b.n	800993e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009928:	f7fb f9b6 	bl	8004c98 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f241 3288 	movw	r2, #5000	; 0x1388
 8009936:	4293      	cmp	r3, r2
 8009938:	d901      	bls.n	800993e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e061      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800993e:	4b11      	ldr	r3, [pc, #68]	; (8009984 <HAL_RCC_ClockConfig+0x260>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f003 020c 	and.w	r2, r3, #12
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	429a      	cmp	r2, r3
 800994e:	d1eb      	bne.n	8009928 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	429a      	cmp	r2, r3
 800995c:	d214      	bcs.n	8009988 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800995e:	4b08      	ldr	r3, [pc, #32]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f023 0207 	bic.w	r2, r3, #7
 8009966:	4906      	ldr	r1, [pc, #24]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	4313      	orrs	r3, r2
 800996c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800996e:	4b04      	ldr	r3, [pc, #16]	; (8009980 <HAL_RCC_ClockConfig+0x25c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d005      	beq.n	8009988 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e040      	b.n	8009a02 <HAL_RCC_ClockConfig+0x2de>
 8009980:	40022000 	.word	0x40022000
 8009984:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009994:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <HAL_RCC_ClockConfig+0x2e8>)
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	491a      	ldr	r1, [pc, #104]	; (8009a0c <HAL_RCC_ClockConfig+0x2e8>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d009      	beq.n	80099c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <HAL_RCC_ClockConfig+0x2e8>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	4912      	ldr	r1, [pc, #72]	; (8009a0c <HAL_RCC_ClockConfig+0x2e8>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80099c6:	f000 f829 	bl	8009a1c <HAL_RCC_GetSysClockFreq>
 80099ca:	4601      	mov	r1, r0
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <HAL_RCC_ClockConfig+0x2e8>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d4:	22f0      	movs	r2, #240	; 0xf0
 80099d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	fa92 f2a2 	rbit	r2, r2
 80099de:	60fa      	str	r2, [r7, #12]
  return result;
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	fab2 f282 	clz	r2, r2
 80099e6:	b2d2      	uxtb	r2, r2
 80099e8:	40d3      	lsrs	r3, r2
 80099ea:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <HAL_RCC_ClockConfig+0x2ec>)
 80099ec:	5cd3      	ldrb	r3, [r2, r3]
 80099ee:	fa21 f303 	lsr.w	r3, r1, r3
 80099f2:	4a08      	ldr	r2, [pc, #32]	; (8009a14 <HAL_RCC_ClockConfig+0x2f0>)
 80099f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80099f6:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <HAL_RCC_ClockConfig+0x2f4>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fb f908 	bl	8004c10 <HAL_InitTick>
  
  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3778      	adds	r7, #120	; 0x78
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40021000 	.word	0x40021000
 8009a10:	0801be4c 	.word	0x0801be4c
 8009a14:	20000004 	.word	0x20000004
 8009a18:	20000008 	.word	0x20000008

08009a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b08b      	sub	sp, #44	; 0x2c
 8009a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	2300      	movs	r3, #0
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2e:	2300      	movs	r3, #0
 8009a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009a32:	2300      	movs	r3, #0
 8009a34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009a36:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f003 030c 	and.w	r3, r3, #12
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d002      	beq.n	8009a4c <HAL_RCC_GetSysClockFreq+0x30>
 8009a46:	2b08      	cmp	r3, #8
 8009a48:	d003      	beq.n	8009a52 <HAL_RCC_GetSysClockFreq+0x36>
 8009a4a:	e03f      	b.n	8009acc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a4c:	4b25      	ldr	r3, [pc, #148]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009a4e:	623b      	str	r3, [r7, #32]
      break;
 8009a50:	e03f      	b.n	8009ad2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009a58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009a5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	fa92 f2a2 	rbit	r2, r2
 8009a64:	607a      	str	r2, [r7, #4]
  return result;
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	fab2 f282 	clz	r2, r2
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	40d3      	lsrs	r3, r2
 8009a70:	4a1d      	ldr	r2, [pc, #116]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009a72:	5cd3      	ldrb	r3, [r2, r3]
 8009a74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009a76:	4b1a      	ldr	r3, [pc, #104]	; (8009ae0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	220f      	movs	r2, #15
 8009a80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	fa92 f2a2 	rbit	r2, r2
 8009a88:	60fa      	str	r2, [r7, #12]
  return result;
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	fab2 f282 	clz	r2, r2
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	40d3      	lsrs	r3, r2
 8009a94:	4a15      	ldr	r2, [pc, #84]	; (8009aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8009a96:	5cd3      	ldrb	r3, [r2, r3]
 8009a98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d008      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009aa4:	4a0f      	ldr	r2, [pc, #60]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ab4:	e007      	b.n	8009ac6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009ab6:	4a0b      	ldr	r2, [pc, #44]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	fb02 f303 	mul.w	r3, r2, r3
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	623b      	str	r3, [r7, #32]
      break;
 8009aca:	e002      	b.n	8009ad2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009ace:	623b      	str	r3, [r7, #32]
      break;
 8009ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	372c      	adds	r7, #44	; 0x2c
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	007a1200 	.word	0x007a1200
 8009ae8:	0801be64 	.word	0x0801be64
 8009aec:	0801be74 	.word	0x0801be74

08009af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009af4:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8009af6:	681b      	ldr	r3, [r3, #0]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000004 	.word	0x20000004

08009b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009b0e:	f7ff ffef 	bl	8009af0 <HAL_RCC_GetHCLKFreq>
 8009b12:	4601      	mov	r1, r0
 8009b14:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	fa92 f2a2 	rbit	r2, r2
 8009b28:	603a      	str	r2, [r7, #0]
  return result;
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	fab2 f282 	clz	r2, r2
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	40d3      	lsrs	r3, r2
 8009b34:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009b36:	5cd3      	ldrb	r3, [r2, r3]
 8009b38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	40021000 	.word	0x40021000
 8009b48:	0801be5c 	.word	0x0801be5c

08009b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009b52:	f7ff ffcd 	bl	8009af0 <HAL_RCC_GetHCLKFreq>
 8009b56:	4601      	mov	r1, r0
 8009b58:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009b60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	fa92 f2a2 	rbit	r2, r2
 8009b6c:	603a      	str	r2, [r7, #0]
  return result;
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	fab2 f282 	clz	r2, r2
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	40d3      	lsrs	r3, r2
 8009b78:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8009b7a:	5cd3      	ldrb	r3, [r2, r3]
 8009b7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40021000 	.word	0x40021000
 8009b8c:	0801be5c 	.word	0x0801be5c

08009b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b092      	sub	sp, #72	; 0x48
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80d4 	beq.w	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bb4:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10e      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bc0:	4b4b      	ldr	r3, [pc, #300]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	4a4a      	ldr	r2, [pc, #296]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bca:	61d3      	str	r3, [r2, #28]
 8009bcc:	4b48      	ldr	r3, [pc, #288]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bd4:	60bb      	str	r3, [r7, #8]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bde:	4b45      	ldr	r3, [pc, #276]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d118      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bea:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a41      	ldr	r2, [pc, #260]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bf6:	f7fb f84f 	bl	8004c98 <HAL_GetTick>
 8009bfa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bfc:	e008      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bfe:	f7fb f84b 	bl	8004c98 <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b64      	cmp	r3, #100	; 0x64
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e1d6      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c10:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0f0      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c1c:	4b34      	ldr	r3, [pc, #208]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 8084 	beq.w	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d07c      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c3c:	4b2c      	ldr	r3, [pc, #176]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	fa93 f3a3 	rbit	r3, r3
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c56:	fab3 f383 	clz	r3, r3
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	461a      	mov	r2, r3
 8009c66:	2301      	movs	r3, #1
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	fa93 f3a3 	rbit	r3, r3
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c7a:	fab3 f383 	clz	r3, r3
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	461a      	mov	r2, r3
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009c8e:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d04b      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c9e:	f7fa fffb 	bl	8004c98 <HAL_GetTick>
 8009ca2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ca4:	e00a      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ca6:	f7fa fff7 	bl	8004c98 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e180      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	fa93 f3a3 	rbit	r3, r3
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cc8:	2302      	movs	r3, #2
 8009cca:	623b      	str	r3, [r7, #32]
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	fa93 f3a3 	rbit	r3, r3
 8009cd2:	61fb      	str	r3, [r7, #28]
  return result;
 8009cd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cd6:	fab3 f383 	clz	r3, r3
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	095b      	lsrs	r3, r3, #5
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f043 0302 	orr.w	r3, r3, #2
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d108      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009cea:	4b01      	ldr	r3, [pc, #4]	; (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	e00d      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009cf0:	40021000 	.word	0x40021000
 8009cf4:	40007000 	.word	0x40007000
 8009cf8:	10908100 	.word	0x10908100
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	fa93 f3a3 	rbit	r3, r3
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	4b9a      	ldr	r3, [pc, #616]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	613a      	str	r2, [r7, #16]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	fa92 f2a2 	rbit	r2, r2
 8009d16:	60fa      	str	r2, [r7, #12]
  return result;
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	fab2 f282 	clz	r2, r2
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d24:	b2d2      	uxtb	r2, r2
 8009d26:	f002 021f 	and.w	r2, r2, #31
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0b7      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009d36:	4b8f      	ldr	r3, [pc, #572]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	498c      	ldr	r1, [pc, #560]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009d48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d105      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d50:	4b88      	ldr	r3, [pc, #544]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	4a87      	ldr	r2, [pc, #540]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d68:	4b82      	ldr	r3, [pc, #520]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6c:	f023 0203 	bic.w	r2, r3, #3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	497f      	ldr	r1, [pc, #508]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d86:	4b7b      	ldr	r3, [pc, #492]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	4978      	ldr	r1, [pc, #480]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0304 	and.w	r3, r3, #4
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d008      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009da4:	4b73      	ldr	r3, [pc, #460]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	4970      	ldr	r1, [pc, #448]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d008      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009dc2:	4b6c      	ldr	r3, [pc, #432]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc6:	f023 0210 	bic.w	r2, r3, #16
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	4969      	ldr	r1, [pc, #420]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d008      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8009de0:	4b64      	ldr	r3, [pc, #400]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dec:	4961      	ldr	r1, [pc, #388]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d008      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009dfe:	4b5d      	ldr	r3, [pc, #372]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	f023 0220 	bic.w	r2, r3, #32
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	495a      	ldr	r1, [pc, #360]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d008      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e1c:	4b55      	ldr	r3, [pc, #340]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	4952      	ldr	r1, [pc, #328]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d008      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e3a:	4b4e      	ldr	r3, [pc, #312]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	494b      	ldr	r1, [pc, #300]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0310 	and.w	r3, r3, #16
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d008      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e58:	4b46      	ldr	r3, [pc, #280]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	4943      	ldr	r1, [pc, #268]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d008      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009e76:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	493c      	ldr	r1, [pc, #240]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e84:	4313      	orrs	r3, r2
 8009e86:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009e94:	4b37      	ldr	r3, [pc, #220]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	4934      	ldr	r1, [pc, #208]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009eb2:	4b30      	ldr	r3, [pc, #192]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	492d      	ldr	r1, [pc, #180]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d008      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	4925      	ldr	r1, [pc, #148]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d008      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8009eee:	4b21      	ldr	r3, [pc, #132]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	491e      	ldr	r1, [pc, #120]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009efc:	4313      	orrs	r3, r2
 8009efe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8009f0c:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f18:	4916      	ldr	r1, [pc, #88]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d008      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8009f2a:	4b12      	ldr	r3, [pc, #72]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f36:	490f      	ldr	r1, [pc, #60]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f54:	4907      	ldr	r1, [pc, #28]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00c      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8009f66:	4b03      	ldr	r3, [pc, #12]	; (8009f74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8009f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	e002      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009f72:	bf00      	nop
 8009f74:	40021000 	.word	0x40021000
 8009f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7a:	4913      	ldr	r1, [pc, #76]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f98:	490b      	ldr	r1, [pc, #44]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8009faa:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb6:	4904      	ldr	r1, [pc, #16]	; (8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3748      	adds	r7, #72	; 0x48
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	40021000 	.word	0x40021000

08009fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e09d      	b.n	800a11a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d108      	bne.n	8009ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fee:	d009      	beq.n	800a004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	61da      	str	r2, [r3, #28]
 8009ff6:	e005      	b.n	800a004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7fa fa6a 	bl	80044f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2202      	movs	r2, #2
 800a028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a03a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a044:	d902      	bls.n	800a04c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	e002      	b.n	800a052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a04c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a05a:	d007      	beq.n	800a06c <HAL_SPI_Init+0xa0>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a064:	d002      	beq.n	800a06c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a07c:	431a      	orrs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ae:	ea42 0103 	orr.w	r1, r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	430a      	orrs	r2, r1
 800a0c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	0c1b      	lsrs	r3, r3, #16
 800a0c8:	f003 0204 	and.w	r2, r3, #4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	431a      	orrs	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0da:	f003 0308 	and.w	r3, r3, #8
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a0e8:	ea42 0103 	orr.w	r1, r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	69da      	ldr	r2, [r3, #28]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b088      	sub	sp, #32
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_SPI_Transmit+0x22>
 800a140:	2302      	movs	r3, #2
 800a142:	e15f      	b.n	800a404 <HAL_SPI_Transmit+0x2e2>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a14c:	f7fa fda4 	bl	8004c98 <HAL_GetTick>
 800a150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a152:	88fb      	ldrh	r3, [r7, #6]
 800a154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d002      	beq.n	800a168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a162:	2302      	movs	r3, #2
 800a164:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a166:	e148      	b.n	800a3fa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <HAL_SPI_Transmit+0x52>
 800a16e:	88fb      	ldrh	r3, [r7, #6]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d102      	bne.n	800a17a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a178:	e13f      	b.n	800a3fa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2203      	movs	r2, #3
 800a17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c4:	d10f      	bne.n	800a1e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d007      	beq.n	800a204 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a20c:	d94f      	bls.n	800a2ae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_SPI_Transmit+0xfa>
 800a216:	8afb      	ldrh	r3, [r7, #22]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d142      	bne.n	800a2a2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	881a      	ldrh	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22c:	1c9a      	adds	r2, r3, #2
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a240:	e02f      	b.n	800a2a2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d112      	bne.n	800a276 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a254:	881a      	ldrh	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a260:	1c9a      	adds	r2, r3, #2
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	3b01      	subs	r3, #1
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a274:	e015      	b.n	800a2a2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a276:	f7fa fd0f 	bl	8004c98 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d803      	bhi.n	800a28e <HAL_SPI_Transmit+0x16c>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d102      	bne.n	800a294 <HAL_SPI_Transmit+0x172>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a2a0:	e0ab      	b.n	800a3fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1ca      	bne.n	800a242 <HAL_SPI_Transmit+0x120>
 800a2ac:	e080      	b.n	800a3b0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_SPI_Transmit+0x19a>
 800a2b6:	8afb      	ldrh	r3, [r7, #22]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d174      	bne.n	800a3a6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d912      	bls.n	800a2ec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	1c9a      	adds	r2, r3, #2
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b02      	subs	r3, #2
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2ea:	e05c      	b.n	800a3a6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	7812      	ldrb	r2, [r2, #0]
 800a2f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a312:	e048      	b.n	800a3a6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d12b      	bne.n	800a37a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a326:	b29b      	uxth	r3, r3
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d912      	bls.n	800a352 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	881a      	ldrh	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33c:	1c9a      	adds	r2, r3, #2
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a346:	b29b      	uxth	r3, r3
 800a348:	3b02      	subs	r3, #2
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a350:	e029      	b.n	800a3a6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	330c      	adds	r3, #12
 800a35c:	7812      	ldrb	r2, [r2, #0]
 800a35e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a36e:	b29b      	uxth	r3, r3
 800a370:	3b01      	subs	r3, #1
 800a372:	b29a      	uxth	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a378:	e015      	b.n	800a3a6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a37a:	f7fa fc8d 	bl	8004c98 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d803      	bhi.n	800a392 <HAL_SPI_Transmit+0x270>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a390:	d102      	bne.n	800a398 <HAL_SPI_Transmit+0x276>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800a3a4:	e029      	b.n	800a3fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1b1      	bne.n	800a314 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fb69 	bl	800aa8c <SPI_EndRxTxTransaction>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10a      	bne.n	800a3e4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e003      	b.n	800a3fa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a402:	7ffb      	ldrb	r3, [r7, #31]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	; 0x28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a41a:	2301      	movs	r3, #1
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_SPI_TransmitReceive+0x26>
 800a42e:	2302      	movs	r3, #2
 800a430:	e20a      	b.n	800a848 <HAL_SPI_TransmitReceive+0x43c>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a43a:	f7fa fc2d 	bl	8004c98 <HAL_GetTick>
 800a43e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a446:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a44e:	887b      	ldrh	r3, [r7, #2]
 800a450:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a452:	887b      	ldrh	r3, [r7, #2]
 800a454:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a456:	7efb      	ldrb	r3, [r7, #27]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d00e      	beq.n	800a47a <HAL_SPI_TransmitReceive+0x6e>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a462:	d106      	bne.n	800a472 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <HAL_SPI_TransmitReceive+0x66>
 800a46c:	7efb      	ldrb	r3, [r7, #27]
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d003      	beq.n	800a47a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a472:	2302      	movs	r3, #2
 800a474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a478:	e1e0      	b.n	800a83c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <HAL_SPI_TransmitReceive+0x80>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <HAL_SPI_TransmitReceive+0x80>
 800a486:	887b      	ldrh	r3, [r7, #2]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a492:	e1d3      	b.n	800a83c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d003      	beq.n	800a4a8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	887a      	ldrh	r2, [r7, #2]
 800a4b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	887a      	ldrh	r2, [r7, #2]
 800a4c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	887a      	ldrh	r2, [r7, #2]
 800a4ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4ea:	d802      	bhi.n	800a4f2 <HAL_SPI_TransmitReceive+0xe6>
 800a4ec:	8a3b      	ldrh	r3, [r7, #16]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d908      	bls.n	800a504 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	e007      	b.n	800a514 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a512:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	d007      	beq.n	800a532 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a530:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a53a:	f240 8081 	bls.w	800a640 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <HAL_SPI_TransmitReceive+0x140>
 800a546:	8a7b      	ldrh	r3, [r7, #18]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d16d      	bne.n	800a628 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	1c9a      	adds	r2, r3, #2
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a566:	b29b      	uxth	r3, r3
 800a568:	3b01      	subs	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a570:	e05a      	b.n	800a628 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d11b      	bne.n	800a5b8 <HAL_SPI_TransmitReceive+0x1ac>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d016      	beq.n	800a5b8 <HAL_SPI_TransmitReceive+0x1ac>
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d113      	bne.n	800a5b8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a594:	881a      	ldrh	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	1c9a      	adds	r2, r3, #2
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d11c      	bne.n	800a600 <HAL_SPI_TransmitReceive+0x1f4>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d016      	beq.n	800a600 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e4:	1c9a      	adds	r2, r3, #2
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a600:	f7fa fb4a 	bl	8004c98 <HAL_GetTick>
 800a604:	4602      	mov	r2, r0
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d80b      	bhi.n	800a628 <HAL_SPI_TransmitReceive+0x21c>
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d007      	beq.n	800a628 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800a626:	e109      	b.n	800a83c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d19f      	bne.n	800a572 <HAL_SPI_TransmitReceive+0x166>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a638:	b29b      	uxth	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d199      	bne.n	800a572 <HAL_SPI_TransmitReceive+0x166>
 800a63e:	e0e3      	b.n	800a808 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_SPI_TransmitReceive+0x244>
 800a648:	8a7b      	ldrh	r3, [r7, #18]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	f040 80cf 	bne.w	800a7ee <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a654:	b29b      	uxth	r3, r3
 800a656:	2b01      	cmp	r3, #1
 800a658:	d912      	bls.n	800a680 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	881a      	ldrh	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	1c9a      	adds	r2, r3, #2
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a674:	b29b      	uxth	r3, r3
 800a676:	3b02      	subs	r3, #2
 800a678:	b29a      	uxth	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a67e:	e0b6      	b.n	800a7ee <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6a6:	e0a2      	b.n	800a7ee <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d134      	bne.n	800a720 <HAL_SPI_TransmitReceive+0x314>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d02f      	beq.n	800a720 <HAL_SPI_TransmitReceive+0x314>
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d12c      	bne.n	800a720 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d912      	bls.n	800a6f6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d4:	881a      	ldrh	r2, [r3, #0]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	1c9a      	adds	r2, r3, #2
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	3b02      	subs	r3, #2
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6f4:	e012      	b.n	800a71c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	7812      	ldrb	r2, [r2, #0]
 800a702:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a712:	b29b      	uxth	r3, r3
 800a714:	3b01      	subs	r3, #1
 800a716:	b29a      	uxth	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d148      	bne.n	800a7c0 <HAL_SPI_TransmitReceive+0x3b4>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a734:	b29b      	uxth	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d042      	beq.n	800a7c0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a740:	b29b      	uxth	r3, r3
 800a742:	2b01      	cmp	r3, #1
 800a744:	d923      	bls.n	800a78e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	b292      	uxth	r2, r2
 800a752:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	1c9a      	adds	r2, r3, #2
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a764:	b29b      	uxth	r3, r3
 800a766:	3b02      	subs	r3, #2
 800a768:	b29a      	uxth	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a776:	b29b      	uxth	r3, r3
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d81f      	bhi.n	800a7bc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a78a:	605a      	str	r2, [r3, #4]
 800a78c:	e016      	b.n	800a7bc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f103 020c 	add.w	r2, r3, #12
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a7c0:	f7fa fa6a 	bl	8004c98 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d803      	bhi.n	800a7d8 <HAL_SPI_TransmitReceive+0x3cc>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d6:	d102      	bne.n	800a7de <HAL_SPI_TransmitReceive+0x3d2>
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d107      	bne.n	800a7ee <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800a7ec:	e026      	b.n	800a83c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f47f af57 	bne.w	800a6a8 <HAL_SPI_TransmitReceive+0x29c>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	f47f af50 	bne.w	800a6a8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f93d 	bl	800aa8c <SPI_EndRxTxTransaction>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d005      	beq.n	800a824 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2220      	movs	r2, #32
 800a822:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a832:	e003      	b.n	800a83c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3728      	adds	r7, #40	; 0x28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	4613      	mov	r3, r2
 800a85e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a860:	f7fa fa1a 	bl	8004c98 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4413      	add	r3, r2
 800a86e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a870:	f7fa fa12 	bl	8004c98 <HAL_GetTick>
 800a874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a876:	4b39      	ldr	r3, [pc, #228]	; (800a95c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	015b      	lsls	r3, r3, #5
 800a87c:	0d1b      	lsrs	r3, r3, #20
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	fb02 f303 	mul.w	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a886:	e054      	b.n	800a932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88e:	d050      	beq.n	800a932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a890:	f7fa fa02 	bl	8004c98 <HAL_GetTick>
 800a894:	4602      	mov	r2, r0
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d902      	bls.n	800a8a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d13d      	bne.n	800a922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8be:	d111      	bne.n	800a8e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8c8:	d004      	beq.n	800a8d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d2:	d107      	bne.n	800a8e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ec:	d10f      	bne.n	800a90e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a90c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e017      	b.n	800a952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	3b01      	subs	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689a      	ldr	r2, [r3, #8]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4013      	ands	r3, r2
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	bf0c      	ite	eq
 800a942:	2301      	moveq	r3, #1
 800a944:	2300      	movne	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d19b      	bne.n	800a888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	20000004 	.word	0x20000004

0800a960 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a972:	f7fa f991 	bl	8004c98 <HAL_GetTick>
 800a976:	4602      	mov	r2, r0
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	4413      	add	r3, r2
 800a980:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a982:	f7fa f989 	bl	8004c98 <HAL_GetTick>
 800a986:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a990:	4b3d      	ldr	r3, [pc, #244]	; (800aa88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	00da      	lsls	r2, r3, #3
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	0d1b      	lsrs	r3, r3, #20
 800a9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
 800a9a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a9a8:	e060      	b.n	800aa6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a9b0:	d107      	bne.n	800a9c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d104      	bne.n	800a9c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c8:	d050      	beq.n	800aa6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9ca:	f7fa f965 	bl	8004c98 <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d902      	bls.n	800a9e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d13d      	bne.n	800aa5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a9ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9f8:	d111      	bne.n	800aa1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa02:	d004      	beq.n	800aa0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa0c:	d107      	bne.n	800aa1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa26:	d10f      	bne.n	800aa48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e010      	b.n	800aa7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	4013      	ands	r3, r2
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d196      	bne.n	800a9aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000004 	.word	0x20000004

0800aa8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af02      	add	r7, sp, #8
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff ff5b 	bl	800a960 <SPI_WaitFifoStateUntilTimeout>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab4:	f043 0220 	orr.w	r2, r3, #32
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e027      	b.n	800ab10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2200      	movs	r2, #0
 800aac8:	2180      	movs	r1, #128	; 0x80
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f7ff fec0 	bl	800a850 <SPI_WaitFlagStateUntilTimeout>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aada:	f043 0220 	orr.w	r2, r3, #32
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e014      	b.n	800ab10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7ff ff34 	bl	800a960 <SPI_WaitFifoStateUntilTimeout>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d007      	beq.n	800ab0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e000      	b.n	800ab10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e049      	b.n	800abbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7f9 fd1e 	bl	8004580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f001 f992 	bl	800be80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d001      	beq.n	800abe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	e047      	b.n	800ac70 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2202      	movs	r2, #2
 800abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a23      	ldr	r2, [pc, #140]	; (800ac7c <HAL_TIM_Base_Start+0xb4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d01d      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abfa:	d018      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <HAL_TIM_Base_Start+0xb8>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d013      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a1e      	ldr	r2, [pc, #120]	; (800ac84 <HAL_TIM_Base_Start+0xbc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d00e      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <HAL_TIM_Base_Start+0xc0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d009      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1b      	ldr	r2, [pc, #108]	; (800ac8c <HAL_TIM_Base_Start+0xc4>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d004      	beq.n	800ac2e <HAL_TIM_Base_Start+0x66>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a19      	ldr	r2, [pc, #100]	; (800ac90 <HAL_TIM_Base_Start+0xc8>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d115      	bne.n	800ac5a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	4b17      	ldr	r3, [pc, #92]	; (800ac94 <HAL_TIM_Base_Start+0xcc>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b06      	cmp	r3, #6
 800ac3e:	d015      	beq.n	800ac6c <HAL_TIM_Base_Start+0xa4>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac46:	d011      	beq.n	800ac6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac58:	e008      	b.n	800ac6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f042 0201 	orr.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e000      	b.n	800ac6e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	40012c00 	.word	0x40012c00
 800ac80:	40000400 	.word	0x40000400
 800ac84:	40000800 	.word	0x40000800
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40015000 	.word	0x40015000
 800ac94:	00010007 	.word	0x00010007

0800ac98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e049      	b.n	800ad3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f841 	bl	800ad46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f001 f8d2 	bl	800be80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <HAL_TIM_PWM_Start+0x24>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	bf14      	ite	ne
 800ad78:	2301      	movne	r3, #1
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	e03c      	b.n	800adfa <HAL_TIM_PWM_Start+0x9e>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d109      	bne.n	800ad9a <HAL_TIM_PWM_Start+0x3e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	bf14      	ite	ne
 800ad92:	2301      	movne	r3, #1
 800ad94:	2300      	moveq	r3, #0
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	e02f      	b.n	800adfa <HAL_TIM_PWM_Start+0x9e>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b08      	cmp	r3, #8
 800ad9e:	d109      	bne.n	800adb4 <HAL_TIM_PWM_Start+0x58>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	bf14      	ite	ne
 800adac:	2301      	movne	r3, #1
 800adae:	2300      	moveq	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	e022      	b.n	800adfa <HAL_TIM_PWM_Start+0x9e>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b0c      	cmp	r3, #12
 800adb8:	d109      	bne.n	800adce <HAL_TIM_PWM_Start+0x72>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	bf14      	ite	ne
 800adc6:	2301      	movne	r3, #1
 800adc8:	2300      	moveq	r3, #0
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	e015      	b.n	800adfa <HAL_TIM_PWM_Start+0x9e>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b10      	cmp	r3, #16
 800add2:	d109      	bne.n	800ade8 <HAL_TIM_PWM_Start+0x8c>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b01      	cmp	r3, #1
 800adde:	bf14      	ite	ne
 800ade0:	2301      	movne	r3, #1
 800ade2:	2300      	moveq	r3, #0
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	e008      	b.n	800adfa <HAL_TIM_PWM_Start+0x9e>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	bf14      	ite	ne
 800adf4:	2301      	movne	r3, #1
 800adf6:	2300      	moveq	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e0a1      	b.n	800af46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d104      	bne.n	800ae12 <HAL_TIM_PWM_Start+0xb6>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae10:	e023      	b.n	800ae5a <HAL_TIM_PWM_Start+0xfe>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d104      	bne.n	800ae22 <HAL_TIM_PWM_Start+0xc6>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae20:	e01b      	b.n	800ae5a <HAL_TIM_PWM_Start+0xfe>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d104      	bne.n	800ae32 <HAL_TIM_PWM_Start+0xd6>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae30:	e013      	b.n	800ae5a <HAL_TIM_PWM_Start+0xfe>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2b0c      	cmp	r3, #12
 800ae36:	d104      	bne.n	800ae42 <HAL_TIM_PWM_Start+0xe6>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae40:	e00b      	b.n	800ae5a <HAL_TIM_PWM_Start+0xfe>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	2b10      	cmp	r3, #16
 800ae46:	d104      	bne.n	800ae52 <HAL_TIM_PWM_Start+0xf6>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae50:	e003      	b.n	800ae5a <HAL_TIM_PWM_Start+0xfe>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2202      	movs	r2, #2
 800ae56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 fc4a 	bl	800c6fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a38      	ldr	r2, [pc, #224]	; (800af50 <HAL_TIM_PWM_Start+0x1f4>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d018      	beq.n	800aea4 <HAL_TIM_PWM_Start+0x148>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a37      	ldr	r2, [pc, #220]	; (800af54 <HAL_TIM_PWM_Start+0x1f8>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d013      	beq.n	800aea4 <HAL_TIM_PWM_Start+0x148>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a35      	ldr	r2, [pc, #212]	; (800af58 <HAL_TIM_PWM_Start+0x1fc>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d00e      	beq.n	800aea4 <HAL_TIM_PWM_Start+0x148>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a34      	ldr	r2, [pc, #208]	; (800af5c <HAL_TIM_PWM_Start+0x200>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d009      	beq.n	800aea4 <HAL_TIM_PWM_Start+0x148>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a32      	ldr	r2, [pc, #200]	; (800af60 <HAL_TIM_PWM_Start+0x204>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d004      	beq.n	800aea4 <HAL_TIM_PWM_Start+0x148>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a31      	ldr	r2, [pc, #196]	; (800af64 <HAL_TIM_PWM_Start+0x208>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d101      	bne.n	800aea8 <HAL_TIM_PWM_Start+0x14c>
 800aea4:	2301      	movs	r3, #1
 800aea6:	e000      	b.n	800aeaa <HAL_TIM_PWM_Start+0x14e>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a23      	ldr	r2, [pc, #140]	; (800af50 <HAL_TIM_PWM_Start+0x1f4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d01d      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aed0:	d018      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a24      	ldr	r2, [pc, #144]	; (800af68 <HAL_TIM_PWM_Start+0x20c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d013      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a22      	ldr	r2, [pc, #136]	; (800af6c <HAL_TIM_PWM_Start+0x210>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00e      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1a      	ldr	r2, [pc, #104]	; (800af54 <HAL_TIM_PWM_Start+0x1f8>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d009      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a18      	ldr	r2, [pc, #96]	; (800af58 <HAL_TIM_PWM_Start+0x1fc>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d004      	beq.n	800af04 <HAL_TIM_PWM_Start+0x1a8>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a19      	ldr	r2, [pc, #100]	; (800af64 <HAL_TIM_PWM_Start+0x208>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d115      	bne.n	800af30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689a      	ldr	r2, [r3, #8]
 800af0a:	4b19      	ldr	r3, [pc, #100]	; (800af70 <HAL_TIM_PWM_Start+0x214>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b06      	cmp	r3, #6
 800af14:	d015      	beq.n	800af42 <HAL_TIM_PWM_Start+0x1e6>
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af1c:	d011      	beq.n	800af42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f042 0201 	orr.w	r2, r2, #1
 800af2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af2e:	e008      	b.n	800af42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0201 	orr.w	r2, r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	e000      	b.n	800af44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	40012c00 	.word	0x40012c00
 800af54:	40013400 	.word	0x40013400
 800af58:	40014000 	.word	0x40014000
 800af5c:	40014400 	.word	0x40014400
 800af60:	40014800 	.word	0x40014800
 800af64:	40015000 	.word	0x40015000
 800af68:	40000400 	.word	0x40000400
 800af6c:	40000800 	.word	0x40000800
 800af70:	00010007 	.word	0x00010007

0800af74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <HAL_TIM_PWM_Start_IT+0x28>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b01      	cmp	r3, #1
 800af92:	bf14      	ite	ne
 800af94:	2301      	movne	r3, #1
 800af96:	2300      	moveq	r3, #0
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	e03c      	b.n	800b016 <HAL_TIM_PWM_Start_IT+0xa2>
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	d109      	bne.n	800afb6 <HAL_TIM_PWM_Start_IT+0x42>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b01      	cmp	r3, #1
 800afac:	bf14      	ite	ne
 800afae:	2301      	movne	r3, #1
 800afb0:	2300      	moveq	r3, #0
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	e02f      	b.n	800b016 <HAL_TIM_PWM_Start_IT+0xa2>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d109      	bne.n	800afd0 <HAL_TIM_PWM_Start_IT+0x5c>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	bf14      	ite	ne
 800afc8:	2301      	movne	r3, #1
 800afca:	2300      	moveq	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	e022      	b.n	800b016 <HAL_TIM_PWM_Start_IT+0xa2>
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2b0c      	cmp	r3, #12
 800afd4:	d109      	bne.n	800afea <HAL_TIM_PWM_Start_IT+0x76>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b01      	cmp	r3, #1
 800afe0:	bf14      	ite	ne
 800afe2:	2301      	movne	r3, #1
 800afe4:	2300      	moveq	r3, #0
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	e015      	b.n	800b016 <HAL_TIM_PWM_Start_IT+0xa2>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b10      	cmp	r3, #16
 800afee:	d109      	bne.n	800b004 <HAL_TIM_PWM_Start_IT+0x90>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b01      	cmp	r3, #1
 800affa:	bf14      	ite	ne
 800affc:	2301      	movne	r3, #1
 800affe:	2300      	moveq	r3, #0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	e008      	b.n	800b016 <HAL_TIM_PWM_Start_IT+0xa2>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	bf14      	ite	ne
 800b010:	2301      	movne	r3, #1
 800b012:	2300      	moveq	r3, #0
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e0ec      	b.n	800b1f8 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d104      	bne.n	800b02e <HAL_TIM_PWM_Start_IT+0xba>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b02c:	e023      	b.n	800b076 <HAL_TIM_PWM_Start_IT+0x102>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2b04      	cmp	r3, #4
 800b032:	d104      	bne.n	800b03e <HAL_TIM_PWM_Start_IT+0xca>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b03c:	e01b      	b.n	800b076 <HAL_TIM_PWM_Start_IT+0x102>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b08      	cmp	r3, #8
 800b042:	d104      	bne.n	800b04e <HAL_TIM_PWM_Start_IT+0xda>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b04c:	e013      	b.n	800b076 <HAL_TIM_PWM_Start_IT+0x102>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b0c      	cmp	r3, #12
 800b052:	d104      	bne.n	800b05e <HAL_TIM_PWM_Start_IT+0xea>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b05c:	e00b      	b.n	800b076 <HAL_TIM_PWM_Start_IT+0x102>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b10      	cmp	r3, #16
 800b062:	d104      	bne.n	800b06e <HAL_TIM_PWM_Start_IT+0xfa>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2202      	movs	r2, #2
 800b068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b06c:	e003      	b.n	800b076 <HAL_TIM_PWM_Start_IT+0x102>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2202      	movs	r2, #2
 800b072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b0c      	cmp	r3, #12
 800b07a:	d841      	bhi.n	800b100 <HAL_TIM_PWM_Start_IT+0x18c>
 800b07c:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <HAL_TIM_PWM_Start_IT+0x110>)
 800b07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b082:	bf00      	nop
 800b084:	0800b0b9 	.word	0x0800b0b9
 800b088:	0800b101 	.word	0x0800b101
 800b08c:	0800b101 	.word	0x0800b101
 800b090:	0800b101 	.word	0x0800b101
 800b094:	0800b0cb 	.word	0x0800b0cb
 800b098:	0800b101 	.word	0x0800b101
 800b09c:	0800b101 	.word	0x0800b101
 800b0a0:	0800b101 	.word	0x0800b101
 800b0a4:	0800b0dd 	.word	0x0800b0dd
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b101 	.word	0x0800b101
 800b0b0:	0800b101 	.word	0x0800b101
 800b0b4:	0800b0ef 	.word	0x0800b0ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f042 0202 	orr.w	r2, r2, #2
 800b0c6:	60da      	str	r2, [r3, #12]
      break;
 800b0c8:	e01d      	b.n	800b106 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f042 0204 	orr.w	r2, r2, #4
 800b0d8:	60da      	str	r2, [r3, #12]
      break;
 800b0da:	e014      	b.n	800b106 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f042 0208 	orr.w	r2, r2, #8
 800b0ea:	60da      	str	r2, [r3, #12]
      break;
 800b0ec:	e00b      	b.n	800b106 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f042 0210 	orr.w	r2, r2, #16
 800b0fc:	60da      	str	r2, [r3, #12]
      break;
 800b0fe:	e002      	b.n	800b106 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	73fb      	strb	r3, [r7, #15]
      break;
 800b104:	bf00      	nop
  }

  if (status == HAL_OK)
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d174      	bne.n	800b1f6 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2201      	movs	r2, #1
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	4618      	mov	r0, r3
 800b116:	f001 faf1 	bl	800c6fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a38      	ldr	r2, [pc, #224]	; (800b200 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d018      	beq.n	800b156 <HAL_TIM_PWM_Start_IT+0x1e2>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a36      	ldr	r2, [pc, #216]	; (800b204 <HAL_TIM_PWM_Start_IT+0x290>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d013      	beq.n	800b156 <HAL_TIM_PWM_Start_IT+0x1e2>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a35      	ldr	r2, [pc, #212]	; (800b208 <HAL_TIM_PWM_Start_IT+0x294>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d00e      	beq.n	800b156 <HAL_TIM_PWM_Start_IT+0x1e2>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a33      	ldr	r2, [pc, #204]	; (800b20c <HAL_TIM_PWM_Start_IT+0x298>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d009      	beq.n	800b156 <HAL_TIM_PWM_Start_IT+0x1e2>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a32      	ldr	r2, [pc, #200]	; (800b210 <HAL_TIM_PWM_Start_IT+0x29c>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d004      	beq.n	800b156 <HAL_TIM_PWM_Start_IT+0x1e2>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a30      	ldr	r2, [pc, #192]	; (800b214 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d101      	bne.n	800b15a <HAL_TIM_PWM_Start_IT+0x1e6>
 800b156:	2301      	movs	r3, #1
 800b158:	e000      	b.n	800b15c <HAL_TIM_PWM_Start_IT+0x1e8>
 800b15a:	2300      	movs	r3, #0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d007      	beq.n	800b170 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b16e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a22      	ldr	r2, [pc, #136]	; (800b200 <HAL_TIM_PWM_Start_IT+0x28c>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d01d      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b182:	d018      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a23      	ldr	r2, [pc, #140]	; (800b218 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d013      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a22      	ldr	r2, [pc, #136]	; (800b21c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d00e      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a19      	ldr	r2, [pc, #100]	; (800b204 <HAL_TIM_PWM_Start_IT+0x290>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d009      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a18      	ldr	r2, [pc, #96]	; (800b208 <HAL_TIM_PWM_Start_IT+0x294>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d004      	beq.n	800b1b6 <HAL_TIM_PWM_Start_IT+0x242>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a18      	ldr	r2, [pc, #96]	; (800b214 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d115      	bne.n	800b1e2 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	4b18      	ldr	r3, [pc, #96]	; (800b220 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800b1be:	4013      	ands	r3, r2
 800b1c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b06      	cmp	r3, #6
 800b1c6:	d015      	beq.n	800b1f4 <HAL_TIM_PWM_Start_IT+0x280>
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ce:	d011      	beq.n	800b1f4 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e0:	e008      	b.n	800b1f4 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0201 	orr.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e000      	b.n	800b1f6 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	40012c00 	.word	0x40012c00
 800b204:	40013400 	.word	0x40013400
 800b208:	40014000 	.word	0x40014000
 800b20c:	40014400 	.word	0x40014400
 800b210:	40014800 	.word	0x40014800
 800b214:	40015000 	.word	0x40015000
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	00010007 	.word	0x00010007

0800b224 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d109      	bne.n	800b250 <HAL_TIM_PWM_Start_DMA+0x2c>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b242:	b2db      	uxtb	r3, r3
 800b244:	2b02      	cmp	r3, #2
 800b246:	bf0c      	ite	eq
 800b248:	2301      	moveq	r3, #1
 800b24a:	2300      	movne	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	e03c      	b.n	800b2ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b04      	cmp	r3, #4
 800b254:	d109      	bne.n	800b26a <HAL_TIM_PWM_Start_DMA+0x46>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b02      	cmp	r3, #2
 800b260:	bf0c      	ite	eq
 800b262:	2301      	moveq	r3, #1
 800b264:	2300      	movne	r3, #0
 800b266:	b2db      	uxtb	r3, r3
 800b268:	e02f      	b.n	800b2ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d109      	bne.n	800b284 <HAL_TIM_PWM_Start_DMA+0x60>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b02      	cmp	r3, #2
 800b27a:	bf0c      	ite	eq
 800b27c:	2301      	moveq	r3, #1
 800b27e:	2300      	movne	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	e022      	b.n	800b2ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b0c      	cmp	r3, #12
 800b288:	d109      	bne.n	800b29e <HAL_TIM_PWM_Start_DMA+0x7a>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	bf0c      	ite	eq
 800b296:	2301      	moveq	r3, #1
 800b298:	2300      	movne	r3, #0
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	e015      	b.n	800b2ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b10      	cmp	r3, #16
 800b2a2:	d109      	bne.n	800b2b8 <HAL_TIM_PWM_Start_DMA+0x94>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2301      	moveq	r3, #1
 800b2b2:	2300      	movne	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	e008      	b.n	800b2ca <HAL_TIM_PWM_Start_DMA+0xa6>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	bf0c      	ite	eq
 800b2c4:	2301      	moveq	r3, #1
 800b2c6:	2300      	movne	r3, #0
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e1b0      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d109      	bne.n	800b2ec <HAL_TIM_PWM_Start_DMA+0xc8>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2301      	moveq	r3, #1
 800b2e6:	2300      	movne	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	e03c      	b.n	800b366 <HAL_TIM_PWM_Start_DMA+0x142>
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d109      	bne.n	800b306 <HAL_TIM_PWM_Start_DMA+0xe2>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	bf0c      	ite	eq
 800b2fe:	2301      	moveq	r3, #1
 800b300:	2300      	movne	r3, #0
 800b302:	b2db      	uxtb	r3, r3
 800b304:	e02f      	b.n	800b366 <HAL_TIM_PWM_Start_DMA+0x142>
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d109      	bne.n	800b320 <HAL_TIM_PWM_Start_DMA+0xfc>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	bf0c      	ite	eq
 800b318:	2301      	moveq	r3, #1
 800b31a:	2300      	movne	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	e022      	b.n	800b366 <HAL_TIM_PWM_Start_DMA+0x142>
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b0c      	cmp	r3, #12
 800b324:	d109      	bne.n	800b33a <HAL_TIM_PWM_Start_DMA+0x116>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b01      	cmp	r3, #1
 800b330:	bf0c      	ite	eq
 800b332:	2301      	moveq	r3, #1
 800b334:	2300      	movne	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	e015      	b.n	800b366 <HAL_TIM_PWM_Start_DMA+0x142>
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b10      	cmp	r3, #16
 800b33e:	d109      	bne.n	800b354 <HAL_TIM_PWM_Start_DMA+0x130>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b01      	cmp	r3, #1
 800b34a:	bf0c      	ite	eq
 800b34c:	2301      	moveq	r3, #1
 800b34e:	2300      	movne	r3, #0
 800b350:	b2db      	uxtb	r3, r3
 800b352:	e008      	b.n	800b366 <HAL_TIM_PWM_Start_DMA+0x142>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	bf0c      	ite	eq
 800b360:	2301      	moveq	r3, #1
 800b362:	2300      	movne	r3, #0
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b00      	cmp	r3, #0
 800b368:	d034      	beq.n	800b3d4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <HAL_TIM_PWM_Start_DMA+0x152>
 800b370:	887b      	ldrh	r3, [r7, #2]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e15c      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <HAL_TIM_PWM_Start_DMA+0x166>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b388:	e026      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d104      	bne.n	800b39a <HAL_TIM_PWM_Start_DMA+0x176>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b398:	e01e      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2b08      	cmp	r3, #8
 800b39e:	d104      	bne.n	800b3aa <HAL_TIM_PWM_Start_DMA+0x186>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3a8:	e016      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2b0c      	cmp	r3, #12
 800b3ae:	d104      	bne.n	800b3ba <HAL_TIM_PWM_Start_DMA+0x196>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3b8:	e00e      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b10      	cmp	r3, #16
 800b3be:	d104      	bne.n	800b3ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3c8:	e006      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3d2:	e001      	b.n	800b3d8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e12d      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b0c      	cmp	r3, #12
 800b3dc:	f200 80ae 	bhi.w	800b53c <HAL_TIM_PWM_Start_DMA+0x318>
 800b3e0:	a201      	add	r2, pc, #4	; (adr r2, 800b3e8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800b3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e6:	bf00      	nop
 800b3e8:	0800b41d 	.word	0x0800b41d
 800b3ec:	0800b53d 	.word	0x0800b53d
 800b3f0:	0800b53d 	.word	0x0800b53d
 800b3f4:	0800b53d 	.word	0x0800b53d
 800b3f8:	0800b465 	.word	0x0800b465
 800b3fc:	0800b53d 	.word	0x0800b53d
 800b400:	0800b53d 	.word	0x0800b53d
 800b404:	0800b53d 	.word	0x0800b53d
 800b408:	0800b4ad 	.word	0x0800b4ad
 800b40c:	0800b53d 	.word	0x0800b53d
 800b410:	0800b53d 	.word	0x0800b53d
 800b414:	0800b53d 	.word	0x0800b53d
 800b418:	0800b4f5 	.word	0x0800b4f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	4a86      	ldr	r2, [pc, #536]	; (800b63c <HAL_TIM_PWM_Start_DMA+0x418>)
 800b422:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	4a85      	ldr	r2, [pc, #532]	; (800b640 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b42a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b430:	4a84      	ldr	r2, [pc, #528]	; (800b644 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b432:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3334      	adds	r3, #52	; 0x34
 800b440:	461a      	mov	r2, r3
 800b442:	887b      	ldrh	r3, [r7, #2]
 800b444:	f7fb f8dc 	bl	8006600 <HAL_DMA_Start_IT>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e0f0      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b460:	60da      	str	r2, [r3, #12]
      break;
 800b462:	e06e      	b.n	800b542 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b468:	4a74      	ldr	r2, [pc, #464]	; (800b63c <HAL_TIM_PWM_Start_DMA+0x418>)
 800b46a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	4a73      	ldr	r2, [pc, #460]	; (800b640 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b472:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	4a72      	ldr	r2, [pc, #456]	; (800b644 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b47a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3338      	adds	r3, #56	; 0x38
 800b488:	461a      	mov	r2, r3
 800b48a:	887b      	ldrh	r3, [r7, #2]
 800b48c:	f7fb f8b8 	bl	8006600 <HAL_DMA_Start_IT>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e0cc      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68da      	ldr	r2, [r3, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4a8:	60da      	str	r2, [r3, #12]
      break;
 800b4aa:	e04a      	b.n	800b542 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b0:	4a62      	ldr	r2, [pc, #392]	; (800b63c <HAL_TIM_PWM_Start_DMA+0x418>)
 800b4b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4b8:	4a61      	ldr	r2, [pc, #388]	; (800b640 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b4ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	4a60      	ldr	r2, [pc, #384]	; (800b644 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b4c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b4c8:	6879      	ldr	r1, [r7, #4]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	333c      	adds	r3, #60	; 0x3c
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	887b      	ldrh	r3, [r7, #2]
 800b4d4:	f7fb f894 	bl	8006600 <HAL_DMA_Start_IT>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e0a8      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68da      	ldr	r2, [r3, #12]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4f0:	60da      	str	r2, [r3, #12]
      break;
 800b4f2:	e026      	b.n	800b542 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	4a50      	ldr	r2, [pc, #320]	; (800b63c <HAL_TIM_PWM_Start_DMA+0x418>)
 800b4fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b500:	4a4f      	ldr	r2, [pc, #316]	; (800b640 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800b502:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b508:	4a4e      	ldr	r2, [pc, #312]	; (800b644 <HAL_TIM_PWM_Start_DMA+0x420>)
 800b50a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3340      	adds	r3, #64	; 0x40
 800b518:	461a      	mov	r2, r3
 800b51a:	887b      	ldrh	r3, [r7, #2]
 800b51c:	f7fb f870 	bl	8006600 <HAL_DMA_Start_IT>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d001      	beq.n	800b52a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e084      	b.n	800b634 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b538:	60da      	str	r2, [r3, #12]
      break;
 800b53a:	e002      	b.n	800b542 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
      break;
 800b540:	bf00      	nop
  }

  if (status == HAL_OK)
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d174      	bne.n	800b632 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2201      	movs	r2, #1
 800b54e:	68b9      	ldr	r1, [r7, #8]
 800b550:	4618      	mov	r0, r3
 800b552:	f001 f8d3 	bl	800c6fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a3b      	ldr	r2, [pc, #236]	; (800b648 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d018      	beq.n	800b592 <HAL_TIM_PWM_Start_DMA+0x36e>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a39      	ldr	r2, [pc, #228]	; (800b64c <HAL_TIM_PWM_Start_DMA+0x428>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d013      	beq.n	800b592 <HAL_TIM_PWM_Start_DMA+0x36e>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a38      	ldr	r2, [pc, #224]	; (800b650 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d00e      	beq.n	800b592 <HAL_TIM_PWM_Start_DMA+0x36e>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a36      	ldr	r2, [pc, #216]	; (800b654 <HAL_TIM_PWM_Start_DMA+0x430>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d009      	beq.n	800b592 <HAL_TIM_PWM_Start_DMA+0x36e>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a35      	ldr	r2, [pc, #212]	; (800b658 <HAL_TIM_PWM_Start_DMA+0x434>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d004      	beq.n	800b592 <HAL_TIM_PWM_Start_DMA+0x36e>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a33      	ldr	r2, [pc, #204]	; (800b65c <HAL_TIM_PWM_Start_DMA+0x438>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d101      	bne.n	800b596 <HAL_TIM_PWM_Start_DMA+0x372>
 800b592:	2301      	movs	r3, #1
 800b594:	e000      	b.n	800b598 <HAL_TIM_PWM_Start_DMA+0x374>
 800b596:	2300      	movs	r3, #0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d007      	beq.n	800b5ac <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a25      	ldr	r2, [pc, #148]	; (800b648 <HAL_TIM_PWM_Start_DMA+0x424>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d01d      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5be:	d018      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a26      	ldr	r2, [pc, #152]	; (800b660 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d013      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a25      	ldr	r2, [pc, #148]	; (800b664 <HAL_TIM_PWM_Start_DMA+0x440>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00e      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a1c      	ldr	r2, [pc, #112]	; (800b64c <HAL_TIM_PWM_Start_DMA+0x428>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d009      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a1b      	ldr	r2, [pc, #108]	; (800b650 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d004      	beq.n	800b5f2 <HAL_TIM_PWM_Start_DMA+0x3ce>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <HAL_TIM_PWM_Start_DMA+0x438>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d115      	bne.n	800b61e <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	; (800b668 <HAL_TIM_PWM_Start_DMA+0x444>)
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b06      	cmp	r3, #6
 800b602:	d015      	beq.n	800b630 <HAL_TIM_PWM_Start_DMA+0x40c>
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b60a:	d011      	beq.n	800b630 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0201 	orr.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b61c:	e008      	b.n	800b630 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f042 0201 	orr.w	r2, r2, #1
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	e000      	b.n	800b632 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b630:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b632:	7dfb      	ldrb	r3, [r7, #23]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	0800bd71 	.word	0x0800bd71
 800b640:	0800be19 	.word	0x0800be19
 800b644:	0800bcdf 	.word	0x0800bcdf
 800b648:	40012c00 	.word	0x40012c00
 800b64c:	40013400 	.word	0x40013400
 800b650:	40014000 	.word	0x40014000
 800b654:	40014400 	.word	0x40014400
 800b658:	40014800 	.word	0x40014800
 800b65c:	40015000 	.word	0x40015000
 800b660:	40000400 	.word	0x40000400
 800b664:	40000800 	.word	0x40000800
 800b668:	00010007 	.word	0x00010007

0800b66c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	691b      	ldr	r3, [r3, #16]
 800b67a:	f003 0302 	and.w	r3, r3, #2
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d122      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d11b      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f06f 0202 	mvn.w	r2, #2
 800b698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fae3 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800b6b4:	e005      	b.n	800b6c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fad5 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fae6 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	d122      	bne.n	800b71c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d11b      	bne.n	800b71c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0204 	mvn.w	r2, #4
 800b6ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fab9 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800b708:	e005      	b.n	800b716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 faab 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fabc 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b08      	cmp	r3, #8
 800b728:	d122      	bne.n	800b770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	f003 0308 	and.w	r3, r3, #8
 800b734:	2b08      	cmp	r3, #8
 800b736:	d11b      	bne.n	800b770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f06f 0208 	mvn.w	r2, #8
 800b740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2204      	movs	r2, #4
 800b746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	69db      	ldr	r3, [r3, #28]
 800b74e:	f003 0303 	and.w	r3, r3, #3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fa8f 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800b75c:	e005      	b.n	800b76a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fa81 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fa92 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b10      	cmp	r3, #16
 800b77c:	d122      	bne.n	800b7c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	2b10      	cmp	r3, #16
 800b78a:	d11b      	bne.n	800b7c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f06f 0210 	mvn.w	r2, #16
 800b794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2208      	movs	r2, #8
 800b79a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fa65 	bl	800bc7a <HAL_TIM_IC_CaptureCallback>
 800b7b0:	e005      	b.n	800b7be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fa57 	bl	800bc66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fa68 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d10e      	bne.n	800b7f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f003 0301 	and.w	r3, r3, #1
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d107      	bne.n	800b7f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f06f 0201 	mvn.w	r2, #1
 800b7e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7f8 fc0a 	bl	8004004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fa:	2b80      	cmp	r3, #128	; 0x80
 800b7fc:	d10e      	bne.n	800b81c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b808:	2b80      	cmp	r3, #128	; 0x80
 800b80a:	d107      	bne.n	800b81c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f001 f96c 	bl	800caf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b82a:	d10e      	bne.n	800b84a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b836:	2b80      	cmp	r3, #128	; 0x80
 800b838:	d107      	bne.n	800b84a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 f95f 	bl	800cb08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b854:	2b40      	cmp	r3, #64	; 0x40
 800b856:	d10e      	bne.n	800b876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b862:	2b40      	cmp	r3, #64	; 0x40
 800b864:	d107      	bne.n	800b876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b86e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fa20 	bl	800bcb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	f003 0320 	and.w	r3, r3, #32
 800b880:	2b20      	cmp	r3, #32
 800b882:	d10e      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b20      	cmp	r3, #32
 800b890:	d107      	bne.n	800b8a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f06f 0220 	mvn.w	r2, #32
 800b89a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 f91f 	bl	800cae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d101      	bne.n	800b8ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	e0ff      	b.n	800baca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b14      	cmp	r3, #20
 800b8d6:	f200 80f0 	bhi.w	800baba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b8da:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800babb 	.word	0x0800babb
 800b8e8:	0800babb 	.word	0x0800babb
 800b8ec:	0800babb 	.word	0x0800babb
 800b8f0:	0800b975 	.word	0x0800b975
 800b8f4:	0800babb 	.word	0x0800babb
 800b8f8:	0800babb 	.word	0x0800babb
 800b8fc:	0800babb 	.word	0x0800babb
 800b900:	0800b9b7 	.word	0x0800b9b7
 800b904:	0800babb 	.word	0x0800babb
 800b908:	0800babb 	.word	0x0800babb
 800b90c:	0800babb 	.word	0x0800babb
 800b910:	0800b9f7 	.word	0x0800b9f7
 800b914:	0800babb 	.word	0x0800babb
 800b918:	0800babb 	.word	0x0800babb
 800b91c:	0800babb 	.word	0x0800babb
 800b920:	0800ba39 	.word	0x0800ba39
 800b924:	0800babb 	.word	0x0800babb
 800b928:	0800babb 	.word	0x0800babb
 800b92c:	0800babb 	.word	0x0800babb
 800b930:	0800ba79 	.word	0x0800ba79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 fb3e 	bl	800bfbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	699a      	ldr	r2, [r3, #24]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0208 	orr.w	r2, r2, #8
 800b94e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f022 0204 	bic.w	r2, r2, #4
 800b95e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6999      	ldr	r1, [r3, #24]
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	691a      	ldr	r2, [r3, #16]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	430a      	orrs	r2, r1
 800b970:	619a      	str	r2, [r3, #24]
      break;
 800b972:	e0a5      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fbb8 	bl	800c0f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	699a      	ldr	r2, [r3, #24]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b98e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	699a      	ldr	r2, [r3, #24]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b99e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6999      	ldr	r1, [r3, #24]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	021a      	lsls	r2, r3, #8
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	619a      	str	r2, [r3, #24]
      break;
 800b9b4:	e084      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68b9      	ldr	r1, [r7, #8]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 fc2b 	bl	800c218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	69da      	ldr	r2, [r3, #28]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f042 0208 	orr.w	r2, r2, #8
 800b9d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69da      	ldr	r2, [r3, #28]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0204 	bic.w	r2, r2, #4
 800b9e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69d9      	ldr	r1, [r3, #28]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	691a      	ldr	r2, [r3, #16]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	61da      	str	r2, [r3, #28]
      break;
 800b9f4:	e064      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 fc9d 	bl	800c33c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69da      	ldr	r2, [r3, #28]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	69da      	ldr	r2, [r3, #28]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	69d9      	ldr	r1, [r3, #28]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	021a      	lsls	r2, r3, #8
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	61da      	str	r2, [r3, #28]
      break;
 800ba36:	e043      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68b9      	ldr	r1, [r7, #8]
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fcec 	bl	800c41c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f042 0208 	orr.w	r2, r2, #8
 800ba52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f022 0204 	bic.w	r2, r2, #4
 800ba62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	691a      	ldr	r2, [r3, #16]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba76:	e023      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68b9      	ldr	r1, [r7, #8]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 fd36 	bl	800c4f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	021a      	lsls	r2, r3, #8
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	430a      	orrs	r2, r1
 800bab6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bab8:	e002      	b.n	800bac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	75fb      	strb	r3, [r7, #23]
      break;
 800babe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop

0800bad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_TIM_ConfigClockSource+0x1c>
 800baec:	2302      	movs	r3, #2
 800baee:	e0b6      	b.n	800bc5e <HAL_TIM_ConfigClockSource+0x18a>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb2c:	d03e      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0xd8>
 800bb2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb32:	f200 8087 	bhi.w	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3a:	f000 8086 	beq.w	800bc4a <HAL_TIM_ConfigClockSource+0x176>
 800bb3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb42:	d87f      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb44:	2b70      	cmp	r3, #112	; 0x70
 800bb46:	d01a      	beq.n	800bb7e <HAL_TIM_ConfigClockSource+0xaa>
 800bb48:	2b70      	cmp	r3, #112	; 0x70
 800bb4a:	d87b      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb4c:	2b60      	cmp	r3, #96	; 0x60
 800bb4e:	d050      	beq.n	800bbf2 <HAL_TIM_ConfigClockSource+0x11e>
 800bb50:	2b60      	cmp	r3, #96	; 0x60
 800bb52:	d877      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb54:	2b50      	cmp	r3, #80	; 0x50
 800bb56:	d03c      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0xfe>
 800bb58:	2b50      	cmp	r3, #80	; 0x50
 800bb5a:	d873      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb5c:	2b40      	cmp	r3, #64	; 0x40
 800bb5e:	d058      	beq.n	800bc12 <HAL_TIM_ConfigClockSource+0x13e>
 800bb60:	2b40      	cmp	r3, #64	; 0x40
 800bb62:	d86f      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb64:	2b30      	cmp	r3, #48	; 0x30
 800bb66:	d064      	beq.n	800bc32 <HAL_TIM_ConfigClockSource+0x15e>
 800bb68:	2b30      	cmp	r3, #48	; 0x30
 800bb6a:	d86b      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb6c:	2b20      	cmp	r3, #32
 800bb6e:	d060      	beq.n	800bc32 <HAL_TIM_ConfigClockSource+0x15e>
 800bb70:	2b20      	cmp	r3, #32
 800bb72:	d867      	bhi.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d05c      	beq.n	800bc32 <HAL_TIM_ConfigClockSource+0x15e>
 800bb78:	2b10      	cmp	r3, #16
 800bb7a:	d05a      	beq.n	800bc32 <HAL_TIM_ConfigClockSource+0x15e>
 800bb7c:	e062      	b.n	800bc44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb8e:	f000 fd95 	bl	800c6bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	609a      	str	r2, [r3, #8]
      break;
 800bbaa:	e04f      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbbc:	f000 fd7e 	bl	800c6bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bbce:	609a      	str	r2, [r3, #8]
      break;
 800bbd0:	e03c      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f000 fcf2 	bl	800c5c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2150      	movs	r1, #80	; 0x50
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fd4b 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800bbf0:	e02c      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f000 fd11 	bl	800c626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2160      	movs	r1, #96	; 0x60
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fd3b 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800bc10:	e01c      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc1e:	461a      	mov	r2, r3
 800bc20:	f000 fcd2 	bl	800c5c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2140      	movs	r1, #64	; 0x40
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 fd2b 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800bc30:	e00c      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	f000 fd22 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800bc42:	e003      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	73fb      	strb	r3, [r7, #15]
      break;
 800bc48:	e000      	b.n	800bc4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bc4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800bcaa:	bf00      	nop
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d107      	bne.n	800bd06 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd04:	e02a      	b.n	800bd5c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d107      	bne.n	800bd20 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2202      	movs	r2, #2
 800bd14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd1e:	e01d      	b.n	800bd5c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d107      	bne.n	800bd3a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2204      	movs	r2, #4
 800bd2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd38:	e010      	b.n	800bd5c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d107      	bne.n	800bd54 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2208      	movs	r2, #8
 800bd48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd52:	e003      	b.n	800bd5c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff ffb4 	bl	800bcca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	771a      	strb	r2, [r3, #28]
}
 800bd68:	bf00      	nop
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d10b      	bne.n	800bda0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d136      	bne.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd9e:	e031      	b.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d10b      	bne.n	800bdc2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2202      	movs	r2, #2
 800bdae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d125      	bne.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdc0:	e020      	b.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d10b      	bne.n	800bde4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2204      	movs	r2, #4
 800bdd0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bde2:	e00f      	b.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d10a      	bne.n	800be04 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d103      	bne.n	800be04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff ff42 	bl	800bc8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	771a      	strb	r2, [r3, #28]
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be24:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d103      	bne.n	800be38 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2201      	movs	r2, #1
 800be34:	771a      	strb	r2, [r3, #28]
 800be36:	e019      	b.n	800be6c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d103      	bne.n	800be4a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2202      	movs	r2, #2
 800be46:	771a      	strb	r2, [r3, #28]
 800be48:	e010      	b.n	800be6c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d103      	bne.n	800be5c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2204      	movs	r2, #4
 800be58:	771a      	strb	r2, [r3, #28]
 800be5a:	e007      	b.n	800be6c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	429a      	cmp	r2, r3
 800be64:	d102      	bne.n	800be6c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2208      	movs	r2, #8
 800be6a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7ff ff18 	bl	800bca2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	771a      	strb	r2, [r3, #28]
}
 800be78:	bf00      	nop
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a42      	ldr	r2, [pc, #264]	; (800bf9c <TIM_Base_SetConfig+0x11c>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d013      	beq.n	800bec0 <TIM_Base_SetConfig+0x40>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9e:	d00f      	beq.n	800bec0 <TIM_Base_SetConfig+0x40>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a3f      	ldr	r2, [pc, #252]	; (800bfa0 <TIM_Base_SetConfig+0x120>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d00b      	beq.n	800bec0 <TIM_Base_SetConfig+0x40>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a3e      	ldr	r2, [pc, #248]	; (800bfa4 <TIM_Base_SetConfig+0x124>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d007      	beq.n	800bec0 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a3d      	ldr	r2, [pc, #244]	; (800bfa8 <TIM_Base_SetConfig+0x128>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d003      	beq.n	800bec0 <TIM_Base_SetConfig+0x40>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a3c      	ldr	r2, [pc, #240]	; (800bfac <TIM_Base_SetConfig+0x12c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d108      	bne.n	800bed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	4313      	orrs	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a31      	ldr	r2, [pc, #196]	; (800bf9c <TIM_Base_SetConfig+0x11c>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d01f      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bee0:	d01b      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a2e      	ldr	r2, [pc, #184]	; (800bfa0 <TIM_Base_SetConfig+0x120>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d017      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a2d      	ldr	r2, [pc, #180]	; (800bfa4 <TIM_Base_SetConfig+0x124>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d013      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a2c      	ldr	r2, [pc, #176]	; (800bfa8 <TIM_Base_SetConfig+0x128>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d00f      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a2c      	ldr	r2, [pc, #176]	; (800bfb0 <TIM_Base_SetConfig+0x130>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d00b      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a2b      	ldr	r2, [pc, #172]	; (800bfb4 <TIM_Base_SetConfig+0x134>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d007      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a2a      	ldr	r2, [pc, #168]	; (800bfb8 <TIM_Base_SetConfig+0x138>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d003      	beq.n	800bf1a <TIM_Base_SetConfig+0x9a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a25      	ldr	r2, [pc, #148]	; (800bfac <TIM_Base_SetConfig+0x12c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d108      	bne.n	800bf2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a12      	ldr	r2, [pc, #72]	; (800bf9c <TIM_Base_SetConfig+0x11c>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d013      	beq.n	800bf80 <TIM_Base_SetConfig+0x100>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a13      	ldr	r2, [pc, #76]	; (800bfa8 <TIM_Base_SetConfig+0x128>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00f      	beq.n	800bf80 <TIM_Base_SetConfig+0x100>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a13      	ldr	r2, [pc, #76]	; (800bfb0 <TIM_Base_SetConfig+0x130>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00b      	beq.n	800bf80 <TIM_Base_SetConfig+0x100>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a12      	ldr	r2, [pc, #72]	; (800bfb4 <TIM_Base_SetConfig+0x134>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d007      	beq.n	800bf80 <TIM_Base_SetConfig+0x100>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a11      	ldr	r2, [pc, #68]	; (800bfb8 <TIM_Base_SetConfig+0x138>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d003      	beq.n	800bf80 <TIM_Base_SetConfig+0x100>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a0c      	ldr	r2, [pc, #48]	; (800bfac <TIM_Base_SetConfig+0x12c>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d103      	bne.n	800bf88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	691a      	ldr	r2, [r3, #16]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	615a      	str	r2, [r3, #20]
}
 800bf8e:	bf00      	nop
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	40012c00 	.word	0x40012c00
 800bfa0:	40000400 	.word	0x40000400
 800bfa4:	40000800 	.word	0x40000800
 800bfa8:	40013400 	.word	0x40013400
 800bfac:	40015000 	.word	0x40015000
 800bfb0:	40014000 	.word	0x40014000
 800bfb4:	40014400 	.word	0x40014400
 800bfb8:	40014800 	.word	0x40014800

0800bfbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b087      	sub	sp, #28
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	f023 0201 	bic.w	r2, r3, #1
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	699b      	ldr	r3, [r3, #24]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	f023 0302 	bic.w	r3, r3, #2
 800c008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a30      	ldr	r2, [pc, #192]	; (800c0d8 <TIM_OC1_SetConfig+0x11c>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d013      	beq.n	800c044 <TIM_OC1_SetConfig+0x88>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a2f      	ldr	r2, [pc, #188]	; (800c0dc <TIM_OC1_SetConfig+0x120>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d00f      	beq.n	800c044 <TIM_OC1_SetConfig+0x88>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a2e      	ldr	r2, [pc, #184]	; (800c0e0 <TIM_OC1_SetConfig+0x124>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00b      	beq.n	800c044 <TIM_OC1_SetConfig+0x88>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a2d      	ldr	r2, [pc, #180]	; (800c0e4 <TIM_OC1_SetConfig+0x128>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d007      	beq.n	800c044 <TIM_OC1_SetConfig+0x88>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a2c      	ldr	r2, [pc, #176]	; (800c0e8 <TIM_OC1_SetConfig+0x12c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d003      	beq.n	800c044 <TIM_OC1_SetConfig+0x88>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a2b      	ldr	r2, [pc, #172]	; (800c0ec <TIM_OC1_SetConfig+0x130>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d10c      	bne.n	800c05e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f023 0308 	bic.w	r3, r3, #8
 800c04a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	4313      	orrs	r3, r2
 800c054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f023 0304 	bic.w	r3, r3, #4
 800c05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a1d      	ldr	r2, [pc, #116]	; (800c0d8 <TIM_OC1_SetConfig+0x11c>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d013      	beq.n	800c08e <TIM_OC1_SetConfig+0xd2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a1c      	ldr	r2, [pc, #112]	; (800c0dc <TIM_OC1_SetConfig+0x120>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d00f      	beq.n	800c08e <TIM_OC1_SetConfig+0xd2>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a1b      	ldr	r2, [pc, #108]	; (800c0e0 <TIM_OC1_SetConfig+0x124>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d00b      	beq.n	800c08e <TIM_OC1_SetConfig+0xd2>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a1a      	ldr	r2, [pc, #104]	; (800c0e4 <TIM_OC1_SetConfig+0x128>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d007      	beq.n	800c08e <TIM_OC1_SetConfig+0xd2>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a19      	ldr	r2, [pc, #100]	; (800c0e8 <TIM_OC1_SetConfig+0x12c>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d003      	beq.n	800c08e <TIM_OC1_SetConfig+0xd2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a18      	ldr	r2, [pc, #96]	; (800c0ec <TIM_OC1_SetConfig+0x130>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d111      	bne.n	800c0b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c09c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	621a      	str	r2, [r3, #32]
}
 800c0cc:	bf00      	nop
 800c0ce:	371c      	adds	r7, #28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	40012c00 	.word	0x40012c00
 800c0dc:	40013400 	.word	0x40013400
 800c0e0:	40014000 	.word	0x40014000
 800c0e4:	40014400 	.word	0x40014400
 800c0e8:	40014800 	.word	0x40014800
 800c0ec:	40015000 	.word	0x40015000

0800c0f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b087      	sub	sp, #28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	f023 0210 	bic.w	r2, r3, #16
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c11e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c12a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	021b      	lsls	r3, r3, #8
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	4313      	orrs	r3, r2
 800c136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	f023 0320 	bic.w	r3, r3, #32
 800c13e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	4313      	orrs	r3, r2
 800c14a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a2c      	ldr	r2, [pc, #176]	; (800c200 <TIM_OC2_SetConfig+0x110>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d007      	beq.n	800c164 <TIM_OC2_SetConfig+0x74>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a2b      	ldr	r2, [pc, #172]	; (800c204 <TIM_OC2_SetConfig+0x114>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_OC2_SetConfig+0x74>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a2a      	ldr	r2, [pc, #168]	; (800c208 <TIM_OC2_SetConfig+0x118>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d10d      	bne.n	800c180 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	4313      	orrs	r3, r2
 800c176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c17e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a1f      	ldr	r2, [pc, #124]	; (800c200 <TIM_OC2_SetConfig+0x110>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d013      	beq.n	800c1b0 <TIM_OC2_SetConfig+0xc0>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a1e      	ldr	r2, [pc, #120]	; (800c204 <TIM_OC2_SetConfig+0x114>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00f      	beq.n	800c1b0 <TIM_OC2_SetConfig+0xc0>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a1e      	ldr	r2, [pc, #120]	; (800c20c <TIM_OC2_SetConfig+0x11c>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d00b      	beq.n	800c1b0 <TIM_OC2_SetConfig+0xc0>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a1d      	ldr	r2, [pc, #116]	; (800c210 <TIM_OC2_SetConfig+0x120>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d007      	beq.n	800c1b0 <TIM_OC2_SetConfig+0xc0>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	4a1c      	ldr	r2, [pc, #112]	; (800c214 <TIM_OC2_SetConfig+0x124>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d003      	beq.n	800c1b0 <TIM_OC2_SetConfig+0xc0>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a17      	ldr	r2, [pc, #92]	; (800c208 <TIM_OC2_SetConfig+0x118>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d113      	bne.n	800c1d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1b6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1be:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	695b      	ldr	r3, [r3, #20]
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	621a      	str	r2, [r3, #32]
}
 800c1f2:	bf00      	nop
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	40012c00 	.word	0x40012c00
 800c204:	40013400 	.word	0x40013400
 800c208:	40015000 	.word	0x40015000
 800c20c:	40014000 	.word	0x40014000
 800c210:	40014400 	.word	0x40014400
 800c214:	40014800 	.word	0x40014800

0800c218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f023 0303 	bic.w	r3, r3, #3
 800c252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2b      	ldr	r2, [pc, #172]	; (800c324 <TIM_OC3_SetConfig+0x10c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d007      	beq.n	800c28a <TIM_OC3_SetConfig+0x72>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a2a      	ldr	r2, [pc, #168]	; (800c328 <TIM_OC3_SetConfig+0x110>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d003      	beq.n	800c28a <TIM_OC3_SetConfig+0x72>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a29      	ldr	r2, [pc, #164]	; (800c32c <TIM_OC3_SetConfig+0x114>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d10d      	bne.n	800c2a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2a4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a1e      	ldr	r2, [pc, #120]	; (800c324 <TIM_OC3_SetConfig+0x10c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d013      	beq.n	800c2d6 <TIM_OC3_SetConfig+0xbe>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a1d      	ldr	r2, [pc, #116]	; (800c328 <TIM_OC3_SetConfig+0x110>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d00f      	beq.n	800c2d6 <TIM_OC3_SetConfig+0xbe>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a1d      	ldr	r2, [pc, #116]	; (800c330 <TIM_OC3_SetConfig+0x118>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d00b      	beq.n	800c2d6 <TIM_OC3_SetConfig+0xbe>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a1c      	ldr	r2, [pc, #112]	; (800c334 <TIM_OC3_SetConfig+0x11c>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d007      	beq.n	800c2d6 <TIM_OC3_SetConfig+0xbe>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a1b      	ldr	r2, [pc, #108]	; (800c338 <TIM_OC3_SetConfig+0x120>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d003      	beq.n	800c2d6 <TIM_OC3_SetConfig+0xbe>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a16      	ldr	r2, [pc, #88]	; (800c32c <TIM_OC3_SetConfig+0x114>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d113      	bne.n	800c2fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	621a      	str	r2, [r3, #32]
}
 800c318:	bf00      	nop
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	40012c00 	.word	0x40012c00
 800c328:	40013400 	.word	0x40013400
 800c32c:	40015000 	.word	0x40015000
 800c330:	40014000 	.word	0x40014000
 800c334:	40014400 	.word	0x40014400
 800c338:	40014800 	.word	0x40014800

0800c33c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	021b      	lsls	r3, r3, #8
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	4313      	orrs	r3, r2
 800c382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c38a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	031b      	lsls	r3, r3, #12
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	4313      	orrs	r3, r2
 800c396:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a1a      	ldr	r2, [pc, #104]	; (800c404 <TIM_OC4_SetConfig+0xc8>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d013      	beq.n	800c3c8 <TIM_OC4_SetConfig+0x8c>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a19      	ldr	r2, [pc, #100]	; (800c408 <TIM_OC4_SetConfig+0xcc>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d00f      	beq.n	800c3c8 <TIM_OC4_SetConfig+0x8c>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a18      	ldr	r2, [pc, #96]	; (800c40c <TIM_OC4_SetConfig+0xd0>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00b      	beq.n	800c3c8 <TIM_OC4_SetConfig+0x8c>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a17      	ldr	r2, [pc, #92]	; (800c410 <TIM_OC4_SetConfig+0xd4>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d007      	beq.n	800c3c8 <TIM_OC4_SetConfig+0x8c>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a16      	ldr	r2, [pc, #88]	; (800c414 <TIM_OC4_SetConfig+0xd8>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d003      	beq.n	800c3c8 <TIM_OC4_SetConfig+0x8c>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a15      	ldr	r2, [pc, #84]	; (800c418 <TIM_OC4_SetConfig+0xdc>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d109      	bne.n	800c3dc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	019b      	lsls	r3, r3, #6
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	621a      	str	r2, [r3, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	371c      	adds	r7, #28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	40012c00 	.word	0x40012c00
 800c408:	40013400 	.word	0x40013400
 800c40c:	40014000 	.word	0x40014000
 800c410:	40014400 	.word	0x40014400
 800c414:	40014800 	.word	0x40014800
 800c418:	40015000 	.word	0x40015000

0800c41c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a19      	ldr	r2, [pc, #100]	; (800c4d8 <TIM_OC5_SetConfig+0xbc>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d013      	beq.n	800c49e <TIM_OC5_SetConfig+0x82>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a18      	ldr	r2, [pc, #96]	; (800c4dc <TIM_OC5_SetConfig+0xc0>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d00f      	beq.n	800c49e <TIM_OC5_SetConfig+0x82>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a17      	ldr	r2, [pc, #92]	; (800c4e0 <TIM_OC5_SetConfig+0xc4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d00b      	beq.n	800c49e <TIM_OC5_SetConfig+0x82>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a16      	ldr	r2, [pc, #88]	; (800c4e4 <TIM_OC5_SetConfig+0xc8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d007      	beq.n	800c49e <TIM_OC5_SetConfig+0x82>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a15      	ldr	r2, [pc, #84]	; (800c4e8 <TIM_OC5_SetConfig+0xcc>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d003      	beq.n	800c49e <TIM_OC5_SetConfig+0x82>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a14      	ldr	r2, [pc, #80]	; (800c4ec <TIM_OC5_SetConfig+0xd0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d109      	bne.n	800c4b2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	021b      	lsls	r3, r3, #8
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	621a      	str	r2, [r3, #32]
}
 800c4cc:	bf00      	nop
 800c4ce:	371c      	adds	r7, #28
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	40012c00 	.word	0x40012c00
 800c4dc:	40013400 	.word	0x40013400
 800c4e0:	40014000 	.word	0x40014000
 800c4e4:	40014400 	.word	0x40014400
 800c4e8:	40014800 	.word	0x40014800
 800c4ec:	40015000 	.word	0x40015000

0800c4f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	051b      	lsls	r3, r3, #20
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	4313      	orrs	r3, r2
 800c542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a1a      	ldr	r2, [pc, #104]	; (800c5b0 <TIM_OC6_SetConfig+0xc0>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d013      	beq.n	800c574 <TIM_OC6_SetConfig+0x84>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a19      	ldr	r2, [pc, #100]	; (800c5b4 <TIM_OC6_SetConfig+0xc4>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d00f      	beq.n	800c574 <TIM_OC6_SetConfig+0x84>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a18      	ldr	r2, [pc, #96]	; (800c5b8 <TIM_OC6_SetConfig+0xc8>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00b      	beq.n	800c574 <TIM_OC6_SetConfig+0x84>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a17      	ldr	r2, [pc, #92]	; (800c5bc <TIM_OC6_SetConfig+0xcc>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d007      	beq.n	800c574 <TIM_OC6_SetConfig+0x84>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a16      	ldr	r2, [pc, #88]	; (800c5c0 <TIM_OC6_SetConfig+0xd0>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d003      	beq.n	800c574 <TIM_OC6_SetConfig+0x84>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a15      	ldr	r2, [pc, #84]	; (800c5c4 <TIM_OC6_SetConfig+0xd4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d109      	bne.n	800c588 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c57a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	029b      	lsls	r3, r3, #10
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	4313      	orrs	r3, r2
 800c586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	621a      	str	r2, [r3, #32]
}
 800c5a2:	bf00      	nop
 800c5a4:	371c      	adds	r7, #28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40013400 	.word	0x40013400
 800c5b8:	40014000 	.word	0x40014000
 800c5bc:	40014400 	.word	0x40014400
 800c5c0:	40014800 	.word	0x40014800
 800c5c4:	40015000 	.word	0x40015000

0800c5c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	f023 0201 	bic.w	r2, r3, #1
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	011b      	lsls	r3, r3, #4
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f023 030a 	bic.w	r3, r3, #10
 800c604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	621a      	str	r2, [r3, #32]
}
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c626:	b480      	push	{r7}
 800c628:	b087      	sub	sp, #28
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	60f8      	str	r0, [r7, #12]
 800c62e:	60b9      	str	r1, [r7, #8]
 800c630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	f023 0210 	bic.w	r2, r3, #16
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	031b      	lsls	r3, r3, #12
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	011b      	lsls	r3, r3, #4
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	621a      	str	r2, [r3, #32]
}
 800c67a:	bf00      	nop
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c686:	b480      	push	{r7}
 800c688:	b085      	sub	sp, #20
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	f043 0307 	orr.w	r3, r3, #7
 800c6a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	609a      	str	r2, [r3, #8]
}
 800c6b0:	bf00      	nop
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	021a      	lsls	r2, r3, #8
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	431a      	orrs	r2, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	609a      	str	r2, [r3, #8]
}
 800c6f0:	bf00      	nop
 800c6f2:	371c      	adds	r7, #28
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	f003 031f 	and.w	r3, r3, #31
 800c70e:	2201      	movs	r2, #1
 800c710:	fa02 f303 	lsl.w	r3, r2, r3
 800c714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6a1a      	ldr	r2, [r3, #32]
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	43db      	mvns	r3, r3
 800c71e:	401a      	ands	r2, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6a1a      	ldr	r2, [r3, #32]
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	f003 031f 	and.w	r3, r3, #31
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	fa01 f303 	lsl.w	r3, r1, r3
 800c734:	431a      	orrs	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	621a      	str	r2, [r3, #32]
}
 800c73a:	bf00      	nop
 800c73c:	371c      	adds	r7, #28
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
	...

0800c748 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d109      	bne.n	800c76c <HAL_TIMEx_PWMN_Start+0x24>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	2b01      	cmp	r3, #1
 800c762:	bf14      	ite	ne
 800c764:	2301      	movne	r3, #1
 800c766:	2300      	moveq	r3, #0
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	e022      	b.n	800c7b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d109      	bne.n	800c786 <HAL_TIMEx_PWMN_Start+0x3e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	bf14      	ite	ne
 800c77e:	2301      	movne	r3, #1
 800c780:	2300      	moveq	r3, #0
 800c782:	b2db      	uxtb	r3, r3
 800c784:	e015      	b.n	800c7b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b08      	cmp	r3, #8
 800c78a:	d109      	bne.n	800c7a0 <HAL_TIMEx_PWMN_Start+0x58>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b01      	cmp	r3, #1
 800c796:	bf14      	ite	ne
 800c798:	2301      	movne	r3, #1
 800c79a:	2300      	moveq	r3, #0
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	e008      	b.n	800c7b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	bf14      	ite	ne
 800c7ac:	2301      	movne	r3, #1
 800c7ae:	2300      	moveq	r3, #0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e06e      	b.n	800c898 <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d104      	bne.n	800c7ca <HAL_TIMEx_PWMN_Start+0x82>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7c8:	e013      	b.n	800c7f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b04      	cmp	r3, #4
 800c7ce:	d104      	bne.n	800c7da <HAL_TIMEx_PWMN_Start+0x92>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2202      	movs	r2, #2
 800c7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7d8:	e00b      	b.n	800c7f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d104      	bne.n	800c7ea <HAL_TIMEx_PWMN_Start+0xa2>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c7e8:	e003      	b.n	800c7f2 <HAL_TIMEx_PWMN_Start+0xaa>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2204      	movs	r2, #4
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 f98e 	bl	800cb1c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c80e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a22      	ldr	r2, [pc, #136]	; (800c8a0 <HAL_TIMEx_PWMN_Start+0x158>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d01d      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c822:	d018      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a1e      	ldr	r2, [pc, #120]	; (800c8a4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d013      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a1d      	ldr	r2, [pc, #116]	; (800c8a8 <HAL_TIMEx_PWMN_Start+0x160>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00e      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ac <HAL_TIMEx_PWMN_Start+0x164>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d009      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a1a      	ldr	r2, [pc, #104]	; (800c8b0 <HAL_TIMEx_PWMN_Start+0x168>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d004      	beq.n	800c856 <HAL_TIMEx_PWMN_Start+0x10e>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <HAL_TIMEx_PWMN_Start+0x16c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d115      	bne.n	800c882 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	4b16      	ldr	r3, [pc, #88]	; (800c8b8 <HAL_TIMEx_PWMN_Start+0x170>)
 800c85e:	4013      	ands	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b06      	cmp	r3, #6
 800c866:	d015      	beq.n	800c894 <HAL_TIMEx_PWMN_Start+0x14c>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c86e:	d011      	beq.n	800c894 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 0201 	orr.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c880:	e008      	b.n	800c894 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f042 0201 	orr.w	r2, r2, #1
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	e000      	b.n	800c896 <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	40012c00 	.word	0x40012c00
 800c8a4:	40000400 	.word	0x40000400
 800c8a8:	40000800 	.word	0x40000800
 800c8ac:	40013400 	.word	0x40013400
 800c8b0:	40014000 	.word	0x40014000
 800c8b4:	40015000 	.word	0x40015000
 800c8b8:	00010007 	.word	0x00010007

0800c8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d101      	bne.n	800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e06d      	b.n	800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a30      	ldr	r2, [pc, #192]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d009      	beq.n	800c912 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a2f      	ldr	r2, [pc, #188]	; (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d004      	beq.n	800c912 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a2d      	ldr	r2, [pc, #180]	; (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d108      	bne.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c918:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	4313      	orrs	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c92a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a1e      	ldr	r2, [pc, #120]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d01d      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c950:	d018      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a1c      	ldr	r2, [pc, #112]	; (800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d013      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1a      	ldr	r2, [pc, #104]	; (800c9cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d00e      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a15      	ldr	r2, [pc, #84]	; (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d009      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a16      	ldr	r2, [pc, #88]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d004      	beq.n	800c984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a11      	ldr	r2, [pc, #68]	; (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d10c      	bne.n	800c99e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c98a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	4313      	orrs	r3, r2
 800c994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	40012c00 	.word	0x40012c00
 800c9c0:	40013400 	.word	0x40013400
 800c9c4:	40015000 	.word	0x40015000
 800c9c8:	40000400 	.word	0x40000400
 800c9cc:	40000800 	.word	0x40000800
 800c9d0:	40014000 	.word	0x40014000

0800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e06a      	b.n	800cac6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	041b      	lsls	r3, r3, #16
 800ca66:	4313      	orrs	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a19      	ldr	r2, [pc, #100]	; (800cad4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d009      	beq.n	800ca88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a17      	ldr	r2, [pc, #92]	; (800cad8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d004      	beq.n	800ca88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a16      	ldr	r2, [pc, #88]	; (800cadc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d115      	bne.n	800cab4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	051b      	lsls	r3, r3, #20
 800ca94:	4313      	orrs	r3, r2
 800ca96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	40012c00 	.word	0x40012c00
 800cad8:	40013400 	.word	0x40013400
 800cadc:	40015000 	.word	0x40015000

0800cae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cafc:	bf00      	nop
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	f003 031f 	and.w	r3, r3, #31
 800cb2e:	2204      	movs	r2, #4
 800cb30:	fa02 f303 	lsl.w	r3, r2, r3
 800cb34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6a1a      	ldr	r2, [r3, #32]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	43db      	mvns	r3, r3
 800cb3e:	401a      	ands	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6a1a      	ldr	r2, [r3, #32]
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f003 031f 	and.w	r3, r3, #31
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	fa01 f303 	lsl.w	r3, r1, r3
 800cb54:	431a      	orrs	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	621a      	str	r2, [r3, #32]
}
 800cb5a:	bf00      	nop
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e040      	b.n	800cbfa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d106      	bne.n	800cb8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f7f7 fe85 	bl	8004898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2224      	movs	r2, #36	; 0x24
 800cb92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f022 0201 	bic.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f82d 	bl	800cc04 <UART_SetConfig>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e022      	b.n	800cbfa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f9f5 	bl	800cfac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	689a      	ldr	r2, [r3, #8]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f042 0201 	orr.w	r2, r2, #1
 800cbf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fa7c 	bl	800d0f0 <UART_CheckIdleState>
 800cbf8:	4603      	mov	r3, r0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	689a      	ldr	r2, [r3, #8]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	431a      	orrs	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b92      	ldr	r3, [pc, #584]	; (800ce78 <UART_SetConfig+0x274>)
 800cc30:	4013      	ands	r3, r2
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	6812      	ldr	r2, [r2, #0]
 800cc36:	6979      	ldr	r1, [r7, #20]
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68da      	ldr	r2, [r3, #12]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	430a      	orrs	r2, r1
 800cc50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	697a      	ldr	r2, [r7, #20]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a80      	ldr	r2, [pc, #512]	; (800ce7c <UART_SetConfig+0x278>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d120      	bne.n	800ccc2 <UART_SetConfig+0xbe>
 800cc80:	4b7f      	ldr	r3, [pc, #508]	; (800ce80 <UART_SetConfig+0x27c>)
 800cc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc84:	f003 0303 	and.w	r3, r3, #3
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d817      	bhi.n	800ccbc <UART_SetConfig+0xb8>
 800cc8c:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <UART_SetConfig+0x90>)
 800cc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc92:	bf00      	nop
 800cc94:	0800cca5 	.word	0x0800cca5
 800cc98:	0800ccb1 	.word	0x0800ccb1
 800cc9c:	0800ccb7 	.word	0x0800ccb7
 800cca0:	0800ccab 	.word	0x0800ccab
 800cca4:	2301      	movs	r3, #1
 800cca6:	77fb      	strb	r3, [r7, #31]
 800cca8:	e0b5      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	77fb      	strb	r3, [r7, #31]
 800ccae:	e0b2      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	77fb      	strb	r3, [r7, #31]
 800ccb4:	e0af      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	77fb      	strb	r3, [r7, #31]
 800ccba:	e0ac      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	77fb      	strb	r3, [r7, #31]
 800ccc0:	e0a9      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a6f      	ldr	r2, [pc, #444]	; (800ce84 <UART_SetConfig+0x280>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d124      	bne.n	800cd16 <UART_SetConfig+0x112>
 800cccc:	4b6c      	ldr	r3, [pc, #432]	; (800ce80 <UART_SetConfig+0x27c>)
 800ccce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccd8:	d011      	beq.n	800ccfe <UART_SetConfig+0xfa>
 800ccda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ccde:	d817      	bhi.n	800cd10 <UART_SetConfig+0x10c>
 800cce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cce4:	d011      	beq.n	800cd0a <UART_SetConfig+0x106>
 800cce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccea:	d811      	bhi.n	800cd10 <UART_SetConfig+0x10c>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <UART_SetConfig+0xf4>
 800ccf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf4:	d006      	beq.n	800cd04 <UART_SetConfig+0x100>
 800ccf6:	e00b      	b.n	800cd10 <UART_SetConfig+0x10c>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	77fb      	strb	r3, [r7, #31]
 800ccfc:	e08b      	b.n	800ce16 <UART_SetConfig+0x212>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	77fb      	strb	r3, [r7, #31]
 800cd02:	e088      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd04:	2304      	movs	r3, #4
 800cd06:	77fb      	strb	r3, [r7, #31]
 800cd08:	e085      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd0a:	2308      	movs	r3, #8
 800cd0c:	77fb      	strb	r3, [r7, #31]
 800cd0e:	e082      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd10:	2310      	movs	r3, #16
 800cd12:	77fb      	strb	r3, [r7, #31]
 800cd14:	e07f      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a5b      	ldr	r2, [pc, #364]	; (800ce88 <UART_SetConfig+0x284>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d124      	bne.n	800cd6a <UART_SetConfig+0x166>
 800cd20:	4b57      	ldr	r3, [pc, #348]	; (800ce80 <UART_SetConfig+0x27c>)
 800cd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cd28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cd2c:	d011      	beq.n	800cd52 <UART_SetConfig+0x14e>
 800cd2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cd32:	d817      	bhi.n	800cd64 <UART_SetConfig+0x160>
 800cd34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd38:	d011      	beq.n	800cd5e <UART_SetConfig+0x15a>
 800cd3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cd3e:	d811      	bhi.n	800cd64 <UART_SetConfig+0x160>
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d003      	beq.n	800cd4c <UART_SetConfig+0x148>
 800cd44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd48:	d006      	beq.n	800cd58 <UART_SetConfig+0x154>
 800cd4a:	e00b      	b.n	800cd64 <UART_SetConfig+0x160>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	77fb      	strb	r3, [r7, #31]
 800cd50:	e061      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd52:	2302      	movs	r3, #2
 800cd54:	77fb      	strb	r3, [r7, #31]
 800cd56:	e05e      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	77fb      	strb	r3, [r7, #31]
 800cd5c:	e05b      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd5e:	2308      	movs	r3, #8
 800cd60:	77fb      	strb	r3, [r7, #31]
 800cd62:	e058      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd64:	2310      	movs	r3, #16
 800cd66:	77fb      	strb	r3, [r7, #31]
 800cd68:	e055      	b.n	800ce16 <UART_SetConfig+0x212>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a47      	ldr	r2, [pc, #284]	; (800ce8c <UART_SetConfig+0x288>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d124      	bne.n	800cdbe <UART_SetConfig+0x1ba>
 800cd74:	4b42      	ldr	r3, [pc, #264]	; (800ce80 <UART_SetConfig+0x27c>)
 800cd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cd7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd80:	d011      	beq.n	800cda6 <UART_SetConfig+0x1a2>
 800cd82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd86:	d817      	bhi.n	800cdb8 <UART_SetConfig+0x1b4>
 800cd88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd8c:	d011      	beq.n	800cdb2 <UART_SetConfig+0x1ae>
 800cd8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd92:	d811      	bhi.n	800cdb8 <UART_SetConfig+0x1b4>
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d003      	beq.n	800cda0 <UART_SetConfig+0x19c>
 800cd98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd9c:	d006      	beq.n	800cdac <UART_SetConfig+0x1a8>
 800cd9e:	e00b      	b.n	800cdb8 <UART_SetConfig+0x1b4>
 800cda0:	2300      	movs	r3, #0
 800cda2:	77fb      	strb	r3, [r7, #31]
 800cda4:	e037      	b.n	800ce16 <UART_SetConfig+0x212>
 800cda6:	2302      	movs	r3, #2
 800cda8:	77fb      	strb	r3, [r7, #31]
 800cdaa:	e034      	b.n	800ce16 <UART_SetConfig+0x212>
 800cdac:	2304      	movs	r3, #4
 800cdae:	77fb      	strb	r3, [r7, #31]
 800cdb0:	e031      	b.n	800ce16 <UART_SetConfig+0x212>
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	77fb      	strb	r3, [r7, #31]
 800cdb6:	e02e      	b.n	800ce16 <UART_SetConfig+0x212>
 800cdb8:	2310      	movs	r3, #16
 800cdba:	77fb      	strb	r3, [r7, #31]
 800cdbc:	e02b      	b.n	800ce16 <UART_SetConfig+0x212>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a33      	ldr	r2, [pc, #204]	; (800ce90 <UART_SetConfig+0x28c>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d124      	bne.n	800ce12 <UART_SetConfig+0x20e>
 800cdc8:	4b2d      	ldr	r3, [pc, #180]	; (800ce80 <UART_SetConfig+0x27c>)
 800cdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdcc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cdd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cdd4:	d011      	beq.n	800cdfa <UART_SetConfig+0x1f6>
 800cdd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cdda:	d817      	bhi.n	800ce0c <UART_SetConfig+0x208>
 800cddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cde0:	d011      	beq.n	800ce06 <UART_SetConfig+0x202>
 800cde2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cde6:	d811      	bhi.n	800ce0c <UART_SetConfig+0x208>
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <UART_SetConfig+0x1f0>
 800cdec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdf0:	d006      	beq.n	800ce00 <UART_SetConfig+0x1fc>
 800cdf2:	e00b      	b.n	800ce0c <UART_SetConfig+0x208>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	77fb      	strb	r3, [r7, #31]
 800cdf8:	e00d      	b.n	800ce16 <UART_SetConfig+0x212>
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	77fb      	strb	r3, [r7, #31]
 800cdfe:	e00a      	b.n	800ce16 <UART_SetConfig+0x212>
 800ce00:	2304      	movs	r3, #4
 800ce02:	77fb      	strb	r3, [r7, #31]
 800ce04:	e007      	b.n	800ce16 <UART_SetConfig+0x212>
 800ce06:	2308      	movs	r3, #8
 800ce08:	77fb      	strb	r3, [r7, #31]
 800ce0a:	e004      	b.n	800ce16 <UART_SetConfig+0x212>
 800ce0c:	2310      	movs	r3, #16
 800ce0e:	77fb      	strb	r3, [r7, #31]
 800ce10:	e001      	b.n	800ce16 <UART_SetConfig+0x212>
 800ce12:	2310      	movs	r3, #16
 800ce14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce1e:	d16b      	bne.n	800cef8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800ce20:	7ffb      	ldrb	r3, [r7, #31]
 800ce22:	2b08      	cmp	r3, #8
 800ce24:	d838      	bhi.n	800ce98 <UART_SetConfig+0x294>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <UART_SetConfig+0x228>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce51 	.word	0x0800ce51
 800ce30:	0800ce59 	.word	0x0800ce59
 800ce34:	0800ce61 	.word	0x0800ce61
 800ce38:	0800ce99 	.word	0x0800ce99
 800ce3c:	0800ce67 	.word	0x0800ce67
 800ce40:	0800ce99 	.word	0x0800ce99
 800ce44:	0800ce99 	.word	0x0800ce99
 800ce48:	0800ce99 	.word	0x0800ce99
 800ce4c:	0800ce6f 	.word	0x0800ce6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce50:	f7fc fe5a 	bl	8009b08 <HAL_RCC_GetPCLK1Freq>
 800ce54:	61b8      	str	r0, [r7, #24]
        break;
 800ce56:	e024      	b.n	800cea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce58:	f7fc fe78 	bl	8009b4c <HAL_RCC_GetPCLK2Freq>
 800ce5c:	61b8      	str	r0, [r7, #24]
        break;
 800ce5e:	e020      	b.n	800cea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce60:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <UART_SetConfig+0x290>)
 800ce62:	61bb      	str	r3, [r7, #24]
        break;
 800ce64:	e01d      	b.n	800cea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce66:	f7fc fdd9 	bl	8009a1c <HAL_RCC_GetSysClockFreq>
 800ce6a:	61b8      	str	r0, [r7, #24]
        break;
 800ce6c:	e019      	b.n	800cea2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce72:	61bb      	str	r3, [r7, #24]
        break;
 800ce74:	e015      	b.n	800cea2 <UART_SetConfig+0x29e>
 800ce76:	bf00      	nop
 800ce78:	efff69f3 	.word	0xefff69f3
 800ce7c:	40013800 	.word	0x40013800
 800ce80:	40021000 	.word	0x40021000
 800ce84:	40004400 	.word	0x40004400
 800ce88:	40004800 	.word	0x40004800
 800ce8c:	40004c00 	.word	0x40004c00
 800ce90:	40005000 	.word	0x40005000
 800ce94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	77bb      	strb	r3, [r7, #30]
        break;
 800cea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d073      	beq.n	800cf90 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	005a      	lsls	r2, r3, #1
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	085b      	lsrs	r3, r3, #1
 800ceb2:	441a      	add	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2b0f      	cmp	r3, #15
 800cec2:	d916      	bls.n	800cef2 <UART_SetConfig+0x2ee>
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceca:	d212      	bcs.n	800cef2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	f023 030f 	bic.w	r3, r3, #15
 800ced4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	085b      	lsrs	r3, r3, #1
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	f003 0307 	and.w	r3, r3, #7
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	89fb      	ldrh	r3, [r7, #14]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	89fa      	ldrh	r2, [r7, #14]
 800ceee:	60da      	str	r2, [r3, #12]
 800cef0:	e04e      	b.n	800cf90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	77bb      	strb	r3, [r7, #30]
 800cef6:	e04b      	b.n	800cf90 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cef8:	7ffb      	ldrb	r3, [r7, #31]
 800cefa:	2b08      	cmp	r3, #8
 800cefc:	d827      	bhi.n	800cf4e <UART_SetConfig+0x34a>
 800cefe:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <UART_SetConfig+0x300>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf29 	.word	0x0800cf29
 800cf08:	0800cf31 	.word	0x0800cf31
 800cf0c:	0800cf39 	.word	0x0800cf39
 800cf10:	0800cf4f 	.word	0x0800cf4f
 800cf14:	0800cf3f 	.word	0x0800cf3f
 800cf18:	0800cf4f 	.word	0x0800cf4f
 800cf1c:	0800cf4f 	.word	0x0800cf4f
 800cf20:	0800cf4f 	.word	0x0800cf4f
 800cf24:	0800cf47 	.word	0x0800cf47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf28:	f7fc fdee 	bl	8009b08 <HAL_RCC_GetPCLK1Freq>
 800cf2c:	61b8      	str	r0, [r7, #24]
        break;
 800cf2e:	e013      	b.n	800cf58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf30:	f7fc fe0c 	bl	8009b4c <HAL_RCC_GetPCLK2Freq>
 800cf34:	61b8      	str	r0, [r7, #24]
        break;
 800cf36:	e00f      	b.n	800cf58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf38:	4b1b      	ldr	r3, [pc, #108]	; (800cfa8 <UART_SetConfig+0x3a4>)
 800cf3a:	61bb      	str	r3, [r7, #24]
        break;
 800cf3c:	e00c      	b.n	800cf58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf3e:	f7fc fd6d 	bl	8009a1c <HAL_RCC_GetSysClockFreq>
 800cf42:	61b8      	str	r0, [r7, #24]
        break;
 800cf44:	e008      	b.n	800cf58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf4a:	61bb      	str	r3, [r7, #24]
        break;
 800cf4c:	e004      	b.n	800cf58 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	77bb      	strb	r3, [r7, #30]
        break;
 800cf56:	bf00      	nop
    }

    if (pclk != 0U)
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d018      	beq.n	800cf90 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	085a      	lsrs	r2, r3, #1
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	441a      	add	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b0f      	cmp	r3, #15
 800cf76:	d909      	bls.n	800cf8c <UART_SetConfig+0x388>
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf7e:	d205      	bcs.n	800cf8c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60da      	str	r2, [r3, #12]
 800cf8a:	e001      	b.n	800cf90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cf9c:	7fbb      	ldrb	r3, [r7, #30]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	007a1200 	.word	0x007a1200

0800cfac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb8:	f003 0301 	and.w	r3, r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00a      	beq.n	800cfd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	430a      	orrs	r2, r1
 800cfd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfda:	f003 0302 	and.w	r3, r3, #2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00a      	beq.n	800cff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	430a      	orrs	r2, r1
 800cff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffc:	f003 0304 	and.w	r3, r3, #4
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00a      	beq.n	800d01a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01e:	f003 0308 	and.w	r3, r3, #8
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00a      	beq.n	800d03c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	430a      	orrs	r2, r1
 800d03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d040:	f003 0310 	and.w	r3, r3, #16
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00a      	beq.n	800d05e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d062:	f003 0320 	and.w	r3, r3, #32
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01a      	beq.n	800d0c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0aa:	d10a      	bne.n	800d0c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00a      	beq.n	800d0e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	430a      	orrs	r2, r1
 800d0e2:	605a      	str	r2, [r3, #4]
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b098      	sub	sp, #96	; 0x60
 800d0f4:	af02      	add	r7, sp, #8
 800d0f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d100:	f7f7 fdca 	bl	8004c98 <HAL_GetTick>
 800d104:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b08      	cmp	r3, #8
 800d112:	d12e      	bne.n	800d172 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d11c:	2200      	movs	r2, #0
 800d11e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f88c 	bl	800d240 <UART_WaitOnFlagUntilTimeout>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d021      	beq.n	800d172 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	e853 3f00 	ldrex	r3, [r3]
 800d13a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d142:	653b      	str	r3, [r7, #80]	; 0x50
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	461a      	mov	r2, r3
 800d14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14c:	647b      	str	r3, [r7, #68]	; 0x44
 800d14e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d154:	e841 2300 	strex	r3, r2, [r1]
 800d158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1e6      	bne.n	800d12e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2220      	movs	r2, #32
 800d164:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	e062      	b.n	800d238 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 0304 	and.w	r3, r3, #4
 800d17c:	2b04      	cmp	r3, #4
 800d17e:	d149      	bne.n	800d214 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d188:	2200      	movs	r2, #0
 800d18a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f856 	bl	800d240 <UART_WaitOnFlagUntilTimeout>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d03c      	beq.n	800d214 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	e853 3f00 	ldrex	r3, [r3]
 800d1a6:	623b      	str	r3, [r7, #32]
   return(result);
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b8:	633b      	str	r3, [r7, #48]	; 0x30
 800d1ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1c0:	e841 2300 	strex	r3, r2, [r1]
 800d1c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e6      	bne.n	800d19a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f023 0301 	bic.w	r3, r3, #1
 800d1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1ec:	61fa      	str	r2, [r7, #28]
 800d1ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f0:	69b9      	ldr	r1, [r7, #24]
 800d1f2:	69fa      	ldr	r2, [r7, #28]
 800d1f4:	e841 2300 	strex	r3, r2, [r1]
 800d1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d1e5      	bne.n	800d1cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2220      	movs	r2, #32
 800d204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	e011      	b.n	800d238 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2220      	movs	r2, #32
 800d218:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3758      	adds	r7, #88	; 0x58
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	603b      	str	r3, [r7, #0]
 800d24c:	4613      	mov	r3, r2
 800d24e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d250:	e049      	b.n	800d2e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d258:	d045      	beq.n	800d2e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d25a:	f7f7 fd1d 	bl	8004c98 <HAL_GetTick>
 800d25e:	4602      	mov	r2, r0
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	429a      	cmp	r2, r3
 800d268:	d302      	bcc.n	800d270 <UART_WaitOnFlagUntilTimeout+0x30>
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d270:	2303      	movs	r3, #3
 800d272:	e048      	b.n	800d306 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 0304 	and.w	r3, r3, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d031      	beq.n	800d2e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	f003 0308 	and.w	r3, r3, #8
 800d28c:	2b08      	cmp	r3, #8
 800d28e:	d110      	bne.n	800d2b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2208      	movs	r2, #8
 800d296:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 f838 	bl	800d30e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2208      	movs	r2, #8
 800d2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e029      	b.n	800d306 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	69db      	ldr	r3, [r3, #28]
 800d2b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2c0:	d111      	bne.n	800d2e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 f81e 	bl	800d30e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2220      	movs	r2, #32
 800d2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e00f      	b.n	800d306 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	69da      	ldr	r2, [r3, #28]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	bf0c      	ite	eq
 800d2f6:	2301      	moveq	r3, #1
 800d2f8:	2300      	movne	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	429a      	cmp	r2, r3
 800d302:	d0a6      	beq.n	800d252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d30e:	b480      	push	{r7}
 800d310:	b095      	sub	sp, #84	; 0x54
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d32a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d334:	643b      	str	r3, [r7, #64]	; 0x40
 800d336:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d33a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e6      	bne.n	800d316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3308      	adds	r3, #8
 800d34e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	61fb      	str	r3, [r7, #28]
   return(result);
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	f023 0301 	bic.w	r3, r3, #1
 800d35e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3308      	adds	r3, #8
 800d366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e5      	bne.n	800d348 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d380:	2b01      	cmp	r3, #1
 800d382:	d118      	bne.n	800d3b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	60bb      	str	r3, [r7, #8]
   return(result);
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f023 0310 	bic.w	r3, r3, #16
 800d398:	647b      	str	r3, [r7, #68]	; 0x44
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3a2:	61bb      	str	r3, [r7, #24]
 800d3a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	6979      	ldr	r1, [r7, #20]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e6      	bne.n	800d384 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d3ca:	bf00      	nop
 800d3cc:	3754      	adds	r7, #84	; 0x54
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d3e6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800d3ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d40c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800d410:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d418:	b29a      	uxth	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	43db      	mvns	r3, r3
 800d420:	b29b      	uxth	r3, r3
 800d422:	4013      	ands	r3, r2
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d43a:	b084      	sub	sp, #16
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	f107 0014 	add.w	r0, r7, #20
 800d448:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2201      	movs	r2, #1
 800d450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2200      	movs	r2, #0
 800d460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	b004      	add	sp, #16
 800d47a:	4770      	bx	lr

0800d47c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b09d      	sub	sp, #116	; 0x74
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	b29b      	uxth	r3, r3
 800d49a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	78db      	ldrb	r3, [r3, #3]
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d81f      	bhi.n	800d4ee <USB_ActivateEndpoint+0x72>
 800d4ae:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <USB_ActivateEndpoint+0x38>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d4c5 	.word	0x0800d4c5
 800d4b8:	0800d4e1 	.word	0x0800d4e1
 800d4bc:	0800d4f7 	.word	0x0800d4f7
 800d4c0:	0800d4d3 	.word	0x0800d4d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d4c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d4c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d4d0:	e012      	b.n	800d4f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d4d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d4d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d4da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d4de:	e00b      	b.n	800d4f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d4e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d4e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d4e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d4ec:	e004      	b.n	800d4f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d4f4:	e000      	b.n	800d4f8 <USB_ActivateEndpoint+0x7c>
      break;
 800d4f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	441a      	add	r2, r3
 800d502:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d50a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d516:	b29b      	uxth	r3, r3
 800d518:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	b29b      	uxth	r3, r3
 800d528:	b21b      	sxth	r3, r3
 800d52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d532:	b21a      	sxth	r2, r3
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	b21b      	sxth	r3, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	b21b      	sxth	r3, r3
 800d53e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	441a      	add	r2, r3
 800d54c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d560:	b29b      	uxth	r3, r3
 800d562:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	7b1b      	ldrb	r3, [r3, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f040 8178 	bne.w	800d85e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	785b      	ldrb	r3, [r3, #1]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 8084 	beq.w	800d680 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d582:	b29b      	uxth	r3, r3
 800d584:	461a      	mov	r2, r3
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	4413      	add	r3, r2
 800d58a:	61bb      	str	r3, [r7, #24]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	00da      	lsls	r2, r3, #3
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	4413      	add	r3, r2
 800d596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d59a:	617b      	str	r3, [r7, #20]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	88db      	ldrh	r3, [r3, #6]
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	827b      	strh	r3, [r7, #18]
 800d5ba:	8a7b      	ldrh	r3, [r7, #18]
 800d5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01b      	beq.n	800d5fc <USB_ActivateEndpoint+0x180>
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	881b      	ldrh	r3, [r3, #0]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5da:	823b      	strh	r3, [r7, #16]
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	441a      	add	r2, r3
 800d5e6:	8a3b      	ldrh	r3, [r7, #16]
 800d5e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d5f8:	b29b      	uxth	r3, r3
 800d5fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	78db      	ldrb	r3, [r3, #3]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d020      	beq.n	800d646 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	b29b      	uxth	r3, r3
 800d612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d61a:	81bb      	strh	r3, [r7, #12]
 800d61c:	89bb      	ldrh	r3, [r7, #12]
 800d61e:	f083 0320 	eor.w	r3, r3, #32
 800d622:	81bb      	strh	r3, [r7, #12]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	441a      	add	r2, r3
 800d62e:	89bb      	ldrh	r3, [r7, #12]
 800d630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d640:	b29b      	uxth	r3, r3
 800d642:	8013      	strh	r3, [r2, #0]
 800d644:	e2d5      	b.n	800dbf2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	881b      	ldrh	r3, [r3, #0]
 800d652:	b29b      	uxth	r3, r3
 800d654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d65c:	81fb      	strh	r3, [r7, #14]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	441a      	add	r2, r3
 800d668:	89fb      	ldrh	r3, [r7, #14]
 800d66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	8013      	strh	r3, [r2, #0]
 800d67e:	e2b8      	b.n	800dbf2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	633b      	str	r3, [r7, #48]	; 0x30
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	461a      	mov	r2, r3
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	4413      	add	r3, r2
 800d692:	633b      	str	r3, [r7, #48]	; 0x30
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	00da      	lsls	r2, r3, #3
 800d69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69c:	4413      	add	r3, r2
 800d69e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	88db      	ldrh	r3, [r3, #6]
 800d6a8:	085b      	lsrs	r3, r3, #1
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c4:	4413      	add	r3, r2
 800d6c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	00da      	lsls	r2, r3, #3
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	801a      	strh	r2, [r3, #0]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	2b3e      	cmp	r3, #62	; 0x3e
 800d6ee:	d91d      	bls.n	800d72c <USB_ActivateEndpoint+0x2b0>
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	095b      	lsrs	r3, r3, #5
 800d6f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	f003 031f 	and.w	r3, r3, #31
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <USB_ActivateEndpoint+0x28e>
 800d704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d706:	3b01      	subs	r3, #1
 800d708:	66bb      	str	r3, [r7, #104]	; 0x68
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	b29a      	uxth	r2, r3
 800d710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d712:	b29b      	uxth	r3, r3
 800d714:	029b      	lsls	r3, r3, #10
 800d716:	b29b      	uxth	r3, r3
 800d718:	4313      	orrs	r3, r2
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d724:	b29a      	uxth	r2, r3
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	801a      	strh	r2, [r3, #0]
 800d72a:	e026      	b.n	800d77a <USB_ActivateEndpoint+0x2fe>
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <USB_ActivateEndpoint+0x2ce>
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d73e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d742:	b29a      	uxth	r2, r3
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	801a      	strh	r2, [r3, #0]
 800d748:	e017      	b.n	800d77a <USB_ActivateEndpoint+0x2fe>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	085b      	lsrs	r3, r3, #1
 800d750:	66bb      	str	r3, [r7, #104]	; 0x68
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	f003 0301 	and.w	r3, r3, #1
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <USB_ActivateEndpoint+0x2e8>
 800d75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d760:	3301      	adds	r3, #1
 800d762:	66bb      	str	r3, [r7, #104]	; 0x68
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	b29a      	uxth	r2, r3
 800d76a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	029b      	lsls	r3, r3, #10
 800d770:	b29b      	uxth	r3, r3
 800d772:	4313      	orrs	r3, r2
 800d774:	b29a      	uxth	r2, r3
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	847b      	strh	r3, [r7, #34]	; 0x22
 800d788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d78a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d01b      	beq.n	800d7ca <USB_ActivateEndpoint+0x34e>
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7a8:	843b      	strh	r3, [r7, #32]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	441a      	add	r2, r3
 800d7b4:	8c3b      	ldrh	r3, [r7, #32]
 800d7b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d124      	bne.n	800d81c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7e8:	83bb      	strh	r3, [r7, #28]
 800d7ea:	8bbb      	ldrh	r3, [r7, #28]
 800d7ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d7f0:	83bb      	strh	r3, [r7, #28]
 800d7f2:	8bbb      	ldrh	r3, [r7, #28]
 800d7f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d7f8:	83bb      	strh	r3, [r7, #28]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	441a      	add	r2, r3
 800d804:	8bbb      	ldrh	r3, [r7, #28]
 800d806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d80a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d80e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d816:	b29b      	uxth	r3, r3
 800d818:	8013      	strh	r3, [r2, #0]
 800d81a:	e1ea      	b.n	800dbf2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	4413      	add	r3, r2
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d832:	83fb      	strh	r3, [r7, #30]
 800d834:	8bfb      	ldrh	r3, [r7, #30]
 800d836:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d83a:	83fb      	strh	r3, [r7, #30]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	441a      	add	r2, r3
 800d846:	8bfb      	ldrh	r3, [r7, #30]
 800d848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d84c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d858:	b29b      	uxth	r3, r3
 800d85a:	8013      	strh	r3, [r2, #0]
 800d85c:	e1c9      	b.n	800dbf2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	78db      	ldrb	r3, [r3, #3]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d11e      	bne.n	800d8a4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	b29b      	uxth	r3, r3
 800d874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d87c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	441a      	add	r2, r3
 800d88a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d896:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	8013      	strh	r3, [r2, #0]
 800d8a2:	e01d      	b.n	800d8e0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d8a4:	687a      	ldr	r2, [r7, #4]
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	4413      	add	r3, r2
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	441a      	add	r2, r3
 800d8c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f0:	4413      	add	r3, r2
 800d8f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	00da      	lsls	r2, r3, #3
 800d8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d902:	65bb      	str	r3, [r7, #88]	; 0x58
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	085b      	lsrs	r3, r3, #1
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	b29a      	uxth	r2, r3
 800d910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d912:	801a      	strh	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	657b      	str	r3, [r7, #84]	; 0x54
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d91e:	b29b      	uxth	r3, r3
 800d920:	461a      	mov	r2, r3
 800d922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d924:	4413      	add	r3, r2
 800d926:	657b      	str	r3, [r7, #84]	; 0x54
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	00da      	lsls	r2, r3, #3
 800d92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d930:	4413      	add	r3, r2
 800d932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d936:	653b      	str	r3, [r7, #80]	; 0x50
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	895b      	ldrh	r3, [r3, #10]
 800d93c:	085b      	lsrs	r3, r3, #1
 800d93e:	b29b      	uxth	r3, r3
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	b29a      	uxth	r2, r3
 800d944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d946:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 8093 	bne.w	800da78 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d962:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01b      	beq.n	800d9a6 <USB_ActivateEndpoint+0x52a>
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d984:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	441a      	add	r2, r3
 800d990:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d99a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d9b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d01b      	beq.n	800d9f6 <USB_ActivateEndpoint+0x57a>
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	441a      	add	r2, r3
 800d9e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	b29b      	uxth	r3, r3
 800da04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da0c:	873b      	strh	r3, [r7, #56]	; 0x38
 800da0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800da14:	873b      	strh	r3, [r7, #56]	; 0x38
 800da16:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800da1c:	873b      	strh	r3, [r7, #56]	; 0x38
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	441a      	add	r2, r3
 800da28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800da2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	4413      	add	r3, r2
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da54:	86fb      	strh	r3, [r7, #54]	; 0x36
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	441a      	add	r2, r3
 800da60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da72:	b29b      	uxth	r3, r3
 800da74:	8013      	strh	r3, [r2, #0]
 800da76:	e0bc      	b.n	800dbf2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800da88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d01d      	beq.n	800dad0 <USB_ActivateEndpoint+0x654>
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4413      	add	r3, r2
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	441a      	add	r2, r3
 800dab8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dabc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dacc:	b29b      	uxth	r3, r3
 800dace:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dae0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d01d      	beq.n	800db28 <USB_ActivateEndpoint+0x6ac>
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	441a      	add	r2, r3
 800db10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800db14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800db24:	b29b      	uxth	r3, r3
 800db26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	78db      	ldrb	r3, [r3, #3]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d024      	beq.n	800db7a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	4413      	add	r3, r2
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800db4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800db4e:	f083 0320 	eor.w	r3, r3, #32
 800db52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	441a      	add	r2, r3
 800db60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800db64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db74:	b29b      	uxth	r3, r3
 800db76:	8013      	strh	r3, [r2, #0]
 800db78:	e01d      	b.n	800dbb6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	441a      	add	r2, r3
 800db9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	4413      	add	r3, r2
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	441a      	add	r2, r3
 800dbda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dbde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dbf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3774      	adds	r7, #116	; 0x74
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop

0800dc04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b08d      	sub	sp, #52	; 0x34
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	7b1b      	ldrb	r3, [r3, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f040 808e 	bne.w	800dd34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	785b      	ldrb	r3, [r3, #1]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d044      	beq.n	800dcaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	81bb      	strh	r3, [r7, #12]
 800dc2e:	89bb      	ldrh	r3, [r7, #12]
 800dc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d01b      	beq.n	800dc70 <USB_DeactivateEndpoint+0x6c>
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc4e:	817b      	strh	r3, [r7, #10]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	441a      	add	r2, r3
 800dc5a:	897b      	ldrh	r3, [r7, #10]
 800dc5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc86:	813b      	strh	r3, [r7, #8]
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	441a      	add	r2, r3
 800dc92:	893b      	ldrh	r3, [r7, #8]
 800dc94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	8013      	strh	r3, [r2, #0]
 800dca8:	e192      	b.n	800dfd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	827b      	strh	r3, [r7, #18]
 800dcb8:	8a7b      	ldrh	r3, [r7, #18]
 800dcba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01b      	beq.n	800dcfa <USB_DeactivateEndpoint+0xf6>
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcd8:	823b      	strh	r3, [r7, #16]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	441a      	add	r2, r3
 800dce4:	8a3b      	ldrh	r3, [r7, #16]
 800dce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dcf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd10:	81fb      	strh	r3, [r7, #14]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	441a      	add	r2, r3
 800dd1c:	89fb      	ldrh	r3, [r7, #14]
 800dd1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	8013      	strh	r3, [r2, #0]
 800dd32:	e14d      	b.n	800dfd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	785b      	ldrb	r3, [r3, #1]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f040 80a5 	bne.w	800de88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	843b      	strh	r3, [r7, #32]
 800dd4c:	8c3b      	ldrh	r3, [r7, #32]
 800dd4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d01b      	beq.n	800dd8e <USB_DeactivateEndpoint+0x18a>
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd6c:	83fb      	strh	r3, [r7, #30]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	441a      	add	r2, r3
 800dd78:	8bfb      	ldrh	r3, [r7, #30]
 800dd7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	83bb      	strh	r3, [r7, #28]
 800dd9c:	8bbb      	ldrh	r3, [r7, #28]
 800dd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01b      	beq.n	800ddde <USB_DeactivateEndpoint+0x1da>
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddbc:	837b      	strh	r3, [r7, #26]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	441a      	add	r2, r3
 800ddc8:	8b7b      	ldrh	r3, [r7, #26]
 800ddca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddf4:	833b      	strh	r3, [r7, #24]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	441a      	add	r2, r3
 800de00:	8b3b      	ldrh	r3, [r7, #24]
 800de02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800de12:	b29b      	uxth	r3, r3
 800de14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	b29b      	uxth	r3, r3
 800de24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de2c:	82fb      	strh	r3, [r7, #22]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	441a      	add	r2, r3
 800de38:	8afb      	ldrh	r3, [r7, #22]
 800de3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4413      	add	r3, r2
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de64:	82bb      	strh	r3, [r7, #20]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	441a      	add	r2, r3
 800de70:	8abb      	ldrh	r3, [r7, #20]
 800de72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de82:	b29b      	uxth	r3, r3
 800de84:	8013      	strh	r3, [r2, #0]
 800de86:	e0a3      	b.n	800dfd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	881b      	ldrh	r3, [r3, #0]
 800de94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800de96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01b      	beq.n	800ded8 <USB_DeactivateEndpoint+0x2d4>
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	4413      	add	r3, r2
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	b29b      	uxth	r3, r3
 800deae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800deb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800deb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	441a      	add	r2, r3
 800dec2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800decc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ded0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	857b      	strh	r3, [r7, #42]	; 0x2a
 800dee6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01b      	beq.n	800df28 <USB_DeactivateEndpoint+0x324>
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	b29b      	uxth	r3, r3
 800defe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df06:	853b      	strh	r3, [r7, #40]	; 0x28
 800df08:	687a      	ldr	r2, [r7, #4]
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	441a      	add	r2, r3
 800df12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df24:	b29b      	uxth	r3, r3
 800df26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	b29b      	uxth	r3, r3
 800df36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	441a      	add	r2, r3
 800df4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df76:	84bb      	strh	r3, [r7, #36]	; 0x24
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	441a      	add	r2, r3
 800df82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df94:	b29b      	uxth	r3, r3
 800df96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfae:	847b      	strh	r3, [r7, #34]	; 0x22
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	441a      	add	r2, r3
 800dfba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3734      	adds	r7, #52	; 0x34
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b0c2      	sub	sp, #264	; 0x108
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfec:	6018      	str	r0, [r3, #0]
 800dfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	785b      	ldrb	r3, [r3, #1]
 800e004:	2b01      	cmp	r3, #1
 800e006:	f040 86b7 	bne.w	800ed78 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	429a      	cmp	r2, r3
 800e024:	d908      	bls.n	800e038 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e036:	e007      	b.n	800e048 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	7b1b      	ldrb	r3, [r3, #12]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d13a      	bne.n	800e0ce <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6959      	ldr	r1, [r3, #20]
 800e064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	88da      	ldrh	r2, [r3, #6]
 800e070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e074:	b29b      	uxth	r3, r3
 800e076:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e07a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e07e:	6800      	ldr	r0, [r0, #0]
 800e080:	f001 fc8c 	bl	800f99c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	613b      	str	r3, [r7, #16]
 800e090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]
 800e0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	00da      	lsls	r2, r3, #3
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	801a      	strh	r2, [r3, #0]
 800e0ca:	f000 be1f 	b.w	800ed0c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	78db      	ldrb	r3, [r3, #3]
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	f040 8462 	bne.w	800e9a4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6a1a      	ldr	r2, [r3, #32]
 800e0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	f240 83df 	bls.w	800e8bc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e124:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	441a      	add	r2, r3
 800e142:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e14a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e14e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e156:	b29b      	uxth	r3, r3
 800e158:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6a1a      	ldr	r2, [r3, #32]
 800e166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e16a:	1ad2      	subs	r2, r2, r3
 800e16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	881b      	ldrh	r3, [r3, #0]
 800e194:	b29b      	uxth	r3, r3
 800e196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 81c7 	beq.w	800e52e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	785b      	ldrb	r3, [r3, #1]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d177      	bne.n	800e2ac <USB_EPStartXfer+0x2ce>
 800e1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	461a      	mov	r2, r3
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	4413      	add	r3, r2
 800e1de:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	00da      	lsls	r2, r3, #3
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e202:	b29a      	uxth	r2, r3
 800e204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e206:	801a      	strh	r2, [r3, #0]
 800e208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e20c:	2b3e      	cmp	r3, #62	; 0x3e
 800e20e:	d921      	bls.n	800e254 <USB_EPStartXfer+0x276>
 800e210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e214:	095b      	lsrs	r3, r3, #5
 800e216:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e21e:	f003 031f 	and.w	r3, r3, #31
 800e222:	2b00      	cmp	r3, #0
 800e224:	d104      	bne.n	800e230 <USB_EPStartXfer+0x252>
 800e226:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e22a:	3b01      	subs	r3, #1
 800e22c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	b29a      	uxth	r2, r3
 800e236:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	029b      	lsls	r3, r3, #10
 800e23e:	b29b      	uxth	r3, r3
 800e240:	4313      	orrs	r3, r2
 800e242:	b29b      	uxth	r3, r3
 800e244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e250:	801a      	strh	r2, [r3, #0]
 800e252:	e050      	b.n	800e2f6 <USB_EPStartXfer+0x318>
 800e254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10a      	bne.n	800e272 <USB_EPStartXfer+0x294>
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	b29b      	uxth	r3, r3
 800e262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	801a      	strh	r2, [r3, #0]
 800e270:	e041      	b.n	800e2f6 <USB_EPStartXfer+0x318>
 800e272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e276:	085b      	lsrs	r3, r3, #1
 800e278:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d004      	beq.n	800e292 <USB_EPStartXfer+0x2b4>
 800e288:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e28c:	3301      	adds	r3, #1
 800e28e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	b29a      	uxth	r2, r3
 800e298:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	029b      	lsls	r3, r3, #10
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	801a      	strh	r2, [r3, #0]
 800e2aa:	e024      	b.n	800e2f6 <USB_EPStartXfer+0x318>
 800e2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d11c      	bne.n	800e2f6 <USB_EPStartXfer+0x318>
 800e2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	4413      	add	r3, r2
 800e2d2:	633b      	str	r3, [r7, #48]	; 0x30
 800e2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	00da      	lsls	r2, r3, #3
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	895b      	ldrh	r3, [r3, #10]
 800e302:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6959      	ldr	r1, [r3, #20]
 800e312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e316:	b29b      	uxth	r3, r3
 800e318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e31c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e320:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e324:	6800      	ldr	r0, [r0, #0]
 800e326:	f001 fb39 	bl	800f99c <USB_WritePMA>
            ep->xfer_buff += len;
 800e32a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e32e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	695a      	ldr	r2, [r3, #20]
 800e336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e33a:	441a      	add	r2, r3
 800e33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6a1a      	ldr	r2, [r3, #32]
 800e354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	429a      	cmp	r2, r3
 800e362:	d90f      	bls.n	800e384 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6a1a      	ldr	r2, [r3, #32]
 800e370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e374:	1ad2      	subs	r2, r2, r3
 800e376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	621a      	str	r2, [r3, #32]
 800e382:	e00e      	b.n	800e3a2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6a1b      	ldr	r3, [r3, #32]
 800e390:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	785b      	ldrb	r3, [r3, #1]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d177      	bne.n	800e4a2 <USB_EPStartXfer+0x4c4>
 800e3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	61bb      	str	r3, [r7, #24]
 800e3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	61bb      	str	r3, [r7, #24]
 800e3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	00da      	lsls	r2, r3, #3
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e3ec:	617b      	str	r3, [r7, #20]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	801a      	strh	r2, [r3, #0]
 800e3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e402:	2b3e      	cmp	r3, #62	; 0x3e
 800e404:	d921      	bls.n	800e44a <USB_EPStartXfer+0x46c>
 800e406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e40a:	095b      	lsrs	r3, r3, #5
 800e40c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e414:	f003 031f 	and.w	r3, r3, #31
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d104      	bne.n	800e426 <USB_EPStartXfer+0x448>
 800e41c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e420:	3b01      	subs	r3, #1
 800e422:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e430:	b29b      	uxth	r3, r3
 800e432:	029b      	lsls	r3, r3, #10
 800e434:	b29b      	uxth	r3, r3
 800e436:	4313      	orrs	r3, r2
 800e438:	b29b      	uxth	r3, r3
 800e43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e442:	b29a      	uxth	r2, r3
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	801a      	strh	r2, [r3, #0]
 800e448:	e056      	b.n	800e4f8 <USB_EPStartXfer+0x51a>
 800e44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <USB_EPStartXfer+0x48a>
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	881b      	ldrh	r3, [r3, #0]
 800e456:	b29b      	uxth	r3, r3
 800e458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e45c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e460:	b29a      	uxth	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	801a      	strh	r2, [r3, #0]
 800e466:	e047      	b.n	800e4f8 <USB_EPStartXfer+0x51a>
 800e468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e46c:	085b      	lsrs	r3, r3, #1
 800e46e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d004      	beq.n	800e488 <USB_EPStartXfer+0x4aa>
 800e47e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e482:	3301      	adds	r3, #1
 800e484:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	b29a      	uxth	r2, r3
 800e48e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e492:	b29b      	uxth	r3, r3
 800e494:	029b      	lsls	r3, r3, #10
 800e496:	b29b      	uxth	r3, r3
 800e498:	4313      	orrs	r3, r2
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	801a      	strh	r2, [r3, #0]
 800e4a0:	e02a      	b.n	800e4f8 <USB_EPStartXfer+0x51a>
 800e4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	785b      	ldrb	r3, [r3, #1]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d122      	bne.n	800e4f8 <USB_EPStartXfer+0x51a>
 800e4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	623b      	str	r3, [r7, #32]
 800e4be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	623b      	str	r3, [r7, #32]
 800e4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	00da      	lsls	r2, r3, #3
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e4ec:	61fb      	str	r3, [r7, #28]
 800e4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	891b      	ldrh	r3, [r3, #8]
 800e504:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6959      	ldr	r1, [r3, #20]
 800e514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e518:	b29b      	uxth	r3, r3
 800e51a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e51e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e522:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e526:	6800      	ldr	r0, [r0, #0]
 800e528:	f001 fa38 	bl	800f99c <USB_WritePMA>
 800e52c:	e3ee      	b.n	800ed0c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d177      	bne.n	800e62e <USB_EPStartXfer+0x650>
 800e53e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e542:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	64bb      	str	r3, [r7, #72]	; 0x48
 800e54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e558:	b29b      	uxth	r3, r3
 800e55a:	461a      	mov	r2, r3
 800e55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e55e:	4413      	add	r3, r2
 800e560:	64bb      	str	r3, [r7, #72]	; 0x48
 800e562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	00da      	lsls	r2, r3, #3
 800e570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e572:	4413      	add	r3, r2
 800e574:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e578:	647b      	str	r3, [r7, #68]	; 0x44
 800e57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e584:	b29a      	uxth	r2, r3
 800e586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e588:	801a      	strh	r2, [r3, #0]
 800e58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e58e:	2b3e      	cmp	r3, #62	; 0x3e
 800e590:	d921      	bls.n	800e5d6 <USB_EPStartXfer+0x5f8>
 800e592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e596:	095b      	lsrs	r3, r3, #5
 800e598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a0:	f003 031f 	and.w	r3, r3, #31
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d104      	bne.n	800e5b2 <USB_EPStartXfer+0x5d4>
 800e5a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	029b      	lsls	r3, r3, #10
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5d2:	801a      	strh	r2, [r3, #0]
 800e5d4:	e056      	b.n	800e684 <USB_EPStartXfer+0x6a6>
 800e5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <USB_EPStartXfer+0x616>
 800e5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5f0:	801a      	strh	r2, [r3, #0]
 800e5f2:	e047      	b.n	800e684 <USB_EPStartXfer+0x6a6>
 800e5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5f8:	085b      	lsrs	r3, r3, #1
 800e5fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <USB_EPStartXfer+0x636>
 800e60a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e60e:	3301      	adds	r3, #1
 800e610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	b29a      	uxth	r2, r3
 800e61a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e61e:	b29b      	uxth	r3, r3
 800e620:	029b      	lsls	r3, r3, #10
 800e622:	b29b      	uxth	r3, r3
 800e624:	4313      	orrs	r3, r2
 800e626:	b29a      	uxth	r2, r3
 800e628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e62a:	801a      	strh	r2, [r3, #0]
 800e62c:	e02a      	b.n	800e684 <USB_EPStartXfer+0x6a6>
 800e62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	785b      	ldrb	r3, [r3, #1]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d122      	bne.n	800e684 <USB_EPStartXfer+0x6a6>
 800e63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	653b      	str	r3, [r7, #80]	; 0x50
 800e64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e658:	b29b      	uxth	r3, r3
 800e65a:	461a      	mov	r2, r3
 800e65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e65e:	4413      	add	r3, r2
 800e660:	653b      	str	r3, [r7, #80]	; 0x50
 800e662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	00da      	lsls	r2, r3, #3
 800e670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e672:	4413      	add	r3, r2
 800e674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e67e:	b29a      	uxth	r2, r3
 800e680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e682:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	891b      	ldrh	r3, [r3, #8]
 800e690:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6959      	ldr	r1, [r3, #20]
 800e6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e6ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	f001 f972 	bl	800f99c <USB_WritePMA>
            ep->xfer_buff += len;
 800e6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	695a      	ldr	r2, [r3, #20]
 800e6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6c8:	441a      	add	r2, r3
 800e6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	6a1a      	ldr	r2, [r3, #32]
 800e6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d90f      	bls.n	800e712 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6a1a      	ldr	r2, [r3, #32]
 800e6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e702:	1ad2      	subs	r2, r2, r3
 800e704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	621a      	str	r2, [r3, #32]
 800e710:	e00e      	b.n	800e730 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2200      	movs	r2, #0
 800e72e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	643b      	str	r3, [r7, #64]	; 0x40
 800e73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	785b      	ldrb	r3, [r3, #1]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d177      	bne.n	800e83c <USB_EPStartXfer+0x85e>
 800e74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	63bb      	str	r3, [r7, #56]	; 0x38
 800e758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e75c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e766:	b29b      	uxth	r3, r3
 800e768:	461a      	mov	r2, r3
 800e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76c:	4413      	add	r3, r2
 800e76e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	00da      	lsls	r2, r3, #3
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	4413      	add	r3, r2
 800e782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e786:	637b      	str	r3, [r7, #52]	; 0x34
 800e788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78a:	881b      	ldrh	r3, [r3, #0]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e792:	b29a      	uxth	r2, r3
 800e794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e796:	801a      	strh	r2, [r3, #0]
 800e798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e79c:	2b3e      	cmp	r3, #62	; 0x3e
 800e79e:	d921      	bls.n	800e7e4 <USB_EPStartXfer+0x806>
 800e7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7a4:	095b      	lsrs	r3, r3, #5
 800e7a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7ae:	f003 031f 	and.w	r3, r3, #31
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d104      	bne.n	800e7c0 <USB_EPStartXfer+0x7e2>
 800e7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c2:	881b      	ldrh	r3, [r3, #0]
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	029b      	lsls	r3, r3, #10
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e0:	801a      	strh	r2, [r3, #0]
 800e7e2:	e050      	b.n	800e886 <USB_EPStartXfer+0x8a8>
 800e7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <USB_EPStartXfer+0x824>
 800e7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fe:	801a      	strh	r2, [r3, #0]
 800e800:	e041      	b.n	800e886 <USB_EPStartXfer+0x8a8>
 800e802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e806:	085b      	lsrs	r3, r3, #1
 800e808:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e810:	f003 0301 	and.w	r3, r3, #1
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <USB_EPStartXfer+0x844>
 800e818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e81c:	3301      	adds	r3, #1
 800e81e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e824:	881b      	ldrh	r3, [r3, #0]
 800e826:	b29a      	uxth	r2, r3
 800e828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	029b      	lsls	r3, r3, #10
 800e830:	b29b      	uxth	r3, r3
 800e832:	4313      	orrs	r3, r2
 800e834:	b29a      	uxth	r2, r3
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	801a      	strh	r2, [r3, #0]
 800e83a:	e024      	b.n	800e886 <USB_EPStartXfer+0x8a8>
 800e83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	785b      	ldrb	r3, [r3, #1]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d11c      	bne.n	800e886 <USB_EPStartXfer+0x8a8>
 800e84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	461a      	mov	r2, r3
 800e85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e860:	4413      	add	r3, r2
 800e862:	643b      	str	r3, [r7, #64]	; 0x40
 800e864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	00da      	lsls	r2, r3, #3
 800e872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e874:	4413      	add	r3, r2
 800e876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e880:	b29a      	uxth	r2, r3
 800e882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e884:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	895b      	ldrh	r3, [r3, #10]
 800e892:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6959      	ldr	r1, [r3, #20]
 800e8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e8ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e8b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e8b4:	6800      	ldr	r0, [r0, #0]
 800e8b6:	f001 f871 	bl	800f99c <USB_WritePMA>
 800e8ba:	e227      	b.n	800ed0c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	881b      	ldrh	r3, [r3, #0]
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8f2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	441a      	add	r2, r3
 800e910:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e924:	b29b      	uxth	r3, r3
 800e926:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e92c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e942:	b29b      	uxth	r3, r3
 800e944:	461a      	mov	r2, r3
 800e946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e948:	4413      	add	r3, r2
 800e94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	00da      	lsls	r2, r3, #3
 800e95a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e95c:	4413      	add	r3, r2
 800e95e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e962:	65bb      	str	r3, [r7, #88]	; 0x58
 800e964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e968:	b29a      	uxth	r2, r3
 800e96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e96c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	891b      	ldrh	r3, [r3, #8]
 800e97a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	6959      	ldr	r1, [r3, #20]
 800e98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e98e:	b29b      	uxth	r3, r3
 800e990:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e994:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e998:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e99c:	6800      	ldr	r0, [r0, #0]
 800e99e:	f000 fffd 	bl	800f99c <USB_WritePMA>
 800e9a2:	e1b3      	b.n	800ed0c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6a1a      	ldr	r2, [r3, #32]
 800e9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9b4:	1ad2      	subs	r2, r2, r3
 800e9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	881b      	ldrh	r3, [r3, #0]
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80c6 	beq.w	800eb76 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	673b      	str	r3, [r7, #112]	; 0x70
 800e9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	785b      	ldrb	r3, [r3, #1]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d177      	bne.n	800eaf6 <USB_EPStartXfer+0xb18>
 800ea06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	461a      	mov	r2, r3
 800ea24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea26:	4413      	add	r3, r2
 800ea28:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	00da      	lsls	r2, r3, #3
 800ea38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea40:	667b      	str	r3, [r7, #100]	; 0x64
 800ea42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea50:	801a      	strh	r2, [r3, #0]
 800ea52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea56:	2b3e      	cmp	r3, #62	; 0x3e
 800ea58:	d921      	bls.n	800ea9e <USB_EPStartXfer+0xac0>
 800ea5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea5e:	095b      	lsrs	r3, r3, #5
 800ea60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea68:	f003 031f 	and.w	r3, r3, #31
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d104      	bne.n	800ea7a <USB_EPStartXfer+0xa9c>
 800ea70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea74:	3b01      	subs	r3, #1
 800ea76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ea7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea7c:	881b      	ldrh	r3, [r3, #0]
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	029b      	lsls	r3, r3, #10
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea9a:	801a      	strh	r2, [r3, #0]
 800ea9c:	e050      	b.n	800eb40 <USB_EPStartXfer+0xb62>
 800ea9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10a      	bne.n	800eabc <USB_EPStartXfer+0xade>
 800eaa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaa8:	881b      	ldrh	r3, [r3, #0]
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eab8:	801a      	strh	r2, [r3, #0]
 800eaba:	e041      	b.n	800eb40 <USB_EPStartXfer+0xb62>
 800eabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eac0:	085b      	lsrs	r3, r3, #1
 800eac2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800eac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d004      	beq.n	800eadc <USB_EPStartXfer+0xafe>
 800ead2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ead6:	3301      	adds	r3, #1
 800ead8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800eadc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	029b      	lsls	r3, r3, #10
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	4313      	orrs	r3, r2
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaf2:	801a      	strh	r2, [r3, #0]
 800eaf4:	e024      	b.n	800eb40 <USB_EPStartXfer+0xb62>
 800eaf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eafa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	785b      	ldrb	r3, [r3, #1]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d11c      	bne.n	800eb40 <USB_EPStartXfer+0xb62>
 800eb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	461a      	mov	r2, r3
 800eb18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb1a:	4413      	add	r3, r2
 800eb1c:	673b      	str	r3, [r7, #112]	; 0x70
 800eb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	00da      	lsls	r2, r3, #3
 800eb2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb2e:	4413      	add	r3, r2
 800eb30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eb34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800eb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	895b      	ldrh	r3, [r3, #10]
 800eb4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6959      	ldr	r1, [r3, #20]
 800eb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eb6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb6e:	6800      	ldr	r0, [r0, #0]
 800eb70:	f000 ff14 	bl	800f99c <USB_WritePMA>
 800eb74:	e0ca      	b.n	800ed0c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	785b      	ldrb	r3, [r3, #1]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d177      	bne.n	800ec76 <USB_EPStartXfer+0xc98>
 800eb86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	461a      	mov	r2, r3
 800eba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eba6:	4413      	add	r3, r2
 800eba8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ebaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	00da      	lsls	r2, r3, #3
 800ebb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ebba:	4413      	add	r3, r2
 800ebbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ebc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ebc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebc4:	881b      	ldrh	r3, [r3, #0]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebd0:	801a      	strh	r2, [r3, #0]
 800ebd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebd6:	2b3e      	cmp	r3, #62	; 0x3e
 800ebd8:	d921      	bls.n	800ec1e <USB_EPStartXfer+0xc40>
 800ebda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebde:	095b      	lsrs	r3, r3, #5
 800ebe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ebe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebe8:	f003 031f 	and.w	r3, r3, #31
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <USB_EPStartXfer+0xc1c>
 800ebf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ebfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	029b      	lsls	r3, r3, #10
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec1a:	801a      	strh	r2, [r3, #0]
 800ec1c:	e05c      	b.n	800ecd8 <USB_EPStartXfer+0xcfa>
 800ec1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <USB_EPStartXfer+0xc5e>
 800ec26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec28:	881b      	ldrh	r3, [r3, #0]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec38:	801a      	strh	r2, [r3, #0]
 800ec3a:	e04d      	b.n	800ecd8 <USB_EPStartXfer+0xcfa>
 800ec3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec40:	085b      	lsrs	r3, r3, #1
 800ec42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ec46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec4a:	f003 0301 	and.w	r3, r3, #1
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d004      	beq.n	800ec5c <USB_EPStartXfer+0xc7e>
 800ec52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec56:	3301      	adds	r3, #1
 800ec58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ec5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	029b      	lsls	r3, r3, #10
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec72:	801a      	strh	r2, [r3, #0]
 800ec74:	e030      	b.n	800ecd8 <USB_EPStartXfer+0xcfa>
 800ec76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	785b      	ldrb	r3, [r3, #1]
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d128      	bne.n	800ecd8 <USB_EPStartXfer+0xcfa>
 800ec86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ec94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	461a      	mov	r2, r3
 800eca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ecaa:	4413      	add	r3, r2
 800ecac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ecb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	00da      	lsls	r2, r3, #3
 800ecbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ecc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ecd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ecd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	891b      	ldrh	r3, [r3, #8]
 800ece4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ece8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6959      	ldr	r1, [r3, #20]
 800ecf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ecfe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ed06:	6800      	ldr	r0, [r0, #0]
 800ed08:	f000 fe48 	bl	800f99c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ed0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	4413      	add	r3, r2
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed32:	817b      	strh	r3, [r7, #10]
 800ed34:	897b      	ldrh	r3, [r7, #10]
 800ed36:	f083 0310 	eor.w	r3, r3, #16
 800ed3a:	817b      	strh	r3, [r7, #10]
 800ed3c:	897b      	ldrh	r3, [r7, #10]
 800ed3e:	f083 0320 	eor.w	r3, r3, #32
 800ed42:	817b      	strh	r3, [r7, #10]
 800ed44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	441a      	add	r2, r3
 800ed5e:	897b      	ldrh	r3, [r7, #10]
 800ed60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	8013      	strh	r3, [r2, #0]
 800ed74:	f000 bcde 	b.w	800f734 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ed78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	7b1b      	ldrb	r3, [r3, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f040 80bb 	bne.w	800ef00 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ed8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	699a      	ldr	r2, [r3, #24]
 800ed96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d917      	bls.n	800edd6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800eda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800edb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	699a      	ldr	r2, [r3, #24]
 800edc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edc6:	1ad2      	subs	r2, r2, r3
 800edc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	619a      	str	r2, [r3, #24]
 800edd4:	e00e      	b.n	800edf4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800edd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ede6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2200      	movs	r2, #0
 800edf2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800edf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ee02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ee18:	4413      	add	r3, r2
 800ee1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ee1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	00da      	lsls	r2, r3, #3
 800ee2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ee30:	4413      	add	r3, r2
 800ee32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ee36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee4c:	801a      	strh	r2, [r3, #0]
 800ee4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee52:	2b3e      	cmp	r3, #62	; 0x3e
 800ee54:	d924      	bls.n	800eea0 <USB_EPStartXfer+0xec2>
 800ee56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee5a:	095b      	lsrs	r3, r3, #5
 800ee5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee64:	f003 031f 	and.w	r3, r3, #31
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d104      	bne.n	800ee76 <USB_EPStartXfer+0xe98>
 800ee6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee70:	3b01      	subs	r3, #1
 800ee72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ee76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	029b      	lsls	r3, r3, #10
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee9a:	801a      	strh	r2, [r3, #0]
 800ee9c:	f000 bc10 	b.w	800f6c0 <USB_EPStartXfer+0x16e2>
 800eea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10c      	bne.n	800eec2 <USB_EPStartXfer+0xee4>
 800eea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eeb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eebe:	801a      	strh	r2, [r3, #0]
 800eec0:	e3fe      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
 800eec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eec6:	085b      	lsrs	r3, r3, #1
 800eec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d004      	beq.n	800eee2 <USB_EPStartXfer+0xf04>
 800eed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eedc:	3301      	adds	r3, #1
 800eede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eee6:	881b      	ldrh	r3, [r3, #0]
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	029b      	lsls	r3, r3, #10
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4313      	orrs	r3, r2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eefc:	801a      	strh	r2, [r3, #0]
 800eefe:	e3df      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ef00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	78db      	ldrb	r3, [r3, #3]
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	f040 8218 	bne.w	800f342 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ef12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	785b      	ldrb	r3, [r3, #1]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f040 809d 	bne.w	800f05e <USB_EPStartXfer+0x1080>
 800ef24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	461a      	mov	r2, r3
 800ef44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef48:	4413      	add	r3, r2
 800ef4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	00da      	lsls	r2, r3, #3
 800ef5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef60:	4413      	add	r3, r2
 800ef62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ef66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ef6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef7c:	801a      	strh	r2, [r3, #0]
 800ef7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	691b      	ldr	r3, [r3, #16]
 800ef8a:	2b3e      	cmp	r3, #62	; 0x3e
 800ef8c:	d92b      	bls.n	800efe6 <USB_EPStartXfer+0x1008>
 800ef8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	095b      	lsrs	r3, r3, #5
 800ef9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800efa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	f003 031f 	and.w	r3, r3, #31
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d104      	bne.n	800efbe <USB_EPStartXfer+0xfe0>
 800efb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efb8:	3b01      	subs	r3, #1
 800efba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800efbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efca:	b29b      	uxth	r3, r3
 800efcc:	029b      	lsls	r3, r3, #10
 800efce:	b29b      	uxth	r3, r3
 800efd0:	4313      	orrs	r3, r2
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efdc:	b29a      	uxth	r2, r3
 800efde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800efe2:	801a      	strh	r2, [r3, #0]
 800efe4:	e070      	b.n	800f0c8 <USB_EPStartXfer+0x10ea>
 800efe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10c      	bne.n	800f010 <USB_EPStartXfer+0x1032>
 800eff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	b29b      	uxth	r3, r3
 800effe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f006:	b29a      	uxth	r2, r3
 800f008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f00c:	801a      	strh	r2, [r3, #0]
 800f00e:	e05b      	b.n	800f0c8 <USB_EPStartXfer+0x10ea>
 800f010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	085b      	lsrs	r3, r3, #1
 800f01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <USB_EPStartXfer+0x1062>
 800f036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f03a:	3301      	adds	r3, #1
 800f03c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	b29a      	uxth	r2, r3
 800f048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	029b      	lsls	r3, r3, #10
 800f050:	b29b      	uxth	r3, r3
 800f052:	4313      	orrs	r3, r2
 800f054:	b29a      	uxth	r2, r3
 800f056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f05a:	801a      	strh	r2, [r3, #0]
 800f05c:	e034      	b.n	800f0c8 <USB_EPStartXfer+0x10ea>
 800f05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	785b      	ldrb	r3, [r3, #1]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d12c      	bne.n	800f0c8 <USB_EPStartXfer+0x10ea>
 800f06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	461a      	mov	r2, r3
 800f08e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f092:	4413      	add	r3, r2
 800f094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	00da      	lsls	r2, r3, #3
 800f0a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f0b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f0c6:	801a      	strh	r2, [r3, #0]
 800f0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	785b      	ldrb	r3, [r3, #1]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f040 809d 	bne.w	800f222 <USB_EPStartXfer+0x1244>
 800f0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f104:	b29b      	uxth	r3, r3
 800f106:	461a      	mov	r2, r3
 800f108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f10c:	4413      	add	r3, r2
 800f10e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	00da      	lsls	r2, r3, #3
 800f120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f124:	4413      	add	r3, r2
 800f126:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f12a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f12e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f132:	881b      	ldrh	r3, [r3, #0]
 800f134:	b29b      	uxth	r3, r3
 800f136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f140:	801a      	strh	r2, [r3, #0]
 800f142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	2b3e      	cmp	r3, #62	; 0x3e
 800f150:	d92b      	bls.n	800f1aa <USB_EPStartXfer+0x11cc>
 800f152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	691b      	ldr	r3, [r3, #16]
 800f15e:	095b      	lsrs	r3, r3, #5
 800f160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	f003 031f 	and.w	r3, r3, #31
 800f174:	2b00      	cmp	r3, #0
 800f176:	d104      	bne.n	800f182 <USB_EPStartXfer+0x11a4>
 800f178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f17c:	3b01      	subs	r3, #1
 800f17e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	b29a      	uxth	r2, r3
 800f18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f18e:	b29b      	uxth	r3, r3
 800f190:	029b      	lsls	r3, r3, #10
 800f192:	b29b      	uxth	r3, r3
 800f194:	4313      	orrs	r3, r2
 800f196:	b29b      	uxth	r3, r3
 800f198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f1a6:	801a      	strh	r2, [r3, #0]
 800f1a8:	e069      	b.n	800f27e <USB_EPStartXfer+0x12a0>
 800f1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	691b      	ldr	r3, [r3, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10c      	bne.n	800f1d4 <USB_EPStartXfer+0x11f6>
 800f1ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f1d0:	801a      	strh	r2, [r3, #0]
 800f1d2:	e054      	b.n	800f27e <USB_EPStartXfer+0x12a0>
 800f1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f1e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	f003 0301 	and.w	r3, r3, #1
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d004      	beq.n	800f204 <USB_EPStartXfer+0x1226>
 800f1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1fe:	3301      	adds	r3, #1
 800f200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f210:	b29b      	uxth	r3, r3
 800f212:	029b      	lsls	r3, r3, #10
 800f214:	b29b      	uxth	r3, r3
 800f216:	4313      	orrs	r3, r2
 800f218:	b29a      	uxth	r2, r3
 800f21a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f21e:	801a      	strh	r2, [r3, #0]
 800f220:	e02d      	b.n	800f27e <USB_EPStartXfer+0x12a0>
 800f222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	785b      	ldrb	r3, [r3, #1]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d125      	bne.n	800f27e <USB_EPStartXfer+0x12a0>
 800f232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f240:	b29b      	uxth	r3, r3
 800f242:	461a      	mov	r2, r3
 800f244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f248:	4413      	add	r3, r2
 800f24a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	00da      	lsls	r2, r3, #3
 800f25c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f260:	4413      	add	r3, r2
 800f262:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f26a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f26e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	b29a      	uxth	r2, r3
 800f278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f27c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	69db      	ldr	r3, [r3, #28]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 8218 	beq.w	800f6c0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f2b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f2b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d005      	beq.n	800f2c8 <USB_EPStartXfer+0x12ea>
 800f2bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10d      	bne.n	800f2e4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f2c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 81f5 	bne.w	800f6c0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f2d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f040 81ee 	bne.w	800f6c0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	4413      	add	r3, r2
 800f2fe:	881b      	ldrh	r3, [r3, #0]
 800f300:	b29b      	uxth	r3, r3
 800f302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f30a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	441a      	add	r2, r3
 800f328:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f32c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f338:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	8013      	strh	r3, [r2, #0]
 800f340:	e1be      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	78db      	ldrb	r3, [r3, #3]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	f040 81b4 	bne.w	800f6bc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	699a      	ldr	r2, [r3, #24]
 800f360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d917      	bls.n	800f3a0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	699a      	ldr	r2, [r3, #24]
 800f38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f390:	1ad2      	subs	r2, r2, r3
 800f392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	619a      	str	r2, [r3, #24]
 800f39e:	e00e      	b.n	800f3be <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	785b      	ldrb	r3, [r3, #1]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f040 8085 	bne.w	800f4da <USB_EPStartXfer+0x14fc>
 800f3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f3f4:	4413      	add	r3, r2
 800f3f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	00da      	lsls	r2, r3, #3
 800f408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f40c:	4413      	add	r3, r2
 800f40e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f422:	b29a      	uxth	r2, r3
 800f424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f428:	801a      	strh	r2, [r3, #0]
 800f42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f42e:	2b3e      	cmp	r3, #62	; 0x3e
 800f430:	d923      	bls.n	800f47a <USB_EPStartXfer+0x149c>
 800f432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f436:	095b      	lsrs	r3, r3, #5
 800f438:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f440:	f003 031f 	and.w	r3, r3, #31
 800f444:	2b00      	cmp	r3, #0
 800f446:	d104      	bne.n	800f452 <USB_EPStartXfer+0x1474>
 800f448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f44c:	3b01      	subs	r3, #1
 800f44e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	b29a      	uxth	r2, r3
 800f45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f45e:	b29b      	uxth	r3, r3
 800f460:	029b      	lsls	r3, r3, #10
 800f462:	b29b      	uxth	r3, r3
 800f464:	4313      	orrs	r3, r2
 800f466:	b29b      	uxth	r3, r3
 800f468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f46c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f470:	b29a      	uxth	r2, r3
 800f472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f476:	801a      	strh	r2, [r3, #0]
 800f478:	e060      	b.n	800f53c <USB_EPStartXfer+0x155e>
 800f47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10c      	bne.n	800f49c <USB_EPStartXfer+0x14be>
 800f482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f486:	881b      	ldrh	r3, [r3, #0]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f492:	b29a      	uxth	r2, r3
 800f494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f498:	801a      	strh	r2, [r3, #0]
 800f49a:	e04f      	b.n	800f53c <USB_EPStartXfer+0x155e>
 800f49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4a0:	085b      	lsrs	r3, r3, #1
 800f4a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d004      	beq.n	800f4bc <USB_EPStartXfer+0x14de>
 800f4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f4bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	029b      	lsls	r3, r3, #10
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f4d6:	801a      	strh	r2, [r3, #0]
 800f4d8:	e030      	b.n	800f53c <USB_EPStartXfer+0x155e>
 800f4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	785b      	ldrb	r3, [r3, #1]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d128      	bne.n	800f53c <USB_EPStartXfer+0x155e>
 800f4ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f506:	b29b      	uxth	r3, r3
 800f508:	461a      	mov	r2, r3
 800f50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f50e:	4413      	add	r3, r2
 800f510:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	00da      	lsls	r2, r3, #3
 800f522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f526:	4413      	add	r3, r2
 800f528:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f52c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f534:	b29a      	uxth	r2, r3
 800f536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f53a:	801a      	strh	r2, [r3, #0]
 800f53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	785b      	ldrb	r3, [r3, #1]
 800f556:	2b00      	cmp	r3, #0
 800f558:	f040 8085 	bne.w	800f666 <USB_EPStartXfer+0x1688>
 800f55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f578:	b29b      	uxth	r3, r3
 800f57a:	461a      	mov	r2, r3
 800f57c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f580:	4413      	add	r3, r2
 800f582:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	00da      	lsls	r2, r3, #3
 800f594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f598:	4413      	add	r3, r2
 800f59a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f59e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f5a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5b4:	801a      	strh	r2, [r3, #0]
 800f5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5ba:	2b3e      	cmp	r3, #62	; 0x3e
 800f5bc:	d923      	bls.n	800f606 <USB_EPStartXfer+0x1628>
 800f5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5c2:	095b      	lsrs	r3, r3, #5
 800f5c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5cc:	f003 031f 	and.w	r3, r3, #31
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d104      	bne.n	800f5de <USB_EPStartXfer+0x1600>
 800f5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f5de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	029b      	lsls	r3, r3, #10
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f602:	801a      	strh	r2, [r3, #0]
 800f604:	e05c      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
 800f606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10c      	bne.n	800f628 <USB_EPStartXfer+0x164a>
 800f60e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	b29b      	uxth	r3, r3
 800f616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f61a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f61e:	b29a      	uxth	r2, r3
 800f620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f624:	801a      	strh	r2, [r3, #0]
 800f626:	e04b      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
 800f628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f62c:	085b      	lsrs	r3, r3, #1
 800f62e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d004      	beq.n	800f648 <USB_EPStartXfer+0x166a>
 800f63e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f642:	3301      	adds	r3, #1
 800f644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	b29a      	uxth	r2, r3
 800f650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f654:	b29b      	uxth	r3, r3
 800f656:	029b      	lsls	r3, r3, #10
 800f658:	b29b      	uxth	r3, r3
 800f65a:	4313      	orrs	r3, r2
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f662:	801a      	strh	r2, [r3, #0]
 800f664:	e02c      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
 800f666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	785b      	ldrb	r3, [r3, #1]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d124      	bne.n	800f6c0 <USB_EPStartXfer+0x16e2>
 800f676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f67a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f684:	b29b      	uxth	r3, r3
 800f686:	461a      	mov	r2, r3
 800f688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f68c:	4413      	add	r3, r2
 800f68e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	00da      	lsls	r2, r3, #3
 800f6a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f6a4:	4413      	add	r3, r2
 800f6a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f6aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f6b8:	801a      	strh	r2, [r3, #0]
 800f6ba:	e001      	b.n	800f6c0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e03a      	b.n	800f736 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4413      	add	r3, r2
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f6ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f6ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f6f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f6f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f6fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f6fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	441a      	add	r2, r3
 800f71c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f730:	b29b      	uxth	r3, r3
 800f732:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	785b      	ldrb	r3, [r3, #1]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d020      	beq.n	800f794 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	4413      	add	r3, r2
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	b29b      	uxth	r3, r3
 800f760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f768:	81bb      	strh	r3, [r7, #12]
 800f76a:	89bb      	ldrh	r3, [r7, #12]
 800f76c:	f083 0310 	eor.w	r3, r3, #16
 800f770:	81bb      	strh	r3, [r7, #12]
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	441a      	add	r2, r3
 800f77c:	89bb      	ldrh	r3, [r7, #12]
 800f77e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f78e:	b29b      	uxth	r3, r3
 800f790:	8013      	strh	r3, [r2, #0]
 800f792:	e01f      	b.n	800f7d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7aa:	81fb      	strh	r3, [r7, #14]
 800f7ac:	89fb      	ldrh	r3, [r7, #14]
 800f7ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f7b2:	81fb      	strh	r3, [r7, #14]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	441a      	add	r2, r3
 800f7be:	89fb      	ldrh	r3, [r7, #14]
 800f7c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b087      	sub	sp, #28
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
 800f7ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	7b1b      	ldrb	r3, [r3, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f040 809d 	bne.w	800f930 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	785b      	ldrb	r3, [r3, #1]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d04c      	beq.n	800f898 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	823b      	strh	r3, [r7, #16]
 800f80c:	8a3b      	ldrh	r3, [r7, #16]
 800f80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f812:	2b00      	cmp	r3, #0
 800f814:	d01b      	beq.n	800f84e <USB_EPClearStall+0x6c>
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	4413      	add	r3, r2
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	b29b      	uxth	r3, r3
 800f824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f82c:	81fb      	strh	r3, [r7, #14]
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	441a      	add	r2, r3
 800f838:	89fb      	ldrh	r3, [r7, #14]
 800f83a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f83e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f846:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	78db      	ldrb	r3, [r3, #3]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d06c      	beq.n	800f930 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4413      	add	r3, r2
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	b29b      	uxth	r3, r3
 800f864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f86c:	81bb      	strh	r3, [r7, #12]
 800f86e:	89bb      	ldrh	r3, [r7, #12]
 800f870:	f083 0320 	eor.w	r3, r3, #32
 800f874:	81bb      	strh	r3, [r7, #12]
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	441a      	add	r2, r3
 800f880:	89bb      	ldrh	r3, [r7, #12]
 800f882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f892:	b29b      	uxth	r3, r3
 800f894:	8013      	strh	r3, [r2, #0]
 800f896:	e04b      	b.n	800f930 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	82fb      	strh	r3, [r7, #22]
 800f8a6:	8afb      	ldrh	r3, [r7, #22]
 800f8a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01b      	beq.n	800f8e8 <USB_EPClearStall+0x106>
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	881b      	ldrh	r3, [r3, #0]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8c6:	82bb      	strh	r3, [r7, #20]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	441a      	add	r2, r3
 800f8d2:	8abb      	ldrh	r3, [r7, #20]
 800f8d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8fe:	827b      	strh	r3, [r7, #18]
 800f900:	8a7b      	ldrh	r3, [r7, #18]
 800f902:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f906:	827b      	strh	r3, [r7, #18]
 800f908:	8a7b      	ldrh	r3, [r7, #18]
 800f90a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f90e:	827b      	strh	r3, [r7, #18]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	441a      	add	r2, r3
 800f91a:	8a7b      	ldrh	r3, [r7, #18]
 800f91c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	371c      	adds	r7, #28
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f93e:	b480      	push	{r7}
 800f940:	b083      	sub	sp, #12
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	460b      	mov	r3, r1
 800f948:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f94a:	78fb      	ldrb	r3, [r7, #3]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d103      	bne.n	800f958 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2280      	movs	r2, #128	; 0x80
 800f954:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f966:	b480      	push	{r7}
 800f968:	b083      	sub	sp, #12
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800f96e:	2300      	movs	r3, #0
}
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f98e:	68fb      	ldr	r3, [r7, #12]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3714      	adds	r7, #20
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b08b      	sub	sp, #44	; 0x2c
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	60f8      	str	r0, [r7, #12]
 800f9a4:	60b9      	str	r1, [r7, #8]
 800f9a6:	4611      	mov	r1, r2
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	80fb      	strh	r3, [r7, #6]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f9b2:	88bb      	ldrh	r3, [r7, #4]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	085b      	lsrs	r3, r3, #1
 800f9b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f9c2:	88fa      	ldrh	r2, [r7, #6]
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	4413      	add	r3, r2
 800f9c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f9d2:	e01b      	b.n	800fa0c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	b21a      	sxth	r2, r3
 800f9e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	b21b      	sxth	r3, r3
 800f9ec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	8a7a      	ldrh	r2, [r7, #18]
 800f9f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	3302      	adds	r3, #2
 800f9f8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	3301      	adds	r3, #1
 800fa04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e0      	bne.n	800f9d4 <USB_WritePMA+0x38>
  }
}
 800fa12:	bf00      	nop
 800fa14:	bf00      	nop
 800fa16:	372c      	adds	r7, #44	; 0x2c
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b08b      	sub	sp, #44	; 0x2c
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	460b      	mov	r3, r1
 800fa30:	80fb      	strh	r3, [r7, #6]
 800fa32:	4613      	mov	r3, r2
 800fa34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fa36:	88bb      	ldrh	r3, [r7, #4]
 800fa38:	085b      	lsrs	r3, r3, #1
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fa46:	88fa      	ldrh	r2, [r7, #6]
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	627b      	str	r3, [r7, #36]	; 0x24
 800fa56:	e018      	b.n	800fa8a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800fa58:	6a3b      	ldr	r3, [r7, #32]
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fa60:	6a3b      	ldr	r3, [r7, #32]
 800fa62:	3302      	adds	r3, #2
 800fa64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	3301      	adds	r3, #1
 800fa72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	0a1b      	lsrs	r3, r3, #8
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	3301      	adds	r3, #1
 800fa82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	3b01      	subs	r3, #1
 800fa88:	627b      	str	r3, [r7, #36]	; 0x24
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1e3      	bne.n	800fa58 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fa90:	88bb      	ldrh	r3, [r7, #4]
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d007      	beq.n	800faac <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800fa9c:	6a3b      	ldr	r3, [r7, #32]
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	b2da      	uxtb	r2, r3
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	701a      	strb	r2, [r3, #0]
  }
}
 800faac:	bf00      	nop
 800faae:	372c      	adds	r7, #44	; 0x2c
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fabc:	4904      	ldr	r1, [pc, #16]	; (800fad0 <MX_FATFS_Init+0x18>)
 800fabe:	4805      	ldr	r0, [pc, #20]	; (800fad4 <MX_FATFS_Init+0x1c>)
 800fac0:	f006 fba4 	bl	801620c <FATFS_LinkDriver>
 800fac4:	4603      	mov	r3, r0
 800fac6:	461a      	mov	r2, r3
 800fac8:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <MX_FATFS_Init+0x20>)
 800faca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800facc:	bf00      	nop
 800face:	bd80      	pop	{r7, pc}
 800fad0:	20009614 	.word	0x20009614
 800fad4:	20000010 	.word	0x20000010
 800fad8:	20009610 	.word	0x20009610

0800fadc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fae0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <SD_ReadyWait>:


/* SD카드 Ready 대기 */
//static
uint8_t SD_ReadyWait(void)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800faf2:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <SD_ReadyWait+0x30>)
 800faf4:	2232      	movs	r2, #50	; 0x32
 800faf6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800faf8:	f007 fe44 	bl	8017784 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800fafc:	f007 fe42 	bl	8017784 <SPI_RxByte>
 800fb00:	4603      	mov	r3, r0
 800fb02:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800fb04:	79fb      	ldrb	r3, [r7, #7]
 800fb06:	2bff      	cmp	r3, #255	; 0xff
 800fb08:	d003      	beq.n	800fb12 <SD_ReadyWait+0x26>
 800fb0a:	4b04      	ldr	r3, [pc, #16]	; (800fb1c <SD_ReadyWait+0x30>)
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1f4      	bne.n	800fafc <SD_ReadyWait+0x10>
  
  return res;
 800fb12:	79fb      	ldrb	r3, [r7, #7]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	20009606 	.word	0x20009606

0800fb20 <SD_PowerOn>:

/* 전원 켜기 */
//static
void SD_PowerOn(void)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800fb26:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800fb2a:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  SD_CS_OFF;//DESELECT();
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	2108      	movs	r1, #8
 800fb30:	4825      	ldr	r0, [pc, #148]	; (800fbc8 <SD_PowerOn+0xa8>)
 800fb32:	f7f7 f8ad 	bl	8006c90 <HAL_GPIO_WritePin>
  
  for(int i = 0; i < 10; i++)
 800fb36:	2300      	movs	r3, #0
 800fb38:	613b      	str	r3, [r7, #16]
 800fb3a:	e005      	b.n	800fb48 <SD_PowerOn+0x28>
  {
    SPI_TxByte(0xFF);
 800fb3c:	20ff      	movs	r0, #255	; 0xff
 800fb3e:	f007 fe11 	bl	8017764 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	3301      	adds	r3, #1
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	2b09      	cmp	r3, #9
 800fb4c:	ddf6      	ble.n	800fb3c <SD_PowerOn+0x1c>
  }
  
  /*SPI Chips Select*/
  SD_CS_ON;
 800fb4e:	2200      	movs	r2, #0
 800fb50:	2108      	movs	r1, #8
 800fb52:	481d      	ldr	r0, [pc, #116]	; (800fbc8 <SD_PowerOn+0xa8>)
 800fb54:	f7f7 f89c 	bl	8006c90 <HAL_GPIO_WritePin>
  
  /*GO_IDLE_STATE*/
  cmd_arg[0] = (CMD_0 | 0x40);
 800fb58:	2340      	movs	r3, #64	; 0x40
 800fb5a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800fb6c:	2395      	movs	r3, #149	; 0x95
 800fb6e:	727b      	strb	r3, [r7, #9]
  
  for (int i = 0; i < 6; i++)
 800fb70:	2300      	movs	r3, #0
 800fb72:	60fb      	str	r3, [r7, #12]
 800fb74:	e009      	b.n	800fb8a <SD_PowerOn+0x6a>
  {
    SPI_TxByte(cmd_arg[i]);
 800fb76:	1d3a      	adds	r2, r7, #4
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f007 fdf0 	bl	8017764 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	3301      	adds	r3, #1
 800fb88:	60fb      	str	r3, [r7, #12]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b05      	cmp	r3, #5
 800fb8e:	ddf2      	ble.n	800fb76 <SD_PowerOn+0x56>
  }
  
  while ((SPI_RxByte() != 0x01) && Count)
 800fb90:	e002      	b.n	800fb98 <SD_PowerOn+0x78>
  {
    Count--;
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	3b01      	subs	r3, #1
 800fb96:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800fb98:	f007 fdf4 	bl	8017784 <SPI_RxByte>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d002      	beq.n	800fba8 <SD_PowerOn+0x88>
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d1f4      	bne.n	800fb92 <SD_PowerOn+0x72>
  }
  
  SD_CS_OFF;//DESELECT();
 800fba8:	2201      	movs	r2, #1
 800fbaa:	2108      	movs	r1, #8
 800fbac:	4806      	ldr	r0, [pc, #24]	; (800fbc8 <SD_PowerOn+0xa8>)
 800fbae:	f7f7 f86f 	bl	8006c90 <HAL_GPIO_WritePin>
  SPI_TxByte(0XFF);
 800fbb2:	20ff      	movs	r0, #255	; 0xff
 800fbb4:	f007 fdd6 	bl	8017764 <SPI_TxByte>
  
  PowerFlag = 1;
 800fbb8:	4b04      	ldr	r3, [pc, #16]	; (800fbcc <SD_PowerOn+0xac>)
 800fbba:	2201      	movs	r2, #1
 800fbbc:	701a      	strb	r2, [r3, #0]
}
 800fbbe:	bf00      	nop
 800fbc0:	3718      	adds	r7, #24
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	48000800 	.word	0x48000800
 800fbcc:	20009618 	.word	0x20009618

0800fbd0 <SD_PowerOff>:

//static
void SD_PowerOff(void)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800fbd4:	4b03      	ldr	r3, [pc, #12]	; (800fbe4 <SD_PowerOff+0x14>)
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	701a      	strb	r2, [r3, #0]
}
 800fbda:	bf00      	nop
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr
 800fbe4:	20009618 	.word	0x20009618

0800fbe8 <SD_CheckPower>:

//static
uint8_t SD_CheckPower(void)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800fbec:	4b03      	ldr	r3, [pc, #12]	; (800fbfc <SD_CheckPower+0x14>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	20009618 	.word	0x20009618

0800fc00 <SD_RxDataBlock>:

//static
bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800fc0a:	4b17      	ldr	r3, [pc, #92]	; (800fc68 <SD_RxDataBlock+0x68>)
 800fc0c:	220a      	movs	r2, #10
 800fc0e:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800fc10:	f007 fdb8 	bl	8017784 <SPI_RxByte>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2bff      	cmp	r3, #255	; 0xff
 800fc1c:	d103      	bne.n	800fc26 <SD_RxDataBlock+0x26>
 800fc1e:	4b12      	ldr	r3, [pc, #72]	; (800fc68 <SD_RxDataBlock+0x68>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1f4      	bne.n	800fc10 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
 800fc28:	2bfe      	cmp	r3, #254	; 0xfe
 800fc2a:	d001      	beq.n	800fc30 <SD_RxDataBlock+0x30>
    return FALSE;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e016      	b.n	800fc5e <SD_RxDataBlock+0x5e>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	607a      	str	r2, [r7, #4]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f007 fdb6 	bl	80177a8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	607a      	str	r2, [r7, #4]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f007 fdb0 	bl	80177a8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	3b02      	subs	r3, #2
 800fc4c:	603b      	str	r3, [r7, #0]
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d1ed      	bne.n	800fc30 <SD_RxDataBlock+0x30>
  
  SPI_RxByte(); /* CRC 무시 */
 800fc54:	f007 fd96 	bl	8017784 <SPI_RxByte>
  SPI_RxByte();
 800fc58:	f007 fd94 	bl	8017784 <SPI_RxByte>
  
  return TRUE;
 800fc5c:	2301      	movs	r3, #1
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	20009605 	.word	0x20009605

0800fc6c <SD_TxDataBlock>:

#if _READONLY == 0
//static
bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	460b      	mov	r3, r1
 800fc76:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800fc7c:	f7ff ff36 	bl	800faec <SD_ReadyWait>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2bff      	cmp	r3, #255	; 0xff
 800fc84:	d001      	beq.n	800fc8a <SD_TxDataBlock+0x1e>
    return FALSE;
 800fc86:	2300      	movs	r3, #0
 800fc88:	e040      	b.n	800fd0c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800fc8a:	78fb      	ldrb	r3, [r7, #3]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f007 fd69 	bl	8017764 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800fc92:	78fb      	ldrb	r3, [r7, #3]
 800fc94:	2bfd      	cmp	r3, #253	; 0xfd
 800fc96:	d031      	beq.n	800fcfc <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	607a      	str	r2, [r7, #4]
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f007 fd5d 	bl	8017764 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	607a      	str	r2, [r7, #4]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f007 fd56 	bl	8017764 <SPI_TxByte>
    } while (--wc);
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	73bb      	strb	r3, [r7, #14]
 800fcbe:	7bbb      	ldrb	r3, [r7, #14]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1eb      	bne.n	800fc9c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800fcc4:	f007 fd5e 	bl	8017784 <SPI_RxByte>
    SPI_RxByte();
 800fcc8:	f007 fd5c 	bl	8017784 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 800fccc:	e00b      	b.n	800fce6 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800fcce:	f007 fd59 	bl	8017784 <SPI_RxByte>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
 800fcd8:	f003 031f 	and.w	r3, r3, #31
 800fcdc:	2b05      	cmp	r3, #5
 800fcde:	d006      	beq.n	800fcee <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800fce0:	7b7b      	ldrb	r3, [r7, #13]
 800fce2:	3301      	adds	r3, #1
 800fce4:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800fce6:	7b7b      	ldrb	r3, [r7, #13]
 800fce8:	2b40      	cmp	r3, #64	; 0x40
 800fcea:	d9f0      	bls.n	800fcce <SD_TxDataBlock+0x62>
 800fcec:	e000      	b.n	800fcf0 <SD_TxDataBlock+0x84>
        break;
 800fcee:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800fcf0:	bf00      	nop
 800fcf2:	f007 fd47 	bl	8017784 <SPI_RxByte>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d0fa      	beq.n	800fcf2 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
 800fcfe:	f003 031f 	and.w	r3, r3, #31
 800fd02:	2b05      	cmp	r3, #5
 800fd04:	d101      	bne.n	800fd0a <SD_TxDataBlock+0x9e>
    return TRUE;
 800fd06:	2301      	movs	r3, #1
 800fd08:	e000      	b.n	800fd0c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800fd0a:	2300      	movs	r3, #0
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
//static
BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	6039      	str	r1, [r7, #0]
 800fd1e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800fd20:	f7ff fee4 	bl	800faec <SD_ReadyWait>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2bff      	cmp	r3, #255	; 0xff
 800fd28:	d001      	beq.n	800fd2e <SD_SendCmd+0x1a>
    return 0xFF;
 800fd2a:	23ff      	movs	r3, #255	; 0xff
 800fd2c:	e040      	b.n	800fdb0 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800fd2e:	79fb      	ldrb	r3, [r7, #7]
 800fd30:	4618      	mov	r0, r3
 800fd32:	f007 fd17 	bl	8017764 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	0e1b      	lsrs	r3, r3, #24
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f007 fd11 	bl	8017764 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	0c1b      	lsrs	r3, r3, #16
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f007 fd0b 	bl	8017764 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	0a1b      	lsrs	r3, r3, #8
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	4618      	mov	r0, r3
 800fd56:	f007 fd05 	bl	8017764 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f007 fd00 	bl	8017764 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800fd64:	2300      	movs	r3, #0
 800fd66:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD_0)
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	2b40      	cmp	r3, #64	; 0x40
 800fd6c:	d101      	bne.n	800fd72 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD_0(0) */
 800fd6e:	2395      	movs	r3, #149	; 0x95
 800fd70:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD_8)
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	2b48      	cmp	r3, #72	; 0x48
 800fd76:	d101      	bne.n	800fd7c <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD_8(0x1AA) */
 800fd78:	2387      	movs	r3, #135	; 0x87
 800fd7a:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f007 fcf0 	bl	8017764 <SPI_TxByte>
  
  /* CMD_12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD_12)
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2b4c      	cmp	r3, #76	; 0x4c
 800fd88:	d101      	bne.n	800fd8e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800fd8a:	f007 fcfb 	bl	8017784 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800fd8e:	230a      	movs	r3, #10
 800fd90:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800fd92:	f007 fcf7 	bl	8017784 <SPI_RxByte>
 800fd96:	4603      	mov	r3, r0
 800fd98:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800fd9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	da05      	bge.n	800fdae <SD_SendCmd+0x9a>
 800fda2:	7bbb      	ldrb	r3, [r7, #14]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	73bb      	strb	r3, [r7, #14]
 800fda8:	7bbb      	ldrb	r3, [r7, #14]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1f1      	bne.n	800fd92 <SD_SendCmd+0x7e>
  
  return res;
 800fdae:	7b7b      	ldrb	r3, [r7, #13]
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <SD_disk_read>:
  return Stat;
}

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60b9      	str	r1, [r7, #8]
 800fdc0:	607a      	str	r2, [r7, #4]
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800fdc8:	7bfb      	ldrb	r3, [r7, #15]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d102      	bne.n	800fdd4 <SD_disk_read+0x1c>
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <SD_disk_read+0x20>
    return RES_PARERR;
 800fdd4:	2304      	movs	r3, #4
 800fdd6:	e056      	b.n	800fe86 <SD_disk_read+0xce>

  if (Stat & STA_NOINIT)
 800fdd8:	4b2d      	ldr	r3, [pc, #180]	; (800fe90 <SD_disk_read+0xd8>)
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	f003 0301 	and.w	r3, r3, #1
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d001      	beq.n	800fde8 <SD_disk_read+0x30>
    return RES_NOTRDY;
 800fde4:	2303      	movs	r3, #3
 800fde6:	e04e      	b.n	800fe86 <SD_disk_read+0xce>

  if (!(CardType & 8))
 800fde8:	4b2a      	ldr	r3, [pc, #168]	; (800fe94 <SD_disk_read+0xdc>)
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	f003 0308 	and.w	r3, r3, #8
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <SD_disk_read+0x42>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	025b      	lsls	r3, r3, #9
 800fdf8:	607b      	str	r3, [r7, #4]

  SD_CS_ON;
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2108      	movs	r1, #8
 800fdfe:	4826      	ldr	r0, [pc, #152]	; (800fe98 <SD_disk_read+0xe0>)
 800fe00:	f7f6 ff46 	bl	8006c90 <HAL_GPIO_WritePin>

  if (count == 1)
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d111      	bne.n	800fe2e <SD_disk_read+0x76>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD_17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800fe0a:	6879      	ldr	r1, [r7, #4]
 800fe0c:	2051      	movs	r0, #81	; 0x51
 800fe0e:	f7ff ff81 	bl	800fd14 <SD_SendCmd>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d129      	bne.n	800fe6c <SD_disk_read+0xb4>
 800fe18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe1c:	68b8      	ldr	r0, [r7, #8]
 800fe1e:	f7ff feef 	bl	800fc00 <SD_RxDataBlock>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d021      	beq.n	800fe6c <SD_disk_read+0xb4>
      count = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	603b      	str	r3, [r7, #0]
 800fe2c:	e01e      	b.n	800fe6c <SD_disk_read+0xb4>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD_18, sector) == 0)
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	2052      	movs	r0, #82	; 0x52
 800fe32:	f7ff ff6f 	bl	800fd14 <SD_SendCmd>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d117      	bne.n	800fe6c <SD_disk_read+0xb4>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800fe3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe40:	68b8      	ldr	r0, [r7, #8]
 800fe42:	f7ff fedd 	bl	800fc00 <SD_RxDataBlock>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00a      	beq.n	800fe62 <SD_disk_read+0xaa>
          break;

        buff += 512;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fe52:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	3b01      	subs	r3, #1
 800fe58:	603b      	str	r3, [r7, #0]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1ed      	bne.n	800fe3c <SD_disk_read+0x84>
 800fe60:	e000      	b.n	800fe64 <SD_disk_read+0xac>
          break;
 800fe62:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD_12, 0);
 800fe64:	2100      	movs	r1, #0
 800fe66:	204c      	movs	r0, #76	; 0x4c
 800fe68:	f7ff ff54 	bl	800fd14 <SD_SendCmd>
    }
  }

  SD_CS_OFF;
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	2108      	movs	r1, #8
 800fe70:	4809      	ldr	r0, [pc, #36]	; (800fe98 <SD_disk_read+0xe0>)
 800fe72:	f7f6 ff0d 	bl	8006c90 <HAL_GPIO_WritePin>

  SPI_RxByte(); /* Idle 상태(Release DO) */
 800fe76:	f007 fc85 	bl	8017784 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	bf14      	ite	ne
 800fe80:	2301      	movne	r3, #1
 800fe82:	2300      	moveq	r3, #0
 800fe84:	b2db      	uxtb	r3, r3
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3710      	adds	r7, #16
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	20000024 	.word	0x20000024
 800fe94:	20009619 	.word	0x20009619
 800fe98:	48000800 	.word	0x48000800

0800fe9c <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60b9      	str	r1, [r7, #8]
 800fea4:	607a      	str	r2, [r7, #4]
 800fea6:	603b      	str	r3, [r7, #0]
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d102      	bne.n	800feb8 <SD_disk_write+0x1c>
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d101      	bne.n	800febc <SD_disk_write+0x20>
    return RES_PARERR;
 800feb8:	2304      	movs	r3, #4
 800feba:	e06f      	b.n	800ff9c <SD_disk_write+0x100>
  
  if (Stat & STA_NOINIT)
 800febc:	4b39      	ldr	r3, [pc, #228]	; (800ffa4 <SD_disk_write+0x108>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	f003 0301 	and.w	r3, r3, #1
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d001      	beq.n	800fecc <SD_disk_write+0x30>
    return RES_NOTRDY;
 800fec8:	2303      	movs	r3, #3
 800feca:	e067      	b.n	800ff9c <SD_disk_write+0x100>
  
  if (Stat & STA_PROTECT)
 800fecc:	4b35      	ldr	r3, [pc, #212]	; (800ffa4 <SD_disk_write+0x108>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 0304 	and.w	r3, r3, #4
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <SD_disk_write+0x40>
    return RES_WRPRT;
 800fed8:	2302      	movs	r3, #2
 800feda:	e05f      	b.n	800ff9c <SD_disk_write+0x100>
  
  if (!(CardType & 4))
 800fedc:	4b32      	ldr	r3, [pc, #200]	; (800ffa8 <SD_disk_write+0x10c>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 0304 	and.w	r3, r3, #4
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d102      	bne.n	800feee <SD_disk_write+0x52>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	025b      	lsls	r3, r3, #9
 800feec:	607b      	str	r3, [r7, #4]
  
  SD_CS_ON;
 800feee:	2200      	movs	r2, #0
 800fef0:	2108      	movs	r1, #8
 800fef2:	482e      	ldr	r0, [pc, #184]	; (800ffac <SD_disk_write+0x110>)
 800fef4:	f7f6 fecc 	bl	8006c90 <HAL_GPIO_WritePin>
  
  if (count == 1) 
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d110      	bne.n	800ff20 <SD_disk_write+0x84>
  { 
    if ((SD_SendCmd(CMD_24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800fefe:	6879      	ldr	r1, [r7, #4]
 800ff00:	2058      	movs	r0, #88	; 0x58
 800ff02:	f7ff ff07 	bl	800fd14 <SD_SendCmd>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d13a      	bne.n	800ff82 <SD_disk_write+0xe6>
 800ff0c:	21fe      	movs	r1, #254	; 0xfe
 800ff0e:	68b8      	ldr	r0, [r7, #8]
 800ff10:	f7ff feac 	bl	800fc6c <SD_TxDataBlock>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d033      	beq.n	800ff82 <SD_disk_write+0xe6>
      count = 0;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	603b      	str	r3, [r7, #0]
 800ff1e:	e030      	b.n	800ff82 <SD_disk_write+0xe6>
  } 
  else 
  { 
    if (CardType & 2) 
 800ff20:	4b21      	ldr	r3, [pc, #132]	; (800ffa8 <SD_disk_write+0x10c>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	f003 0302 	and.w	r3, r3, #2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d007      	beq.n	800ff3c <SD_disk_write+0xa0>
    {
      SD_SendCmd(CMD_55, 0);
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	2077      	movs	r0, #119	; 0x77
 800ff30:	f7ff fef0 	bl	800fd14 <SD_SendCmd>
      SD_SendCmd(CMD_23, count); /* ACMD23 */
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	2057      	movs	r0, #87	; 0x57
 800ff38:	f7ff feec 	bl	800fd14 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD_25, sector) == 0)
 800ff3c:	6879      	ldr	r1, [r7, #4]
 800ff3e:	2059      	movs	r0, #89	; 0x59
 800ff40:	f7ff fee8 	bl	800fd14 <SD_SendCmd>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d11b      	bne.n	800ff82 <SD_disk_write+0xe6>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800ff4a:	21fc      	movs	r1, #252	; 0xfc
 800ff4c:	68b8      	ldr	r0, [r7, #8]
 800ff4e:	f7ff fe8d 	bl	800fc6c <SD_TxDataBlock>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <SD_disk_write+0xd2>
          break;
        
        buff += 512;
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ff5e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	3b01      	subs	r3, #1
 800ff64:	603b      	str	r3, [r7, #0]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d1ee      	bne.n	800ff4a <SD_disk_write+0xae>
 800ff6c:	e000      	b.n	800ff70 <SD_disk_write+0xd4>
          break;
 800ff6e:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800ff70:	21fd      	movs	r1, #253	; 0xfd
 800ff72:	2000      	movs	r0, #0
 800ff74:	f7ff fe7a 	bl	800fc6c <SD_TxDataBlock>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <SD_disk_write+0xe6>
      {        
        count = 1;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  SD_CS_OFF;
 800ff82:	2201      	movs	r2, #1
 800ff84:	2108      	movs	r1, #8
 800ff86:	4809      	ldr	r0, [pc, #36]	; (800ffac <SD_disk_write+0x110>)
 800ff88:	f7f6 fe82 	bl	8006c90 <HAL_GPIO_WritePin>
  SPI_RxByte();
 800ff8c:	f007 fbfa 	bl	8017784 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	bf14      	ite	ne
 800ff96:	2301      	movne	r3, #1
 800ff98:	2300      	moveq	r3, #0
 800ff9a:	b2db      	uxtb	r3, r3
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	20000024 	.word	0x20000024
 800ffa8:	20009619 	.word	0x20009619
 800ffac:	48000800 	.word	0x48000800

0800ffb0 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800ffb0:	b590      	push	{r4, r7, lr}
 800ffb2:	b08b      	sub	sp, #44	; 0x2c
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	603a      	str	r2, [r7, #0]
 800ffba:	71fb      	strb	r3, [r7, #7]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)  return RES_PARERR;
 800ffc4:	79fb      	ldrb	r3, [r7, #7]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <SD_disk_ioctl+0x1e>
 800ffca:	2304      	movs	r3, #4
 800ffcc:	e120      	b.n	8010210 <SD_disk_ioctl+0x260>
  
  res = RES_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800ffd4:	79bb      	ldrb	r3, [r7, #6]
 800ffd6:	2b05      	cmp	r3, #5
 800ffd8:	d129      	bne.n	801002e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800ffda:	6a3b      	ldr	r3, [r7, #32]
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d017      	beq.n	8010012 <SD_disk_ioctl+0x62>
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	dc1f      	bgt.n	8010026 <SD_disk_ioctl+0x76>
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d002      	beq.n	800fff0 <SD_disk_ioctl+0x40>
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d00b      	beq.n	8010006 <SD_disk_ioctl+0x56>
 800ffee:	e01a      	b.n	8010026 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower()) SD_PowerOff();   /* Power Off */
 800fff0:	f7ff fdfa 	bl	800fbe8 <SD_CheckPower>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d001      	beq.n	800fffe <SD_disk_ioctl+0x4e>
 800fffa:	f7ff fde9 	bl	800fbd0 <SD_PowerOff>
      res = RES_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010004:	e102      	b.n	801020c <SD_disk_ioctl+0x25c>
    case 1:
      SD_PowerOn();             /* Power On */
 8010006:	f7ff fd8b 	bl	800fb20 <SD_PowerOn>
      res = RES_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010010:	e0fc      	b.n	801020c <SD_disk_ioctl+0x25c>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	1c5c      	adds	r4, r3, #1
 8010016:	f7ff fde7 	bl	800fbe8 <SD_CheckPower>
 801001a:	4603      	mov	r3, r0
 801001c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 801001e:	2300      	movs	r3, #0
 8010020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010024:	e0f2      	b.n	801020c <SD_disk_ioctl+0x25c>
    default:
      res = RES_PARERR;
 8010026:	2304      	movs	r3, #4
 8010028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801002c:	e0ee      	b.n	801020c <SD_disk_ioctl+0x25c>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)  return RES_NOTRDY;
 801002e:	4b7a      	ldr	r3, [pc, #488]	; (8010218 <SD_disk_ioctl+0x268>)
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b00      	cmp	r3, #0
 8010038:	d001      	beq.n	801003e <SD_disk_ioctl+0x8e>
 801003a:	2303      	movs	r3, #3
 801003c:	e0e8      	b.n	8010210 <SD_disk_ioctl+0x260>
    
    SD_CS_ON;
 801003e:	2200      	movs	r2, #0
 8010040:	2108      	movs	r1, #8
 8010042:	4876      	ldr	r0, [pc, #472]	; (801021c <SD_disk_ioctl+0x26c>)
 8010044:	f7f6 fe24 	bl	8006c90 <HAL_GPIO_WritePin>
    
    switch (ctrl) 
 8010048:	79bb      	ldrb	r3, [r7, #6]
 801004a:	2b0d      	cmp	r3, #13
 801004c:	f200 80cc 	bhi.w	80101e8 <SD_disk_ioctl+0x238>
 8010050:	a201      	add	r2, pc, #4	; (adr r2, 8010058 <SD_disk_ioctl+0xa8>)
 8010052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010056:	bf00      	nop
 8010058:	08010153 	.word	0x08010153
 801005c:	08010091 	.word	0x08010091
 8010060:	08010143 	.word	0x08010143
 8010064:	080101e9 	.word	0x080101e9
 8010068:	080101e9 	.word	0x080101e9
 801006c:	080101e9 	.word	0x080101e9
 8010070:	080101e9 	.word	0x080101e9
 8010074:	080101e9 	.word	0x080101e9
 8010078:	080101e9 	.word	0x080101e9
 801007c:	080101e9 	.word	0x080101e9
 8010080:	080101e9 	.word	0x080101e9
 8010084:	08010165 	.word	0x08010165
 8010088:	08010189 	.word	0x08010189
 801008c:	080101ad 	.word	0x080101ad
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD_9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8010090:	2100      	movs	r1, #0
 8010092:	2049      	movs	r0, #73	; 0x49
 8010094:	f7ff fe3e 	bl	800fd14 <SD_SendCmd>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	f040 80a8 	bne.w	80101f0 <SD_disk_ioctl+0x240>
 80100a0:	f107 030c 	add.w	r3, r7, #12
 80100a4:	2110      	movs	r1, #16
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff fdaa 	bl	800fc00 <SD_RxDataBlock>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 809e 	beq.w	80101f0 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1) 
 80100b4:	7b3b      	ldrb	r3, [r7, #12]
 80100b6:	099b      	lsrs	r3, r3, #6
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d10e      	bne.n	80100dc <SD_disk_ioctl+0x12c>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80100be:	7d7b      	ldrb	r3, [r7, #21]
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	7d3b      	ldrb	r3, [r7, #20]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	021b      	lsls	r3, r3, #8
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4413      	add	r3, r2
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	3301      	adds	r3, #1
 80100d0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80100d2:	8bfb      	ldrh	r3, [r7, #30]
 80100d4:	029a      	lsls	r2, r3, #10
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	e02e      	b.n	801013a <SD_disk_ioctl+0x18a>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80100dc:	7c7b      	ldrb	r3, [r7, #17]
 80100de:	f003 030f 	and.w	r3, r3, #15
 80100e2:	b2da      	uxtb	r2, r3
 80100e4:	7dbb      	ldrb	r3, [r7, #22]
 80100e6:	09db      	lsrs	r3, r3, #7
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	4413      	add	r3, r2
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	7d7b      	ldrb	r3, [r7, #21]
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	f003 0306 	and.w	r3, r3, #6
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	4413      	add	r3, r2
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	3302      	adds	r3, #2
 8010100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8010104:	7d3b      	ldrb	r3, [r7, #20]
 8010106:	099b      	lsrs	r3, r3, #6
 8010108:	b2db      	uxtb	r3, r3
 801010a:	b29a      	uxth	r2, r3
 801010c:	7cfb      	ldrb	r3, [r7, #19]
 801010e:	b29b      	uxth	r3, r3
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	b29b      	uxth	r3, r3
 8010114:	4413      	add	r3, r2
 8010116:	b29a      	uxth	r2, r3
 8010118:	7cbb      	ldrb	r3, [r7, #18]
 801011a:	029b      	lsls	r3, r3, #10
 801011c:	b29b      	uxth	r3, r3
 801011e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010122:	b29b      	uxth	r3, r3
 8010124:	4413      	add	r3, r2
 8010126:	b29b      	uxth	r3, r3
 8010128:	3301      	adds	r3, #1
 801012a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 801012c:	8bfa      	ldrh	r2, [r7, #30]
 801012e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010132:	3b09      	subs	r3, #9
 8010134:	409a      	lsls	r2, r3
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 801013a:	2300      	movs	r3, #0
 801013c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8010140:	e056      	b.n	80101f0 <SD_disk_ioctl+0x240>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010148:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010150:	e055      	b.n	80101fe <SD_disk_ioctl+0x24e>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8010152:	f7ff fccb 	bl	800faec <SD_ReadyWait>
 8010156:	4603      	mov	r3, r0
 8010158:	2bff      	cmp	r3, #255	; 0xff
 801015a:	d14b      	bne.n	80101f4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 801015c:	2300      	movs	r3, #0
 801015e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010162:	e047      	b.n	80101f4 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD_9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8010164:	2100      	movs	r1, #0
 8010166:	2049      	movs	r0, #73	; 0x49
 8010168:	f7ff fdd4 	bl	800fd14 <SD_SendCmd>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d142      	bne.n	80101f8 <SD_disk_ioctl+0x248>
 8010172:	2110      	movs	r1, #16
 8010174:	6a38      	ldr	r0, [r7, #32]
 8010176:	f7ff fd43 	bl	800fc00 <SD_RxDataBlock>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d03b      	beq.n	80101f8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8010186:	e037      	b.n	80101f8 <SD_disk_ioctl+0x248>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD_10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8010188:	2100      	movs	r1, #0
 801018a:	204a      	movs	r0, #74	; 0x4a
 801018c:	f7ff fdc2 	bl	800fd14 <SD_SendCmd>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d132      	bne.n	80101fc <SD_disk_ioctl+0x24c>
 8010196:	2110      	movs	r1, #16
 8010198:	6a38      	ldr	r0, [r7, #32]
 801019a:	f7ff fd31 	bl	800fc00 <SD_RxDataBlock>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d02b      	beq.n	80101fc <SD_disk_ioctl+0x24c>
        res = RES_OK;
 80101a4:	2300      	movs	r3, #0
 80101a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80101aa:	e027      	b.n	80101fc <SD_disk_ioctl+0x24c>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD_58, 0) == 0)
 80101ac:	2100      	movs	r1, #0
 80101ae:	207a      	movs	r0, #122	; 0x7a
 80101b0:	f7ff fdb0 	bl	800fd14 <SD_SendCmd>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d116      	bne.n	80101e8 <SD_disk_ioctl+0x238>
      {         
        for (n = 0; n < 4; n++)
 80101ba:	2300      	movs	r3, #0
 80101bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80101c0:	e00b      	b.n	80101da <SD_disk_ioctl+0x22a>
        {
          *ptr++ = SPI_RxByte();
 80101c2:	6a3c      	ldr	r4, [r7, #32]
 80101c4:	1c63      	adds	r3, r4, #1
 80101c6:	623b      	str	r3, [r7, #32]
 80101c8:	f007 fadc 	bl	8017784 <SPI_RxByte>
 80101cc:	4603      	mov	r3, r0
 80101ce:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80101d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101d4:	3301      	adds	r3, #1
 80101d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80101da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d9ef      	bls.n	80101c2 <SD_disk_ioctl+0x212>
        }
        
        res = RES_OK;
 80101e2:	2300      	movs	r3, #0
 80101e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80101e8:	2304      	movs	r3, #4
 80101ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101ee:	e006      	b.n	80101fe <SD_disk_ioctl+0x24e>
      break;
 80101f0:	bf00      	nop
 80101f2:	e004      	b.n	80101fe <SD_disk_ioctl+0x24e>
      break;
 80101f4:	bf00      	nop
 80101f6:	e002      	b.n	80101fe <SD_disk_ioctl+0x24e>
      break;
 80101f8:	bf00      	nop
 80101fa:	e000      	b.n	80101fe <SD_disk_ioctl+0x24e>
      break;
 80101fc:	bf00      	nop
    }
    
    SD_CS_OFF;
 80101fe:	2201      	movs	r2, #1
 8010200:	2108      	movs	r1, #8
 8010202:	4806      	ldr	r0, [pc, #24]	; (801021c <SD_disk_ioctl+0x26c>)
 8010204:	f7f6 fd44 	bl	8006c90 <HAL_GPIO_WritePin>

    SPI_RxByte();
 8010208:	f007 fabc 	bl	8017784 <SPI_RxByte>
  }
  
  return res;
 801020c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010210:	4618      	mov	r0, r3
 8010212:	372c      	adds	r7, #44	; 0x2c
 8010214:	46bd      	mov	sp, r7
 8010216:	bd90      	pop	{r4, r7, pc}
 8010218:	20000024 	.word	0x20000024
 801021c:	48000800 	.word	0x48000800

08010220 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 801022a:	79fb      	ldrb	r3, [r7, #7]
 801022c:	4618      	mov	r0, r3
 801022e:	f000 f949 	bl	80104c4 <USER_SPI_initialize>
 8010232:	4603      	mov	r3, r0
	//return SD_disk_initialize(pdrv);
  /* USER CODE END INIT */
}
 8010234:	4618      	mov	r0, r3
 8010236:	3708      	adds	r7, #8
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	4618      	mov	r0, r3
 801024a:	f000 fa25 	bl	8010698 <USER_SPI_status>
 801024e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	60b9      	str	r1, [r7, #8]
 8010260:	607a      	str	r2, [r7, #4]
 8010262:	603b      	str	r3, [r7, #0]
 8010264:	4603      	mov	r3, r0
 8010266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	//return USER_SPI_read(pdrv, buff, sector, count);
	return SD_disk_read(pdrv, buff, sector, count);
 8010268:	7bf8      	ldrb	r0, [r7, #15]
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	68b9      	ldr	r1, [r7, #8]
 8010270:	f7ff fda2 	bl	800fdb8 <SD_disk_read>
 8010274:	4603      	mov	r3, r0

  /* USER CODE END READ */
}
 8010276:	4618      	mov	r0, r3
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
 8010288:	603b      	str	r3, [r7, #0]
 801028a:	4603      	mov	r3, r0
 801028c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	//return USER_SPI_write(pdrv, buff, sector, count);
	return SD_disk_write(pdrv, buff, sector, count);
 801028e:	7bf8      	ldrb	r0, [r7, #15]
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	68b9      	ldr	r1, [r7, #8]
 8010296:	f7ff fe01 	bl	800fe9c <SD_disk_write>
 801029a:	4603      	mov	r3, r0

  /* USER CODE END WRITE */
}
 801029c:	4618      	mov	r0, r3
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	603a      	str	r2, [r7, #0]
 80102ae:	71fb      	strb	r3, [r7, #7]
 80102b0:	460b      	mov	r3, r1
 80102b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	//return USER_SPI_ioctl(pdrv, cmd, buff);
	return SD_disk_ioctl(pdrv, cmd, buff);
 80102b4:	79b9      	ldrb	r1, [r7, #6]
 80102b6:	79fb      	ldrb	r3, [r7, #7]
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff fe78 	bl	800ffb0 <SD_disk_ioctl>
 80102c0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
	...

080102cc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80102d4:	f7f4 fce0 	bl	8004c98 <HAL_GetTick>
 80102d8:	4603      	mov	r3, r0
 80102da:	4a04      	ldr	r2, [pc, #16]	; (80102ec <SPI_Timer_On+0x20>)
 80102dc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80102de:	4a04      	ldr	r2, [pc, #16]	; (80102f0 <SPI_Timer_On+0x24>)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6013      	str	r3, [r2, #0]
}
 80102e4:	bf00      	nop
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	2000961c 	.word	0x2000961c
 80102f0:	20009620 	.word	0x20009620

080102f4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80102f4:	b580      	push	{r7, lr}
 80102f6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80102f8:	f7f4 fcce 	bl	8004c98 <HAL_GetTick>
 80102fc:	4602      	mov	r2, r0
 80102fe:	4b06      	ldr	r3, [pc, #24]	; (8010318 <SPI_Timer_Status+0x24>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	1ad2      	subs	r2, r2, r3
 8010304:	4b05      	ldr	r3, [pc, #20]	; (801031c <SPI_Timer_Status+0x28>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	429a      	cmp	r2, r3
 801030a:	bf34      	ite	cc
 801030c:	2301      	movcc	r3, #1
 801030e:	2300      	movcs	r3, #0
 8010310:	b2db      	uxtb	r3, r3
}
 8010312:	4618      	mov	r0, r3
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	2000961c 	.word	0x2000961c
 801031c:	20009620 	.word	0x20009620

08010320 <xchg_spi>:
/* Exchange a byte */
//static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af02      	add	r7, sp, #8
 8010326:	4603      	mov	r3, r0
 8010328:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 801032a:	f107 020f 	add.w	r2, r7, #15
 801032e:	1df9      	adds	r1, r7, #7
 8010330:	2332      	movs	r3, #50	; 0x32
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	2301      	movs	r3, #1
 8010336:	4804      	ldr	r0, [pc, #16]	; (8010348 <xchg_spi+0x28>)
 8010338:	f7fa f868 	bl	800a40c <HAL_SPI_TransmitReceive>
    return rxDat;
 801033c:	7bfb      	ldrb	r3, [r7, #15]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	20008b88 	.word	0x20008b88

0801034c <wait_ready>:

//static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b086      	sub	sp, #24
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010354:	f7f4 fca0 	bl	8004c98 <HAL_GetTick>
 8010358:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 801035e:	20ff      	movs	r0, #255	; 0xff
 8010360:	f7ff ffde 	bl	8010320 <xchg_spi>
 8010364:	4603      	mov	r3, r0
 8010366:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8010368:	7bfb      	ldrb	r3, [r7, #15]
 801036a:	2bff      	cmp	r3, #255	; 0xff
 801036c:	d007      	beq.n	801037e <wait_ready+0x32>
 801036e:	f7f4 fc93 	bl	8004c98 <HAL_GetTick>
 8010372:	4602      	mov	r2, r0
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	693a      	ldr	r2, [r7, #16]
 801037a:	429a      	cmp	r2, r3
 801037c:	d8ef      	bhi.n	801035e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 801037e:	7bfb      	ldrb	r3, [r7, #15]
 8010380:	2bff      	cmp	r3, #255	; 0xff
 8010382:	bf0c      	ite	eq
 8010384:	2301      	moveq	r3, #1
 8010386:	2300      	movne	r3, #0
 8010388:	b2db      	uxtb	r3, r3
}
 801038a:	4618      	mov	r0, r3
 801038c:	3718      	adds	r7, #24
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
	...

08010394 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

//static
void despiselect (void)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8010398:	2201      	movs	r2, #1
 801039a:	2108      	movs	r1, #8
 801039c:	4803      	ldr	r0, [pc, #12]	; (80103ac <despiselect+0x18>)
 801039e:	f7f6 fc77 	bl	8006c90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80103a2:	20ff      	movs	r0, #255	; 0xff
 80103a4:	f7ff ffbc 	bl	8010320 <xchg_spi>

}
 80103a8:	bf00      	nop
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	48000800 	.word	0x48000800

080103b0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

//static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80103b4:	2200      	movs	r2, #0
 80103b6:	2108      	movs	r1, #8
 80103b8:	4809      	ldr	r0, [pc, #36]	; (80103e0 <spiselect+0x30>)
 80103ba:	f7f6 fc69 	bl	8006c90 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80103be:	20ff      	movs	r0, #255	; 0xff
 80103c0:	f7ff ffae 	bl	8010320 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80103c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80103c8:	f7ff ffc0 	bl	801034c <wait_ready>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <spiselect+0x26>
 80103d2:	2301      	movs	r3, #1
 80103d4:	e002      	b.n	80103dc <spiselect+0x2c>

	despiselect();
 80103d6:	f7ff ffdd 	bl	8010394 <despiselect>
	return 0;	/* Timeout */
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	48000800 	.word	0x48000800

080103e4 <send_cmd>:
//static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	6039      	str	r1, [r7, #0]
 80103ee:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80103f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	da0e      	bge.n	8010416 <send_cmd+0x32>
		cmd &= 0x7F;
 80103f8:	79fb      	ldrb	r3, [r7, #7]
 80103fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103fe:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8010400:	2100      	movs	r1, #0
 8010402:	2037      	movs	r0, #55	; 0x37
 8010404:	f7ff ffee 	bl	80103e4 <send_cmd>
 8010408:	4603      	mov	r3, r0
 801040a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 801040c:	7bbb      	ldrb	r3, [r7, #14]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d901      	bls.n	8010416 <send_cmd+0x32>
 8010412:	7bbb      	ldrb	r3, [r7, #14]
 8010414:	e051      	b.n	80104ba <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	2b0c      	cmp	r3, #12
 801041a:	d008      	beq.n	801042e <send_cmd+0x4a>
		despiselect();
 801041c:	f7ff ffba 	bl	8010394 <despiselect>
		if (!spiselect()) return 0xFF;
 8010420:	f7ff ffc6 	bl	80103b0 <spiselect>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <send_cmd+0x4a>
 801042a:	23ff      	movs	r3, #255	; 0xff
 801042c:	e045      	b.n	80104ba <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010434:	b2db      	uxtb	r3, r3
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff ff72 	bl	8010320 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	0e1b      	lsrs	r3, r3, #24
 8010440:	b2db      	uxtb	r3, r3
 8010442:	4618      	mov	r0, r3
 8010444:	f7ff ff6c 	bl	8010320 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	0c1b      	lsrs	r3, r3, #16
 801044c:	b2db      	uxtb	r3, r3
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff ff66 	bl	8010320 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	0a1b      	lsrs	r3, r3, #8
 8010458:	b2db      	uxtb	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff ff60 	bl	8010320 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	b2db      	uxtb	r3, r3
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff ff5b 	bl	8010320 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 801046a:	2301      	movs	r3, #1
 801046c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 801046e:	79fb      	ldrb	r3, [r7, #7]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d101      	bne.n	8010478 <send_cmd+0x94>
 8010474:	2395      	movs	r3, #149	; 0x95
 8010476:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	2b08      	cmp	r3, #8
 801047c:	d101      	bne.n	8010482 <send_cmd+0x9e>
 801047e:	2387      	movs	r3, #135	; 0x87
 8010480:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8010482:	7bfb      	ldrb	r3, [r7, #15]
 8010484:	4618      	mov	r0, r3
 8010486:	f7ff ff4b 	bl	8010320 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	2b0c      	cmp	r3, #12
 801048e:	d102      	bne.n	8010496 <send_cmd+0xb2>
 8010490:	20ff      	movs	r0, #255	; 0xff
 8010492:	f7ff ff45 	bl	8010320 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010496:	230a      	movs	r3, #10
 8010498:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 801049a:	20ff      	movs	r0, #255	; 0xff
 801049c:	f7ff ff40 	bl	8010320 <xchg_spi>
 80104a0:	4603      	mov	r3, r0
 80104a2:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80104a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	da05      	bge.n	80104b8 <send_cmd+0xd4>
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
 80104ae:	3b01      	subs	r3, #1
 80104b0:	73fb      	strb	r3, [r7, #15]
 80104b2:	7bfb      	ldrb	r3, [r7, #15]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1f0      	bne.n	801049a <send_cmd+0xb6>

	return res;							/* Return received response */
 80104b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
	...

080104c4 <USER_SPI_initialize>:

//inline
DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80104c4:	b590      	push	{r4, r7, lr}
 80104c6:	b085      	sub	sp, #20
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	4603      	mov	r3, r0
 80104cc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d001      	beq.n	80104d8 <USER_SPI_initialize+0x14>
 80104d4:	2301      	movs	r3, #1
 80104d6:	e0d3      	b.n	8010680 <USER_SPI_initialize+0x1bc>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80104d8:	4b6b      	ldr	r3, [pc, #428]	; (8010688 <USER_SPI_initialize+0x1c4>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 0302 	and.w	r3, r3, #2
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d002      	beq.n	80104ea <USER_SPI_initialize+0x26>
 80104e4:	4b68      	ldr	r3, [pc, #416]	; (8010688 <USER_SPI_initialize+0x1c4>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	e0ca      	b.n	8010680 <USER_SPI_initialize+0x1bc>

	FCLK_SLOW();
 80104ea:	4b68      	ldr	r3, [pc, #416]	; (801068c <USER_SPI_initialize+0x1c8>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80104f4:	4b65      	ldr	r3, [pc, #404]	; (801068c <USER_SPI_initialize+0x1c8>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80104fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80104fe:	230a      	movs	r3, #10
 8010500:	73fb      	strb	r3, [r7, #15]
 8010502:	e005      	b.n	8010510 <USER_SPI_initialize+0x4c>
 8010504:	20ff      	movs	r0, #255	; 0xff
 8010506:	f7ff ff0b 	bl	8010320 <xchg_spi>
 801050a:	7bfb      	ldrb	r3, [r7, #15]
 801050c:	3b01      	subs	r3, #1
 801050e:	73fb      	strb	r3, [r7, #15]
 8010510:	7bfb      	ldrb	r3, [r7, #15]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1f6      	bne.n	8010504 <USER_SPI_initialize+0x40>

	ty = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 801051a:	2100      	movs	r1, #0
 801051c:	2000      	movs	r0, #0
 801051e:	f7ff ff61 	bl	80103e4 <send_cmd>
 8010522:	4603      	mov	r3, r0
 8010524:	2b01      	cmp	r3, #1
 8010526:	f040 808b 	bne.w	8010640 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 801052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801052e:	f7ff fecd 	bl	80102cc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010532:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010536:	2008      	movs	r0, #8
 8010538:	f7ff ff54 	bl	80103e4 <send_cmd>
 801053c:	4603      	mov	r3, r0
 801053e:	2b01      	cmp	r3, #1
 8010540:	d151      	bne.n	80105e6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010542:	2300      	movs	r3, #0
 8010544:	73fb      	strb	r3, [r7, #15]
 8010546:	e00d      	b.n	8010564 <USER_SPI_initialize+0xa0>
 8010548:	7bfc      	ldrb	r4, [r7, #15]
 801054a:	20ff      	movs	r0, #255	; 0xff
 801054c:	f7ff fee8 	bl	8010320 <xchg_spi>
 8010550:	4603      	mov	r3, r0
 8010552:	461a      	mov	r2, r3
 8010554:	f104 0310 	add.w	r3, r4, #16
 8010558:	443b      	add	r3, r7
 801055a:	f803 2c08 	strb.w	r2, [r3, #-8]
 801055e:	7bfb      	ldrb	r3, [r7, #15]
 8010560:	3301      	adds	r3, #1
 8010562:	73fb      	strb	r3, [r7, #15]
 8010564:	7bfb      	ldrb	r3, [r7, #15]
 8010566:	2b03      	cmp	r3, #3
 8010568:	d9ee      	bls.n	8010548 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 801056a:	7abb      	ldrb	r3, [r7, #10]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d167      	bne.n	8010640 <USER_SPI_initialize+0x17c>
 8010570:	7afb      	ldrb	r3, [r7, #11]
 8010572:	2baa      	cmp	r3, #170	; 0xaa
 8010574:	d164      	bne.n	8010640 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8010576:	bf00      	nop
 8010578:	f7ff febc 	bl	80102f4 <SPI_Timer_Status>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d007      	beq.n	8010592 <USER_SPI_initialize+0xce>
 8010582:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010586:	20a9      	movs	r0, #169	; 0xa9
 8010588:	f7ff ff2c 	bl	80103e4 <send_cmd>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1f2      	bne.n	8010578 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8010592:	f7ff feaf 	bl	80102f4 <SPI_Timer_Status>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d051      	beq.n	8010640 <USER_SPI_initialize+0x17c>
 801059c:	2100      	movs	r1, #0
 801059e:	203a      	movs	r0, #58	; 0x3a
 80105a0:	f7ff ff20 	bl	80103e4 <send_cmd>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d14a      	bne.n	8010640 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80105aa:	2300      	movs	r3, #0
 80105ac:	73fb      	strb	r3, [r7, #15]
 80105ae:	e00d      	b.n	80105cc <USER_SPI_initialize+0x108>
 80105b0:	7bfc      	ldrb	r4, [r7, #15]
 80105b2:	20ff      	movs	r0, #255	; 0xff
 80105b4:	f7ff feb4 	bl	8010320 <xchg_spi>
 80105b8:	4603      	mov	r3, r0
 80105ba:	461a      	mov	r2, r3
 80105bc:	f104 0310 	add.w	r3, r4, #16
 80105c0:	443b      	add	r3, r7
 80105c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80105c6:	7bfb      	ldrb	r3, [r7, #15]
 80105c8:	3301      	adds	r3, #1
 80105ca:	73fb      	strb	r3, [r7, #15]
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	d9ee      	bls.n	80105b0 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80105d2:	7a3b      	ldrb	r3, [r7, #8]
 80105d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <USER_SPI_initialize+0x11c>
 80105dc:	230c      	movs	r3, #12
 80105de:	e000      	b.n	80105e2 <USER_SPI_initialize+0x11e>
 80105e0:	2304      	movs	r3, #4
 80105e2:	737b      	strb	r3, [r7, #13]
 80105e4:	e02c      	b.n	8010640 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80105e6:	2100      	movs	r1, #0
 80105e8:	20a9      	movs	r0, #169	; 0xa9
 80105ea:	f7ff fefb 	bl	80103e4 <send_cmd>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d804      	bhi.n	80105fe <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80105f4:	2302      	movs	r3, #2
 80105f6:	737b      	strb	r3, [r7, #13]
 80105f8:	23a9      	movs	r3, #169	; 0xa9
 80105fa:	73bb      	strb	r3, [r7, #14]
 80105fc:	e003      	b.n	8010606 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80105fe:	2301      	movs	r3, #1
 8010600:	737b      	strb	r3, [r7, #13]
 8010602:	2301      	movs	r3, #1
 8010604:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8010606:	bf00      	nop
 8010608:	f7ff fe74 	bl	80102f4 <SPI_Timer_Status>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d007      	beq.n	8010622 <USER_SPI_initialize+0x15e>
 8010612:	7bbb      	ldrb	r3, [r7, #14]
 8010614:	2100      	movs	r1, #0
 8010616:	4618      	mov	r0, r3
 8010618:	f7ff fee4 	bl	80103e4 <send_cmd>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f2      	bne.n	8010608 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8010622:	f7ff fe67 	bl	80102f4 <SPI_Timer_Status>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <USER_SPI_initialize+0x178>
 801062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010630:	2010      	movs	r0, #16
 8010632:	f7ff fed7 	bl	80103e4 <send_cmd>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d001      	beq.n	8010640 <USER_SPI_initialize+0x17c>
				ty = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010640:	4a13      	ldr	r2, [pc, #76]	; (8010690 <USER_SPI_initialize+0x1cc>)
 8010642:	7b7b      	ldrb	r3, [r7, #13]
 8010644:	7013      	strb	r3, [r2, #0]

	//despiselect();
SD_CS_OFF;
 8010646:	2201      	movs	r2, #1
 8010648:	2108      	movs	r1, #8
 801064a:	4812      	ldr	r0, [pc, #72]	; (8010694 <USER_SPI_initialize+0x1d0>)
 801064c:	f7f6 fb20 	bl	8006c90 <HAL_GPIO_WritePin>

	if (ty) {			/* OK */
 8010650:	7b7b      	ldrb	r3, [r7, #13]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00f      	beq.n	8010676 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8010656:	4b0d      	ldr	r3, [pc, #52]	; (801068c <USER_SPI_initialize+0x1c8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	4b0b      	ldr	r3, [pc, #44]	; (801068c <USER_SPI_initialize+0x1c8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8010664:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8010666:	4b08      	ldr	r3, [pc, #32]	; (8010688 <USER_SPI_initialize+0x1c4>)
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	f023 0301 	bic.w	r3, r3, #1
 801066e:	b2da      	uxtb	r2, r3
 8010670:	4b05      	ldr	r3, [pc, #20]	; (8010688 <USER_SPI_initialize+0x1c4>)
 8010672:	701a      	strb	r2, [r3, #0]
 8010674:	e002      	b.n	801067c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8010676:	4b04      	ldr	r3, [pc, #16]	; (8010688 <USER_SPI_initialize+0x1c4>)
 8010678:	2201      	movs	r2, #1
 801067a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 801067c:	4b02      	ldr	r3, [pc, #8]	; (8010688 <USER_SPI_initialize+0x1c4>)
 801067e:	781b      	ldrb	r3, [r3, #0]
}
 8010680:	4618      	mov	r0, r3
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	bd90      	pop	{r4, r7, pc}
 8010688:	20000024 	.word	0x20000024
 801068c:	20008b88 	.word	0x20008b88
 8010690:	20009619 	.word	0x20009619
 8010694:	48000800 	.word	0x48000800

08010698 <USER_SPI_status>:

//inline
DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80106a2:	79fb      	ldrb	r3, [r7, #7]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d001      	beq.n	80106ac <USER_SPI_status+0x14>
 80106a8:	2301      	movs	r3, #1
 80106aa:	e001      	b.n	80106b0 <USER_SPI_status+0x18>

	return Stat;	/* Return disk status */
 80106ac:	4b03      	ldr	r3, [pc, #12]	; (80106bc <USER_SPI_status+0x24>)
 80106ae:	781b      	ldrb	r3, [r3, #0]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	20000024 	.word	0x20000024

080106c0 <ILI9341_Init>:
unsigned char hh;

SPI_HandleTypeDef lcd_spi;

void ILI9341_Init()
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0

	SD_CS_OFF;
 80106c4:	2201      	movs	r2, #1
 80106c6:	2108      	movs	r1, #8
 80106c8:	4884      	ldr	r0, [pc, #528]	; (80108dc <ILI9341_Init+0x21c>)
 80106ca:	f7f6 fae1 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80106ce:	2200      	movs	r2, #0
 80106d0:	2180      	movs	r1, #128	; 0x80
 80106d2:	4882      	ldr	r0, [pc, #520]	; (80108dc <ILI9341_Init+0x21c>)
 80106d4:	f7f6 fadc 	bl	8006c90 <HAL_GPIO_WritePin>

	ILI9341_SPI_Init();
 80106d8:	f000 f902 	bl	80108e0 <ILI9341_SPI_Init>
	/* Reset The Screen */
	ILI9341_Reset();
 80106dc:	f000 f94a 	bl	8010974 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 80106e0:	2001      	movs	r0, #1
 80106e2:	f000 fd6f 	bl	80111c4 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80106e6:	20cb      	movs	r0, #203	; 0xcb
 80106e8:	f000 fd6c 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80106ec:	2039      	movs	r0, #57	; 0x39
 80106ee:	f000 fd85 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80106f2:	202c      	movs	r0, #44	; 0x2c
 80106f4:	f000 fd82 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80106f8:	2000      	movs	r0, #0
 80106fa:	f000 fd7f 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80106fe:	2034      	movs	r0, #52	; 0x34
 8010700:	f000 fd7c 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8010704:	2002      	movs	r0, #2
 8010706:	f000 fd79 	bl	80111fc <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 801070a:	20cf      	movs	r0, #207	; 0xcf
 801070c:	f000 fd5a 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010710:	2000      	movs	r0, #0
 8010712:	f000 fd73 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8010716:	20c1      	movs	r0, #193	; 0xc1
 8010718:	f000 fd70 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 801071c:	2030      	movs	r0, #48	; 0x30
 801071e:	f000 fd6d 	bl	80111fc <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8010722:	20e8      	movs	r0, #232	; 0xe8
 8010724:	f000 fd4e 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8010728:	2085      	movs	r0, #133	; 0x85
 801072a:	f000 fd67 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 801072e:	2000      	movs	r0, #0
 8010730:	f000 fd64 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8010734:	2078      	movs	r0, #120	; 0x78
 8010736:	f000 fd61 	bl	80111fc <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 801073a:	20ea      	movs	r0, #234	; 0xea
 801073c:	f000 fd42 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8010740:	2000      	movs	r0, #0
 8010742:	f000 fd5b 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8010746:	2000      	movs	r0, #0
 8010748:	f000 fd58 	bl	80111fc <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 801074c:	20ed      	movs	r0, #237	; 0xed
 801074e:	f000 fd39 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8010752:	2064      	movs	r0, #100	; 0x64
 8010754:	f000 fd52 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8010758:	2003      	movs	r0, #3
 801075a:	f000 fd4f 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 801075e:	2012      	movs	r0, #18
 8010760:	f000 fd4c 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8010764:	2081      	movs	r0, #129	; 0x81
 8010766:	f000 fd49 	bl	80111fc <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 801076a:	20f7      	movs	r0, #247	; 0xf7
 801076c:	f000 fd2a 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8010770:	2020      	movs	r0, #32
 8010772:	f000 fd43 	bl	80111fc <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8010776:	20c0      	movs	r0, #192	; 0xc0
 8010778:	f000 fd24 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 801077c:	2010      	movs	r0, #16
 801077e:	f000 fd3d 	bl	80111fc <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8010782:	20c1      	movs	r0, #193	; 0xc1
 8010784:	f000 fd1e 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8010788:	2010      	movs	r0, #16
 801078a:	f000 fd37 	bl	80111fc <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 801078e:	20c5      	movs	r0, #197	; 0xc5
 8010790:	f000 fd18 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8010794:	203e      	movs	r0, #62	; 0x3e
 8010796:	f000 fd31 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 801079a:	2028      	movs	r0, #40	; 0x28
 801079c:	f000 fd2e 	bl	80111fc <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80107a0:	20c7      	movs	r0, #199	; 0xc7
 80107a2:	f000 fd0f 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80107a6:	2086      	movs	r0, #134	; 0x86
 80107a8:	f000 fd28 	bl	80111fc <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80107ac:	2036      	movs	r0, #54	; 0x36
 80107ae:	f000 fd09 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80107b2:	2048      	movs	r0, #72	; 0x48
 80107b4:	f000 fd22 	bl	80111fc <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80107b8:	203a      	movs	r0, #58	; 0x3a
 80107ba:	f000 fd03 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80107be:	2055      	movs	r0, #85	; 0x55
 80107c0:	f000 fd1c 	bl	80111fc <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 80107c4:	20b1      	movs	r0, #177	; 0xb1
 80107c6:	f000 fcfd 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80107ca:	2000      	movs	r0, #0
 80107cc:	f000 fd16 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80107d0:	2018      	movs	r0, #24
 80107d2:	f000 fd13 	bl	80111fc <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 80107d6:	20b6      	movs	r0, #182	; 0xb6
 80107d8:	f000 fcf4 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80107dc:	2008      	movs	r0, #8
 80107de:	f000 fd0d 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80107e2:	2082      	movs	r0, #130	; 0x82
 80107e4:	f000 fd0a 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80107e8:	2027      	movs	r0, #39	; 0x27
 80107ea:	f000 fd07 	bl	80111fc <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80107ee:	20f2      	movs	r0, #242	; 0xf2
 80107f0:	f000 fce8 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80107f4:	2000      	movs	r0, #0
 80107f6:	f000 fd01 	bl	80111fc <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80107fa:	2026      	movs	r0, #38	; 0x26
 80107fc:	f000 fce2 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8010800:	2001      	movs	r0, #1
 8010802:	f000 fcfb 	bl	80111fc <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8010806:	20e0      	movs	r0, #224	; 0xe0
 8010808:	f000 fcdc 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 801080c:	200f      	movs	r0, #15
 801080e:	f000 fcf5 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8010812:	2031      	movs	r0, #49	; 0x31
 8010814:	f000 fcf2 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8010818:	202b      	movs	r0, #43	; 0x2b
 801081a:	f000 fcef 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 801081e:	200c      	movs	r0, #12
 8010820:	f000 fcec 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8010824:	200e      	movs	r0, #14
 8010826:	f000 fce9 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 801082a:	2008      	movs	r0, #8
 801082c:	f000 fce6 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8010830:	204e      	movs	r0, #78	; 0x4e
 8010832:	f000 fce3 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8010836:	20f1      	movs	r0, #241	; 0xf1
 8010838:	f000 fce0 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 801083c:	2037      	movs	r0, #55	; 0x37
 801083e:	f000 fcdd 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8010842:	2007      	movs	r0, #7
 8010844:	f000 fcda 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8010848:	2010      	movs	r0, #16
 801084a:	f000 fcd7 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 801084e:	2003      	movs	r0, #3
 8010850:	f000 fcd4 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8010854:	200e      	movs	r0, #14
 8010856:	f000 fcd1 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 801085a:	2009      	movs	r0, #9
 801085c:	f000 fcce 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8010860:	2000      	movs	r0, #0
 8010862:	f000 fccb 	bl	80111fc <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8010866:	20e1      	movs	r0, #225	; 0xe1
 8010868:	f000 fcac 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 801086c:	2000      	movs	r0, #0
 801086e:	f000 fcc5 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8010872:	200e      	movs	r0, #14
 8010874:	f000 fcc2 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8010878:	2014      	movs	r0, #20
 801087a:	f000 fcbf 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 801087e:	2003      	movs	r0, #3
 8010880:	f000 fcbc 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8010884:	2011      	movs	r0, #17
 8010886:	f000 fcb9 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 801088a:	2007      	movs	r0, #7
 801088c:	f000 fcb6 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8010890:	2031      	movs	r0, #49	; 0x31
 8010892:	f000 fcb3 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8010896:	20c1      	movs	r0, #193	; 0xc1
 8010898:	f000 fcb0 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 801089c:	2048      	movs	r0, #72	; 0x48
 801089e:	f000 fcad 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80108a2:	2008      	movs	r0, #8
 80108a4:	f000 fcaa 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80108a8:	200f      	movs	r0, #15
 80108aa:	f000 fca7 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80108ae:	200c      	movs	r0, #12
 80108b0:	f000 fca4 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80108b4:	2031      	movs	r0, #49	; 0x31
 80108b6:	f000 fca1 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80108ba:	2036      	movs	r0, #54	; 0x36
 80108bc:	f000 fc9e 	bl	80111fc <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80108c0:	200f      	movs	r0, #15
 80108c2:	f000 fc9b 	bl	80111fc <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 80108c6:	2011      	movs	r0, #17
 80108c8:	f000 fc7c 	bl	80111c4 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 80108cc:	2029      	movs	r0, #41	; 0x29
 80108ce:	f000 fc79 	bl	80111c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 80108d2:	202c      	movs	r0, #44	; 0x2c
 80108d4:	f000 fc92 	bl	80111fc <ILI9341_Send_Data>
}
 80108d8:	bf00      	nop
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	48000800 	.word	0x48000800

080108e0 <ILI9341_SPI_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI3;
 80108e4:	4b18      	ldr	r3, [pc, #96]	; (8010948 <ILI9341_SPI_Init+0x68>)
 80108e6:	4a19      	ldr	r2, [pc, #100]	; (801094c <ILI9341_SPI_Init+0x6c>)
 80108e8:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 80108ea:	4b17      	ldr	r3, [pc, #92]	; (8010948 <ILI9341_SPI_Init+0x68>)
 80108ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80108f0:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <ILI9341_SPI_Init+0x68>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 80108f8:	4b13      	ldr	r3, [pc, #76]	; (8010948 <ILI9341_SPI_Init+0x68>)
 80108fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80108fe:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8010900:	4b11      	ldr	r3, [pc, #68]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010902:	2200      	movs	r2, #0
 8010904:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8010906:	4b10      	ldr	r3, [pc, #64]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010908:	2200      	movs	r2, #0
 801090a:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 801090c:	4b0e      	ldr	r3, [pc, #56]	; (8010948 <ILI9341_SPI_Init+0x68>)
 801090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010912:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8010914:	4b0c      	ldr	r3, [pc, #48]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010916:	2200      	movs	r2, #0
 8010918:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 801091a:	4b0b      	ldr	r3, [pc, #44]	; (8010948 <ILI9341_SPI_Init+0x68>)
 801091c:	2200      	movs	r2, #0
 801091e:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8010920:	4b09      	ldr	r3, [pc, #36]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010922:	2200      	movs	r2, #0
 8010924:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8010926:	4b08      	ldr	r3, [pc, #32]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010928:	2200      	movs	r2, #0
 801092a:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 801092c:	4b06      	ldr	r3, [pc, #24]	; (8010948 <ILI9341_SPI_Init+0x68>)
 801092e:	220a      	movs	r2, #10
 8010930:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK)
 8010932:	4805      	ldr	r0, [pc, #20]	; (8010948 <ILI9341_SPI_Init+0x68>)
 8010934:	f7f9 fb4a 	bl	8009fcc <HAL_SPI_Init>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <ILI9341_SPI_Init+0x62>
	{
		Error_Handler();
 801093e:	f7f3 fb85 	bl	800404c <Error_Handler>
	}
}
 8010942:	bf00      	nop
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20009628 	.word	0x20009628
 801094c:	40003c00 	.word	0x40003c00

08010950 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	4603      	mov	r3, r0
 8010958:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 801095a:	1df9      	adds	r1, r7, #7
 801095c:	2301      	movs	r3, #1
 801095e:	2201      	movs	r2, #1
 8010960:	4803      	ldr	r0, [pc, #12]	; (8010970 <ILI9341_SPI_Send+0x20>)
 8010962:	f7f9 fbde 	bl	800a122 <HAL_SPI_Transmit>
}
 8010966:	bf00      	nop
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	20009628 	.word	0x20009628

08010974 <ILI9341_Reset>:
	TFT_CS_ON;
	HAL_SPI_Transmit(&lcd_spi, &data, size, 10);
}

void ILI9341_Reset()
{
 8010974:	b580      	push	{r7, lr}
 8010976:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 8010978:	2201      	movs	r2, #1
 801097a:	2108      	movs	r1, #8
 801097c:	4811      	ldr	r0, [pc, #68]	; (80109c4 <ILI9341_Reset+0x50>)
 801097e:	f7f6 f987 	bl	8006c90 <HAL_GPIO_WritePin>

	TFT_RESET_ON;
 8010982:	2200      	movs	r2, #0
 8010984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010988:	480e      	ldr	r0, [pc, #56]	; (80109c4 <ILI9341_Reset+0x50>)
 801098a:	f7f6 f981 	bl	8006c90 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 801098e:	2032      	movs	r0, #50	; 0x32
 8010990:	f7f4 f98e 	bl	8004cb0 <HAL_Delay>
	TFT_RESET_OFF;
 8010994:	2201      	movs	r2, #1
 8010996:	f44f 7180 	mov.w	r1, #256	; 0x100
 801099a:	480a      	ldr	r0, [pc, #40]	; (80109c4 <ILI9341_Reset+0x50>)
 801099c:	f7f6 f978 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80109a0:	2200      	movs	r2, #0
 80109a2:	2180      	movs	r1, #128	; 0x80
 80109a4:	4807      	ldr	r0, [pc, #28]	; (80109c4 <ILI9341_Reset+0x50>)
 80109a6:	f7f6 f973 	bl	8006c90 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80109aa:	2032      	movs	r0, #50	; 0x32
 80109ac:	f7f4 f980 	bl	8004cb0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80109b0:	2001      	movs	r0, #1
 80109b2:	f000 fc07 	bl	80111c4 <ILI9341_Send_Command>
	TFT_CS_OFF;
 80109b6:	2201      	movs	r2, #1
 80109b8:	2180      	movs	r1, #128	; 0x80
 80109ba:	4802      	ldr	r0, [pc, #8]	; (80109c4 <ILI9341_Reset+0x50>)
 80109bc:	f7f6 f968 	bl	8006c90 <HAL_GPIO_WritePin>
}
 80109c0:	bf00      	nop
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	48000800 	.word	0x48000800

080109c8 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 80109d2:	2201      	movs	r2, #1
 80109d4:	2108      	movs	r1, #8
 80109d6:	483a      	ldr	r0, [pc, #232]	; (8010ac0 <ILI9341_Set_Rotation+0xf8>)
 80109d8:	f7f6 f95a 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80109dc:	2200      	movs	r2, #0
 80109de:	2180      	movs	r1, #128	; 0x80
 80109e0:	4837      	ldr	r0, [pc, #220]	; (8010ac0 <ILI9341_Set_Rotation+0xf8>)
 80109e2:	f7f6 f955 	bl	8006c90 <HAL_GPIO_WritePin>
	m_rotacion=rotation;
 80109e6:	4a37      	ldr	r2, [pc, #220]	; (8010ac4 <ILI9341_Set_Rotation+0xfc>)
 80109e8:	79fb      	ldrb	r3, [r7, #7]
 80109ea:	7013      	strb	r3, [r2, #0]
	ILI9341_Send_Command(0x36);
 80109ec:	2036      	movs	r0, #54	; 0x36
 80109ee:	f000 fbe9 	bl	80111c4 <ILI9341_Send_Command>
	switch (rotation)
 80109f2:	79fb      	ldrb	r3, [r7, #7]
 80109f4:	2b06      	cmp	r3, #6
 80109f6:	d85e      	bhi.n	8010ab6 <ILI9341_Set_Rotation+0xee>
 80109f8:	a201      	add	r2, pc, #4	; (adr r2, 8010a00 <ILI9341_Set_Rotation+0x38>)
 80109fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fe:	bf00      	nop
 8010a00:	08010a1d 	.word	0x08010a1d
 8010a04:	08010a33 	.word	0x08010a33
 8010a08:	08010a49 	.word	0x08010a49
 8010a0c:	08010a5f 	.word	0x08010a5f
 8010a10:	08010a75 	.word	0x08010a75
 8010a14:	08010a8b 	.word	0x08010a8b
 8010a18:	08010aa1 	.word	0x08010aa1
	{
	case 0:
	//	ILI9341_Send_Data(0x048);
		ILI9341_Send_Data(0x088);
 8010a1c:	2088      	movs	r0, #136	; 0x88
 8010a1e:	f000 fbed 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 240;
 8010a22:	4b29      	ldr	r3, [pc, #164]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a24:	22f0      	movs	r2, #240	; 0xf0
 8010a26:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8010a28:	4b28      	ldr	r3, [pc, #160]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a2e:	601a      	str	r2, [r3, #0]
		break;
 8010a30:	e041      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 1:
		ILI9341_Send_Data(0x28);
 8010a32:	2028      	movs	r0, #40	; 0x28
 8010a34:	f000 fbe2 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 320;
 8010a38:	4b23      	ldr	r3, [pc, #140]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a3e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8010a40:	4b22      	ldr	r3, [pc, #136]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a42:	22f0      	movs	r2, #240	; 0xf0
 8010a44:	601a      	str	r2, [r3, #0]
		break;
 8010a46:	e036      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 2:
		ILI9341_Send_Data(0x88);
 8010a48:	2088      	movs	r0, #136	; 0x88
 8010a4a:	f000 fbd7 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 240;
 8010a4e:	4b1e      	ldr	r3, [pc, #120]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a50:	22f0      	movs	r2, #240	; 0xf0
 8010a52:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8010a54:	4b1d      	ldr	r3, [pc, #116]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a5a:	601a      	str	r2, [r3, #0]
		break;
 8010a5c:	e02b      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 3:
		ILI9341_Send_Data(0xE8);
 8010a5e:	20e8      	movs	r0, #232	; 0xe8
 8010a60:	f000 fbcc 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 320;
 8010a64:	4b18      	ldr	r3, [pc, #96]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a6a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8010a6c:	4b17      	ldr	r3, [pc, #92]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a6e:	22f0      	movs	r2, #240	; 0xf0
 8010a70:	601a      	str	r2, [r3, #0]
		break;
 8010a72:	e020      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 4:
		ILI9341_Send_Data(0xB8);
 8010a74:	20b8      	movs	r0, #184	; 0xb8
 8010a76:	f000 fbc1 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 320;
 8010a7a:	4b13      	ldr	r3, [pc, #76]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a80:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8010a82:	4b12      	ldr	r3, [pc, #72]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a84:	22f0      	movs	r2, #240	; 0xf0
 8010a86:	601a      	str	r2, [r3, #0]
		break;
 8010a88:	e015      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 5:
		ILI9341_Send_Data(0x6c);
 8010a8a:	206c      	movs	r0, #108	; 0x6c
 8010a8c:	f000 fbb6 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 320;
 8010a90:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010a92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010a96:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8010a98:	4b0c      	ldr	r3, [pc, #48]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010a9a:	22f0      	movs	r2, #240	; 0xf0
 8010a9c:	601a      	str	r2, [r3, #0]
		break;
 8010a9e:	e00a      	b.n	8010ab6 <ILI9341_Set_Rotation+0xee>
	case 6:
		ILI9341_Send_Data(0x08);
 8010aa0:	2008      	movs	r0, #8
 8010aa2:	f000 fbab 	bl	80111fc <ILI9341_Send_Data>
		X_SIZE = 240;
 8010aa6:	4b08      	ldr	r3, [pc, #32]	; (8010ac8 <ILI9341_Set_Rotation+0x100>)
 8010aa8:	22f0      	movs	r2, #240	; 0xf0
 8010aaa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8010aac:	4b07      	ldr	r3, [pc, #28]	; (8010acc <ILI9341_Set_Rotation+0x104>)
 8010aae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010ab2:	601a      	str	r2, [r3, #0]
		break;
 8010ab4:	bf00      	nop
	}
}
 8010ab6:	bf00      	nop
 8010ab8:	3708      	adds	r7, #8
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	48000800 	.word	0x48000800
 8010ac4:	20009624 	.word	0x20009624
 8010ac8:	20000028 	.word	0x20000028
 8010acc:	2000002c 	.word	0x2000002c

08010ad0 <ILI9341_Set_Address>:
	ILI9341_SPI_Send(data >> 8);
	ILI9341_SPI_Send(data);
}

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	60b9      	str	r1, [r7, #8]
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	603b      	str	r3, [r7, #0]
	unsigned char data[3];

	SD_CS_OFF;
 8010ade:	2201      	movs	r2, #1
 8010ae0:	2108      	movs	r1, #8
 8010ae2:	4830      	ldr	r0, [pc, #192]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010ae4:	f7f6 f8d4 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2180      	movs	r1, #128	; 0x80
 8010aec:	482d      	ldr	r0, [pc, #180]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010aee:	f7f6 f8cf 	bl	8006c90 <HAL_GPIO_WritePin>

	TFT_DC_COMMAND;
 8010af2:	2200      	movs	r2, #0
 8010af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010af8:	482a      	ldr	r0, [pc, #168]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010afa:	f7f6 f8c9 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=0x2A;
 8010afe:	232a      	movs	r3, #42	; 0x2a
 8010b00:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(&lcd_spi, data,1, 5);
 8010b02:	f107 0114 	add.w	r1, r7, #20
 8010b06:	2305      	movs	r3, #5
 8010b08:	2201      	movs	r2, #1
 8010b0a:	4827      	ldr	r0, [pc, #156]	; (8010ba8 <ILI9341_Set_Address+0xd8>)
 8010b0c:	f7f9 fb09 	bl	800a122 <HAL_SPI_Transmit>

	TFT_DC_DATA;
 8010b10:	2201      	movs	r2, #1
 8010b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b16:	4823      	ldr	r0, [pc, #140]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010b18:	f7f6 f8ba 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=x1>>8;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	0a1b      	lsrs	r3, r3, #8
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	753b      	strb	r3, [r7, #20]
	data[1]=x1;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	757b      	strb	r3, [r7, #21]
	data[2]=x2>>8;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	0a1b      	lsrs	r3, r3, #8
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	75bb      	strb	r3, [r7, #22]
	data[3]=x2;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&lcd_spi,data,4,5);
 8010b38:	f107 0114 	add.w	r1, r7, #20
 8010b3c:	2305      	movs	r3, #5
 8010b3e:	2204      	movs	r2, #4
 8010b40:	4819      	ldr	r0, [pc, #100]	; (8010ba8 <ILI9341_Set_Address+0xd8>)
 8010b42:	f7f9 faee 	bl	800a122 <HAL_SPI_Transmit>

	TFT_DC_COMMAND;
 8010b46:	2200      	movs	r2, #0
 8010b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b4c:	4815      	ldr	r0, [pc, #84]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010b4e:	f7f6 f89f 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=0x2B;
 8010b52:	232b      	movs	r3, #43	; 0x2b
 8010b54:	753b      	strb	r3, [r7, #20]
	HAL_SPI_Transmit(&lcd_spi,data,1,1);
 8010b56:	f107 0114 	add.w	r1, r7, #20
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	4812      	ldr	r0, [pc, #72]	; (8010ba8 <ILI9341_Set_Address+0xd8>)
 8010b60:	f7f9 fadf 	bl	800a122 <HAL_SPI_Transmit>

	TFT_DC_DATA;
 8010b64:	2201      	movs	r2, #1
 8010b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b6a:	480e      	ldr	r0, [pc, #56]	; (8010ba4 <ILI9341_Set_Address+0xd4>)
 8010b6c:	f7f6 f890 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=y1>>8;
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	0a1b      	lsrs	r3, r3, #8
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	753b      	strb	r3, [r7, #20]
	data[1]=y1;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	757b      	strb	r3, [r7, #21]
	data[2]=y2>>8;
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	0a1b      	lsrs	r3, r3, #8
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	75bb      	strb	r3, [r7, #22]
	data[3]=y2;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(&lcd_spi,data,4,5);
 8010b8c:	f107 0114 	add.w	r1, r7, #20
 8010b90:	2305      	movs	r3, #5
 8010b92:	2204      	movs	r2, #4
 8010b94:	4804      	ldr	r0, [pc, #16]	; (8010ba8 <ILI9341_Set_Address+0xd8>)
 8010b96:	f7f9 fac4 	bl	800a122 <HAL_SPI_Transmit>
}
 8010b9a:	bf00      	nop
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	48000800 	.word	0x48000800
 8010ba8:	20009628 	.word	0x20009628

08010bac <ILI9341_Draw_Pixel>:
	ILI9341_Set_Address(0,0,X_SIZE-1,Y_SIZE-1);
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
}
*/
void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
	SD_CS_OFF;
 8010bb8:	2201      	movs	r2, #1
 8010bba:	2108      	movs	r1, #8
 8010bbc:	4819      	ldr	r0, [pc, #100]	; (8010c24 <ILI9341_Draw_Pixel+0x78>)
 8010bbe:	f7f6 f867 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	2180      	movs	r1, #128	; 0x80
 8010bc6:	4817      	ldr	r0, [pc, #92]	; (8010c24 <ILI9341_Draw_Pixel+0x78>)
 8010bc8:	f7f6 f862 	bl	8006c90 <HAL_GPIO_WritePin>

	y=239-y;
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8010bd2:	60bb      	str	r3, [r7, #8]
	ILI9341_Set_Address(x,y,X_SIZE-1,Y_SIZE-1);
 8010bd4:	68f8      	ldr	r0, [r7, #12]
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	4b13      	ldr	r3, [pc, #76]	; (8010c28 <ILI9341_Draw_Pixel+0x7c>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	1e5a      	subs	r2, r3, #1
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <ILI9341_Draw_Pixel+0x80>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	f7ff ff74 	bl	8010ad0 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 8010be8:	2200      	movs	r2, #0
 8010bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010bee:	480d      	ldr	r0, [pc, #52]	; (8010c24 <ILI9341_Draw_Pixel+0x78>)
 8010bf0:	f7f6 f84e 	bl	8006c90 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8010bf4:	202c      	movs	r0, #44	; 0x2c
 8010bf6:	f7ff feab 	bl	8010950 <ILI9341_SPI_Send>
	TFT_DC_DATA;
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c00:	4808      	ldr	r0, [pc, #32]	; (8010c24 <ILI9341_Draw_Pixel+0x78>)
 8010c02:	f7f6 f845 	bl	8006c90 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	0a1b      	lsrs	r3, r3, #8
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7ff fe9f 	bl	8010950 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fe9a 	bl	8010950 <ILI9341_SPI_Send>
}
 8010c1c:	bf00      	nop
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	48000800 	.word	0x48000800
 8010c28:	20000028 	.word	0x20000028
 8010c2c:	2000002c 	.word	0x2000002c

08010c30 <ILI9341_Draw_Circle>:
		}
	}
}

void ILI9341_Draw_Circle(unsigned int x0, unsigned int y0, int r, unsigned int color, unsigned char flood)
{
 8010c30:	b590      	push	{r4, r7, lr}
 8010c32:	b08f      	sub	sp, #60	; 0x3c
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
 8010c3c:	603b      	str	r3, [r7, #0]
	SD_CS_OFF;
 8010c3e:	2201      	movs	r2, #1
 8010c40:	2108      	movs	r1, #8
 8010c42:	4899      	ldr	r0, [pc, #612]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010c44:	f7f6 f824 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2180      	movs	r1, #128	; 0x80
 8010c4c:	4896      	ldr	r0, [pc, #600]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010c4e:	f7f6 f81f 	bl	8006c90 <HAL_GPIO_WritePin>

	y0=240-y0;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8010c58:	60bb      	str	r3, [r7, #8]

	int f = 1 - r;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f1c3 0301 	rsb	r3, r3, #1
 8010c60:	637b      	str	r3, [r7, #52]	; 0x34
	int ddF_x = 1;
 8010c62:	2301      	movs	r3, #1
 8010c64:	633b      	str	r3, [r7, #48]	; 0x30
	int ddF_y = -2 * r;
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	4613      	mov	r3, r2
 8010c6a:	07db      	lsls	r3, r3, #31
 8010c6c:	1a9b      	subs	r3, r3, r2
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	int x = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	62bb      	str	r3, [r7, #40]	; 0x28
	int y = r;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
	if (flood == 0)
 8010c7a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f040 8097 	bne.w	8010db2 <ILI9341_Draw_Circle+0x182>
	{
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	683a      	ldr	r2, [r7, #0]
 8010c8e:	4619      	mov	r1, r3
 8010c90:	f7ff ff8c 	bl	8010bac <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	68ba      	ldr	r2, [r7, #8]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	683a      	ldr	r2, [r7, #0]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	f7ff ff84 	bl	8010bac <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 + r, y0, color);
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	4413      	add	r3, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	683a      	ldr	r2, [r7, #0]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	f7ff ff7b 	bl	8010bac <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0 - r, y0, color);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	1ad3      	subs	r3, r2, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	683a      	ldr	r2, [r7, #0]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	f7ff ff72 	bl	8010bac <ILI9341_Draw_Pixel>
		while (x < y) {
 8010cc8:	e06e      	b.n	8010da8 <ILI9341_Draw_Circle+0x178>
			if (f >= 0) {
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	db09      	blt.n	8010ce4 <ILI9341_Draw_Circle+0xb4>
				y--;
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	3302      	adds	r3, #2
 8010cda:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 8010cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce0:	4413      	add	r3, r2
 8010ce2:	637b      	str	r3, [r7, #52]	; 0x34
			}
			x++;
 8010ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 8010cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cec:	3302      	adds	r3, #2
 8010cee:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 8010cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	4413      	add	r3, r2
 8010cf6:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Draw_Pixel(x0 + x, y0 + y, color);
 8010cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	4618      	mov	r0, r3
 8010d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	4413      	add	r3, r2
 8010d06:	683a      	ldr	r2, [r7, #0]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	f7ff ff4f 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 + y, color);
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	4618      	mov	r0, r3
 8010d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	f7ff ff44 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + x, y0 - y, color);
 8010d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	4413      	add	r3, r2
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	4619      	mov	r1, r3
 8010d36:	f7ff ff39 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - x, y0 - y, color);
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	4618      	mov	r0, r3
 8010d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	1ad3      	subs	r3, r2, r3
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	f7ff ff2e 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 + x, color);
 8010d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	4413      	add	r3, r2
 8010d56:	4618      	mov	r0, r3
 8010d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	683a      	ldr	r2, [r7, #0]
 8010d60:	4619      	mov	r1, r3
 8010d62:	f7ff ff23 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 + x, color);
 8010d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	1ad3      	subs	r3, r2, r3
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	4413      	add	r3, r2
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	4619      	mov	r1, r3
 8010d78:	f7ff ff18 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 + y, y0 - x, color);
 8010d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	4413      	add	r3, r2
 8010d82:	4618      	mov	r0, r3
 8010d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	683a      	ldr	r2, [r7, #0]
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	f7ff ff0d 	bl	8010bac <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(x0 - y, y0 - x, color);
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	68fa      	ldr	r2, [r7, #12]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	4619      	mov	r1, r3
 8010da4:	f7ff ff02 	bl	8010bac <ILI9341_Draw_Pixel>
		while (x < y) {
 8010da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dac:	429a      	cmp	r2, r3
 8010dae:	db8c      	blt.n	8010cca <ILI9341_Draw_Circle+0x9a>
				ILI9341_SPI_Send(color >> 8);
				ILI9341_SPI_Send(color);
			}
		}
	}
}
 8010db0:	e138      	b.n	8011024 <ILI9341_Draw_Circle+0x3f4>
		ILI9341_Draw_Pixel(x0, y0 + r, color);
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	4413      	add	r3, r2
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	f7ff fef5 	bl	8010bac <ILI9341_Draw_Pixel>
		ILI9341_Draw_Pixel(x0, y0 - r, color);
 8010dc2:	68f8      	ldr	r0, [r7, #12]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	683a      	ldr	r2, [r7, #0]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	f7ff feed 	bl	8010bac <ILI9341_Draw_Pixel>
		ILI9341_Set_Address(x0 - r, y0, x0 + r, y0);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	1ad0      	subs	r0, r2, r3
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	441a      	add	r2, r3
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	68b9      	ldr	r1, [r7, #8]
 8010de2:	f7ff fe75 	bl	8010ad0 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8010de6:	2200      	movs	r2, #0
 8010de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dec:	482e      	ldr	r0, [pc, #184]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010dee:	f7f5 ff4f 	bl	8006c90 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8010df2:	202c      	movs	r0, #44	; 0x2c
 8010df4:	f7ff fdac 	bl	8010950 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dfe:	482a      	ldr	r0, [pc, #168]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010e00:	f7f5 ff46 	bl	8006c90 <HAL_GPIO_WritePin>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++)
 8010e04:	2300      	movs	r3, #0
 8010e06:	623b      	str	r3, [r7, #32]
 8010e08:	e00d      	b.n	8010e26 <ILI9341_Draw_Circle+0x1f6>
			ILI9341_SPI_Send(color >> 8);
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff fd9d 	bl	8010950 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(color);
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fd98 	bl	8010950 <ILI9341_SPI_Send>
		for (uint32_t fff = 0; fff < r * 2 + 1; fff++)
 8010e20:	6a3b      	ldr	r3, [r7, #32]
 8010e22:	3301      	adds	r3, #1
 8010e24:	623b      	str	r3, [r7, #32]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	005b      	lsls	r3, r3, #1
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	6a3b      	ldr	r3, [r7, #32]
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d3ea      	bcc.n	8010e0a <ILI9341_Draw_Circle+0x1da>
		while (x < y) {
 8010e34:	e0f1      	b.n	801101a <ILI9341_Draw_Circle+0x3ea>
			if (f >= 0) {
 8010e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	db09      	blt.n	8010e50 <ILI9341_Draw_Circle+0x220>
				y--;
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	627b      	str	r3, [r7, #36]	; 0x24
				ddF_y += 2;
 8010e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e44:	3302      	adds	r3, #2
 8010e46:	62fb      	str	r3, [r7, #44]	; 0x2c
				f += ddF_y;
 8010e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4c:	4413      	add	r3, r2
 8010e4e:	637b      	str	r3, [r7, #52]	; 0x34
			x++;
 8010e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e52:	3301      	adds	r3, #1
 8010e54:	62bb      	str	r3, [r7, #40]	; 0x28
			ddF_x += 2;
 8010e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e58:	3302      	adds	r3, #2
 8010e5a:	633b      	str	r3, [r7, #48]	; 0x30
			f += ddF_x;
 8010e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	4413      	add	r3, r2
 8010e62:	637b      	str	r3, [r7, #52]	; 0x34
			ILI9341_Set_Address(x0 - x, y0 + y, x0 + x, y0 + y);
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	1ad0      	subs	r0, r2, r3
 8010e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	18d1      	adds	r1, r2, r3
 8010e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	18d4      	adds	r4, r2, r3
 8010e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	f7ff fe27 	bl	8010ad0 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8010e82:	2200      	movs	r2, #0
 8010e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e88:	4807      	ldr	r0, [pc, #28]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010e8a:	f7f5 ff01 	bl	8006c90 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8010e8e:	202c      	movs	r0, #44	; 0x2c
 8010e90:	f7ff fd5e 	bl	8010950 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8010e94:	2201      	movs	r2, #1
 8010e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010e9a:	4803      	ldr	r0, [pc, #12]	; (8010ea8 <ILI9341_Draw_Circle+0x278>)
 8010e9c:	f7f5 fef8 	bl	8006c90 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	e010      	b.n	8010ec8 <ILI9341_Draw_Circle+0x298>
 8010ea6:	bf00      	nop
 8010ea8:	48000800 	.word	0x48000800
				ILI9341_SPI_Send(color >> 8);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	0a1b      	lsrs	r3, r3, #8
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ff fd4c 	bl	8010950 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff fd47 	bl	8010950 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
 8010ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	3301      	adds	r3, #1
 8010ece:	461a      	mov	r2, r3
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d3ea      	bcc.n	8010eac <ILI9341_Draw_Circle+0x27c>
			ILI9341_Set_Address(x0 - x, y0 - y, x0 + x, y0 - y);
 8010ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	1ad0      	subs	r0, r2, r3
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	1ad1      	subs	r1, r2, r3
 8010ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	18d4      	adds	r4, r2, r3
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	68ba      	ldr	r2, [r7, #8]
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	4622      	mov	r2, r4
 8010ef0:	f7ff fdee 	bl	8010ad0 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010efa:	484c      	ldr	r0, [pc, #304]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010efc:	f7f5 fec8 	bl	8006c90 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8010f00:	202c      	movs	r0, #44	; 0x2c
 8010f02:	f7ff fd25 	bl	8010950 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8010f06:	2201      	movs	r2, #1
 8010f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f0c:	4847      	ldr	r0, [pc, #284]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010f0e:	f7f5 febf 	bl	8006c90 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8010f12:	2300      	movs	r3, #0
 8010f14:	61bb      	str	r3, [r7, #24]
 8010f16:	e00d      	b.n	8010f34 <ILI9341_Draw_Circle+0x304>
				ILI9341_SPI_Send(color >> 8);
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	0a1b      	lsrs	r3, r3, #8
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff fd16 	bl	8010950 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7ff fd11 	bl	8010950 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < x * 2 + 1; fff++) {
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	3301      	adds	r3, #1
 8010f32:	61bb      	str	r3, [r7, #24]
 8010f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	3301      	adds	r3, #1
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	69bb      	ldr	r3, [r7, #24]
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d3ea      	bcc.n	8010f18 <ILI9341_Draw_Circle+0x2e8>
			ILI9341_Set_Address(x0 - y, y0 + x, x0 + y, y0 + x);
 8010f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	1ad0      	subs	r0, r2, r3
 8010f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	18d1      	adds	r1, r2, r3
 8010f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	18d4      	adds	r4, r2, r3
 8010f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	4413      	add	r3, r2
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	f7ff fdb8 	bl	8010ad0 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8010f60:	2200      	movs	r2, #0
 8010f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f66:	4831      	ldr	r0, [pc, #196]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010f68:	f7f5 fe92 	bl	8006c90 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8010f6c:	202c      	movs	r0, #44	; 0x2c
 8010f6e:	f7ff fcef 	bl	8010950 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8010f72:	2201      	movs	r2, #1
 8010f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f78:	482c      	ldr	r0, [pc, #176]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010f7a:	f7f5 fe89 	bl	8006c90 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8010f7e:	2300      	movs	r3, #0
 8010f80:	617b      	str	r3, [r7, #20]
 8010f82:	e00d      	b.n	8010fa0 <ILI9341_Draw_Circle+0x370>
				ILI9341_SPI_Send(color >> 8);
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	0a1b      	lsrs	r3, r3, #8
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ff fce0 	bl	8010950 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7ff fcdb 	bl	8010950 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	617b      	str	r3, [r7, #20]
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	005b      	lsls	r3, r3, #1
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d3ea      	bcc.n	8010f84 <ILI9341_Draw_Circle+0x354>
			ILI9341_Set_Address(x0 - y, y0 - x, x0 + y, y0 - x);
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	1ad0      	subs	r0, r2, r3
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	1ad1      	subs	r1, r2, r3
 8010fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	18d4      	adds	r4, r2, r3
 8010fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	f7ff fd82 	bl	8010ad0 <ILI9341_Set_Address>
			TFT_DC_COMMAND;
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010fd2:	4816      	ldr	r0, [pc, #88]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010fd4:	f7f5 fe5c 	bl	8006c90 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8010fd8:	202c      	movs	r0, #44	; 0x2c
 8010fda:	f7ff fcb9 	bl	8010950 <ILI9341_SPI_Send>
			TFT_DC_DATA;
 8010fde:	2201      	movs	r2, #1
 8010fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010fe4:	4811      	ldr	r0, [pc, #68]	; (801102c <ILI9341_Draw_Circle+0x3fc>)
 8010fe6:	f7f5 fe53 	bl	8006c90 <HAL_GPIO_WritePin>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8010fea:	2300      	movs	r3, #0
 8010fec:	613b      	str	r3, [r7, #16]
 8010fee:	e00d      	b.n	801100c <ILI9341_Draw_Circle+0x3dc>
				ILI9341_SPI_Send(color >> 8);
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	0a1b      	lsrs	r3, r3, #8
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff fcaa 	bl	8010950 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(color);
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	4618      	mov	r0, r3
 8011002:	f7ff fca5 	bl	8010950 <ILI9341_SPI_Send>
			for (uint32_t fff = 0; fff < y * 2 + 1; fff++) {
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	3301      	adds	r3, #1
 801100a:	613b      	str	r3, [r7, #16]
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	3301      	adds	r3, #1
 8011012:	461a      	mov	r2, r3
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	4293      	cmp	r3, r2
 8011018:	d3ea      	bcc.n	8010ff0 <ILI9341_Draw_Circle+0x3c0>
		while (x < y) {
 801101a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	429a      	cmp	r2, r3
 8011020:	f6ff af09 	blt.w	8010e36 <ILI9341_Draw_Circle+0x206>
}
 8011024:	bf00      	nop
 8011026:	373c      	adds	r7, #60	; 0x3c
 8011028:	46bd      	mov	sp, r7
 801102a:	bd90      	pop	{r4, r7, pc}
 801102c:	48000800 	.word	0x48000800

08011030 <ILI9341_Draw_String>:

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char* str, unsigned char size)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b086      	sub	sp, #24
 8011034:	af02      	add	r7, sp, #8
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
 801103c:	603b      	str	r3, [r7, #0]
	SD_CS_OFF;
 801103e:	2201      	movs	r2, #1
 8011040:	2108      	movs	r1, #8
 8011042:	485d      	ldr	r0, [pc, #372]	; (80111b8 <ILI9341_Draw_String+0x188>)
 8011044:	f7f5 fe24 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011048:	2200      	movs	r2, #0
 801104a:	2180      	movs	r1, #128	; 0x80
 801104c:	485a      	ldr	r0, [pc, #360]	; (80111b8 <ILI9341_Draw_String+0x188>)
 801104e:	f7f5 fe1f 	bl	8006c90 <HAL_GPIO_WritePin>

m_rotacion=0;
 8011052:	4b5a      	ldr	r3, [pc, #360]	; (80111bc <ILI9341_Draw_String+0x18c>)
 8011054:	2200      	movs	r2, #0
 8011056:	701a      	strb	r2, [r3, #0]

	if(m_rotacion!=6) y=239-y-size*8;
 8011058:	4b58      	ldr	r3, [pc, #352]	; (80111bc <ILI9341_Draw_String+0x18c>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	2b06      	cmp	r3, #6
 801105e:	d008      	beq.n	8011072 <ILI9341_Draw_String+0x42>
 8011060:	7f3b      	ldrb	r3, [r7, #28]
 8011062:	00db      	lsls	r3, r3, #3
 8011064:	461a      	mov	r2, r3
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	4413      	add	r3, r2
 801106a:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 801106e:	60bb      	str	r3, [r7, #8]
 8011070:	e008      	b.n	8011084 <ILI9341_Draw_String+0x54>
	else 			y=319-y-size*8;
 8011072:	7f3b      	ldrb	r3, [r7, #28]
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	461a      	mov	r2, r3
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	4413      	add	r3, r2
 801107c:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8011080:	3301      	adds	r3, #1
 8011082:	60bb      	str	r3, [r7, #8]
	switch (size)
 8011084:	7f3b      	ldrb	r3, [r7, #28]
 8011086:	2b04      	cmp	r3, #4
 8011088:	d05f      	beq.n	801114a <ILI9341_Draw_String+0x11a>
 801108a:	2b04      	cmp	r3, #4
 801108c:	f300 808f 	bgt.w	80111ae <ILI9341_Draw_String+0x17e>
 8011090:	2b01      	cmp	r3, #1
 8011092:	d027      	beq.n	80110e4 <ILI9341_Draw_String+0xb4>
 8011094:	2b02      	cmp	r3, #2
 8011096:	d02a      	beq.n	80110ee <ILI9341_Draw_String+0xbe>
				x += hh*14;
				str++;
		}
		break;
	}
}
 8011098:	e089      	b.n	80111ae <ILI9341_Draw_String+0x17e>
			if ((x+(size*8))>320)
 801109a:	7f3b      	ldrb	r3, [r7, #28]
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	461a      	mov	r2, r3
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	4413      	add	r3, r2
 80110a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80110a8:	d907      	bls.n	80110ba <ILI9341_Draw_String+0x8a>
				x = 1;
 80110aa:	2301      	movs	r3, #1
 80110ac:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80110ae:	7f3b      	ldrb	r3, [r7, #28]
 80110b0:	00db      	lsls	r3, r3, #3
 80110b2:	461a      	mov	r2, r3
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	4413      	add	r3, r2
 80110b8:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	68b9      	ldr	r1, [r7, #8]
 80110be:	69bb      	ldr	r3, [r7, #24]
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	7f3a      	ldrb	r2, [r7, #28]
 80110c4:	9201      	str	r2, [sp, #4]
 80110c6:	9300      	str	r3, [sp, #0]
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	f000 f8b2 	bl	8011234 <ILI9341_Draw_Char>
			x += size*8-2;
 80110d0:	7f3b      	ldrb	r3, [r7, #28]
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	461a      	mov	r2, r3
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	4413      	add	r3, r2
 80110da:	3b02      	subs	r3, #2
 80110dc:	60fb      	str	r3, [r7, #12]
			str++;
 80110de:	69bb      	ldr	r3, [r7, #24]
 80110e0:	3301      	adds	r3, #1
 80110e2:	61bb      	str	r3, [r7, #24]
		while (*str)
 80110e4:	69bb      	ldr	r3, [r7, #24]
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1d6      	bne.n	801109a <ILI9341_Draw_String+0x6a>
		break;
 80110ec:	e05f      	b.n	80111ae <ILI9341_Draw_String+0x17e>
		hh=1;
 80110ee:	4b34      	ldr	r3, [pc, #208]	; (80111c0 <ILI9341_Draw_String+0x190>)
 80110f0:	2201      	movs	r2, #1
 80110f2:	701a      	strb	r2, [r3, #0]
		while (*str)
 80110f4:	e024      	b.n	8011140 <ILI9341_Draw_String+0x110>
			if ((x+(size*8))>320)
 80110f6:	7f3b      	ldrb	r3, [r7, #28]
 80110f8:	00db      	lsls	r3, r3, #3
 80110fa:	461a      	mov	r2, r3
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	4413      	add	r3, r2
 8011100:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011104:	d907      	bls.n	8011116 <ILI9341_Draw_String+0xe6>
				x = 1;
 8011106:	2301      	movs	r3, #1
 8011108:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 801110a:	7f3b      	ldrb	r3, [r7, #28]
 801110c:	00db      	lsls	r3, r3, #3
 801110e:	461a      	mov	r2, r3
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	4413      	add	r3, r2
 8011114:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	68b9      	ldr	r1, [r7, #8]
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	7f3a      	ldrb	r2, [r7, #28]
 8011120:	9201      	str	r2, [sp, #4]
 8011122:	9300      	str	r3, [sp, #0]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	f000 f884 	bl	8011234 <ILI9341_Draw_Char>
			x += hh*8;
 801112c:	4b24      	ldr	r3, [pc, #144]	; (80111c0 <ILI9341_Draw_String+0x190>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	461a      	mov	r2, r3
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	4413      	add	r3, r2
 8011138:	60fb      	str	r3, [r7, #12]
			str++;
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	3301      	adds	r3, #1
 801113e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1d6      	bne.n	80110f6 <ILI9341_Draw_String+0xc6>
		break;
 8011148:	e031      	b.n	80111ae <ILI9341_Draw_String+0x17e>
		hh=1;
 801114a:	4b1d      	ldr	r3, [pc, #116]	; (80111c0 <ILI9341_Draw_String+0x190>)
 801114c:	2201      	movs	r2, #1
 801114e:	701a      	strb	r2, [r3, #0]
		while (*str)
 8011150:	e028      	b.n	80111a4 <ILI9341_Draw_String+0x174>
				if ((x+(size*8))>320)
 8011152:	7f3b      	ldrb	r3, [r7, #28]
 8011154:	00db      	lsls	r3, r3, #3
 8011156:	461a      	mov	r2, r3
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	4413      	add	r3, r2
 801115c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011160:	d907      	bls.n	8011172 <ILI9341_Draw_String+0x142>
					x = 1;
 8011162:	2301      	movs	r3, #1
 8011164:	60fb      	str	r3, [r7, #12]
					y = y + (size*8);
 8011166:	7f3b      	ldrb	r3, [r7, #28]
 8011168:	00db      	lsls	r3, r3, #3
 801116a:	461a      	mov	r2, r3
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	4413      	add	r3, r2
 8011170:	60bb      	str	r3, [r7, #8]
				ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	68b9      	ldr	r1, [r7, #8]
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	7f3a      	ldrb	r2, [r7, #28]
 801117c:	9201      	str	r2, [sp, #4]
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	f000 f856 	bl	8011234 <ILI9341_Draw_Char>
				x += hh*14;
 8011188:	4b0d      	ldr	r3, [pc, #52]	; (80111c0 <ILI9341_Draw_String+0x190>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	461a      	mov	r2, r3
 801118e:	4613      	mov	r3, r2
 8011190:	00db      	lsls	r3, r3, #3
 8011192:	1a9b      	subs	r3, r3, r2
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	461a      	mov	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	4413      	add	r3, r2
 801119c:	60fb      	str	r3, [r7, #12]
				str++;
 801119e:	69bb      	ldr	r3, [r7, #24]
 80111a0:	3301      	adds	r3, #1
 80111a2:	61bb      	str	r3, [r7, #24]
		while (*str)
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1d2      	bne.n	8011152 <ILI9341_Draw_String+0x122>
		break;
 80111ac:	bf00      	nop
}
 80111ae:	bf00      	nop
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	48000800 	.word	0x48000800
 80111bc:	20009624 	.word	0x20009624
 80111c0:	20009625 	.word	0x20009625

080111c4 <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	4603      	mov	r3, r0
 80111cc:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 80111ce:	2201      	movs	r2, #1
 80111d0:	2108      	movs	r1, #8
 80111d2:	4809      	ldr	r0, [pc, #36]	; (80111f8 <ILI9341_Send_Command+0x34>)
 80111d4:	f7f5 fd5c 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80111d8:	2200      	movs	r2, #0
 80111da:	2180      	movs	r1, #128	; 0x80
 80111dc:	4806      	ldr	r0, [pc, #24]	; (80111f8 <ILI9341_Send_Command+0x34>)
 80111de:	f7f5 fd57 	bl	8006c90 <HAL_GPIO_WritePin>

	Before_Sending_Command();
 80111e2:	f000 fa83 	bl	80116ec <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 80111e6:	79fb      	ldrb	r3, [r7, #7]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fbb1 	bl	8010950 <ILI9341_SPI_Send>
}
 80111ee:	bf00      	nop
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	48000800 	.word	0x48000800

080111fc <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	4603      	mov	r3, r0
 8011204:	71fb      	strb	r3, [r7, #7]
	SD_CS_OFF;
 8011206:	2201      	movs	r2, #1
 8011208:	2108      	movs	r1, #8
 801120a:	4809      	ldr	r0, [pc, #36]	; (8011230 <ILI9341_Send_Data+0x34>)
 801120c:	f7f5 fd40 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8011210:	2200      	movs	r2, #0
 8011212:	2180      	movs	r1, #128	; 0x80
 8011214:	4806      	ldr	r0, [pc, #24]	; (8011230 <ILI9341_Send_Data+0x34>)
 8011216:	f7f5 fd3b 	bl	8006c90 <HAL_GPIO_WritePin>

	Before_Sending_Data();
 801121a:	f000 fa4b 	bl	80116b4 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 801121e:	79fb      	ldrb	r3, [r7, #7]
 8011220:	4618      	mov	r0, r3
 8011222:	f7ff fb95 	bl	8010950 <ILI9341_SPI_Send>
}
 8011226:	bf00      	nop
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	48000800 	.word	0x48000800

08011234 <ILI9341_Draw_Char>:


void ILI9341_Draw_Char(int x, int y, unsigned int colorT, unsigned int colorF, unsigned char charcode, unsigned char size)
{
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 801123a:	af00      	add	r7, sp, #0
 801123c:	f507 7408 	add.w	r4, r7, #544	; 0x220
 8011240:	f5a4 7405 	sub.w	r4, r4, #532	; 0x214
 8011244:	6020      	str	r0, [r4, #0]
 8011246:	f507 7008 	add.w	r0, r7, #544	; 0x220
 801124a:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
 801124e:	6001      	str	r1, [r0, #0]
 8011250:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8011254:	f5a1 7107 	sub.w	r1, r1, #540	; 0x21c
 8011258:	600a      	str	r2, [r1, #0]
 801125a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801125e:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8011262:	6013      	str	r3, [r2, #0]
	SD_CS_OFF;
 8011264:	2201      	movs	r2, #1
 8011266:	2108      	movs	r1, #8
 8011268:	48b2      	ldr	r0, [pc, #712]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801126a:	f7f5 fd11 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801126e:	2200      	movs	r2, #0
 8011270:	2180      	movs	r1, #128	; 0x80
 8011272:	48b0      	ldr	r0, [pc, #704]	; (8011534 <ILI9341_Draw_Char+0x300>)
 8011274:	f7f5 fd0c 	bl	8006c90 <HAL_GPIO_WritePin>

	int i,h;
	unsigned char data[512];
	unsigned char Ch=colorT>>8;
 8011278:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801127c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	0a1b      	lsrs	r3, r3, #8
 8011284:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	unsigned char Cl=colorT;
 8011288:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801128c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
	unsigned char Fh=colorF>>8;
 8011296:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801129a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	0a1b      	lsrs	r3, r3, #8
 80112a2:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
	unsigned char Fl=colorF;
 80112a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80112aa:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214

	switch(size)
 80112b4:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80112b8:	2b04      	cmp	r3, #4
 80112ba:	f000 810a 	beq.w	80114d2 <ILI9341_Draw_Char+0x29e>
 80112be:	2b04      	cmp	r3, #4
 80112c0:	f300 81ee 	bgt.w	80116a0 <ILI9341_Draw_Char+0x46c>
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d003      	beq.n	80112d0 <ILI9341_Draw_Char+0x9c>
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	f000 8083 	beq.w	80113d4 <ILI9341_Draw_Char+0x1a0>
			}
		}
		HAL_SPI_Transmit(&lcd_spi,data,512,10);
		break;
	}
}
 80112ce:	e1e7      	b.n	80116a0 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+5, y+8);
 80112d0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80112d4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80112de:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80112e2:	6819      	ldr	r1, [r3, #0]
 80112e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80112e8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3305      	adds	r3, #5
 80112f0:	461a      	mov	r2, r3
 80112f2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80112f6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	3308      	adds	r3, #8
 80112fe:	f7ff fbe7 	bl	8010ad0 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011302:	2200      	movs	r2, #0
 8011304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011308:	488a      	ldr	r0, [pc, #552]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801130a:	f7f5 fcc1 	bl	8006c90 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 801130e:	202c      	movs	r0, #44	; 0x2c
 8011310:	f7ff fb1e 	bl	8010950 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011314:	2201      	movs	r2, #1
 8011316:	f44f 7100 	mov.w	r1, #512	; 0x200
 801131a:	4886      	ldr	r0, [pc, #536]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801131c:	f7f5 fcb8 	bl	8006c90 <HAL_GPIO_WritePin>
		for(h=7;h>-1;h--)
 8011320:	2307      	movs	r3, #7
 8011322:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011326:	e050      	b.n	80113ca <ILI9341_Draw_Char+0x196>
			for(i=2;i<8;i++)
 8011328:	2302      	movs	r3, #2
 801132a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 801132e:	e043      	b.n	80113b8 <ILI9341_Draw_Char+0x184>
				if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8011330:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011334:	3b20      	subs	r3, #32
 8011336:	4a80      	ldr	r2, [pc, #512]	; (8011538 <ILI9341_Draw_Char+0x304>)
 8011338:	00db      	lsls	r3, r3, #3
 801133a:	441a      	add	r2, r3
 801133c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011340:	4413      	add	r3, r2
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	461a      	mov	r2, r3
 8011346:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801134a:	f1c3 0307 	rsb	r3, r3, #7
 801134e:	fa42 f303 	asr.w	r3, r2, r3
 8011352:	f003 0301 	and.w	r3, r3, #1
 8011356:	2b00      	cmp	r3, #0
 8011358:	d016      	beq.n	8011388 <ILI9341_Draw_Char+0x154>
					ILI9341_SPI_Send(colorT>8);
 801135a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801135e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b08      	cmp	r3, #8
 8011366:	bf8c      	ite	hi
 8011368:	2301      	movhi	r3, #1
 801136a:	2300      	movls	r3, #0
 801136c:	b2db      	uxtb	r3, r3
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff faee 	bl	8010950 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorT);
 8011374:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011378:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	b2db      	uxtb	r3, r3
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fae5 	bl	8010950 <ILI9341_SPI_Send>
 8011386:	e012      	b.n	80113ae <ILI9341_Draw_Char+0x17a>
					ILI9341_SPI_Send(colorF>>8);
 8011388:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801138c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	0a1b      	lsrs	r3, r3, #8
 8011394:	b2db      	uxtb	r3, r3
 8011396:	4618      	mov	r0, r3
 8011398:	f7ff fada 	bl	8010950 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorF);
 801139c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80113a0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff fad1 	bl	8010950 <ILI9341_SPI_Send>
			for(i=2;i<8;i++)
 80113ae:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80113b2:	3301      	adds	r3, #1
 80113b4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80113b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80113bc:	2b07      	cmp	r3, #7
 80113be:	ddb7      	ble.n	8011330 <ILI9341_Draw_Char+0xfc>
		for(h=7;h>-1;h--)
 80113c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80113c4:	3b01      	subs	r3, #1
 80113c6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80113ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	daaa      	bge.n	8011328 <ILI9341_Draw_Char+0xf4>
		break;
 80113d2:	e165      	b.n	80116a0 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+7, y+26);
 80113d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80113d8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80113e2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80113e6:	6819      	ldr	r1, [r3, #0]
 80113e8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80113ec:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3307      	adds	r3, #7
 80113f4:	461a      	mov	r2, r3
 80113f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80113fa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	331a      	adds	r3, #26
 8011402:	f7ff fb65 	bl	8010ad0 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011406:	2200      	movs	r2, #0
 8011408:	f44f 7100 	mov.w	r1, #512	; 0x200
 801140c:	4849      	ldr	r0, [pc, #292]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801140e:	f7f5 fc3f 	bl	8006c90 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8011412:	202c      	movs	r0, #44	; 0x2c
 8011414:	f7ff fa9c 	bl	8010950 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011418:	2201      	movs	r2, #1
 801141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801141e:	4845      	ldr	r0, [pc, #276]	; (8011534 <ILI9341_Draw_Char+0x300>)
 8011420:	f7f5 fc36 	bl	8006c90 <HAL_GPIO_WritePin>
		for(h=15;h>-1;h--)
 8011424:	230f      	movs	r3, #15
 8011426:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 801142a:	e04d      	b.n	80114c8 <ILI9341_Draw_Char+0x294>
			for(i=0;i<8;i++)
 801142c:	2300      	movs	r3, #0
 801142e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011432:	e040      	b.n	80114b6 <ILI9341_Draw_Char+0x282>
				if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8011434:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011438:	3b20      	subs	r3, #32
 801143a:	4a40      	ldr	r2, [pc, #256]	; (801153c <ILI9341_Draw_Char+0x308>)
 801143c:	011b      	lsls	r3, r3, #4
 801143e:	441a      	add	r2, r3
 8011440:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011444:	4413      	add	r3, r2
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	461a      	mov	r2, r3
 801144a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801144e:	f1c3 0307 	rsb	r3, r3, #7
 8011452:	fa42 f303 	asr.w	r3, r2, r3
 8011456:	f003 0301 	and.w	r3, r3, #1
 801145a:	2b00      	cmp	r3, #0
 801145c:	d013      	beq.n	8011486 <ILI9341_Draw_Char+0x252>
					ILI9341_SPI_Send(colorT>>8);
 801145e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011462:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	0a1b      	lsrs	r3, r3, #8
 801146a:	b2db      	uxtb	r3, r3
 801146c:	4618      	mov	r0, r3
 801146e:	f7ff fa6f 	bl	8010950 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorT);
 8011472:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8011476:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	b2db      	uxtb	r3, r3
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fa66 	bl	8010950 <ILI9341_SPI_Send>
 8011484:	e012      	b.n	80114ac <ILI9341_Draw_Char+0x278>
					ILI9341_SPI_Send(colorF>>8);
 8011486:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801148a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	0a1b      	lsrs	r3, r3, #8
 8011492:	b2db      	uxtb	r3, r3
 8011494:	4618      	mov	r0, r3
 8011496:	f7ff fa5b 	bl	8010950 <ILI9341_SPI_Send>
					ILI9341_SPI_Send(colorF);
 801149a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801149e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff fa52 	bl	8010950 <ILI9341_SPI_Send>
			for(i=0;i<8;i++)
 80114ac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80114b0:	3301      	adds	r3, #1
 80114b2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80114b6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80114ba:	2b07      	cmp	r3, #7
 80114bc:	ddba      	ble.n	8011434 <ILI9341_Draw_Char+0x200>
		for(h=15;h>-1;h--)
 80114be:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80114c2:	3b01      	subs	r3, #1
 80114c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80114c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	daad      	bge.n	801142c <ILI9341_Draw_Char+0x1f8>
		break;
 80114d0:	e0e6      	b.n	80116a0 <ILI9341_Draw_Char+0x46c>
		ILI9341_Set_Address(x, y, x+7, y+32);
 80114d2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80114d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80114da:	6818      	ldr	r0, [r3, #0]
 80114dc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80114e0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80114e4:	6819      	ldr	r1, [r3, #0]
 80114e6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80114ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3307      	adds	r3, #7
 80114f2:	461a      	mov	r2, r3
 80114f4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80114f8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	3320      	adds	r3, #32
 8011500:	f7ff fae6 	bl	8010ad0 <ILI9341_Set_Address>
		TFT_DC_COMMAND;
 8011504:	2200      	movs	r2, #0
 8011506:	f44f 7100 	mov.w	r1, #512	; 0x200
 801150a:	480a      	ldr	r0, [pc, #40]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801150c:	f7f5 fbc0 	bl	8006c90 <HAL_GPIO_WritePin>
		ILI9341_SPI_Send(0x2C);
 8011510:	202c      	movs	r0, #44	; 0x2c
 8011512:	f7ff fa1d 	bl	8010950 <ILI9341_SPI_Send>
		TFT_DC_DATA;
 8011516:	2201      	movs	r2, #1
 8011518:	f44f 7100 	mov.w	r1, #512	; 0x200
 801151c:	4805      	ldr	r0, [pc, #20]	; (8011534 <ILI9341_Draw_Char+0x300>)
 801151e:	f7f5 fbb7 	bl	8006c90 <HAL_GPIO_WritePin>
		for(h=0;h<16;h++)
 8011522:	2300      	movs	r3, #0
 8011524:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011528:	e0ac      	b.n	8011684 <ILI9341_Draw_Char+0x450>
			for(i=0;i<8;i++)
 801152a:	2300      	movs	r3, #0
 801152c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011530:	e09e      	b.n	8011670 <ILI9341_Draw_Char+0x43c>
 8011532:	bf00      	nop
 8011534:	48000800 	.word	0x48000800
 8011538:	0801be84 	.word	0x0801be84
 801153c:	0801c15c 	.word	0x0801c15c
				if( (chars16[charcode-0x20][15-h]>>(7-i) )&0x01) data[i*2+32*h]=Ch,data[i*2+1+32*h]=Cl,data[i*2+16+32*h]=Ch,data[i*2+17+32*h]=Cl;
 8011540:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8011544:	f1a3 0220 	sub.w	r2, r3, #32
 8011548:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801154c:	f1c3 030f 	rsb	r3, r3, #15
 8011550:	4956      	ldr	r1, [pc, #344]	; (80116ac <ILI9341_Draw_Char+0x478>)
 8011552:	0112      	lsls	r2, r2, #4
 8011554:	440a      	add	r2, r1
 8011556:	4413      	add	r3, r2
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	461a      	mov	r2, r3
 801155c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011560:	f1c3 0307 	rsb	r3, r3, #7
 8011564:	fa42 f303 	asr.w	r3, r2, r3
 8011568:	f003 0301 	and.w	r3, r3, #1
 801156c:	2b00      	cmp	r3, #0
 801156e:	d03d      	beq.n	80115ec <ILI9341_Draw_Char+0x3b8>
 8011570:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011574:	011a      	lsls	r2, r3, #4
 8011576:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801157a:	4413      	add	r3, r2
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8011582:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011586:	f897 1217 	ldrb.w	r1, [r7, #535]	; 0x217
 801158a:	54d1      	strb	r1, [r2, r3]
 801158c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011590:	005b      	lsls	r3, r3, #1
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011598:	015b      	lsls	r3, r3, #5
 801159a:	4413      	add	r3, r2
 801159c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80115a0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80115a4:	f897 1216 	ldrb.w	r1, [r7, #534]	; 0x216
 80115a8:	54d1      	strb	r1, [r2, r3]
 80115aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80115ae:	f103 0208 	add.w	r2, r3, #8
 80115b2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80115b6:	011b      	lsls	r3, r3, #4
 80115b8:	4413      	add	r3, r2
 80115ba:	005b      	lsls	r3, r3, #1
 80115bc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80115c0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80115c4:	f897 1217 	ldrb.w	r1, [r7, #535]	; 0x217
 80115c8:	54d1      	strb	r1, [r2, r3]
 80115ca:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	f103 0211 	add.w	r2, r3, #17
 80115d4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80115d8:	015b      	lsls	r3, r3, #5
 80115da:	4413      	add	r3, r2
 80115dc:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80115e0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80115e4:	f897 1216 	ldrb.w	r1, [r7, #534]	; 0x216
 80115e8:	54d1      	strb	r1, [r2, r3]
 80115ea:	e03c      	b.n	8011666 <ILI9341_Draw_Char+0x432>
				else data[i*2+32*h]=Fh,data[i*2+1+32*h]=Fl,data[i*2+16+32*h]=Fh,data[i*2+17+32*h]=Fl;
 80115ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80115f0:	011a      	lsls	r2, r3, #4
 80115f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80115f6:	4413      	add	r3, r2
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80115fe:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011602:	f897 1215 	ldrb.w	r1, [r7, #533]	; 0x215
 8011606:	54d1      	strb	r1, [r2, r3]
 8011608:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011614:	015b      	lsls	r3, r3, #5
 8011616:	4413      	add	r3, r2
 8011618:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801161c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011620:	f897 1214 	ldrb.w	r1, [r7, #532]	; 0x214
 8011624:	54d1      	strb	r1, [r2, r3]
 8011626:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801162a:	f103 0208 	add.w	r2, r3, #8
 801162e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011632:	011b      	lsls	r3, r3, #4
 8011634:	4413      	add	r3, r2
 8011636:	005b      	lsls	r3, r3, #1
 8011638:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801163c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011640:	f897 1215 	ldrb.w	r1, [r7, #533]	; 0x215
 8011644:	54d1      	strb	r1, [r2, r3]
 8011646:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801164a:	005b      	lsls	r3, r3, #1
 801164c:	f103 0211 	add.w	r2, r3, #17
 8011650:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011654:	015b      	lsls	r3, r3, #5
 8011656:	4413      	add	r3, r2
 8011658:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801165c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8011660:	f897 1214 	ldrb.w	r1, [r7, #532]	; 0x214
 8011664:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<8;i++)
 8011666:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801166a:	3301      	adds	r3, #1
 801166c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8011670:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011674:	2b07      	cmp	r3, #7
 8011676:	f77f af63 	ble.w	8011540 <ILI9341_Draw_Char+0x30c>
		for(h=0;h<16;h++)
 801167a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801167e:	3301      	adds	r3, #1
 8011680:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8011684:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011688:	2b0f      	cmp	r3, #15
 801168a:	f77f af4e 	ble.w	801152a <ILI9341_Draw_Char+0x2f6>
		HAL_SPI_Transmit(&lcd_spi,data,512,10);
 801168e:	f107 0114 	add.w	r1, r7, #20
 8011692:	230a      	movs	r3, #10
 8011694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011698:	4805      	ldr	r0, [pc, #20]	; (80116b0 <ILI9341_Draw_Char+0x47c>)
 801169a:	f7f8 fd42 	bl	800a122 <HAL_SPI_Transmit>
		break;
 801169e:	bf00      	nop
}
 80116a0:	bf00      	nop
 80116a2:	f507 7709 	add.w	r7, r7, #548	; 0x224
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd90      	pop	{r4, r7, pc}
 80116aa:	bf00      	nop
 80116ac:	0801c15c 	.word	0x0801c15c
 80116b0:	20009628 	.word	0x20009628

080116b4 <Before_Sending_Data>:

static void Before_Sending_Data()
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 80116b8:	2201      	movs	r2, #1
 80116ba:	2108      	movs	r1, #8
 80116bc:	480a      	ldr	r0, [pc, #40]	; (80116e8 <Before_Sending_Data+0x34>)
 80116be:	f7f5 fae7 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80116c2:	2200      	movs	r2, #0
 80116c4:	2180      	movs	r1, #128	; 0x80
 80116c6:	4808      	ldr	r0, [pc, #32]	; (80116e8 <Before_Sending_Data+0x34>)
 80116c8:	f7f5 fae2 	bl	8006c90 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80116cc:	2201      	movs	r2, #1
 80116ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80116d2:	4805      	ldr	r0, [pc, #20]	; (80116e8 <Before_Sending_Data+0x34>)
 80116d4:	f7f5 fadc 	bl	8006c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80116d8:	2200      	movs	r2, #0
 80116da:	2180      	movs	r1, #128	; 0x80
 80116dc:	4802      	ldr	r0, [pc, #8]	; (80116e8 <Before_Sending_Data+0x34>)
 80116de:	f7f5 fad7 	bl	8006c90 <HAL_GPIO_WritePin>
}
 80116e2:	bf00      	nop
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	48000800 	.word	0x48000800

080116ec <Before_Sending_Command>:

static void Before_Sending_Command()
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	af00      	add	r7, sp, #0
	SD_CS_OFF;
 80116f0:	2201      	movs	r2, #1
 80116f2:	2108      	movs	r1, #8
 80116f4:	480a      	ldr	r0, [pc, #40]	; (8011720 <Before_Sending_Command+0x34>)
 80116f6:	f7f5 facb 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80116fa:	2200      	movs	r2, #0
 80116fc:	2180      	movs	r1, #128	; 0x80
 80116fe:	4808      	ldr	r0, [pc, #32]	; (8011720 <Before_Sending_Command+0x34>)
 8011700:	f7f5 fac6 	bl	8006c90 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8011704:	2200      	movs	r2, #0
 8011706:	f44f 7100 	mov.w	r1, #512	; 0x200
 801170a:	4805      	ldr	r0, [pc, #20]	; (8011720 <Before_Sending_Command+0x34>)
 801170c:	f7f5 fac0 	bl	8006c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	2180      	movs	r1, #128	; 0x80
 8011714:	4802      	ldr	r0, [pc, #8]	; (8011720 <Before_Sending_Command+0x34>)
 8011716:	f7f5 fabb 	bl	8006c90 <HAL_GPIO_WritePin>
}
 801171a:	bf00      	nop
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	48000800 	.word	0x48000800

08011724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	460b      	mov	r3, r1
 801172e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011730:	2300      	movs	r3, #0
 8011732:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	7c1b      	ldrb	r3, [r3, #16]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d115      	bne.n	8011768 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011740:	2202      	movs	r2, #2
 8011742:	2181      	movs	r1, #129	; 0x81
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f007 fefe 	bl	8019546 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011754:	2202      	movs	r2, #2
 8011756:	2101      	movs	r1, #1
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f007 fef4 	bl	8019546 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2201      	movs	r2, #1
 8011762:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8011766:	e012      	b.n	801178e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011768:	2340      	movs	r3, #64	; 0x40
 801176a:	2202      	movs	r2, #2
 801176c:	2181      	movs	r1, #129	; 0x81
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f007 fee9 	bl	8019546 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2201      	movs	r2, #1
 8011778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801177a:	2340      	movs	r3, #64	; 0x40
 801177c:	2202      	movs	r2, #2
 801177e:	2101      	movs	r1, #1
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f007 fee0 	bl	8019546 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2201      	movs	r2, #1
 801178a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801178e:	2308      	movs	r3, #8
 8011790:	2203      	movs	r2, #3
 8011792:	2182      	movs	r1, #130	; 0x82
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f007 fed6 	bl	8019546 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2201      	movs	r2, #1
 801179e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80117a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80117a4:	f007 fff8 	bl	8019798 <USBD_static_malloc>
 80117a8:	4602      	mov	r2, r0
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d102      	bne.n	80117c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80117ba:	2301      	movs	r3, #1
 80117bc:	73fb      	strb	r3, [r7, #15]
 80117be:	e026      	b.n	801180e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	2200      	movs	r2, #0
 80117d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	2200      	movs	r2, #0
 80117de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	7c1b      	ldrb	r3, [r3, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d109      	bne.n	80117fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80117f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117f4:	2101      	movs	r1, #1
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f007 ff97 	bl	801972a <USBD_LL_PrepareReceive>
 80117fc:	e007      	b.n	801180e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011804:	2340      	movs	r3, #64	; 0x40
 8011806:	2101      	movs	r1, #1
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f007 ff8e 	bl	801972a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3710      	adds	r7, #16
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	460b      	mov	r3, r1
 8011822:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8011824:	2300      	movs	r3, #0
 8011826:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011828:	2181      	movs	r1, #129	; 0x81
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f007 feb1 	bl	8019592 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011836:	2101      	movs	r1, #1
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f007 feaa 	bl	8019592 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011846:	2182      	movs	r1, #130	; 0x82
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f007 fea2 	bl	8019592 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2200      	movs	r2, #0
 8011852:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00e      	beq.n	801187c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801186e:	4618      	mov	r0, r3
 8011870:	f007 ffa0 	bl	80197b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801187c:	7bfb      	ldrb	r3, [r7, #15]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b086      	sub	sp, #24
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
 801188e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011896:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011898:	2300      	movs	r3, #0
 801189a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801189c:	2300      	movs	r3, #0
 801189e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80118a0:	2300      	movs	r3, #0
 80118a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d039      	beq.n	8011924 <USBD_CDC_Setup+0x9e>
 80118b0:	2b20      	cmp	r3, #32
 80118b2:	d17f      	bne.n	80119b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	88db      	ldrh	r3, [r3, #6]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d029      	beq.n	8011910 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	b25b      	sxtb	r3, r3
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	da11      	bge.n	80118ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80118d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80118d4:	683a      	ldr	r2, [r7, #0]
 80118d6:	88d2      	ldrh	r2, [r2, #6]
 80118d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80118da:	6939      	ldr	r1, [r7, #16]
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	88db      	ldrh	r3, [r3, #6]
 80118e0:	461a      	mov	r2, r3
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f001 f9e3 	bl	8012cae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80118e8:	e06b      	b.n	80119c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	785a      	ldrb	r2, [r3, #1]
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	88db      	ldrh	r3, [r3, #6]
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8011900:	6939      	ldr	r1, [r7, #16]
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	88db      	ldrh	r3, [r3, #6]
 8011906:	461a      	mov	r2, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f001 f9fe 	bl	8012d0a <USBD_CtlPrepareRx>
      break;
 801190e:	e058      	b.n	80119c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011916:	689b      	ldr	r3, [r3, #8]
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	7850      	ldrb	r0, [r2, #1]
 801191c:	2200      	movs	r2, #0
 801191e:	6839      	ldr	r1, [r7, #0]
 8011920:	4798      	blx	r3
      break;
 8011922:	e04e      	b.n	80119c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	785b      	ldrb	r3, [r3, #1]
 8011928:	2b0b      	cmp	r3, #11
 801192a:	d02e      	beq.n	801198a <USBD_CDC_Setup+0x104>
 801192c:	2b0b      	cmp	r3, #11
 801192e:	dc38      	bgt.n	80119a2 <USBD_CDC_Setup+0x11c>
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <USBD_CDC_Setup+0xb4>
 8011934:	2b0a      	cmp	r3, #10
 8011936:	d014      	beq.n	8011962 <USBD_CDC_Setup+0xdc>
 8011938:	e033      	b.n	80119a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011940:	2b03      	cmp	r3, #3
 8011942:	d107      	bne.n	8011954 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8011944:	f107 030c 	add.w	r3, r7, #12
 8011948:	2202      	movs	r2, #2
 801194a:	4619      	mov	r1, r3
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f001 f9ae 	bl	8012cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011952:	e02e      	b.n	80119b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f001 f93e 	bl	8012bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 801195c:	2302      	movs	r3, #2
 801195e:	75fb      	strb	r3, [r7, #23]
          break;
 8011960:	e027      	b.n	80119b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011968:	2b03      	cmp	r3, #3
 801196a:	d107      	bne.n	801197c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801196c:	f107 030f 	add.w	r3, r7, #15
 8011970:	2201      	movs	r2, #1
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f001 f99a 	bl	8012cae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801197a:	e01a      	b.n	80119b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801197c:	6839      	ldr	r1, [r7, #0]
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f001 f92a 	bl	8012bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 8011984:	2302      	movs	r3, #2
 8011986:	75fb      	strb	r3, [r7, #23]
          break;
 8011988:	e013      	b.n	80119b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011990:	2b03      	cmp	r3, #3
 8011992:	d00d      	beq.n	80119b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8011994:	6839      	ldr	r1, [r7, #0]
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f001 f91e 	bl	8012bd8 <USBD_CtlError>
            ret = USBD_FAIL;
 801199c:	2302      	movs	r3, #2
 801199e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80119a0:	e006      	b.n	80119b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80119a2:	6839      	ldr	r1, [r7, #0]
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f001 f917 	bl	8012bd8 <USBD_CtlError>
          ret = USBD_FAIL;
 80119aa:	2302      	movs	r3, #2
 80119ac:	75fb      	strb	r3, [r7, #23]
          break;
 80119ae:	e000      	b.n	80119b2 <USBD_CDC_Setup+0x12c>
          break;
 80119b0:	bf00      	nop
      }
      break;
 80119b2:	e006      	b.n	80119c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80119b4:	6839      	ldr	r1, [r7, #0]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f001 f90e 	bl	8012bd8 <USBD_CtlError>
      ret = USBD_FAIL;
 80119bc:	2302      	movs	r3, #2
 80119be:	75fb      	strb	r3, [r7, #23]
      break;
 80119c0:	bf00      	nop
  }

  return ret;
 80119c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3718      	adds	r7, #24
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	460b      	mov	r3, r1
 80119d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d03a      	beq.n	8011a68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80119f2:	78fa      	ldrb	r2, [r7, #3]
 80119f4:	6879      	ldr	r1, [r7, #4]
 80119f6:	4613      	mov	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	4413      	add	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	440b      	add	r3, r1
 8011a00:	331c      	adds	r3, #28
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d029      	beq.n	8011a5c <USBD_CDC_DataIn+0x90>
 8011a08:	78fa      	ldrb	r2, [r7, #3]
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	440b      	add	r3, r1
 8011a16:	331c      	adds	r3, #28
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	78f9      	ldrb	r1, [r7, #3]
 8011a1c:	68b8      	ldr	r0, [r7, #8]
 8011a1e:	460b      	mov	r3, r1
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	440b      	add	r3, r1
 8011a24:	00db      	lsls	r3, r3, #3
 8011a26:	4403      	add	r3, r0
 8011a28:	3338      	adds	r3, #56	; 0x38
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011a30:	fb01 f303 	mul.w	r3, r1, r3
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d110      	bne.n	8011a5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8011a3a:	78fa      	ldrb	r2, [r7, #3]
 8011a3c:	6879      	ldr	r1, [r7, #4]
 8011a3e:	4613      	mov	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	440b      	add	r3, r1
 8011a48:	331c      	adds	r3, #28
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011a4e:	78f9      	ldrb	r1, [r7, #3]
 8011a50:	2300      	movs	r3, #0
 8011a52:	2200      	movs	r2, #0
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f007 fe45 	bl	80196e4 <USBD_LL_Transmit>
 8011a5a:	e003      	b.n	8011a64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8011a64:	2300      	movs	r3, #0
 8011a66:	e000      	b.n	8011a6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8011a68:	2302      	movs	r3, #2
  }
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a72:	b580      	push	{r7, lr}
 8011a74:	b084      	sub	sp, #16
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]
 8011a7a:	460b      	mov	r3, r1
 8011a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011a86:	78fb      	ldrb	r3, [r7, #3]
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f007 fe70 	bl	8019770 <USBD_LL_GetRxDataSize>
 8011a90:	4602      	mov	r2, r0
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00d      	beq.n	8011abe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011ab0:	68fa      	ldr	r2, [r7, #12]
 8011ab2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4798      	blx	r3

    return USBD_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	e000      	b.n	8011ac0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8011abe:	2302      	movs	r3, #2
  }
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d015      	beq.n	8011b0e <USBD_CDC_EP0_RxReady+0x46>
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011ae8:	2bff      	cmp	r3, #255	; 0xff
 8011aea:	d010      	beq.n	8011b0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8011afa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011b02:	b292      	uxth	r2, r2
 8011b04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	22ff      	movs	r2, #255	; 0xff
 8011b0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b083      	sub	sp, #12
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2243      	movs	r2, #67	; 0x43
 8011b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8011b26:	4b03      	ldr	r3, [pc, #12]	; (8011b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	370c      	adds	r7, #12
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	200000b8 	.word	0x200000b8

08011b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2243      	movs	r2, #67	; 0x43
 8011b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8011b46:	4b03      	ldr	r3, [pc, #12]	; (8011b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	20000074 	.word	0x20000074

08011b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b58:	b480      	push	{r7}
 8011b5a:	b083      	sub	sp, #12
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2243      	movs	r2, #67	; 0x43
 8011b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8011b66:	4b03      	ldr	r3, [pc, #12]	; (8011b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011b68:	4618      	mov	r0, r3
 8011b6a:	370c      	adds	r7, #12
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b72:	4770      	bx	lr
 8011b74:	200000fc 	.word	0x200000fc

08011b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	220a      	movs	r2, #10
 8011b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8011b86:	4b03      	ldr	r3, [pc, #12]	; (8011b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	20000030 	.word	0x20000030

08011b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8011ba2:	2302      	movs	r3, #2
 8011ba4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d005      	beq.n	8011bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3714      	adds	r7, #20
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr

08011bc6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8011bc6:	b480      	push	{r7}
 8011bc8:	b087      	sub	sp, #28
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	60f8      	str	r0, [r7, #12]
 8011bce:	60b9      	str	r1, [r7, #8]
 8011bd0:	4613      	mov	r3, r2
 8011bd2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bda:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011be4:	88fa      	ldrh	r2, [r7, #6]
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	371c      	adds	r7, #28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8011bfa:	b480      	push	{r7}
 8011bfc:	b085      	sub	sp, #20
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c0a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	683a      	ldr	r2, [r7, #0]
 8011c10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b084      	sub	sp, #16
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d017      	beq.n	8011c6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	7c1b      	ldrb	r3, [r3, #16]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d109      	bne.n	8011c58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c4e:	2101      	movs	r1, #1
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f007 fd6a 	bl	801972a <USBD_LL_PrepareReceive>
 8011c56:	e007      	b.n	8011c68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c5e:	2340      	movs	r3, #64	; 0x40
 8011c60:	2101      	movs	r1, #1
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f007 fd61 	bl	801972a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e000      	b.n	8011c6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8011c6c:	2302      	movs	r3, #2
  }
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b084      	sub	sp, #16
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	60f8      	str	r0, [r7, #12]
 8011c7e:	60b9      	str	r1, [r7, #8]
 8011c80:	4613      	mov	r3, r2
 8011c82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	e01a      	b.n	8011cc4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d003      	beq.n	8011cae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	79fa      	ldrb	r2, [r7, #7]
 8011cba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f007 fbcb 	bl	8019458 <USBD_LL_Init>

  return USBD_OK;
 8011cc2:	2300      	movs	r3, #0
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3710      	adds	r7, #16
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b085      	sub	sp, #20
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d006      	beq.n	8011cee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	73fb      	strb	r3, [r7, #15]
 8011cec:	e001      	b.n	8011cf2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011cee:	2302      	movs	r3, #2
 8011cf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3714      	adds	r7, #20
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr

08011d00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f007 fc01 	bl	8019510 <USBD_LL_Start>

  return USBD_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d20:	2300      	movs	r3, #0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b084      	sub	sp, #16
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	460b      	mov	r3, r1
 8011d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d00c      	beq.n	8011d62 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	78fa      	ldrb	r2, [r7, #3]
 8011d52:	4611      	mov	r1, r2
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	4798      	blx	r3
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d101      	bne.n	8011d62 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	460b      	mov	r3, r1
 8011d76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	78fa      	ldrb	r2, [r7, #3]
 8011d82:	4611      	mov	r1, r2
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	4798      	blx	r3

  return USBD_OK;
 8011d88:	2300      	movs	r3, #0
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3708      	adds	r7, #8
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b082      	sub	sp, #8
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	6078      	str	r0, [r7, #4]
 8011d9a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011da2:	6839      	ldr	r1, [r7, #0]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 feda 	bl	8012b5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2201      	movs	r2, #1
 8011dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011db8:	461a      	mov	r2, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011dc6:	f003 031f 	and.w	r3, r3, #31
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d016      	beq.n	8011dfc <USBD_LL_SetupStage+0x6a>
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d81c      	bhi.n	8011e0c <USBD_LL_SetupStage+0x7a>
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d002      	beq.n	8011ddc <USBD_LL_SetupStage+0x4a>
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d008      	beq.n	8011dec <USBD_LL_SetupStage+0x5a>
 8011dda:	e017      	b.n	8011e0c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 f9cd 	bl	8012184 <USBD_StdDevReq>
      break;
 8011dea:	e01a      	b.n	8011e22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011df2:	4619      	mov	r1, r3
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fa2f 	bl	8012258 <USBD_StdItfReq>
      break;
 8011dfa:	e012      	b.n	8011e22 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011e02:	4619      	mov	r1, r3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 fa6f 	bl	80122e8 <USBD_StdEPReq>
      break;
 8011e0a:	e00a      	b.n	8011e22 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011e12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f007 fbd8 	bl	80195d0 <USBD_LL_StallEP>
      break;
 8011e20:	bf00      	nop
  }

  return USBD_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3708      	adds	r7, #8
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	460b      	mov	r3, r1
 8011e36:	607a      	str	r2, [r7, #4]
 8011e38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011e3a:	7afb      	ldrb	r3, [r7, #11]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d14b      	bne.n	8011ed8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011e46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e4e:	2b03      	cmp	r3, #3
 8011e50:	d134      	bne.n	8011ebc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	68da      	ldr	r2, [r3, #12]
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	691b      	ldr	r3, [r3, #16]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d919      	bls.n	8011e92 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	68da      	ldr	r2, [r3, #12]
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	1ad2      	subs	r2, r2, r3
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d203      	bcs.n	8011e80 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	e002      	b.n	8011e86 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	461a      	mov	r2, r3
 8011e88:	6879      	ldr	r1, [r7, #4]
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f000 ff5b 	bl	8012d46 <USBD_CtlContinueRx>
 8011e90:	e038      	b.n	8011f04 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00a      	beq.n	8011eb4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ea4:	2b03      	cmp	r3, #3
 8011ea6:	d105      	bne.n	8011eb4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	68f8      	ldr	r0, [r7, #12]
 8011eb2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011eb4:	68f8      	ldr	r0, [r7, #12]
 8011eb6:	f000 ff58 	bl	8012d6a <USBD_CtlSendStatus>
 8011eba:	e023      	b.n	8011f04 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ec2:	2b05      	cmp	r3, #5
 8011ec4:	d11e      	bne.n	8011f04 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8011ece:	2100      	movs	r1, #0
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f007 fb7d 	bl	80195d0 <USBD_LL_StallEP>
 8011ed6:	e015      	b.n	8011f04 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ede:	699b      	ldr	r3, [r3, #24]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00d      	beq.n	8011f00 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011eea:	2b03      	cmp	r3, #3
 8011eec:	d108      	bne.n	8011f00 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ef4:	699b      	ldr	r3, [r3, #24]
 8011ef6:	7afa      	ldrb	r2, [r7, #11]
 8011ef8:	4611      	mov	r1, r2
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	4798      	blx	r3
 8011efe:	e001      	b.n	8011f04 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011f00:	2302      	movs	r3, #2
 8011f02:	e000      	b.n	8011f06 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011f04:	2300      	movs	r3, #0
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b086      	sub	sp, #24
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	60f8      	str	r0, [r7, #12]
 8011f16:	460b      	mov	r3, r1
 8011f18:	607a      	str	r2, [r7, #4]
 8011f1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011f1c:	7afb      	ldrb	r3, [r7, #11]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d17f      	bne.n	8012022 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	3314      	adds	r3, #20
 8011f26:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d15c      	bne.n	8011fec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	68da      	ldr	r2, [r3, #12]
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d915      	bls.n	8011f6a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	68da      	ldr	r2, [r3, #12]
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	691b      	ldr	r3, [r3, #16]
 8011f46:	1ad2      	subs	r2, r2, r3
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	461a      	mov	r2, r3
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f000 fec5 	bl	8012ce6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	2200      	movs	r2, #0
 8011f60:	2100      	movs	r1, #0
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f007 fbe1 	bl	801972a <USBD_LL_PrepareReceive>
 8011f68:	e04e      	b.n	8012008 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	697a      	ldr	r2, [r7, #20]
 8011f70:	6912      	ldr	r2, [r2, #16]
 8011f72:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f76:	fb01 f202 	mul.w	r2, r1, r2
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d11c      	bne.n	8011fba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	689a      	ldr	r2, [r3, #8]
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d316      	bcc.n	8011fba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	689a      	ldr	r2, [r3, #8]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d20f      	bcs.n	8011fba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f000 fea1 	bl	8012ce6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fac:	2300      	movs	r3, #0
 8011fae:	2200      	movs	r2, #0
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	68f8      	ldr	r0, [r7, #12]
 8011fb4:	f007 fbb9 	bl	801972a <USBD_LL_PrepareReceive>
 8011fb8:	e026      	b.n	8012008 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00a      	beq.n	8011fdc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011fcc:	2b03      	cmp	r3, #3
 8011fce:	d105      	bne.n	8011fdc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011fdc:	2180      	movs	r1, #128	; 0x80
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f007 faf6 	bl	80195d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f000 fed3 	bl	8012d90 <USBD_CtlReceiveStatus>
 8011fea:	e00d      	b.n	8012008 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011ff2:	2b04      	cmp	r3, #4
 8011ff4:	d004      	beq.n	8012000 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d103      	bne.n	8012008 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012000:	2180      	movs	r1, #128	; 0x80
 8012002:	68f8      	ldr	r0, [r7, #12]
 8012004:	f007 fae4 	bl	80195d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801200e:	2b01      	cmp	r3, #1
 8012010:	d11d      	bne.n	801204e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f7ff fe80 	bl	8011d18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2200      	movs	r2, #0
 801201c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012020:	e015      	b.n	801204e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012028:	695b      	ldr	r3, [r3, #20]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00d      	beq.n	801204a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012034:	2b03      	cmp	r3, #3
 8012036:	d108      	bne.n	801204a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801203e:	695b      	ldr	r3, [r3, #20]
 8012040:	7afa      	ldrb	r2, [r7, #11]
 8012042:	4611      	mov	r1, r2
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	4798      	blx	r3
 8012048:	e001      	b.n	801204e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801204a:	2302      	movs	r3, #2
 801204c:	e000      	b.n	8012050 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012060:	2340      	movs	r3, #64	; 0x40
 8012062:	2200      	movs	r2, #0
 8012064:	2100      	movs	r1, #0
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f007 fa6d 	bl	8019546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2201      	movs	r2, #1
 8012070:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2240      	movs	r2, #64	; 0x40
 8012078:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801207c:	2340      	movs	r3, #64	; 0x40
 801207e:	2200      	movs	r2, #0
 8012080:	2180      	movs	r1, #128	; 0x80
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f007 fa5f 	bl	8019546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2240      	movs	r2, #64	; 0x40
 8012092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2200      	movs	r2, #0
 80120a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d009      	beq.n	80120d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	6852      	ldr	r2, [r2, #4]
 80120c8:	b2d2      	uxtb	r2, r2
 80120ca:	4611      	mov	r1, r2
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	4798      	blx	r3
  }

  return USBD_OK;
 80120d0:	2300      	movs	r3, #0
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80120da:	b480      	push	{r7}
 80120dc:	b083      	sub	sp, #12
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	460b      	mov	r3, r1
 80120e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	78fa      	ldrb	r2, [r7, #3]
 80120ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80120ec:	2300      	movs	r3, #0
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr

080120fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80120fa:	b480      	push	{r7}
 80120fc:	b083      	sub	sp, #12
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2204      	movs	r2, #4
 8012112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012116:	2300      	movs	r3, #0
}
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012132:	2b04      	cmp	r3, #4
 8012134:	d105      	bne.n	8012142 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012142:	2300      	movs	r3, #0
}
 8012144:	4618      	mov	r0, r3
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801215e:	2b03      	cmp	r3, #3
 8012160:	d10b      	bne.n	801217a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012168:	69db      	ldr	r3, [r3, #28]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d005      	beq.n	801217a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012174:	69db      	ldr	r3, [r3, #28]
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801219a:	2b40      	cmp	r3, #64	; 0x40
 801219c:	d005      	beq.n	80121aa <USBD_StdDevReq+0x26>
 801219e:	2b40      	cmp	r3, #64	; 0x40
 80121a0:	d84f      	bhi.n	8012242 <USBD_StdDevReq+0xbe>
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d009      	beq.n	80121ba <USBD_StdDevReq+0x36>
 80121a6:	2b20      	cmp	r3, #32
 80121a8:	d14b      	bne.n	8012242 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121b0:	689b      	ldr	r3, [r3, #8]
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	4798      	blx	r3
      break;
 80121b8:	e048      	b.n	801224c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	785b      	ldrb	r3, [r3, #1]
 80121be:	2b09      	cmp	r3, #9
 80121c0:	d839      	bhi.n	8012236 <USBD_StdDevReq+0xb2>
 80121c2:	a201      	add	r2, pc, #4	; (adr r2, 80121c8 <USBD_StdDevReq+0x44>)
 80121c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c8:	08012219 	.word	0x08012219
 80121cc:	0801222d 	.word	0x0801222d
 80121d0:	08012237 	.word	0x08012237
 80121d4:	08012223 	.word	0x08012223
 80121d8:	08012237 	.word	0x08012237
 80121dc:	080121fb 	.word	0x080121fb
 80121e0:	080121f1 	.word	0x080121f1
 80121e4:	08012237 	.word	0x08012237
 80121e8:	0801220f 	.word	0x0801220f
 80121ec:	08012205 	.word	0x08012205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 f9dc 	bl	80125b0 <USBD_GetDescriptor>
          break;
 80121f8:	e022      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80121fa:	6839      	ldr	r1, [r7, #0]
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 fb3f 	bl	8012880 <USBD_SetAddress>
          break;
 8012202:	e01d      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012204:	6839      	ldr	r1, [r7, #0]
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 fb7e 	bl	8012908 <USBD_SetConfig>
          break;
 801220c:	e018      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801220e:	6839      	ldr	r1, [r7, #0]
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 fc07 	bl	8012a24 <USBD_GetConfig>
          break;
 8012216:	e013      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f000 fc37 	bl	8012a8e <USBD_GetStatus>
          break;
 8012220:	e00e      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 fc65 	bl	8012af4 <USBD_SetFeature>
          break;
 801222a:	e009      	b.n	8012240 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801222c:	6839      	ldr	r1, [r7, #0]
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 fc74 	bl	8012b1c <USBD_ClrFeature>
          break;
 8012234:	e004      	b.n	8012240 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012236:	6839      	ldr	r1, [r7, #0]
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fccd 	bl	8012bd8 <USBD_CtlError>
          break;
 801223e:	bf00      	nop
      }
      break;
 8012240:	e004      	b.n	801224c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012242:	6839      	ldr	r1, [r7, #0]
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 fcc7 	bl	8012bd8 <USBD_CtlError>
      break;
 801224a:	bf00      	nop
  }

  return ret;
 801224c:	7bfb      	ldrb	r3, [r7, #15]
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}
 8012256:	bf00      	nop

08012258 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012262:	2300      	movs	r3, #0
 8012264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801226e:	2b40      	cmp	r3, #64	; 0x40
 8012270:	d005      	beq.n	801227e <USBD_StdItfReq+0x26>
 8012272:	2b40      	cmp	r3, #64	; 0x40
 8012274:	d82e      	bhi.n	80122d4 <USBD_StdItfReq+0x7c>
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <USBD_StdItfReq+0x26>
 801227a:	2b20      	cmp	r3, #32
 801227c:	d12a      	bne.n	80122d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012284:	3b01      	subs	r3, #1
 8012286:	2b02      	cmp	r3, #2
 8012288:	d81d      	bhi.n	80122c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	889b      	ldrh	r3, [r3, #4]
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b01      	cmp	r3, #1
 8012292:	d813      	bhi.n	80122bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	6839      	ldr	r1, [r7, #0]
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	4798      	blx	r3
 80122a2:	4603      	mov	r3, r0
 80122a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	88db      	ldrh	r3, [r3, #6]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d110      	bne.n	80122d0 <USBD_StdItfReq+0x78>
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10d      	bne.n	80122d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 fd58 	bl	8012d6a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80122ba:	e009      	b.n	80122d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fc8a 	bl	8012bd8 <USBD_CtlError>
          break;
 80122c4:	e004      	b.n	80122d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fc85 	bl	8012bd8 <USBD_CtlError>
          break;
 80122ce:	e000      	b.n	80122d2 <USBD_StdItfReq+0x7a>
          break;
 80122d0:	bf00      	nop
      }
      break;
 80122d2:	e004      	b.n	80122de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fc7e 	bl	8012bd8 <USBD_CtlError>
      break;
 80122dc:	bf00      	nop
  }

  return USBD_OK;
 80122de:	2300      	movs	r3, #0
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	889b      	ldrh	r3, [r3, #4]
 80122fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012304:	2b40      	cmp	r3, #64	; 0x40
 8012306:	d007      	beq.n	8012318 <USBD_StdEPReq+0x30>
 8012308:	2b40      	cmp	r3, #64	; 0x40
 801230a:	f200 8146 	bhi.w	801259a <USBD_StdEPReq+0x2b2>
 801230e:	2b00      	cmp	r3, #0
 8012310:	d00a      	beq.n	8012328 <USBD_StdEPReq+0x40>
 8012312:	2b20      	cmp	r3, #32
 8012314:	f040 8141 	bne.w	801259a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801231e:	689b      	ldr	r3, [r3, #8]
 8012320:	6839      	ldr	r1, [r7, #0]
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	4798      	blx	r3
      break;
 8012326:	e13d      	b.n	80125a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012330:	2b20      	cmp	r3, #32
 8012332:	d10a      	bne.n	801234a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801233a:	689b      	ldr	r3, [r3, #8]
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	4798      	blx	r3
 8012342:	4603      	mov	r3, r0
 8012344:	73fb      	strb	r3, [r7, #15]

        return ret;
 8012346:	7bfb      	ldrb	r3, [r7, #15]
 8012348:	e12d      	b.n	80125a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	785b      	ldrb	r3, [r3, #1]
 801234e:	2b03      	cmp	r3, #3
 8012350:	d007      	beq.n	8012362 <USBD_StdEPReq+0x7a>
 8012352:	2b03      	cmp	r3, #3
 8012354:	f300 811b 	bgt.w	801258e <USBD_StdEPReq+0x2a6>
 8012358:	2b00      	cmp	r3, #0
 801235a:	d072      	beq.n	8012442 <USBD_StdEPReq+0x15a>
 801235c:	2b01      	cmp	r3, #1
 801235e:	d03a      	beq.n	80123d6 <USBD_StdEPReq+0xee>
 8012360:	e115      	b.n	801258e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012368:	2b02      	cmp	r3, #2
 801236a:	d002      	beq.n	8012372 <USBD_StdEPReq+0x8a>
 801236c:	2b03      	cmp	r3, #3
 801236e:	d015      	beq.n	801239c <USBD_StdEPReq+0xb4>
 8012370:	e02b      	b.n	80123ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012372:	7bbb      	ldrb	r3, [r7, #14]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00c      	beq.n	8012392 <USBD_StdEPReq+0xaa>
 8012378:	7bbb      	ldrb	r3, [r7, #14]
 801237a:	2b80      	cmp	r3, #128	; 0x80
 801237c:	d009      	beq.n	8012392 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801237e:	7bbb      	ldrb	r3, [r7, #14]
 8012380:	4619      	mov	r1, r3
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f007 f924 	bl	80195d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012388:	2180      	movs	r1, #128	; 0x80
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f007 f920 	bl	80195d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012390:	e020      	b.n	80123d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fc1f 	bl	8012bd8 <USBD_CtlError>
              break;
 801239a:	e01b      	b.n	80123d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	885b      	ldrh	r3, [r3, #2]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10e      	bne.n	80123c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80123a4:	7bbb      	ldrb	r3, [r7, #14]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00b      	beq.n	80123c2 <USBD_StdEPReq+0xda>
 80123aa:	7bbb      	ldrb	r3, [r7, #14]
 80123ac:	2b80      	cmp	r3, #128	; 0x80
 80123ae:	d008      	beq.n	80123c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	88db      	ldrh	r3, [r3, #6]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d104      	bne.n	80123c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80123b8:	7bbb      	ldrb	r3, [r7, #14]
 80123ba:	4619      	mov	r1, r3
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f007 f907 	bl	80195d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 fcd1 	bl	8012d6a <USBD_CtlSendStatus>

              break;
 80123c8:	e004      	b.n	80123d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f000 fc03 	bl	8012bd8 <USBD_CtlError>
              break;
 80123d2:	bf00      	nop
          }
          break;
 80123d4:	e0e0      	b.n	8012598 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d002      	beq.n	80123e6 <USBD_StdEPReq+0xfe>
 80123e0:	2b03      	cmp	r3, #3
 80123e2:	d015      	beq.n	8012410 <USBD_StdEPReq+0x128>
 80123e4:	e026      	b.n	8012434 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80123e6:	7bbb      	ldrb	r3, [r7, #14]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00c      	beq.n	8012406 <USBD_StdEPReq+0x11e>
 80123ec:	7bbb      	ldrb	r3, [r7, #14]
 80123ee:	2b80      	cmp	r3, #128	; 0x80
 80123f0:	d009      	beq.n	8012406 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80123f2:	7bbb      	ldrb	r3, [r7, #14]
 80123f4:	4619      	mov	r1, r3
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f007 f8ea 	bl	80195d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80123fc:	2180      	movs	r1, #128	; 0x80
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f007 f8e6 	bl	80195d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012404:	e01c      	b.n	8012440 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8012406:	6839      	ldr	r1, [r7, #0]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fbe5 	bl	8012bd8 <USBD_CtlError>
              break;
 801240e:	e017      	b.n	8012440 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	885b      	ldrh	r3, [r3, #2]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d112      	bne.n	801243e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012418:	7bbb      	ldrb	r3, [r7, #14]
 801241a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801241e:	2b00      	cmp	r3, #0
 8012420:	d004      	beq.n	801242c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012422:	7bbb      	ldrb	r3, [r7, #14]
 8012424:	4619      	mov	r1, r3
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f007 f8f1 	bl	801960e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f000 fc9c 	bl	8012d6a <USBD_CtlSendStatus>
              }
              break;
 8012432:	e004      	b.n	801243e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fbce 	bl	8012bd8 <USBD_CtlError>
              break;
 801243c:	e000      	b.n	8012440 <USBD_StdEPReq+0x158>
              break;
 801243e:	bf00      	nop
          }
          break;
 8012440:	e0aa      	b.n	8012598 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012448:	2b02      	cmp	r3, #2
 801244a:	d002      	beq.n	8012452 <USBD_StdEPReq+0x16a>
 801244c:	2b03      	cmp	r3, #3
 801244e:	d032      	beq.n	80124b6 <USBD_StdEPReq+0x1ce>
 8012450:	e097      	b.n	8012582 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012452:	7bbb      	ldrb	r3, [r7, #14]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d007      	beq.n	8012468 <USBD_StdEPReq+0x180>
 8012458:	7bbb      	ldrb	r3, [r7, #14]
 801245a:	2b80      	cmp	r3, #128	; 0x80
 801245c:	d004      	beq.n	8012468 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801245e:	6839      	ldr	r1, [r7, #0]
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f000 fbb9 	bl	8012bd8 <USBD_CtlError>
                break;
 8012466:	e091      	b.n	801258c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801246c:	2b00      	cmp	r3, #0
 801246e:	da0b      	bge.n	8012488 <USBD_StdEPReq+0x1a0>
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012476:	4613      	mov	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	4413      	add	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	3310      	adds	r3, #16
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	4413      	add	r3, r2
 8012484:	3304      	adds	r3, #4
 8012486:	e00b      	b.n	80124a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801248e:	4613      	mov	r3, r2
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	4413      	add	r3, r2
 8012494:	009b      	lsls	r3, r3, #2
 8012496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	4413      	add	r3, r2
 801249e:	3304      	adds	r3, #4
 80124a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	2200      	movs	r2, #0
 80124a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2202      	movs	r2, #2
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 fbfd 	bl	8012cae <USBD_CtlSendData>
              break;
 80124b4:	e06a      	b.n	801258c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80124b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	da11      	bge.n	80124e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80124be:	7bbb      	ldrb	r3, [r7, #14]
 80124c0:	f003 020f 	and.w	r2, r3, #15
 80124c4:	6879      	ldr	r1, [r7, #4]
 80124c6:	4613      	mov	r3, r2
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	4413      	add	r3, r2
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	440b      	add	r3, r1
 80124d0:	3318      	adds	r3, #24
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d117      	bne.n	8012508 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80124d8:	6839      	ldr	r1, [r7, #0]
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f000 fb7c 	bl	8012bd8 <USBD_CtlError>
                  break;
 80124e0:	e054      	b.n	801258c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80124e2:	7bbb      	ldrb	r3, [r7, #14]
 80124e4:	f003 020f 	and.w	r2, r3, #15
 80124e8:	6879      	ldr	r1, [r7, #4]
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	440b      	add	r3, r1
 80124f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d104      	bne.n	8012508 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80124fe:	6839      	ldr	r1, [r7, #0]
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f000 fb69 	bl	8012bd8 <USBD_CtlError>
                  break;
 8012506:	e041      	b.n	801258c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801250c:	2b00      	cmp	r3, #0
 801250e:	da0b      	bge.n	8012528 <USBD_StdEPReq+0x240>
 8012510:	7bbb      	ldrb	r3, [r7, #14]
 8012512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012516:	4613      	mov	r3, r2
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	3310      	adds	r3, #16
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	4413      	add	r3, r2
 8012524:	3304      	adds	r3, #4
 8012526:	e00b      	b.n	8012540 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012528:	7bbb      	ldrb	r3, [r7, #14]
 801252a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	4413      	add	r3, r2
 801253e:	3304      	adds	r3, #4
 8012540:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012542:	7bbb      	ldrb	r3, [r7, #14]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <USBD_StdEPReq+0x266>
 8012548:	7bbb      	ldrb	r3, [r7, #14]
 801254a:	2b80      	cmp	r3, #128	; 0x80
 801254c:	d103      	bne.n	8012556 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	2200      	movs	r2, #0
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	e00e      	b.n	8012574 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8012556:	7bbb      	ldrb	r3, [r7, #14]
 8012558:	4619      	mov	r1, r3
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f007 f876 	bl	801964c <USBD_LL_IsStallEP>
 8012560:	4603      	mov	r3, r0
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	2201      	movs	r2, #1
 801256a:	601a      	str	r2, [r3, #0]
 801256c:	e002      	b.n	8012574 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2202      	movs	r2, #2
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 fb97 	bl	8012cae <USBD_CtlSendData>
              break;
 8012580:	e004      	b.n	801258c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8012582:	6839      	ldr	r1, [r7, #0]
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f000 fb27 	bl	8012bd8 <USBD_CtlError>
              break;
 801258a:	bf00      	nop
          }
          break;
 801258c:	e004      	b.n	8012598 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 fb21 	bl	8012bd8 <USBD_CtlError>
          break;
 8012596:	bf00      	nop
      }
      break;
 8012598:	e004      	b.n	80125a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801259a:	6839      	ldr	r1, [r7, #0]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fb1b 	bl	8012bd8 <USBD_CtlError>
      break;
 80125a2:	bf00      	nop
  }

  return ret;
 80125a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3710      	adds	r7, #16
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
	...

080125b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80125ba:	2300      	movs	r3, #0
 80125bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80125be:	2300      	movs	r3, #0
 80125c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80125c2:	2300      	movs	r3, #0
 80125c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	885b      	ldrh	r3, [r3, #2]
 80125ca:	0a1b      	lsrs	r3, r3, #8
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	3b01      	subs	r3, #1
 80125d0:	2b06      	cmp	r3, #6
 80125d2:	f200 8128 	bhi.w	8012826 <USBD_GetDescriptor+0x276>
 80125d6:	a201      	add	r2, pc, #4	; (adr r2, 80125dc <USBD_GetDescriptor+0x2c>)
 80125d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125dc:	080125f9 	.word	0x080125f9
 80125e0:	08012611 	.word	0x08012611
 80125e4:	08012651 	.word	0x08012651
 80125e8:	08012827 	.word	0x08012827
 80125ec:	08012827 	.word	0x08012827
 80125f0:	080127c7 	.word	0x080127c7
 80125f4:	080127f3 	.word	0x080127f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	7c12      	ldrb	r2, [r2, #16]
 8012604:	f107 0108 	add.w	r1, r7, #8
 8012608:	4610      	mov	r0, r2
 801260a:	4798      	blx	r3
 801260c:	60f8      	str	r0, [r7, #12]
      break;
 801260e:	e112      	b.n	8012836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7c1b      	ldrb	r3, [r3, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d10d      	bne.n	8012634 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012620:	f107 0208 	add.w	r2, r7, #8
 8012624:	4610      	mov	r0, r2
 8012626:	4798      	blx	r3
 8012628:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	3301      	adds	r3, #1
 801262e:	2202      	movs	r2, #2
 8012630:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012632:	e100      	b.n	8012836 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801263c:	f107 0208 	add.w	r2, r7, #8
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
 8012644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	3301      	adds	r3, #1
 801264a:	2202      	movs	r2, #2
 801264c:	701a      	strb	r2, [r3, #0]
      break;
 801264e:	e0f2      	b.n	8012836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	885b      	ldrh	r3, [r3, #2]
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b05      	cmp	r3, #5
 8012658:	f200 80ac 	bhi.w	80127b4 <USBD_GetDescriptor+0x204>
 801265c:	a201      	add	r2, pc, #4	; (adr r2, 8012664 <USBD_GetDescriptor+0xb4>)
 801265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012662:	bf00      	nop
 8012664:	0801267d 	.word	0x0801267d
 8012668:	080126b1 	.word	0x080126b1
 801266c:	080126e5 	.word	0x080126e5
 8012670:	08012719 	.word	0x08012719
 8012674:	0801274d 	.word	0x0801274d
 8012678:	08012781 	.word	0x08012781
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00b      	beq.n	80126a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801268e:	685b      	ldr	r3, [r3, #4]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	7c12      	ldrb	r2, [r2, #16]
 8012694:	f107 0108 	add.w	r1, r7, #8
 8012698:	4610      	mov	r0, r2
 801269a:	4798      	blx	r3
 801269c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801269e:	e091      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126a0:	6839      	ldr	r1, [r7, #0]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f000 fa98 	bl	8012bd8 <USBD_CtlError>
            err++;
 80126a8:	7afb      	ldrb	r3, [r7, #11]
 80126aa:	3301      	adds	r3, #1
 80126ac:	72fb      	strb	r3, [r7, #11]
          break;
 80126ae:	e089      	b.n	80127c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00b      	beq.n	80126d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	7c12      	ldrb	r2, [r2, #16]
 80126c8:	f107 0108 	add.w	r1, r7, #8
 80126cc:	4610      	mov	r0, r2
 80126ce:	4798      	blx	r3
 80126d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80126d2:	e077      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 fa7e 	bl	8012bd8 <USBD_CtlError>
            err++;
 80126dc:	7afb      	ldrb	r3, [r7, #11]
 80126de:	3301      	adds	r3, #1
 80126e0:	72fb      	strb	r3, [r7, #11]
          break;
 80126e2:	e06f      	b.n	80127c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d00b      	beq.n	8012708 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80126f6:	68db      	ldr	r3, [r3, #12]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	7c12      	ldrb	r2, [r2, #16]
 80126fc:	f107 0108 	add.w	r1, r7, #8
 8012700:	4610      	mov	r0, r2
 8012702:	4798      	blx	r3
 8012704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012706:	e05d      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012708:	6839      	ldr	r1, [r7, #0]
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fa64 	bl	8012bd8 <USBD_CtlError>
            err++;
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	3301      	adds	r3, #1
 8012714:	72fb      	strb	r3, [r7, #11]
          break;
 8012716:	e055      	b.n	80127c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801271e:	691b      	ldr	r3, [r3, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00b      	beq.n	801273c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	7c12      	ldrb	r2, [r2, #16]
 8012730:	f107 0108 	add.w	r1, r7, #8
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
 8012738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801273a:	e043      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fa4a 	bl	8012bd8 <USBD_CtlError>
            err++;
 8012744:	7afb      	ldrb	r3, [r7, #11]
 8012746:	3301      	adds	r3, #1
 8012748:	72fb      	strb	r3, [r7, #11]
          break;
 801274a:	e03b      	b.n	80127c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00b      	beq.n	8012770 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801275e:	695b      	ldr	r3, [r3, #20]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	7c12      	ldrb	r2, [r2, #16]
 8012764:	f107 0108 	add.w	r1, r7, #8
 8012768:	4610      	mov	r0, r2
 801276a:	4798      	blx	r3
 801276c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801276e:	e029      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012770:	6839      	ldr	r1, [r7, #0]
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 fa30 	bl	8012bd8 <USBD_CtlError>
            err++;
 8012778:	7afb      	ldrb	r3, [r7, #11]
 801277a:	3301      	adds	r3, #1
 801277c:	72fb      	strb	r3, [r7, #11]
          break;
 801277e:	e021      	b.n	80127c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00b      	beq.n	80127a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8012792:	699b      	ldr	r3, [r3, #24]
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	7c12      	ldrb	r2, [r2, #16]
 8012798:	f107 0108 	add.w	r1, r7, #8
 801279c:	4610      	mov	r0, r2
 801279e:	4798      	blx	r3
 80127a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80127a2:	e00f      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fa16 	bl	8012bd8 <USBD_CtlError>
            err++;
 80127ac:	7afb      	ldrb	r3, [r7, #11]
 80127ae:	3301      	adds	r3, #1
 80127b0:	72fb      	strb	r3, [r7, #11]
          break;
 80127b2:	e007      	b.n	80127c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80127b4:	6839      	ldr	r1, [r7, #0]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f000 fa0e 	bl	8012bd8 <USBD_CtlError>
          err++;
 80127bc:	7afb      	ldrb	r3, [r7, #11]
 80127be:	3301      	adds	r3, #1
 80127c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80127c2:	e038      	b.n	8012836 <USBD_GetDescriptor+0x286>
 80127c4:	e037      	b.n	8012836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	7c1b      	ldrb	r3, [r3, #16]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d109      	bne.n	80127e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d6:	f107 0208 	add.w	r2, r7, #8
 80127da:	4610      	mov	r0, r2
 80127dc:	4798      	blx	r3
 80127de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127e0:	e029      	b.n	8012836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80127e2:	6839      	ldr	r1, [r7, #0]
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f000 f9f7 	bl	8012bd8 <USBD_CtlError>
        err++;
 80127ea:	7afb      	ldrb	r3, [r7, #11]
 80127ec:	3301      	adds	r3, #1
 80127ee:	72fb      	strb	r3, [r7, #11]
      break;
 80127f0:	e021      	b.n	8012836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	7c1b      	ldrb	r3, [r3, #16]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10d      	bne.n	8012816 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012802:	f107 0208 	add.w	r2, r7, #8
 8012806:	4610      	mov	r0, r2
 8012808:	4798      	blx	r3
 801280a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	3301      	adds	r3, #1
 8012810:	2207      	movs	r2, #7
 8012812:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012814:	e00f      	b.n	8012836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f9dd 	bl	8012bd8 <USBD_CtlError>
        err++;
 801281e:	7afb      	ldrb	r3, [r7, #11]
 8012820:	3301      	adds	r3, #1
 8012822:	72fb      	strb	r3, [r7, #11]
      break;
 8012824:	e007      	b.n	8012836 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012826:	6839      	ldr	r1, [r7, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f9d5 	bl	8012bd8 <USBD_CtlError>
      err++;
 801282e:	7afb      	ldrb	r3, [r7, #11]
 8012830:	3301      	adds	r3, #1
 8012832:	72fb      	strb	r3, [r7, #11]
      break;
 8012834:	bf00      	nop
  }

  if (err != 0U)
 8012836:	7afb      	ldrb	r3, [r7, #11]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d11c      	bne.n	8012876 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801283c:	893b      	ldrh	r3, [r7, #8]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d011      	beq.n	8012866 <USBD_GetDescriptor+0x2b6>
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	88db      	ldrh	r3, [r3, #6]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00d      	beq.n	8012866 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	88da      	ldrh	r2, [r3, #6]
 801284e:	893b      	ldrh	r3, [r7, #8]
 8012850:	4293      	cmp	r3, r2
 8012852:	bf28      	it	cs
 8012854:	4613      	movcs	r3, r2
 8012856:	b29b      	uxth	r3, r3
 8012858:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801285a:	893b      	ldrh	r3, [r7, #8]
 801285c:	461a      	mov	r2, r3
 801285e:	68f9      	ldr	r1, [r7, #12]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fa24 	bl	8012cae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	88db      	ldrh	r3, [r3, #6]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d104      	bne.n	8012878 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 fa7b 	bl	8012d6a <USBD_CtlSendStatus>
 8012874:	e000      	b.n	8012878 <USBD_GetDescriptor+0x2c8>
    return;
 8012876:	bf00      	nop
    }
  }
}
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop

08012880 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	889b      	ldrh	r3, [r3, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d130      	bne.n	80128f4 <USBD_SetAddress+0x74>
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	88db      	ldrh	r3, [r3, #6]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d12c      	bne.n	80128f4 <USBD_SetAddress+0x74>
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	885b      	ldrh	r3, [r3, #2]
 801289e:	2b7f      	cmp	r3, #127	; 0x7f
 80128a0:	d828      	bhi.n	80128f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	885b      	ldrh	r3, [r3, #2]
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128b4:	2b03      	cmp	r3, #3
 80128b6:	d104      	bne.n	80128c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 f98c 	bl	8012bd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128c0:	e01d      	b.n	80128fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	7bfa      	ldrb	r2, [r7, #15]
 80128c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f006 fee9 	bl	80196a6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fa48 	bl	8012d6a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80128da:	7bfb      	ldrb	r3, [r7, #15]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2202      	movs	r2, #2
 80128e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128e8:	e009      	b.n	80128fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2201      	movs	r2, #1
 80128ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80128f2:	e004      	b.n	80128fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 f96e 	bl	8012bd8 <USBD_CtlError>
  }
}
 80128fc:	bf00      	nop
 80128fe:	bf00      	nop
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
	...

08012908 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	885b      	ldrh	r3, [r3, #2]
 8012916:	b2da      	uxtb	r2, r3
 8012918:	4b41      	ldr	r3, [pc, #260]	; (8012a20 <USBD_SetConfig+0x118>)
 801291a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801291c:	4b40      	ldr	r3, [pc, #256]	; (8012a20 <USBD_SetConfig+0x118>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d904      	bls.n	801292e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8012924:	6839      	ldr	r1, [r7, #0]
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f956 	bl	8012bd8 <USBD_CtlError>
 801292c:	e075      	b.n	8012a1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012934:	2b02      	cmp	r3, #2
 8012936:	d002      	beq.n	801293e <USBD_SetConfig+0x36>
 8012938:	2b03      	cmp	r3, #3
 801293a:	d023      	beq.n	8012984 <USBD_SetConfig+0x7c>
 801293c:	e062      	b.n	8012a04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801293e:	4b38      	ldr	r3, [pc, #224]	; (8012a20 <USBD_SetConfig+0x118>)
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d01a      	beq.n	801297c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8012946:	4b36      	ldr	r3, [pc, #216]	; (8012a20 <USBD_SetConfig+0x118>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	461a      	mov	r2, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2203      	movs	r2, #3
 8012954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8012958:	4b31      	ldr	r3, [pc, #196]	; (8012a20 <USBD_SetConfig+0x118>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	4619      	mov	r1, r3
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff f9e5 	bl	8011d2e <USBD_SetClassConfig>
 8012964:	4603      	mov	r3, r0
 8012966:	2b02      	cmp	r3, #2
 8012968:	d104      	bne.n	8012974 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801296a:	6839      	ldr	r1, [r7, #0]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 f933 	bl	8012bd8 <USBD_CtlError>
            return;
 8012972:	e052      	b.n	8012a1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f000 f9f8 	bl	8012d6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801297a:	e04e      	b.n	8012a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 f9f4 	bl	8012d6a <USBD_CtlSendStatus>
        break;
 8012982:	e04a      	b.n	8012a1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8012984:	4b26      	ldr	r3, [pc, #152]	; (8012a20 <USBD_SetConfig+0x118>)
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d112      	bne.n	80129b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2202      	movs	r2, #2
 8012990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8012994:	4b22      	ldr	r3, [pc, #136]	; (8012a20 <USBD_SetConfig+0x118>)
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	461a      	mov	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801299e:	4b20      	ldr	r3, [pc, #128]	; (8012a20 <USBD_SetConfig+0x118>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	4619      	mov	r1, r3
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f7ff f9e1 	bl	8011d6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f000 f9dd 	bl	8012d6a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80129b0:	e033      	b.n	8012a1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80129b2:	4b1b      	ldr	r3, [pc, #108]	; (8012a20 <USBD_SetConfig+0x118>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	461a      	mov	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d01d      	beq.n	80129fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	4619      	mov	r1, r3
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7ff f9cf 	bl	8011d6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80129ce:	4b14      	ldr	r3, [pc, #80]	; (8012a20 <USBD_SetConfig+0x118>)
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	461a      	mov	r2, r3
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80129d8:	4b11      	ldr	r3, [pc, #68]	; (8012a20 <USBD_SetConfig+0x118>)
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	4619      	mov	r1, r3
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7ff f9a5 	bl	8011d2e <USBD_SetClassConfig>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b02      	cmp	r3, #2
 80129e8:	d104      	bne.n	80129f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80129ea:	6839      	ldr	r1, [r7, #0]
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f000 f8f3 	bl	8012bd8 <USBD_CtlError>
            return;
 80129f2:	e012      	b.n	8012a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f9b8 	bl	8012d6a <USBD_CtlSendStatus>
        break;
 80129fa:	e00e      	b.n	8012a1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 f9b4 	bl	8012d6a <USBD_CtlSendStatus>
        break;
 8012a02:	e00a      	b.n	8012a1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8012a04:	6839      	ldr	r1, [r7, #0]
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 f8e6 	bl	8012bd8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8012a0c:	4b04      	ldr	r3, [pc, #16]	; (8012a20 <USBD_SetConfig+0x118>)
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	4619      	mov	r1, r3
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7ff f9aa 	bl	8011d6c <USBD_ClrClassConfig>
        break;
 8012a18:	bf00      	nop
    }
  }
}
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	2000968c 	.word	0x2000968c

08012a24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	88db      	ldrh	r3, [r3, #6]
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d004      	beq.n	8012a40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012a36:	6839      	ldr	r1, [r7, #0]
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f000 f8cd 	bl	8012bd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012a3e:	e022      	b.n	8012a86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	dc02      	bgt.n	8012a50 <USBD_GetConfig+0x2c>
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	dc03      	bgt.n	8012a56 <USBD_GetConfig+0x32>
 8012a4e:	e015      	b.n	8012a7c <USBD_GetConfig+0x58>
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d00b      	beq.n	8012a6c <USBD_GetConfig+0x48>
 8012a54:	e012      	b.n	8012a7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	2201      	movs	r2, #1
 8012a62:	4619      	mov	r1, r3
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f000 f922 	bl	8012cae <USBD_CtlSendData>
        break;
 8012a6a:	e00c      	b.n	8012a86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3304      	adds	r3, #4
 8012a70:	2201      	movs	r2, #1
 8012a72:	4619      	mov	r1, r3
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 f91a 	bl	8012cae <USBD_CtlSendData>
        break;
 8012a7a:	e004      	b.n	8012a86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8012a7c:	6839      	ldr	r1, [r7, #0]
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 f8aa 	bl	8012bd8 <USBD_CtlError>
        break;
 8012a84:	bf00      	nop
}
 8012a86:	bf00      	nop
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}

08012a8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b082      	sub	sp, #8
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	6078      	str	r0, [r7, #4]
 8012a96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	d81e      	bhi.n	8012ae2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	88db      	ldrh	r3, [r3, #6]
 8012aa8:	2b02      	cmp	r3, #2
 8012aaa:	d004      	beq.n	8012ab6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8012aac:	6839      	ldr	r1, [r7, #0]
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 f892 	bl	8012bd8 <USBD_CtlError>
        break;
 8012ab4:	e01a      	b.n	8012aec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d005      	beq.n	8012ad2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	f043 0202 	orr.w	r2, r3, #2
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	330c      	adds	r3, #12
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	4619      	mov	r1, r3
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f000 f8e7 	bl	8012cae <USBD_CtlSendData>
      break;
 8012ae0:	e004      	b.n	8012aec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8012ae2:	6839      	ldr	r1, [r7, #0]
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f000 f877 	bl	8012bd8 <USBD_CtlError>
      break;
 8012aea:	bf00      	nop
  }
}
 8012aec:	bf00      	nop
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	885b      	ldrh	r3, [r3, #2]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d106      	bne.n	8012b14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2201      	movs	r2, #1
 8012b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 f92b 	bl	8012d6a <USBD_CtlSendStatus>
  }
}
 8012b14:	bf00      	nop
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d80b      	bhi.n	8012b4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	885b      	ldrh	r3, [r3, #2]
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d10c      	bne.n	8012b54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 f911 	bl	8012d6a <USBD_CtlSendStatus>
      }
      break;
 8012b48:	e004      	b.n	8012b54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012b4a:	6839      	ldr	r1, [r7, #0]
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 f843 	bl	8012bd8 <USBD_CtlError>
      break;
 8012b52:	e000      	b.n	8012b56 <USBD_ClrFeature+0x3a>
      break;
 8012b54:	bf00      	nop
  }
}
 8012b56:	bf00      	nop
 8012b58:	3708      	adds	r7, #8
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}

08012b5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012b5e:	b480      	push	{r7}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	781a      	ldrb	r2, [r3, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	785a      	ldrb	r2, [r3, #1]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	3302      	adds	r3, #2
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	3303      	adds	r3, #3
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	021b      	lsls	r3, r3, #8
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4413      	add	r3, r2
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	3304      	adds	r3, #4
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	3305      	adds	r3, #5
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	021b      	lsls	r3, r3, #8
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	4413      	add	r3, r2
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	3306      	adds	r3, #6
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	3307      	adds	r3, #7
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	021b      	lsls	r3, r3, #8
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4413      	add	r3, r2
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	80da      	strh	r2, [r3, #6]

}
 8012bcc:	bf00      	nop
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012be2:	2180      	movs	r1, #128	; 0x80
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f006 fcf3 	bl	80195d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8012bea:	2100      	movs	r1, #0
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f006 fcef 	bl	80195d0 <USBD_LL_StallEP>
}
 8012bf2:	bf00      	nop
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	b086      	sub	sp, #24
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	60f8      	str	r0, [r7, #12]
 8012c02:	60b9      	str	r1, [r7, #8]
 8012c04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012c06:	2300      	movs	r3, #0
 8012c08:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d032      	beq.n	8012c76 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8012c10:	68f8      	ldr	r0, [r7, #12]
 8012c12:	f000 f834 	bl	8012c7e <USBD_GetLen>
 8012c16:	4603      	mov	r3, r0
 8012c18:	3301      	adds	r3, #1
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	005b      	lsls	r3, r3, #1
 8012c1e:	b29a      	uxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8012c24:	7dfb      	ldrb	r3, [r7, #23]
 8012c26:	1c5a      	adds	r2, r3, #1
 8012c28:	75fa      	strb	r2, [r7, #23]
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	4413      	add	r3, r2
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	7812      	ldrb	r2, [r2, #0]
 8012c34:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8012c36:	7dfb      	ldrb	r3, [r7, #23]
 8012c38:	1c5a      	adds	r2, r3, #1
 8012c3a:	75fa      	strb	r2, [r7, #23]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	4413      	add	r3, r2
 8012c42:	2203      	movs	r2, #3
 8012c44:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8012c46:	e012      	b.n	8012c6e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	1c5a      	adds	r2, r3, #1
 8012c4c:	60fa      	str	r2, [r7, #12]
 8012c4e:	7dfa      	ldrb	r2, [r7, #23]
 8012c50:	1c51      	adds	r1, r2, #1
 8012c52:	75f9      	strb	r1, [r7, #23]
 8012c54:	4611      	mov	r1, r2
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	440a      	add	r2, r1
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012c5e:	7dfb      	ldrb	r3, [r7, #23]
 8012c60:	1c5a      	adds	r2, r3, #1
 8012c62:	75fa      	strb	r2, [r7, #23]
 8012c64:	461a      	mov	r2, r3
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	4413      	add	r3, r2
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1e8      	bne.n	8012c48 <USBD_GetString+0x4e>
    }
  }
}
 8012c76:	bf00      	nop
 8012c78:	3718      	adds	r7, #24
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}

08012c7e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012c7e:	b480      	push	{r7}
 8012c80:	b085      	sub	sp, #20
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012c86:	2300      	movs	r3, #0
 8012c88:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8012c8a:	e005      	b.n	8012c98 <USBD_GetLen+0x1a>
  {
    len++;
 8012c8c:	7bfb      	ldrb	r3, [r7, #15]
 8012c8e:	3301      	adds	r3, #1
 8012c90:	73fb      	strb	r3, [r7, #15]
    buf++;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3301      	adds	r3, #1
 8012c96:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1f5      	bne.n	8012c8c <USBD_GetLen+0xe>
  }

  return len;
 8012ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3714      	adds	r7, #20
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b084      	sub	sp, #16
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	60f8      	str	r0, [r7, #12]
 8012cb6:	60b9      	str	r1, [r7, #8]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012cc4:	88fa      	ldrh	r2, [r7, #6]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012cca:	88fa      	ldrh	r2, [r7, #6]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012cd0:	88fb      	ldrh	r3, [r7, #6]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f006 fd04 	bl	80196e4 <USBD_LL_Transmit>

  return USBD_OK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b084      	sub	sp, #16
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	60f8      	str	r0, [r7, #12]
 8012cee:	60b9      	str	r1, [r7, #8]
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012cf4:	88fb      	ldrh	r3, [r7, #6]
 8012cf6:	68ba      	ldr	r2, [r7, #8]
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	68f8      	ldr	r0, [r7, #12]
 8012cfc:	f006 fcf2 	bl	80196e4 <USBD_LL_Transmit>

  return USBD_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	60f8      	str	r0, [r7, #12]
 8012d12:	60b9      	str	r1, [r7, #8]
 8012d14:	4613      	mov	r3, r2
 8012d16:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2203      	movs	r2, #3
 8012d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012d20:	88fa      	ldrh	r2, [r7, #6]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012d28:	88fa      	ldrh	r2, [r7, #6]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d30:	88fb      	ldrh	r3, [r7, #6]
 8012d32:	68ba      	ldr	r2, [r7, #8]
 8012d34:	2100      	movs	r1, #0
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f006 fcf7 	bl	801972a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3710      	adds	r7, #16
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b084      	sub	sp, #16
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	60f8      	str	r0, [r7, #12]
 8012d4e:	60b9      	str	r1, [r7, #8]
 8012d50:	4613      	mov	r3, r2
 8012d52:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012d54:	88fb      	ldrh	r3, [r7, #6]
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	2100      	movs	r1, #0
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f006 fce5 	bl	801972a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3710      	adds	r7, #16
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b082      	sub	sp, #8
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2204      	movs	r2, #4
 8012d76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	2100      	movs	r1, #0
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f006 fcaf 	bl	80196e4 <USBD_LL_Transmit>

  return USBD_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2205      	movs	r2, #5
 8012d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012da0:	2300      	movs	r3, #0
 8012da2:	2200      	movs	r2, #0
 8012da4:	2100      	movs	r1, #0
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f006 fcbf 	bl	801972a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3708      	adds	r7, #8
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
	...

08012db8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012dc2:	79fb      	ldrb	r3, [r7, #7]
 8012dc4:	4a08      	ldr	r2, [pc, #32]	; (8012de8 <disk_status+0x30>)
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	4413      	add	r3, r2
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	79fa      	ldrb	r2, [r7, #7]
 8012dd0:	4905      	ldr	r1, [pc, #20]	; (8012de8 <disk_status+0x30>)
 8012dd2:	440a      	add	r2, r1
 8012dd4:	7a12      	ldrb	r2, [r2, #8]
 8012dd6:	4610      	mov	r0, r2
 8012dd8:	4798      	blx	r3
 8012dda:	4603      	mov	r3, r0
 8012ddc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	20009a00 	.word	0x20009a00

08012dec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b084      	sub	sp, #16
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	4603      	mov	r3, r0
 8012df4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012df6:	2300      	movs	r3, #0
 8012df8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8012dfa:	79fb      	ldrb	r3, [r7, #7]
 8012dfc:	4a0d      	ldr	r2, [pc, #52]	; (8012e34 <disk_initialize+0x48>)
 8012dfe:	5cd3      	ldrb	r3, [r2, r3]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d111      	bne.n	8012e28 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8012e04:	79fb      	ldrb	r3, [r7, #7]
 8012e06:	4a0b      	ldr	r2, [pc, #44]	; (8012e34 <disk_initialize+0x48>)
 8012e08:	2101      	movs	r1, #1
 8012e0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012e0c:	79fb      	ldrb	r3, [r7, #7]
 8012e0e:	4a09      	ldr	r2, [pc, #36]	; (8012e34 <disk_initialize+0x48>)
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	79fa      	ldrb	r2, [r7, #7]
 8012e1a:	4906      	ldr	r1, [pc, #24]	; (8012e34 <disk_initialize+0x48>)
 8012e1c:	440a      	add	r2, r1
 8012e1e:	7a12      	ldrb	r2, [r2, #8]
 8012e20:	4610      	mov	r0, r2
 8012e22:	4798      	blx	r3
 8012e24:	4603      	mov	r3, r0
 8012e26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	20009a00 	.word	0x20009a00

08012e38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012e38:	b590      	push	{r4, r7, lr}
 8012e3a:	b087      	sub	sp, #28
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60b9      	str	r1, [r7, #8]
 8012e40:	607a      	str	r2, [r7, #4]
 8012e42:	603b      	str	r3, [r7, #0]
 8012e44:	4603      	mov	r3, r0
 8012e46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012e48:	7bfb      	ldrb	r3, [r7, #15]
 8012e4a:	4a0a      	ldr	r2, [pc, #40]	; (8012e74 <disk_read+0x3c>)
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	4413      	add	r3, r2
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	689c      	ldr	r4, [r3, #8]
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
 8012e56:	4a07      	ldr	r2, [pc, #28]	; (8012e74 <disk_read+0x3c>)
 8012e58:	4413      	add	r3, r2
 8012e5a:	7a18      	ldrb	r0, [r3, #8]
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	68b9      	ldr	r1, [r7, #8]
 8012e62:	47a0      	blx	r4
 8012e64:	4603      	mov	r3, r0
 8012e66:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	371c      	adds	r7, #28
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd90      	pop	{r4, r7, pc}
 8012e72:	bf00      	nop
 8012e74:	20009a00 	.word	0x20009a00

08012e78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012e78:	b590      	push	{r4, r7, lr}
 8012e7a:	b087      	sub	sp, #28
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	60b9      	str	r1, [r7, #8]
 8012e80:	607a      	str	r2, [r7, #4]
 8012e82:	603b      	str	r3, [r7, #0]
 8012e84:	4603      	mov	r3, r0
 8012e86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012e88:	7bfb      	ldrb	r3, [r7, #15]
 8012e8a:	4a0a      	ldr	r2, [pc, #40]	; (8012eb4 <disk_write+0x3c>)
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	4413      	add	r3, r2
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	68dc      	ldr	r4, [r3, #12]
 8012e94:	7bfb      	ldrb	r3, [r7, #15]
 8012e96:	4a07      	ldr	r2, [pc, #28]	; (8012eb4 <disk_write+0x3c>)
 8012e98:	4413      	add	r3, r2
 8012e9a:	7a18      	ldrb	r0, [r3, #8]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	687a      	ldr	r2, [r7, #4]
 8012ea0:	68b9      	ldr	r1, [r7, #8]
 8012ea2:	47a0      	blx	r4
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	75fb      	strb	r3, [r7, #23]
  return res;
 8012ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	371c      	adds	r7, #28
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd90      	pop	{r4, r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20009a00 	.word	0x20009a00

08012eb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	603a      	str	r2, [r7, #0]
 8012ec2:	71fb      	strb	r3, [r7, #7]
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012ec8:	79fb      	ldrb	r3, [r7, #7]
 8012eca:	4a09      	ldr	r2, [pc, #36]	; (8012ef0 <disk_ioctl+0x38>)
 8012ecc:	009b      	lsls	r3, r3, #2
 8012ece:	4413      	add	r3, r2
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	691b      	ldr	r3, [r3, #16]
 8012ed4:	79fa      	ldrb	r2, [r7, #7]
 8012ed6:	4906      	ldr	r1, [pc, #24]	; (8012ef0 <disk_ioctl+0x38>)
 8012ed8:	440a      	add	r2, r1
 8012eda:	7a10      	ldrb	r0, [r2, #8]
 8012edc:	79b9      	ldrb	r1, [r7, #6]
 8012ede:	683a      	ldr	r2, [r7, #0]
 8012ee0:	4798      	blx	r3
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]
  return res;
 8012ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3710      	adds	r7, #16
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	20009a00 	.word	0x20009a00

08012ef4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ef4:	b480      	push	{r7}
 8012ef6:	b087      	sub	sp, #28
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8012f08:	e007      	b.n	8012f1a <mem_cpy+0x26>
		*d++ = *s++;
 8012f0a:	693a      	ldr	r2, [r7, #16]
 8012f0c:	1c53      	adds	r3, r2, #1
 8012f0e:	613b      	str	r3, [r7, #16]
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	1c59      	adds	r1, r3, #1
 8012f14:	6179      	str	r1, [r7, #20]
 8012f16:	7812      	ldrb	r2, [r2, #0]
 8012f18:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	1e5a      	subs	r2, r3, #1
 8012f1e:	607a      	str	r2, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d1f2      	bne.n	8012f0a <mem_cpy+0x16>
}
 8012f24:	bf00      	nop
 8012f26:	bf00      	nop
 8012f28:	371c      	adds	r7, #28
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr

08012f32 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012f32:	b480      	push	{r7}
 8012f34:	b087      	sub	sp, #28
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	60f8      	str	r0, [r7, #12]
 8012f3a:	60b9      	str	r1, [r7, #8]
 8012f3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8012f42:	e005      	b.n	8012f50 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	617a      	str	r2, [r7, #20]
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	b2d2      	uxtb	r2, r2
 8012f4e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	1e5a      	subs	r2, r3, #1
 8012f54:	607a      	str	r2, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d1f4      	bne.n	8012f44 <mem_set+0x12>
}
 8012f5a:	bf00      	nop
 8012f5c:	bf00      	nop
 8012f5e:	371c      	adds	r7, #28
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr

08012f68 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8012f68:	b480      	push	{r7}
 8012f6a:	b089      	sub	sp, #36	; 0x24
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	61fb      	str	r3, [r7, #28]
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8012f80:	bf00      	nop
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	1e5a      	subs	r2, r3, #1
 8012f86:	607a      	str	r2, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d00d      	beq.n	8012fa8 <mem_cmp+0x40>
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	1c5a      	adds	r2, r3, #1
 8012f90:	61fa      	str	r2, [r7, #28]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	4619      	mov	r1, r3
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	1c5a      	adds	r2, r3, #1
 8012f9a:	61ba      	str	r2, [r7, #24]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	1acb      	subs	r3, r1, r3
 8012fa0:	617b      	str	r3, [r7, #20]
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d0ec      	beq.n	8012f82 <mem_cmp+0x1a>
	return r;
 8012fa8:	697b      	ldr	r3, [r7, #20]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3724      	adds	r7, #36	; 0x24
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr

08012fb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8012fb6:	b480      	push	{r7}
 8012fb8:	b083      	sub	sp, #12
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
 8012fbe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012fc0:	e002      	b.n	8012fc8 <chk_chr+0x12>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	607b      	str	r3, [r7, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d005      	beq.n	8012fdc <chk_chr+0x26>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d1f2      	bne.n	8012fc2 <chk_chr+0xc>
	return *str;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	781b      	ldrb	r3, [r3, #0]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	370c      	adds	r7, #12
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr

08012fec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fec:	b480      	push	{r7}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	60bb      	str	r3, [r7, #8]
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	60fb      	str	r3, [r7, #12]
 8012ffe:	e038      	b.n	8013072 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8013000:	4930      	ldr	r1, [pc, #192]	; (80130c4 <chk_lock+0xd8>)
 8013002:	68fa      	ldr	r2, [r7, #12]
 8013004:	4613      	mov	r3, r2
 8013006:	005b      	lsls	r3, r3, #1
 8013008:	4413      	add	r3, r2
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	440b      	add	r3, r1
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d029      	beq.n	8013068 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8013014:	492b      	ldr	r1, [pc, #172]	; (80130c4 <chk_lock+0xd8>)
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	440b      	add	r3, r1
 8013022:	681a      	ldr	r2, [r3, #0]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801302a:	429a      	cmp	r2, r3
 801302c:	d11e      	bne.n	801306c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 801302e:	4925      	ldr	r1, [pc, #148]	; (80130c4 <chk_lock+0xd8>)
 8013030:	68fa      	ldr	r2, [r7, #12]
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	440b      	add	r3, r1
 801303c:	3304      	adds	r3, #4
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8013046:	429a      	cmp	r2, r3
 8013048:	d110      	bne.n	801306c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801304a:	491e      	ldr	r1, [pc, #120]	; (80130c4 <chk_lock+0xd8>)
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	4613      	mov	r3, r2
 8013050:	005b      	lsls	r3, r3, #1
 8013052:	4413      	add	r3, r2
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	440b      	add	r3, r1
 8013058:	3308      	adds	r3, #8
 801305a:	881a      	ldrh	r2, [r3, #0]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8013062:	429a      	cmp	r2, r3
 8013064:	d102      	bne.n	801306c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8013066:	e007      	b.n	8013078 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8013068:	2301      	movs	r3, #1
 801306a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	3301      	adds	r3, #1
 8013070:	60fb      	str	r3, [r7, #12]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2b1d      	cmp	r3, #29
 8013076:	d9c3      	bls.n	8013000 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b1e      	cmp	r3, #30
 801307c:	d109      	bne.n	8013092 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d102      	bne.n	801308a <chk_lock+0x9e>
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	2b02      	cmp	r3, #2
 8013088:	d101      	bne.n	801308e <chk_lock+0xa2>
 801308a:	2300      	movs	r3, #0
 801308c:	e013      	b.n	80130b6 <chk_lock+0xca>
 801308e:	2312      	movs	r3, #18
 8013090:	e011      	b.n	80130b6 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10b      	bne.n	80130b0 <chk_lock+0xc4>
 8013098:	490a      	ldr	r1, [pc, #40]	; (80130c4 <chk_lock+0xd8>)
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	4613      	mov	r3, r2
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	440b      	add	r3, r1
 80130a6:	330a      	adds	r3, #10
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130ae:	d101      	bne.n	80130b4 <chk_lock+0xc8>
 80130b0:	2310      	movs	r3, #16
 80130b2:	e000      	b.n	80130b6 <chk_lock+0xca>
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3714      	adds	r7, #20
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	20009698 	.word	0x20009698

080130c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80130ce:	2300      	movs	r3, #0
 80130d0:	607b      	str	r3, [r7, #4]
 80130d2:	e002      	b.n	80130da <enq_lock+0x12>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	3301      	adds	r3, #1
 80130d8:	607b      	str	r3, [r7, #4]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2b1d      	cmp	r3, #29
 80130de:	d809      	bhi.n	80130f4 <enq_lock+0x2c>
 80130e0:	490a      	ldr	r1, [pc, #40]	; (801310c <enq_lock+0x44>)
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	4613      	mov	r3, r2
 80130e6:	005b      	lsls	r3, r3, #1
 80130e8:	4413      	add	r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	440b      	add	r3, r1
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d1ef      	bne.n	80130d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b1e      	cmp	r3, #30
 80130f8:	bf14      	ite	ne
 80130fa:	2301      	movne	r3, #1
 80130fc:	2300      	moveq	r3, #0
 80130fe:	b2db      	uxtb	r3, r3
}
 8013100:	4618      	mov	r0, r3
 8013102:	370c      	adds	r7, #12
 8013104:	46bd      	mov	sp, r7
 8013106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310a:	4770      	bx	lr
 801310c:	20009698 	.word	0x20009698

08013110 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801311a:	2300      	movs	r3, #0
 801311c:	60fb      	str	r3, [r7, #12]
 801311e:	e02b      	b.n	8013178 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8013120:	4956      	ldr	r1, [pc, #344]	; (801327c <inc_lock+0x16c>)
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	440b      	add	r3, r1
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013136:	429a      	cmp	r2, r3
 8013138:	d11b      	bne.n	8013172 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801313a:	4950      	ldr	r1, [pc, #320]	; (801327c <inc_lock+0x16c>)
 801313c:	68fa      	ldr	r2, [r7, #12]
 801313e:	4613      	mov	r3, r2
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	4413      	add	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	440b      	add	r3, r1
 8013148:	3304      	adds	r3, #4
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8013152:	429a      	cmp	r2, r3
 8013154:	d10d      	bne.n	8013172 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8013156:	4949      	ldr	r1, [pc, #292]	; (801327c <inc_lock+0x16c>)
 8013158:	68fa      	ldr	r2, [r7, #12]
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	440b      	add	r3, r1
 8013164:	3308      	adds	r3, #8
 8013166:	881a      	ldrh	r2, [r3, #0]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 801316e:	429a      	cmp	r2, r3
 8013170:	d006      	beq.n	8013180 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	3301      	adds	r3, #1
 8013176:	60fb      	str	r3, [r7, #12]
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2b1d      	cmp	r3, #29
 801317c:	d9d0      	bls.n	8013120 <inc_lock+0x10>
 801317e:	e000      	b.n	8013182 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8013180:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b1e      	cmp	r3, #30
 8013186:	d145      	bne.n	8013214 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013188:	2300      	movs	r3, #0
 801318a:	60fb      	str	r3, [r7, #12]
 801318c:	e002      	b.n	8013194 <inc_lock+0x84>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	3301      	adds	r3, #1
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2b1d      	cmp	r3, #29
 8013198:	d809      	bhi.n	80131ae <inc_lock+0x9e>
 801319a:	4938      	ldr	r1, [pc, #224]	; (801327c <inc_lock+0x16c>)
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	4613      	mov	r3, r2
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	4413      	add	r3, r2
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	440b      	add	r3, r1
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1ef      	bne.n	801318e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b1e      	cmp	r3, #30
 80131b2:	d101      	bne.n	80131b8 <inc_lock+0xa8>
 80131b4:	2300      	movs	r3, #0
 80131b6:	e05a      	b.n	801326e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80131be:	482f      	ldr	r0, [pc, #188]	; (801327c <inc_lock+0x16c>)
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	4613      	mov	r3, r2
 80131c4:	005b      	lsls	r3, r3, #1
 80131c6:	4413      	add	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	4403      	add	r3, r0
 80131cc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80131d4:	4829      	ldr	r0, [pc, #164]	; (801327c <inc_lock+0x16c>)
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	4613      	mov	r3, r2
 80131da:	005b      	lsls	r3, r3, #1
 80131dc:	4413      	add	r3, r2
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	4403      	add	r3, r0
 80131e2:	3304      	adds	r3, #4
 80131e4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80131ec:	4923      	ldr	r1, [pc, #140]	; (801327c <inc_lock+0x16c>)
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	4613      	mov	r3, r2
 80131f2:	005b      	lsls	r3, r3, #1
 80131f4:	4413      	add	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	440b      	add	r3, r1
 80131fa:	3308      	adds	r3, #8
 80131fc:	4602      	mov	r2, r0
 80131fe:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8013200:	491e      	ldr	r1, [pc, #120]	; (801327c <inc_lock+0x16c>)
 8013202:	68fa      	ldr	r2, [r7, #12]
 8013204:	4613      	mov	r3, r2
 8013206:	005b      	lsls	r3, r3, #1
 8013208:	4413      	add	r3, r2
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	440b      	add	r3, r1
 801320e:	330a      	adds	r3, #10
 8013210:	2200      	movs	r2, #0
 8013212:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00c      	beq.n	8013234 <inc_lock+0x124>
 801321a:	4918      	ldr	r1, [pc, #96]	; (801327c <inc_lock+0x16c>)
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	4613      	mov	r3, r2
 8013220:	005b      	lsls	r3, r3, #1
 8013222:	4413      	add	r3, r2
 8013224:	009b      	lsls	r3, r3, #2
 8013226:	440b      	add	r3, r1
 8013228:	330a      	adds	r3, #10
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d001      	beq.n	8013234 <inc_lock+0x124>
 8013230:	2300      	movs	r3, #0
 8013232:	e01c      	b.n	801326e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d10b      	bne.n	8013252 <inc_lock+0x142>
 801323a:	4910      	ldr	r1, [pc, #64]	; (801327c <inc_lock+0x16c>)
 801323c:	68fa      	ldr	r2, [r7, #12]
 801323e:	4613      	mov	r3, r2
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	440b      	add	r3, r1
 8013248:	330a      	adds	r3, #10
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	3301      	adds	r3, #1
 801324e:	b299      	uxth	r1, r3
 8013250:	e001      	b.n	8013256 <inc_lock+0x146>
 8013252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013256:	4809      	ldr	r0, [pc, #36]	; (801327c <inc_lock+0x16c>)
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	4613      	mov	r3, r2
 801325c:	005b      	lsls	r3, r3, #1
 801325e:	4413      	add	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	4403      	add	r3, r0
 8013264:	330a      	adds	r3, #10
 8013266:	460a      	mov	r2, r1
 8013268:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	3301      	adds	r3, #1
}
 801326e:	4618      	mov	r0, r3
 8013270:	3714      	adds	r7, #20
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	20009698 	.word	0x20009698

08013280 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013280:	b480      	push	{r7}
 8013282:	b085      	sub	sp, #20
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	3b01      	subs	r3, #1
 801328c:	607b      	str	r3, [r7, #4]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b1d      	cmp	r3, #29
 8013292:	d82e      	bhi.n	80132f2 <dec_lock+0x72>
		n = Files[i].ctr;
 8013294:	491b      	ldr	r1, [pc, #108]	; (8013304 <dec_lock+0x84>)
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	4613      	mov	r3, r2
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	4413      	add	r3, r2
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	440b      	add	r3, r1
 80132a2:	330a      	adds	r3, #10
 80132a4:	881b      	ldrh	r3, [r3, #0]
 80132a6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80132a8:	89fb      	ldrh	r3, [r7, #14]
 80132aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80132ae:	d101      	bne.n	80132b4 <dec_lock+0x34>
 80132b0:	2300      	movs	r3, #0
 80132b2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80132b4:	89fb      	ldrh	r3, [r7, #14]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d002      	beq.n	80132c0 <dec_lock+0x40>
 80132ba:	89fb      	ldrh	r3, [r7, #14]
 80132bc:	3b01      	subs	r3, #1
 80132be:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80132c0:	4910      	ldr	r1, [pc, #64]	; (8013304 <dec_lock+0x84>)
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	4613      	mov	r3, r2
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	4413      	add	r3, r2
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	440b      	add	r3, r1
 80132ce:	330a      	adds	r3, #10
 80132d0:	89fa      	ldrh	r2, [r7, #14]
 80132d2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80132d4:	89fb      	ldrh	r3, [r7, #14]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d108      	bne.n	80132ec <dec_lock+0x6c>
 80132da:	490a      	ldr	r1, [pc, #40]	; (8013304 <dec_lock+0x84>)
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	4613      	mov	r3, r2
 80132e0:	005b      	lsls	r3, r3, #1
 80132e2:	4413      	add	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	440b      	add	r3, r1
 80132e8:	2200      	movs	r2, #0
 80132ea:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80132ec:	2300      	movs	r3, #0
 80132ee:	737b      	strb	r3, [r7, #13]
 80132f0:	e001      	b.n	80132f6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80132f2:	2302      	movs	r3, #2
 80132f4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80132f6:	7b7b      	ldrb	r3, [r7, #13]
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3714      	adds	r7, #20
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr
 8013304:	20009698 	.word	0x20009698

08013308 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013308:	b480      	push	{r7}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]
 8013314:	e016      	b.n	8013344 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013316:	4910      	ldr	r1, [pc, #64]	; (8013358 <clear_lock+0x50>)
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	4613      	mov	r3, r2
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	4413      	add	r3, r2
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	440b      	add	r3, r1
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	687a      	ldr	r2, [r7, #4]
 8013328:	429a      	cmp	r2, r3
 801332a:	d108      	bne.n	801333e <clear_lock+0x36>
 801332c:	490a      	ldr	r1, [pc, #40]	; (8013358 <clear_lock+0x50>)
 801332e:	68fa      	ldr	r2, [r7, #12]
 8013330:	4613      	mov	r3, r2
 8013332:	005b      	lsls	r3, r3, #1
 8013334:	4413      	add	r3, r2
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	440b      	add	r3, r1
 801333a:	2200      	movs	r2, #0
 801333c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3301      	adds	r3, #1
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b1d      	cmp	r3, #29
 8013348:	d9e5      	bls.n	8013316 <clear_lock+0xe>
	}
}
 801334a:	bf00      	nop
 801334c:	bf00      	nop
 801334e:	3714      	adds	r7, #20
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr
 8013358:	20009698 	.word	0x20009698

0801335c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b086      	sub	sp, #24
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 801336e:	2b00      	cmp	r3, #0
 8013370:	d038      	beq.n	80133e4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8013378:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8013380:	6879      	ldr	r1, [r7, #4]
 8013382:	2301      	movs	r3, #1
 8013384:	697a      	ldr	r2, [r7, #20]
 8013386:	f7ff fd77 	bl	8012e78 <disk_write>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8013390:	2301      	movs	r3, #1
 8013392:	73fb      	strb	r3, [r7, #15]
 8013394:	e026      	b.n	80133e4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80133a4:	697a      	ldr	r2, [r7, #20]
 80133a6:	1ad2      	subs	r2, r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d218      	bcs.n	80133e4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	e010      	b.n	80133de <sync_window+0x82>
					wsect += fs->fsize;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80133c2:	697a      	ldr	r2, [r7, #20]
 80133c4:	4413      	add	r3, r2
 80133c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80133ce:	6879      	ldr	r1, [r7, #4]
 80133d0:	2301      	movs	r3, #1
 80133d2:	697a      	ldr	r2, [r7, #20]
 80133d4:	f7ff fd50 	bl	8012e78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	3b01      	subs	r3, #1
 80133dc:	613b      	str	r3, [r7, #16]
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d8eb      	bhi.n	80133bc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3718      	adds	r7, #24
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b084      	sub	sp, #16
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
 80133f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80133f8:	2300      	movs	r3, #0
 80133fa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	429a      	cmp	r2, r3
 8013406:	d01b      	beq.n	8013440 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ff ffa7 	bl	801335c <sync_window>
 801340e:	4603      	mov	r3, r0
 8013410:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013412:	7bfb      	ldrb	r3, [r7, #15]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d113      	bne.n	8013440 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801341e:	6879      	ldr	r1, [r7, #4]
 8013420:	2301      	movs	r3, #1
 8013422:	683a      	ldr	r2, [r7, #0]
 8013424:	f7ff fd08 	bl	8012e38 <disk_read>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d004      	beq.n	8013438 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801342e:	f04f 33ff 	mov.w	r3, #4294967295
 8013432:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013434:	2301      	movs	r3, #1
 8013436:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8013440:	7bfb      	ldrb	r3, [r7, #15]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 801344a:	b580      	push	{r7, lr}
 801344c:	b084      	sub	sp, #16
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f7ff ff82 	bl	801335c <sync_window>
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801345c:	7bfb      	ldrb	r3, [r7, #15]
 801345e:	2b00      	cmp	r3, #0
 8013460:	f040 809b 	bne.w	801359a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801346a:	2b03      	cmp	r3, #3
 801346c:	f040 8088 	bne.w	8013580 <sync_fs+0x136>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8013476:	2b01      	cmp	r3, #1
 8013478:	f040 8082 	bne.w	8013580 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013482:	2100      	movs	r1, #0
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff fd54 	bl	8012f32 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2255      	movs	r2, #85	; 0x55
 801348e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	22aa      	movs	r2, #170	; 0xaa
 8013496:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2252      	movs	r2, #82	; 0x52
 801349e:	701a      	strb	r2, [r3, #0]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2252      	movs	r2, #82	; 0x52
 80134a4:	705a      	strb	r2, [r3, #1]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2261      	movs	r2, #97	; 0x61
 80134aa:	709a      	strb	r2, [r3, #2]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2241      	movs	r2, #65	; 0x41
 80134b0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2272      	movs	r2, #114	; 0x72
 80134b6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2272      	movs	r2, #114	; 0x72
 80134be:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2241      	movs	r2, #65	; 0x41
 80134c6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2261      	movs	r2, #97	; 0x61
 80134ce:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80134d8:	b2da      	uxtb	r2, r3
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	0a1b      	lsrs	r3, r3, #8
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80134fa:	0c1b      	lsrs	r3, r3, #16
 80134fc:	b2da      	uxtb	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801350a:	0e1b      	lsrs	r3, r3, #24
 801350c:	b2da      	uxtb	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801351a:	b2da      	uxtb	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013528:	b29b      	uxth	r3, r3
 801352a:	0a1b      	lsrs	r3, r3, #8
 801352c:	b29b      	uxth	r3, r3
 801352e:	b2da      	uxtb	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801353c:	0c1b      	lsrs	r3, r3, #16
 801353e:	b2da      	uxtb	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801354c:	0e1b      	lsrs	r3, r3, #24
 801354e:	b2da      	uxtb	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801356a:	6879      	ldr	r1, [r7, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8013572:	2301      	movs	r3, #1
 8013574:	f7ff fc80 	bl	8012e78 <disk_write>
			fs->fsi_flag = 0;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2200      	movs	r2, #0
 801357c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013586:	2200      	movs	r2, #0
 8013588:	2100      	movs	r1, #0
 801358a:	4618      	mov	r0, r3
 801358c:	f7ff fc94 	bl	8012eb8 <disk_ioctl>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d001      	beq.n	801359a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8013596:	2301      	movs	r3, #1
 8013598:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801359a:	7bfb      	ldrb	r3, [r7, #15]
}
 801359c:	4618      	mov	r0, r3
 801359e:	3710      	adds	r7, #16
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	3b02      	subs	r3, #2
 80135b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80135ba:	3b02      	subs	r3, #2
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	429a      	cmp	r2, r3
 80135c0:	d301      	bcc.n	80135c6 <clust2sect+0x22>
 80135c2:	2300      	movs	r3, #0
 80135c4:	e00a      	b.n	80135dc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80135cc:	461a      	mov	r2, r3
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	fb03 f202 	mul.w	r2, r3, r2
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80135da:	4413      	add	r3, r2
}
 80135dc:	4618      	mov	r0, r3
 80135de:	370c      	adds	r7, #12
 80135e0:	46bd      	mov	sp, r7
 80135e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e6:	4770      	bx	lr

080135e8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b086      	sub	sp, #24
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	2b01      	cmp	r3, #1
 80135f6:	d905      	bls.n	8013604 <get_fat+0x1c>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80135fe:	683a      	ldr	r2, [r7, #0]
 8013600:	429a      	cmp	r2, r3
 8013602:	d302      	bcc.n	801360a <get_fat+0x22>
		val = 1;	/* Internal error */
 8013604:	2301      	movs	r3, #1
 8013606:	617b      	str	r3, [r7, #20]
 8013608:	e0a3      	b.n	8013752 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801360a:	f04f 33ff 	mov.w	r3, #4294967295
 801360e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013616:	2b03      	cmp	r3, #3
 8013618:	d068      	beq.n	80136ec <get_fat+0x104>
 801361a:	2b03      	cmp	r3, #3
 801361c:	f300 808f 	bgt.w	801373e <get_fat+0x156>
 8013620:	2b01      	cmp	r3, #1
 8013622:	d002      	beq.n	801362a <get_fat+0x42>
 8013624:	2b02      	cmp	r3, #2
 8013626:	d040      	beq.n	80136aa <get_fat+0xc2>
 8013628:	e089      	b.n	801373e <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	60fb      	str	r3, [r7, #12]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	085b      	lsrs	r3, r3, #1
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	4413      	add	r3, r2
 8013636:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	0a5b      	lsrs	r3, r3, #9
 8013642:	4413      	add	r3, r2
 8013644:	4619      	mov	r1, r3
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7ff fed1 	bl	80133ee <move_window>
 801364c:	4603      	mov	r3, r0
 801364e:	2b00      	cmp	r3, #0
 8013650:	d178      	bne.n	8013744 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	1c5a      	adds	r2, r3, #1
 8013656:	60fa      	str	r2, [r7, #12]
 8013658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	5cd3      	ldrb	r3, [r2, r3]
 8013660:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	0a5b      	lsrs	r3, r3, #9
 801366c:	4413      	add	r3, r2
 801366e:	4619      	mov	r1, r3
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7ff febc 	bl	80133ee <move_window>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d165      	bne.n	8013748 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	5cd3      	ldrb	r3, [r2, r3]
 8013686:	021b      	lsls	r3, r3, #8
 8013688:	461a      	mov	r2, r3
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	4313      	orrs	r3, r2
 801368e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	2b00      	cmp	r3, #0
 8013698:	d002      	beq.n	80136a0 <get_fat+0xb8>
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	091b      	lsrs	r3, r3, #4
 801369e:	e002      	b.n	80136a6 <get_fat+0xbe>
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80136a6:	617b      	str	r3, [r7, #20]
			break;
 80136a8:	e053      	b.n	8013752 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	0a1b      	lsrs	r3, r3, #8
 80136b4:	4413      	add	r3, r2
 80136b6:	4619      	mov	r1, r3
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7ff fe98 	bl	80133ee <move_window>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d143      	bne.n	801374c <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	005b      	lsls	r3, r3, #1
 80136c8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	4413      	add	r3, r2
 80136d0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	3301      	adds	r3, #1
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	021b      	lsls	r3, r3, #8
 80136da:	b21a      	sxth	r2, r3
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	b21b      	sxth	r3, r3
 80136e2:	4313      	orrs	r3, r2
 80136e4:	b21b      	sxth	r3, r3
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	617b      	str	r3, [r7, #20]
			break;
 80136ea:	e032      	b.n	8013752 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	09db      	lsrs	r3, r3, #7
 80136f6:	4413      	add	r3, r2
 80136f8:	4619      	mov	r1, r3
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f7ff fe77 	bl	80133ee <move_window>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d124      	bne.n	8013750 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	009b      	lsls	r3, r3, #2
 801370a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	4413      	add	r3, r2
 8013712:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	3303      	adds	r3, #3
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	061a      	lsls	r2, r3, #24
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	3302      	adds	r3, #2
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	041b      	lsls	r3, r3, #16
 8013724:	4313      	orrs	r3, r2
 8013726:	693a      	ldr	r2, [r7, #16]
 8013728:	3201      	adds	r2, #1
 801372a:	7812      	ldrb	r2, [r2, #0]
 801372c:	0212      	lsls	r2, r2, #8
 801372e:	4313      	orrs	r3, r2
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	7812      	ldrb	r2, [r2, #0]
 8013734:	4313      	orrs	r3, r2
 8013736:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801373a:	617b      	str	r3, [r7, #20]
			break;
 801373c:	e009      	b.n	8013752 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 801373e:	2301      	movs	r3, #1
 8013740:	617b      	str	r3, [r7, #20]
 8013742:	e006      	b.n	8013752 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013744:	bf00      	nop
 8013746:	e004      	b.n	8013752 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013748:	bf00      	nop
 801374a:	e002      	b.n	8013752 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801374c:	bf00      	nop
 801374e:	e000      	b.n	8013752 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013750:	bf00      	nop
		}
	}

	return val;
 8013752:	697b      	ldr	r3, [r7, #20]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3718      	adds	r7, #24
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b088      	sub	sp, #32
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	2b01      	cmp	r3, #1
 801376c:	d905      	bls.n	801377a <put_fat+0x1e>
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013774:	68ba      	ldr	r2, [r7, #8]
 8013776:	429a      	cmp	r2, r3
 8013778:	d302      	bcc.n	8013780 <put_fat+0x24>
		res = FR_INT_ERR;
 801377a:	2302      	movs	r3, #2
 801377c:	77fb      	strb	r3, [r7, #31]
 801377e:	e0f6      	b.n	801396e <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013786:	2b03      	cmp	r3, #3
 8013788:	f000 809e 	beq.w	80138c8 <put_fat+0x16c>
 801378c:	2b03      	cmp	r3, #3
 801378e:	f300 80e4 	bgt.w	801395a <put_fat+0x1fe>
 8013792:	2b01      	cmp	r3, #1
 8013794:	d002      	beq.n	801379c <put_fat+0x40>
 8013796:	2b02      	cmp	r3, #2
 8013798:	d06f      	beq.n	801387a <put_fat+0x11e>
 801379a:	e0de      	b.n	801395a <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	617b      	str	r3, [r7, #20]
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	085b      	lsrs	r3, r3, #1
 80137a4:	697a      	ldr	r2, [r7, #20]
 80137a6:	4413      	add	r3, r2
 80137a8:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	0a5b      	lsrs	r3, r3, #9
 80137b4:	4413      	add	r3, r2
 80137b6:	4619      	mov	r1, r3
 80137b8:	68f8      	ldr	r0, [r7, #12]
 80137ba:	f7ff fe18 	bl	80133ee <move_window>
 80137be:	4603      	mov	r3, r0
 80137c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137c2:	7ffb      	ldrb	r3, [r7, #31]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f040 80cb 	bne.w	8013960 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	1c5a      	adds	r2, r3, #1
 80137ce:	617a      	str	r2, [r7, #20]
 80137d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	4413      	add	r3, r2
 80137d8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	f003 0301 	and.w	r3, r3, #1
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00d      	beq.n	8013800 <put_fat+0xa4>
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	b25b      	sxtb	r3, r3
 80137ea:	f003 030f 	and.w	r3, r3, #15
 80137ee:	b25a      	sxtb	r2, r3
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	011b      	lsls	r3, r3, #4
 80137f6:	b25b      	sxtb	r3, r3
 80137f8:	4313      	orrs	r3, r2
 80137fa:	b25b      	sxtb	r3, r3
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	e001      	b.n	8013804 <put_fat+0xa8>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	b2db      	uxtb	r3, r3
 8013804:	69ba      	ldr	r2, [r7, #24]
 8013806:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	0a5b      	lsrs	r3, r3, #9
 801381a:	4413      	add	r3, r2
 801381c:	4619      	mov	r1, r3
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	f7ff fde5 	bl	80133ee <move_window>
 8013824:	4603      	mov	r3, r0
 8013826:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013828:	7ffb      	ldrb	r3, [r7, #31]
 801382a:	2b00      	cmp	r3, #0
 801382c:	f040 809a 	bne.w	8013964 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013836:	68fa      	ldr	r2, [r7, #12]
 8013838:	4413      	add	r3, r2
 801383a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	f003 0301 	and.w	r3, r3, #1
 8013842:	2b00      	cmp	r3, #0
 8013844:	d003      	beq.n	801384e <put_fat+0xf2>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	091b      	lsrs	r3, r3, #4
 801384a:	b2db      	uxtb	r3, r3
 801384c:	e00e      	b.n	801386c <put_fat+0x110>
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	b25b      	sxtb	r3, r3
 8013854:	f023 030f 	bic.w	r3, r3, #15
 8013858:	b25a      	sxtb	r2, r3
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	0a1b      	lsrs	r3, r3, #8
 801385e:	b25b      	sxtb	r3, r3
 8013860:	f003 030f 	and.w	r3, r3, #15
 8013864:	b25b      	sxtb	r3, r3
 8013866:	4313      	orrs	r3, r2
 8013868:	b25b      	sxtb	r3, r3
 801386a:	b2db      	uxtb	r3, r3
 801386c:	69ba      	ldr	r2, [r7, #24]
 801386e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2201      	movs	r2, #1
 8013874:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8013878:	e079      	b.n	801396e <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	0a1b      	lsrs	r3, r3, #8
 8013884:	4413      	add	r3, r2
 8013886:	4619      	mov	r1, r3
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f7ff fdb0 	bl	80133ee <move_window>
 801388e:	4603      	mov	r3, r0
 8013890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013892:	7ffb      	ldrb	r3, [r7, #31]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d167      	bne.n	8013968 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	005b      	lsls	r3, r3, #1
 801389c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	4413      	add	r3, r2
 80138a4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	701a      	strb	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	0a1b      	lsrs	r3, r3, #8
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	3301      	adds	r3, #1
 80138ba:	b2d2      	uxtb	r2, r2
 80138bc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2201      	movs	r2, #1
 80138c2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80138c6:	e052      	b.n	801396e <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	09db      	lsrs	r3, r3, #7
 80138d2:	4413      	add	r3, r2
 80138d4:	4619      	mov	r1, r3
 80138d6:	68f8      	ldr	r0, [r7, #12]
 80138d8:	f7ff fd89 	bl	80133ee <move_window>
 80138dc:	4603      	mov	r3, r0
 80138de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138e0:	7ffb      	ldrb	r3, [r7, #31]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d142      	bne.n	801396c <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80138ee:	68fa      	ldr	r2, [r7, #12]
 80138f0:	4413      	add	r3, r2
 80138f2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	3303      	adds	r3, #3
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	061a      	lsls	r2, r3, #24
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	3302      	adds	r3, #2
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	041b      	lsls	r3, r3, #16
 8013904:	4313      	orrs	r3, r2
 8013906:	69ba      	ldr	r2, [r7, #24]
 8013908:	3201      	adds	r2, #1
 801390a:	7812      	ldrb	r2, [r2, #0]
 801390c:	0212      	lsls	r2, r2, #8
 801390e:	4313      	orrs	r3, r2
 8013910:	69ba      	ldr	r2, [r7, #24]
 8013912:	7812      	ldrb	r2, [r2, #0]
 8013914:	4313      	orrs	r3, r2
 8013916:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	4313      	orrs	r3, r2
 801391e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	b2da      	uxtb	r2, r3
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	701a      	strb	r2, [r3, #0]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	b29b      	uxth	r3, r3
 801392c:	0a1b      	lsrs	r3, r3, #8
 801392e:	b29a      	uxth	r2, r3
 8013930:	69bb      	ldr	r3, [r7, #24]
 8013932:	3301      	adds	r3, #1
 8013934:	b2d2      	uxtb	r2, r2
 8013936:	701a      	strb	r2, [r3, #0]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	0c1a      	lsrs	r2, r3, #16
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	3302      	adds	r3, #2
 8013940:	b2d2      	uxtb	r2, r2
 8013942:	701a      	strb	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	0e1a      	lsrs	r2, r3, #24
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	3303      	adds	r3, #3
 801394c:	b2d2      	uxtb	r2, r2
 801394e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2201      	movs	r2, #1
 8013954:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8013958:	e009      	b.n	801396e <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 801395a:	2302      	movs	r3, #2
 801395c:	77fb      	strb	r3, [r7, #31]
 801395e:	e006      	b.n	801396e <put_fat+0x212>
			if (res != FR_OK) break;
 8013960:	bf00      	nop
 8013962:	e004      	b.n	801396e <put_fat+0x212>
			if (res != FR_OK) break;
 8013964:	bf00      	nop
 8013966:	e002      	b.n	801396e <put_fat+0x212>
			if (res != FR_OK) break;
 8013968:	bf00      	nop
 801396a:	e000      	b.n	801396e <put_fat+0x212>
			if (res != FR_OK) break;
 801396c:	bf00      	nop
		}
	}

	return res;
 801396e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3720      	adds	r7, #32
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	2b01      	cmp	r3, #1
 8013986:	d905      	bls.n	8013994 <remove_chain+0x1c>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801398e:	683a      	ldr	r2, [r7, #0]
 8013990:	429a      	cmp	r2, r3
 8013992:	d302      	bcc.n	801399a <remove_chain+0x22>
		res = FR_INT_ERR;
 8013994:	2302      	movs	r3, #2
 8013996:	73fb      	strb	r3, [r7, #15]
 8013998:	e043      	b.n	8013a22 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 801399a:	2300      	movs	r3, #0
 801399c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801399e:	e036      	b.n	8013a0e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80139a0:	6839      	ldr	r1, [r7, #0]
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f7ff fe20 	bl	80135e8 <get_fat>
 80139a8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d035      	beq.n	8013a1c <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d102      	bne.n	80139bc <remove_chain+0x44>
 80139b6:	2302      	movs	r3, #2
 80139b8:	73fb      	strb	r3, [r7, #15]
 80139ba:	e032      	b.n	8013a22 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139c2:	d102      	bne.n	80139ca <remove_chain+0x52>
 80139c4:	2301      	movs	r3, #1
 80139c6:	73fb      	strb	r3, [r7, #15]
 80139c8:	e02b      	b.n	8013a22 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80139ca:	2200      	movs	r2, #0
 80139cc:	6839      	ldr	r1, [r7, #0]
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f7ff fec4 	bl	801375c <put_fat>
 80139d4:	4603      	mov	r3, r0
 80139d6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80139d8:	7bfb      	ldrb	r3, [r7, #15]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d120      	bne.n	8013a20 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80139e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139e8:	d00f      	beq.n	8013a0a <remove_chain+0x92>
				fs->free_clust++;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80139f0:	1c5a      	adds	r2, r3, #1
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80139fe:	f043 0301 	orr.w	r3, r3, #1
 8013a02:	b2da      	uxtb	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d3c2      	bcc.n	80139a0 <remove_chain+0x28>
 8013a1a:	e002      	b.n	8013a22 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8013a1c:	bf00      	nop
 8013a1e:	e000      	b.n	8013a22 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8013a20:	bf00      	nop
		}
	}

	return res;
 8013a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d10f      	bne.n	8013a5c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013a42:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d005      	beq.n	8013a56 <create_chain+0x2a>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a50:	693a      	ldr	r2, [r7, #16]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d31c      	bcc.n	8013a90 <create_chain+0x64>
 8013a56:	2301      	movs	r3, #1
 8013a58:	613b      	str	r3, [r7, #16]
 8013a5a:	e019      	b.n	8013a90 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8013a5c:	6839      	ldr	r1, [r7, #0]
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f7ff fdc2 	bl	80135e8 <get_fat>
 8013a64:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d801      	bhi.n	8013a70 <create_chain+0x44>
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	e076      	b.n	8013b5e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a76:	d101      	bne.n	8013a7c <create_chain+0x50>
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	e070      	b.n	8013b5e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a82:	68ba      	ldr	r2, [r7, #8]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d201      	bcs.n	8013a8c <create_chain+0x60>
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	e068      	b.n	8013b5e <create_chain+0x132>
		scl = clst;
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	3301      	adds	r3, #1
 8013a98:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013aa0:	697a      	ldr	r2, [r7, #20]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d307      	bcc.n	8013ab6 <create_chain+0x8a>
			ncl = 2;
 8013aa6:	2302      	movs	r3, #2
 8013aa8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8013aaa:	697a      	ldr	r2, [r7, #20]
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d901      	bls.n	8013ab6 <create_chain+0x8a>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	e053      	b.n	8013b5e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8013ab6:	6979      	ldr	r1, [r7, #20]
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff fd95 	bl	80135e8 <get_fat>
 8013abe:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00e      	beq.n	8013ae4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013acc:	d002      	beq.n	8013ad4 <create_chain+0xa8>
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	2b01      	cmp	r3, #1
 8013ad2:	d101      	bne.n	8013ad8 <create_chain+0xac>
			return cs;
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	e042      	b.n	8013b5e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8013ad8:	697a      	ldr	r2, [r7, #20]
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d1d9      	bne.n	8013a94 <create_chain+0x68>
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	e03c      	b.n	8013b5e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8013ae4:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8013ae6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8013aea:	6979      	ldr	r1, [r7, #20]
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7ff fe35 	bl	801375c <put_fat>
 8013af2:	4603      	mov	r3, r0
 8013af4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8013af6:	7bfb      	ldrb	r3, [r7, #15]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d109      	bne.n	8013b10 <create_chain+0xe4>
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d006      	beq.n	8013b10 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8013b02:	697a      	ldr	r2, [r7, #20]
 8013b04:	6839      	ldr	r1, [r7, #0]
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f7ff fe28 	bl	801375c <put_fat>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8013b10:	7bfb      	ldrb	r3, [r7, #15]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d11a      	bne.n	8013b4c <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	697a      	ldr	r2, [r7, #20]
 8013b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b28:	d018      	beq.n	8013b5c <create_chain+0x130>
			fs->free_clust--;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013b30:	1e5a      	subs	r2, r3, #1
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8013b3e:	f043 0301 	orr.w	r3, r3, #1
 8013b42:	b2da      	uxtb	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8013b4a:	e007      	b.n	8013b5c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8013b4c:	7bfb      	ldrb	r3, [r7, #15]
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d102      	bne.n	8013b58 <create_chain+0x12c>
 8013b52:	f04f 33ff 	mov.w	r3, #4294967295
 8013b56:	e000      	b.n	8013b5a <create_chain+0x12e>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8013b5c:	697b      	ldr	r3, [r7, #20]
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3718      	adds	r7, #24
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8013b66:	b480      	push	{r7}
 8013b68:	b087      	sub	sp, #28
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
 8013b6e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013b76:	3304      	adds	r3, #4
 8013b78:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	0a5b      	lsrs	r3, r3, #9
 8013b7e:	687a      	ldr	r2, [r7, #4]
 8013b80:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8013b84:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8013b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	1d1a      	adds	r2, r3, #4
 8013b92:	613a      	str	r2, [r7, #16]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d101      	bne.n	8013ba2 <clmt_clust+0x3c>
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	e010      	b.n	8013bc4 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8013ba2:	697a      	ldr	r2, [r7, #20]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d307      	bcc.n	8013bba <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8013baa:	697a      	ldr	r2, [r7, #20]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	617b      	str	r3, [r7, #20]
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	3304      	adds	r3, #4
 8013bb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013bb8:	e7e9      	b.n	8013b8e <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8013bba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	4413      	add	r3, r2
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	371c      	adds	r7, #28
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr

08013bd0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b086      	sub	sp, #24
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8013bea:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d007      	beq.n	8013c02 <dir_sdi+0x32>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013bf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bfc:	697a      	ldr	r2, [r7, #20]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d301      	bcc.n	8013c06 <dir_sdi+0x36>
		return FR_INT_ERR;
 8013c02:	2302      	movs	r3, #2
 8013c04:	e074      	b.n	8013cf0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10c      	bne.n	8013c26 <dir_sdi+0x56>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d105      	bne.n	8013c26 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c20:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013c24:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d111      	bne.n	8013c50 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c32:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8013c36:	461a      	mov	r2, r3
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d301      	bcc.n	8013c42 <dir_sdi+0x72>
			return FR_INT_ERR;
 8013c3e:	2302      	movs	r3, #2
 8013c40:	e056      	b.n	8013cf0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c48:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8013c4c:	613b      	str	r3, [r7, #16]
 8013c4e:	e032      	b.n	8013cb6 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c56:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013c5a:	011b      	lsls	r3, r3, #4
 8013c5c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8013c5e:	e01e      	b.n	8013c9e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c66:	6979      	ldr	r1, [r7, #20]
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7ff fcbd 	bl	80135e8 <get_fat>
 8013c6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c76:	d101      	bne.n	8013c7c <dir_sdi+0xac>
 8013c78:	2301      	movs	r3, #1
 8013c7a:	e039      	b.n	8013cf0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d907      	bls.n	8013c92 <dir_sdi+0xc2>
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d301      	bcc.n	8013c96 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8013c92:	2302      	movs	r3, #2
 8013c94:	e02c      	b.n	8013cf0 <dir_sdi+0x120>
			idx -= ic;
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8013c9e:	683a      	ldr	r2, [r7, #0]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d2dc      	bcs.n	8013c60 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013cac:	6979      	ldr	r1, [r7, #20]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7ff fc78 	bl	80135a4 <clust2sect>
 8013cb4:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	697a      	ldr	r2, [r7, #20]
 8013cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <dir_sdi+0xf8>
 8013cc4:	2302      	movs	r3, #2
 8013cc6:	e013      	b.n	8013cf0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	091a      	lsrs	r2, r3, #4
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	441a      	add	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013cdc:	461a      	mov	r2, r3
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	f003 030f 	and.w	r3, r3, #15
 8013ce4:	015b      	lsls	r3, r3, #5
 8013ce6:	441a      	add	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3718      	adds	r7, #24
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013cf8:	b590      	push	{r4, r7, lr}
 8013cfa:	b087      	sub	sp, #28
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8013d08:	3301      	adds	r3, #1
 8013d0a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d004      	beq.n	8013d1e <dir_next+0x26>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d101      	bne.n	8013d22 <dir_next+0x2a>
		return FR_NO_FILE;
 8013d1e:	2304      	movs	r3, #4
 8013d20:	e0dd      	b.n	8013ede <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f003 030f 	and.w	r3, r3, #15
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f040 80c6 	bne.w	8013eba <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013d34:	1c5a      	adds	r2, r3, #1
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d10b      	bne.n	8013d5e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d4c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8013d50:	461a      	mov	r2, r3
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	4293      	cmp	r3, r2
 8013d56:	f0c0 80b0 	bcc.w	8013eba <dir_next+0x1c2>
				return FR_NO_FILE;
 8013d5a:	2304      	movs	r3, #4
 8013d5c:	e0bf      	b.n	8013ede <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	091b      	lsrs	r3, r3, #4
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8013d68:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8013d6c:	3a01      	subs	r2, #1
 8013d6e:	4013      	ands	r3, r2
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f040 80a2 	bne.w	8013eba <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013d82:	4619      	mov	r1, r3
 8013d84:	4610      	mov	r0, r2
 8013d86:	f7ff fc2f 	bl	80135e8 <get_fat>
 8013d8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d801      	bhi.n	8013d96 <dir_next+0x9e>
 8013d92:	2302      	movs	r3, #2
 8013d94:	e0a3      	b.n	8013ede <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d9c:	d101      	bne.n	8013da2 <dir_next+0xaa>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e09d      	b.n	8013ede <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013da8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d374      	bcc.n	8013e9c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d101      	bne.n	8013dbc <dir_next+0xc4>
 8013db8:	2304      	movs	r3, #4
 8013dba:	e090      	b.n	8013ede <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8013dc8:	4619      	mov	r1, r3
 8013dca:	4610      	mov	r0, r2
 8013dcc:	f7ff fe2e 	bl	8013a2c <create_chain>
 8013dd0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <dir_next+0xe4>
 8013dd8:	2307      	movs	r3, #7
 8013dda:	e080      	b.n	8013ede <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d101      	bne.n	8013de6 <dir_next+0xee>
 8013de2:	2302      	movs	r3, #2
 8013de4:	e07b      	b.n	8013ede <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dec:	d101      	bne.n	8013df2 <dir_next+0xfa>
 8013dee:	2301      	movs	r3, #1
 8013df0:	e075      	b.n	8013ede <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff faaf 	bl	801335c <sync_window>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d001      	beq.n	8013e08 <dir_next+0x110>
 8013e04:	2301      	movs	r3, #1
 8013e06:	e06a      	b.n	8013ede <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e12:	2100      	movs	r1, #0
 8013e14:	4618      	mov	r0, r3
 8013e16:	f7ff f88c 	bl	8012f32 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8013e26:	6979      	ldr	r1, [r7, #20]
 8013e28:	4610      	mov	r0, r2
 8013e2a:	f7ff fbbb 	bl	80135a4 <clust2sect>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8013e34:	2300      	movs	r3, #0
 8013e36:	613b      	str	r3, [r7, #16]
 8013e38:	e01b      	b.n	8013e72 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e40:	2201      	movs	r2, #1
 8013e42:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ff fa85 	bl	801335c <sync_window>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <dir_next+0x164>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e040      	b.n	8013ede <dir_next+0x1e6>
						dp->fs->winsect++;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e62:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8013e66:	3201      	adds	r2, #1
 8013e68:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	613b      	str	r3, [r7, #16]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e78:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d3da      	bcc.n	8013e3a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e8a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013e94:	693a      	ldr	r2, [r7, #16]
 8013e96:	1a8a      	subs	r2, r1, r2
 8013e98:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	697a      	ldr	r2, [r7, #20]
 8013ea0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013eaa:	6979      	ldr	r1, [r7, #20]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7ff fb79 	bl	80135a4 <clust2sect>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013eca:	461a      	mov	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f003 030f 	and.w	r3, r3, #15
 8013ed2:	015b      	lsls	r3, r3, #5
 8013ed4:	441a      	add	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	371c      	adds	r7, #28
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd90      	pop	{r4, r7, pc}

08013ee6 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b084      	sub	sp, #16
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	6078      	str	r0, [r7, #4]
 8013eee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f7ff fe6c 	bl	8013bd0 <dir_sdi>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013efc:	7bfb      	ldrb	r3, [r7, #15]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d131      	bne.n	8013f66 <dir_alloc+0x80>
		n = 0;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013f12:	4619      	mov	r1, r3
 8013f14:	4610      	mov	r0, r2
 8013f16:	f7ff fa6a 	bl	80133ee <move_window>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8013f1e:	7bfb      	ldrb	r3, [r7, #15]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d11f      	bne.n	8013f64 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	2be5      	cmp	r3, #229	; 0xe5
 8013f2e:	d005      	beq.n	8013f3c <dir_alloc+0x56>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d107      	bne.n	8013f4c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	60bb      	str	r3, [r7, #8]
 8013f42:	68ba      	ldr	r2, [r7, #8]
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d102      	bne.n	8013f50 <dir_alloc+0x6a>
 8013f4a:	e00c      	b.n	8013f66 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8013f50:	2101      	movs	r1, #1
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7ff fed0 	bl	8013cf8 <dir_next>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8013f5c:	7bfb      	ldrb	r3, [r7, #15]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d0d1      	beq.n	8013f06 <dir_alloc+0x20>
 8013f62:	e000      	b.n	8013f66 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8013f64:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013f66:	7bfb      	ldrb	r3, [r7, #15]
 8013f68:	2b04      	cmp	r3, #4
 8013f6a:	d101      	bne.n	8013f70 <dir_alloc+0x8a>
 8013f6c:	2307      	movs	r3, #7
 8013f6e:	73fb      	strb	r3, [r7, #15]
	return res;
 8013f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b085      	sub	sp, #20
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	331b      	adds	r3, #27
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	021b      	lsls	r3, r3, #8
 8013f8c:	b21a      	sxth	r2, r3
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	331a      	adds	r3, #26
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	b21b      	sxth	r3, r3
 8013f96:	4313      	orrs	r3, r2
 8013f98:	b21b      	sxth	r3, r3
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013fa4:	2b03      	cmp	r3, #3
 8013fa6:	d10f      	bne.n	8013fc8 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	3315      	adds	r3, #21
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	021b      	lsls	r3, r3, #8
 8013fb0:	b21a      	sxth	r2, r3
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	3314      	adds	r3, #20
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	b21b      	sxth	r3, r3
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	b21b      	sxth	r3, r3
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	041b      	lsls	r3, r3, #16
 8013fc2:	68fa      	ldr	r2, [r7, #12]
 8013fc4:	4313      	orrs	r3, r2
 8013fc6:	60fb      	str	r3, [r7, #12]

	return cl;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3714      	adds	r7, #20
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8013fd6:	b480      	push	{r7}
 8013fd8:	b083      	sub	sp, #12
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	331a      	adds	r3, #26
 8013fe4:	683a      	ldr	r2, [r7, #0]
 8013fe6:	b2d2      	uxtb	r2, r2
 8013fe8:	701a      	strb	r2, [r3, #0]
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	0a1b      	lsrs	r3, r3, #8
 8013ff0:	b29a      	uxth	r2, r3
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	331b      	adds	r3, #27
 8013ff6:	b2d2      	uxtb	r2, r2
 8013ff8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	0c1a      	lsrs	r2, r3, #16
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	3314      	adds	r3, #20
 8014002:	b2d2      	uxtb	r2, r2
 8014004:	701a      	strb	r2, [r3, #0]
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	0c1b      	lsrs	r3, r3, #16
 801400a:	b29b      	uxth	r3, r3
 801400c:	0a1b      	lsrs	r3, r3, #8
 801400e:	b29a      	uxth	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	3315      	adds	r3, #21
 8014014:	b2d2      	uxtb	r2, r2
 8014016:	701a      	strb	r2, [r3, #0]
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014036:	1e5a      	subs	r2, r3, #1
 8014038:	4613      	mov	r3, r2
 801403a:	005b      	lsls	r3, r3, #1
 801403c:	4413      	add	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8014044:	2300      	movs	r3, #0
 8014046:	613b      	str	r3, [r7, #16]
 8014048:	2301      	movs	r3, #1
 801404a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 801404c:	4a2b      	ldr	r2, [pc, #172]	; (80140fc <cmp_lfn+0xd8>)
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	4413      	add	r3, r2
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	3301      	adds	r3, #1
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	4413      	add	r3, r2
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	021b      	lsls	r3, r3, #8
 801405e:	b21a      	sxth	r2, r3
 8014060:	4926      	ldr	r1, [pc, #152]	; (80140fc <cmp_lfn+0xd8>)
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	440b      	add	r3, r1
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	4619      	mov	r1, r3
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	440b      	add	r3, r1
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	b21b      	sxth	r3, r3
 8014072:	4313      	orrs	r3, r2
 8014074:	b21b      	sxth	r3, r3
 8014076:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8014078:	89fb      	ldrh	r3, [r7, #14]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d019      	beq.n	80140b2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 801407e:	89bb      	ldrh	r3, [r7, #12]
 8014080:	4618      	mov	r0, r3
 8014082:	f002 f90f 	bl	80162a4 <ff_wtoupper>
 8014086:	4603      	mov	r3, r0
 8014088:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	2bfe      	cmp	r3, #254	; 0xfe
 801408e:	d80e      	bhi.n	80140ae <cmp_lfn+0x8a>
 8014090:	697b      	ldr	r3, [r7, #20]
 8014092:	1c5a      	adds	r2, r3, #1
 8014094:	617a      	str	r2, [r7, #20]
 8014096:	005b      	lsls	r3, r3, #1
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	4413      	add	r3, r2
 801409c:	881b      	ldrh	r3, [r3, #0]
 801409e:	4618      	mov	r0, r3
 80140a0:	f002 f900 	bl	80162a4 <ff_wtoupper>
 80140a4:	4603      	mov	r3, r0
 80140a6:	461a      	mov	r2, r3
 80140a8:	89fb      	ldrh	r3, [r7, #14]
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d008      	beq.n	80140c0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80140ae:	2300      	movs	r3, #0
 80140b0:	e01f      	b.n	80140f2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80140b2:	89bb      	ldrh	r3, [r7, #12]
 80140b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d001      	beq.n	80140c0 <cmp_lfn+0x9c>
 80140bc:	2300      	movs	r3, #0
 80140be:	e018      	b.n	80140f2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	3301      	adds	r3, #1
 80140c4:	613b      	str	r3, [r7, #16]
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b0c      	cmp	r3, #12
 80140ca:	d9bf      	bls.n	801404c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00b      	beq.n	80140f0 <cmp_lfn+0xcc>
 80140d8:	89fb      	ldrh	r3, [r7, #14]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d008      	beq.n	80140f0 <cmp_lfn+0xcc>
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	005b      	lsls	r3, r3, #1
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	4413      	add	r3, r2
 80140e6:	881b      	ldrh	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d001      	beq.n	80140f0 <cmp_lfn+0xcc>
		return 0;
 80140ec:	2300      	movs	r3, #0
 80140ee:	e000      	b.n	80140f2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80140f0:	2301      	movs	r3, #1
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3718      	adds	r7, #24
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	0801d0e4 	.word	0x0801d0e4

08014100 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8014100:	b480      	push	{r7}
 8014102:	b089      	sub	sp, #36	; 0x24
 8014104:	af00      	add	r7, sp, #0
 8014106:	60f8      	str	r0, [r7, #12]
 8014108:	60b9      	str	r1, [r7, #8]
 801410a:	4611      	mov	r1, r2
 801410c:	461a      	mov	r2, r3
 801410e:	460b      	mov	r3, r1
 8014110:	71fb      	strb	r3, [r7, #7]
 8014112:	4613      	mov	r3, r2
 8014114:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	330d      	adds	r3, #13
 801411a:	79ba      	ldrb	r2, [r7, #6]
 801411c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	330b      	adds	r3, #11
 8014122:	220f      	movs	r2, #15
 8014124:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	330c      	adds	r3, #12
 801412a:	2200      	movs	r2, #0
 801412c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	331a      	adds	r3, #26
 8014132:	2200      	movs	r2, #0
 8014134:	701a      	strb	r2, [r3, #0]
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	331b      	adds	r3, #27
 801413a:	2200      	movs	r2, #0
 801413c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 801413e:	79fb      	ldrb	r3, [r7, #7]
 8014140:	1e5a      	subs	r2, r3, #1
 8014142:	4613      	mov	r3, r2
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	4413      	add	r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	4413      	add	r3, r2
 801414c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801414e:	2300      	movs	r3, #0
 8014150:	82fb      	strh	r3, [r7, #22]
 8014152:	2300      	movs	r3, #0
 8014154:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8014156:	8afb      	ldrh	r3, [r7, #22]
 8014158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801415c:	4293      	cmp	r3, r2
 801415e:	d007      	beq.n	8014170 <fit_lfn+0x70>
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	1c5a      	adds	r2, r3, #1
 8014164:	61fa      	str	r2, [r7, #28]
 8014166:	005b      	lsls	r3, r3, #1
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	4413      	add	r3, r2
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8014170:	4a1d      	ldr	r2, [pc, #116]	; (80141e8 <fit_lfn+0xe8>)
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	4413      	add	r3, r2
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	461a      	mov	r2, r3
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	4413      	add	r3, r2
 801417e:	8afa      	ldrh	r2, [r7, #22]
 8014180:	b2d2      	uxtb	r2, r2
 8014182:	701a      	strb	r2, [r3, #0]
 8014184:	8afb      	ldrh	r3, [r7, #22]
 8014186:	0a1b      	lsrs	r3, r3, #8
 8014188:	b299      	uxth	r1, r3
 801418a:	4a17      	ldr	r2, [pc, #92]	; (80141e8 <fit_lfn+0xe8>)
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	4413      	add	r3, r2
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	3301      	adds	r3, #1
 8014194:	68ba      	ldr	r2, [r7, #8]
 8014196:	4413      	add	r3, r2
 8014198:	b2ca      	uxtb	r2, r1
 801419a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 801419c:	8afb      	ldrh	r3, [r7, #22]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <fit_lfn+0xa8>
 80141a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	3301      	adds	r3, #1
 80141ac:	61bb      	str	r3, [r7, #24]
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	2b0c      	cmp	r3, #12
 80141b2:	d9d0      	bls.n	8014156 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80141b4:	8afb      	ldrh	r3, [r7, #22]
 80141b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d006      	beq.n	80141cc <fit_lfn+0xcc>
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	4413      	add	r3, r2
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d103      	bne.n	80141d4 <fit_lfn+0xd4>
 80141cc:	79fb      	ldrb	r3, [r7, #7]
 80141ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	79fa      	ldrb	r2, [r7, #7]
 80141d8:	701a      	strb	r2, [r3, #0]
}
 80141da:	bf00      	nop
 80141dc:	3724      	adds	r7, #36	; 0x24
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	0801d0e4 	.word	0x0801d0e4

080141ec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b08c      	sub	sp, #48	; 0x30
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	607a      	str	r2, [r7, #4]
 80141f8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80141fa:	220b      	movs	r2, #11
 80141fc:	68b9      	ldr	r1, [r7, #8]
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f7fe fe78 	bl	8012ef4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	2b05      	cmp	r3, #5
 8014208:	d92b      	bls.n	8014262 <gen_numname+0x76>
		sr = seq;
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801420e:	e022      	b.n	8014256 <gen_numname+0x6a>
			wc = *lfn++;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	1c9a      	adds	r2, r3, #2
 8014214:	607a      	str	r2, [r7, #4]
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801421a:	2300      	movs	r3, #0
 801421c:	62bb      	str	r3, [r7, #40]	; 0x28
 801421e:	e017      	b.n	8014250 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014220:	69fb      	ldr	r3, [r7, #28]
 8014222:	005a      	lsls	r2, r3, #1
 8014224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801422e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014230:	085b      	lsrs	r3, r3, #1
 8014232:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801423a:	2b00      	cmp	r3, #0
 801423c:	d005      	beq.n	801424a <gen_numname+0x5e>
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014244:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014248:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424c:	3301      	adds	r3, #1
 801424e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014252:	2b0f      	cmp	r3, #15
 8014254:	d9e4      	bls.n	8014220 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d1d8      	bne.n	8014210 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014262:	2307      	movs	r3, #7
 8014264:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	b2db      	uxtb	r3, r3
 801426a:	f003 030f 	and.w	r3, r3, #15
 801426e:	b2db      	uxtb	r3, r3
 8014270:	3330      	adds	r3, #48	; 0x30
 8014272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801427a:	2b39      	cmp	r3, #57	; 0x39
 801427c:	d904      	bls.n	8014288 <gen_numname+0x9c>
 801427e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014282:	3307      	adds	r3, #7
 8014284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801428a:	1e5a      	subs	r2, r3, #1
 801428c:	62ba      	str	r2, [r7, #40]	; 0x28
 801428e:	3330      	adds	r3, #48	; 0x30
 8014290:	443b      	add	r3, r7
 8014292:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014296:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	091b      	lsrs	r3, r3, #4
 801429e:	603b      	str	r3, [r7, #0]
	} while (seq);
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d1df      	bne.n	8014266 <gen_numname+0x7a>
	ns[i] = '~';
 80142a6:	f107 0214 	add.w	r2, r7, #20
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	4413      	add	r3, r2
 80142ae:	227e      	movs	r2, #126	; 0x7e
 80142b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80142b2:	2300      	movs	r3, #0
 80142b4:	627b      	str	r3, [r7, #36]	; 0x24
 80142b6:	e002      	b.n	80142be <gen_numname+0xd2>
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	3301      	adds	r3, #1
 80142bc:	627b      	str	r3, [r7, #36]	; 0x24
 80142be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d205      	bcs.n	80142d2 <gen_numname+0xe6>
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	4413      	add	r3, r2
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	2b20      	cmp	r3, #32
 80142d0:	d1f2      	bne.n	80142b8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80142d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d4:	2b07      	cmp	r3, #7
 80142d6:	d807      	bhi.n	80142e8 <gen_numname+0xfc>
 80142d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142da:	1c5a      	adds	r2, r3, #1
 80142dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80142de:	3330      	adds	r3, #48	; 0x30
 80142e0:	443b      	add	r3, r7
 80142e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80142e6:	e000      	b.n	80142ea <gen_numname+0xfe>
 80142e8:	2120      	movs	r1, #32
 80142ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ec:	1c5a      	adds	r2, r3, #1
 80142ee:	627a      	str	r2, [r7, #36]	; 0x24
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	4413      	add	r3, r2
 80142f4:	460a      	mov	r2, r1
 80142f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	2b07      	cmp	r3, #7
 80142fc:	d9e9      	bls.n	80142d2 <gen_numname+0xe6>
}
 80142fe:	bf00      	nop
 8014300:	bf00      	nop
 8014302:	3730      	adds	r7, #48	; 0x30
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014310:	2300      	movs	r3, #0
 8014312:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014314:	230b      	movs	r3, #11
 8014316:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8014318:	7bfb      	ldrb	r3, [r7, #15]
 801431a:	b2da      	uxtb	r2, r3
 801431c:	0852      	lsrs	r2, r2, #1
 801431e:	01db      	lsls	r3, r3, #7
 8014320:	4313      	orrs	r3, r2
 8014322:	b2da      	uxtb	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	1c59      	adds	r1, r3, #1
 8014328:	6079      	str	r1, [r7, #4]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	4413      	add	r3, r2
 801432e:	73fb      	strb	r3, [r7, #15]
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	3b01      	subs	r3, #1
 8014334:	60bb      	str	r3, [r7, #8]
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d1ed      	bne.n	8014318 <sum_sfn+0x10>
	return sum;
 801433c:	7bfb      	ldrb	r3, [r7, #15]
}
 801433e:	4618      	mov	r0, r3
 8014340:	3714      	adds	r7, #20
 8014342:	46bd      	mov	sp, r7
 8014344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014348:	4770      	bx	lr

0801434a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 801434a:	b580      	push	{r7, lr}
 801434c:	b086      	sub	sp, #24
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014352:	2100      	movs	r1, #0
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff fc3b 	bl	8013bd0 <dir_sdi>
 801435a:	4603      	mov	r3, r0
 801435c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801435e:	7dfb      	ldrb	r3, [r7, #23]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d001      	beq.n	8014368 <dir_find+0x1e>
 8014364:	7dfb      	ldrb	r3, [r7, #23]
 8014366:	e0ac      	b.n	80144c2 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8014368:	23ff      	movs	r3, #255	; 0xff
 801436a:	753b      	strb	r3, [r7, #20]
 801436c:	7d3b      	ldrb	r3, [r7, #20]
 801436e:	757b      	strb	r3, [r7, #21]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014376:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014386:	4619      	mov	r1, r3
 8014388:	4610      	mov	r0, r2
 801438a:	f7ff f830 	bl	80133ee <move_window>
 801438e:	4603      	mov	r3, r0
 8014390:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014392:	7dfb      	ldrb	r3, [r7, #23]
 8014394:	2b00      	cmp	r3, #0
 8014396:	f040 808e 	bne.w	80144b6 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80143a0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80143a8:	7dbb      	ldrb	r3, [r7, #22]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d102      	bne.n	80143b4 <dir_find+0x6a>
 80143ae:	2304      	movs	r3, #4
 80143b0:	75fb      	strb	r3, [r7, #23]
 80143b2:	e085      	b.n	80144c0 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	330b      	adds	r3, #11
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80143be:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80143c0:	7dbb      	ldrb	r3, [r7, #22]
 80143c2:	2be5      	cmp	r3, #229	; 0xe5
 80143c4:	d007      	beq.n	80143d6 <dir_find+0x8c>
 80143c6:	7bfb      	ldrb	r3, [r7, #15]
 80143c8:	f003 0308 	and.w	r3, r3, #8
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00a      	beq.n	80143e6 <dir_find+0x9c>
 80143d0:	7bfb      	ldrb	r3, [r7, #15]
 80143d2:	2b0f      	cmp	r3, #15
 80143d4:	d007      	beq.n	80143e6 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80143d6:	23ff      	movs	r3, #255	; 0xff
 80143d8:	757b      	strb	r3, [r7, #21]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e0:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 80143e4:	e05c      	b.n	80144a0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80143e6:	7bfb      	ldrb	r3, [r7, #15]
 80143e8:	2b0f      	cmp	r3, #15
 80143ea:	d133      	bne.n	8014454 <dir_find+0x10a>
				if (dp->lfn) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d054      	beq.n	80144a0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80143f6:	7dbb      	ldrb	r3, [r7, #22]
 80143f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00e      	beq.n	801441e <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	7b5b      	ldrb	r3, [r3, #13]
 8014404:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8014406:	7dbb      	ldrb	r3, [r7, #22]
 8014408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801440c:	75bb      	strb	r3, [r7, #22]
 801440e:	7dbb      	ldrb	r3, [r7, #22]
 8014410:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 801441e:	7dba      	ldrb	r2, [r7, #22]
 8014420:	7d7b      	ldrb	r3, [r7, #21]
 8014422:	429a      	cmp	r2, r3
 8014424:	d113      	bne.n	801444e <dir_find+0x104>
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	330d      	adds	r3, #13
 801442a:	781b      	ldrb	r3, [r3, #0]
 801442c:	7d3a      	ldrb	r2, [r7, #20]
 801442e:	429a      	cmp	r2, r3
 8014430:	d10d      	bne.n	801444e <dir_find+0x104>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014438:	6939      	ldr	r1, [r7, #16]
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff fdf2 	bl	8014024 <cmp_lfn>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d003      	beq.n	801444e <dir_find+0x104>
 8014446:	7d7b      	ldrb	r3, [r7, #21]
 8014448:	3b01      	subs	r3, #1
 801444a:	b2db      	uxtb	r3, r3
 801444c:	e000      	b.n	8014450 <dir_find+0x106>
 801444e:	23ff      	movs	r3, #255	; 0xff
 8014450:	757b      	strb	r3, [r7, #21]
 8014452:	e025      	b.n	80144a0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8014454:	7d7b      	ldrb	r3, [r7, #21]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d107      	bne.n	801446a <dir_find+0x120>
 801445a:	6938      	ldr	r0, [r7, #16]
 801445c:	f7ff ff54 	bl	8014308 <sum_sfn>
 8014460:	4603      	mov	r3, r0
 8014462:	461a      	mov	r2, r3
 8014464:	7d3b      	ldrb	r3, [r7, #20]
 8014466:	4293      	cmp	r3, r2
 8014468:	d027      	beq.n	80144ba <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014470:	330b      	adds	r3, #11
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	f003 0301 	and.w	r3, r3, #1
 8014478:	2b00      	cmp	r3, #0
 801447a:	d10a      	bne.n	8014492 <dir_find+0x148>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014482:	220b      	movs	r2, #11
 8014484:	4619      	mov	r1, r3
 8014486:	6938      	ldr	r0, [r7, #16]
 8014488:	f7fe fd6e 	bl	8012f68 <mem_cmp>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	d015      	beq.n	80144be <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8014492:	23ff      	movs	r3, #255	; 0xff
 8014494:	757b      	strb	r3, [r7, #21]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801449c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80144a0:	2100      	movs	r1, #0
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff fc28 	bl	8013cf8 <dir_next>
 80144a8:	4603      	mov	r3, r0
 80144aa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80144ac:	7dfb      	ldrb	r3, [r7, #23]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f43f af63 	beq.w	801437a <dir_find+0x30>
 80144b4:	e004      	b.n	80144c0 <dir_find+0x176>
		if (res != FR_OK) break;
 80144b6:	bf00      	nop
 80144b8:	e002      	b.n	80144c0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80144ba:	bf00      	nop
 80144bc:	e000      	b.n	80144c0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80144be:	bf00      	nop

	return res;
 80144c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3718      	adds	r7, #24
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
	...

080144cc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b08c      	sub	sp, #48	; 0x30
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80144da:	623b      	str	r3, [r7, #32]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80144e2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80144e4:	f107 030c 	add.w	r3, r7, #12
 80144e8:	220c      	movs	r2, #12
 80144ea:	6a39      	ldr	r1, [r7, #32]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7fe fd01 	bl	8012ef4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80144f2:	7dfb      	ldrb	r3, [r7, #23]
 80144f4:	f003 0301 	and.w	r3, r3, #1
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d037      	beq.n	801456c <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	330b      	adds	r3, #11
 8014500:	2200      	movs	r2, #0
 8014502:	701a      	strb	r2, [r3, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2200      	movs	r2, #0
 8014508:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 801450c:	2301      	movs	r3, #1
 801450e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014510:	e013      	b.n	801453a <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8014512:	f107 010c 	add.w	r1, r7, #12
 8014516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014518:	69fa      	ldr	r2, [r7, #28]
 801451a:	6a38      	ldr	r0, [r7, #32]
 801451c:	f7ff fe66 	bl	80141ec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7ff ff12 	bl	801434a <dir_find>
 8014526:	4603      	mov	r3, r0
 8014528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801452c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014530:	2b00      	cmp	r3, #0
 8014532:	d106      	bne.n	8014542 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 8014534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014536:	3301      	adds	r3, #1
 8014538:	62bb      	str	r3, [r7, #40]	; 0x28
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	2b63      	cmp	r3, #99	; 0x63
 801453e:	d9e8      	bls.n	8014512 <dir_register+0x46>
 8014540:	e000      	b.n	8014544 <dir_register+0x78>
			if (res != FR_OK) break;
 8014542:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8014544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014546:	2b64      	cmp	r3, #100	; 0x64
 8014548:	d101      	bne.n	801454e <dir_register+0x82>
 801454a:	2307      	movs	r3, #7
 801454c:	e0c5      	b.n	80146da <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801454e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014552:	2b04      	cmp	r3, #4
 8014554:	d002      	beq.n	801455c <dir_register+0x90>
 8014556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801455a:	e0be      	b.n	80146da <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	330b      	adds	r3, #11
 8014560:	7dfa      	ldrb	r2, [r7, #23]
 8014562:	701a      	strb	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	69fa      	ldr	r2, [r7, #28]
 8014568:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 801456c:	7dfb      	ldrb	r3, [r7, #23]
 801456e:	f003 0302 	and.w	r3, r3, #2
 8014572:	2b00      	cmp	r3, #0
 8014574:	d014      	beq.n	80145a0 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8014576:	2300      	movs	r3, #0
 8014578:	62bb      	str	r3, [r7, #40]	; 0x28
 801457a:	e002      	b.n	8014582 <dir_register+0xb6>
 801457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801457e:	3301      	adds	r3, #1
 8014580:	62bb      	str	r3, [r7, #40]	; 0x28
 8014582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	69fa      	ldr	r2, [r7, #28]
 8014588:	4413      	add	r3, r2
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d1f5      	bne.n	801457c <dir_register+0xb0>
		nent = (n + 25) / 13;
 8014590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014592:	3319      	adds	r3, #25
 8014594:	4a53      	ldr	r2, [pc, #332]	; (80146e4 <dir_register+0x218>)
 8014596:	fba2 2303 	umull	r2, r3, r2, r3
 801459a:	089b      	lsrs	r3, r3, #2
 801459c:	627b      	str	r3, [r7, #36]	; 0x24
 801459e:	e001      	b.n	80145a4 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80145a0:	2301      	movs	r3, #1
 80145a2:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80145a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7ff fc9d 	bl	8013ee6 <dir_alloc>
 80145ac:	4603      	mov	r3, r0
 80145ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80145b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d153      	bne.n	8014662 <dir_register+0x196>
 80145ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145bc:	3b01      	subs	r3, #1
 80145be:	627b      	str	r3, [r7, #36]	; 0x24
 80145c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d04d      	beq.n	8014662 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80145cc:	461a      	mov	r2, r3
 80145ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d0:	1ad3      	subs	r3, r2, r3
 80145d2:	4619      	mov	r1, r3
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f7ff fafb 	bl	8013bd0 <dir_sdi>
 80145da:	4603      	mov	r3, r0
 80145dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80145e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d13c      	bne.n	8014662 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7ff fe8a 	bl	8014308 <sum_sfn>
 80145f4:	4603      	mov	r3, r0
 80145f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014604:	4619      	mov	r1, r3
 8014606:	4610      	mov	r0, r2
 8014608:	f7fe fef1 	bl	80133ee <move_window>
 801460c:	4603      	mov	r3, r0
 801460e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8014612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014616:	2b00      	cmp	r3, #0
 8014618:	d122      	bne.n	8014660 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8014626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014628:	b2da      	uxtb	r2, r3
 801462a:	7efb      	ldrb	r3, [r7, #27]
 801462c:	f7ff fd68 	bl	8014100 <fit_lfn>
				dp->fs->wflag = 1;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014636:	2201      	movs	r2, #1
 8014638:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 801463c:	2100      	movs	r1, #0
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f7ff fb5a 	bl	8013cf8 <dir_next>
 8014644:	4603      	mov	r3, r0
 8014646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801464a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801464e:	2b00      	cmp	r3, #0
 8014650:	d107      	bne.n	8014662 <dir_register+0x196>
 8014652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014654:	3b01      	subs	r3, #1
 8014656:	627b      	str	r3, [r7, #36]	; 0x24
 8014658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1cc      	bne.n	80145f8 <dir_register+0x12c>
 801465e:	e000      	b.n	8014662 <dir_register+0x196>
				if (res != FR_OK) break;
 8014660:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8014662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014666:	2b00      	cmp	r3, #0
 8014668:	d135      	bne.n	80146d6 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014676:	4619      	mov	r1, r3
 8014678:	4610      	mov	r0, r2
 801467a:	f7fe feb8 	bl	80133ee <move_window>
 801467e:	4603      	mov	r3, r0
 8014680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014688:	2b00      	cmp	r3, #0
 801468a:	d124      	bne.n	80146d6 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014692:	2220      	movs	r2, #32
 8014694:	2100      	movs	r1, #0
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe fc4b 	bl	8012f32 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80146a8:	220b      	movs	r2, #11
 80146aa:	4619      	mov	r1, r3
 80146ac:	f7fe fc22 	bl	8012ef4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80146b6:	330b      	adds	r3, #11
 80146b8:	781a      	ldrb	r2, [r3, #0]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80146c0:	330c      	adds	r3, #12
 80146c2:	f002 0218 	and.w	r2, r2, #24
 80146c6:	b2d2      	uxtb	r2, r2
 80146c8:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80146d0:	2201      	movs	r2, #1
 80146d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80146d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3730      	adds	r7, #48	; 0x30
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	4ec4ec4f 	.word	0x4ec4ec4f

080146e8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b08a      	sub	sp, #40	; 0x28
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	613b      	str	r3, [r7, #16]
 80146f8:	e002      	b.n	8014700 <create_name+0x18>
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	3301      	adds	r3, #1
 80146fe:	613b      	str	r3, [r7, #16]
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b2f      	cmp	r3, #47	; 0x2f
 8014706:	d0f8      	beq.n	80146fa <create_name+0x12>
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	2b5c      	cmp	r3, #92	; 0x5c
 801470e:	d0f4      	beq.n	80146fa <create_name+0x12>
	lfn = dp->lfn;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014716:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8014718:	2300      	movs	r3, #0
 801471a:	617b      	str	r3, [r7, #20]
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	1c5a      	adds	r2, r3, #1
 8014724:	61ba      	str	r2, [r7, #24]
 8014726:	693a      	ldr	r2, [r7, #16]
 8014728:	4413      	add	r3, r2
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 801472e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014730:	2b1f      	cmp	r3, #31
 8014732:	d92f      	bls.n	8014794 <create_name+0xac>
 8014734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014736:	2b2f      	cmp	r3, #47	; 0x2f
 8014738:	d02c      	beq.n	8014794 <create_name+0xac>
 801473a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801473c:	2b5c      	cmp	r3, #92	; 0x5c
 801473e:	d029      	beq.n	8014794 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2bfe      	cmp	r3, #254	; 0xfe
 8014744:	d901      	bls.n	801474a <create_name+0x62>
			return FR_INVALID_NAME;
 8014746:	2306      	movs	r3, #6
 8014748:	e182      	b.n	8014a50 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801474a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801474c:	b2db      	uxtb	r3, r3
 801474e:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014752:	2101      	movs	r1, #1
 8014754:	4618      	mov	r0, r3
 8014756:	f001 fd69 	bl	801622c <ff_convert>
 801475a:	4603      	mov	r3, r0
 801475c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801475e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014760:	2b00      	cmp	r3, #0
 8014762:	d101      	bne.n	8014768 <create_name+0x80>
 8014764:	2306      	movs	r3, #6
 8014766:	e173      	b.n	8014a50 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8014768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801476a:	2b7f      	cmp	r3, #127	; 0x7f
 801476c:	d809      	bhi.n	8014782 <create_name+0x9a>
 801476e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014770:	4619      	mov	r1, r3
 8014772:	488e      	ldr	r0, [pc, #568]	; (80149ac <create_name+0x2c4>)
 8014774:	f7fe fc1f 	bl	8012fb6 <chk_chr>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d001      	beq.n	8014782 <create_name+0x9a>
			return FR_INVALID_NAME;
 801477e:	2306      	movs	r3, #6
 8014780:	e166      	b.n	8014a50 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	1c5a      	adds	r2, r3, #1
 8014786:	617a      	str	r2, [r7, #20]
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	68fa      	ldr	r2, [r7, #12]
 801478c:	4413      	add	r3, r2
 801478e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014790:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8014792:	e7c5      	b.n	8014720 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8014794:	693a      	ldr	r2, [r7, #16]
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	441a      	add	r2, r3
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801479e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147a0:	2b1f      	cmp	r3, #31
 80147a2:	d801      	bhi.n	80147a8 <create_name+0xc0>
 80147a4:	2304      	movs	r3, #4
 80147a6:	e000      	b.n	80147aa <create_name+0xc2>
 80147a8:	2300      	movs	r3, #0
 80147aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80147ae:	e011      	b.n	80147d4 <create_name+0xec>
		w = lfn[di - 1];
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80147b6:	3b01      	subs	r3, #1
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	4413      	add	r3, r2
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80147c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147c4:	2b20      	cmp	r3, #32
 80147c6:	d002      	beq.n	80147ce <create_name+0xe6>
 80147c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147ca:	2b2e      	cmp	r3, #46	; 0x2e
 80147cc:	d106      	bne.n	80147dc <create_name+0xf4>
		di--;
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	3b01      	subs	r3, #1
 80147d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d1ea      	bne.n	80147b0 <create_name+0xc8>
 80147da:	e000      	b.n	80147de <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 80147dc:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <create_name+0x100>
 80147e4:	2306      	movs	r3, #6
 80147e6:	e133      	b.n	8014a50 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	4413      	add	r3, r2
 80147f0:	2200      	movs	r2, #0
 80147f2:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80147fa:	220b      	movs	r2, #11
 80147fc:	2120      	movs	r1, #32
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe fb97 	bl	8012f32 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014804:	2300      	movs	r3, #0
 8014806:	61bb      	str	r3, [r7, #24]
 8014808:	e002      	b.n	8014810 <create_name+0x128>
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	3301      	adds	r3, #1
 801480e:	61bb      	str	r3, [r7, #24]
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	68fa      	ldr	r2, [r7, #12]
 8014816:	4413      	add	r3, r2
 8014818:	881b      	ldrh	r3, [r3, #0]
 801481a:	2b20      	cmp	r3, #32
 801481c:	d0f5      	beq.n	801480a <create_name+0x122>
 801481e:	69bb      	ldr	r3, [r7, #24]
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	4413      	add	r3, r2
 8014826:	881b      	ldrh	r3, [r3, #0]
 8014828:	2b2e      	cmp	r3, #46	; 0x2e
 801482a:	d0ee      	beq.n	801480a <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 801482c:	69bb      	ldr	r3, [r7, #24]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d009      	beq.n	8014846 <create_name+0x15e>
 8014832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014836:	f043 0303 	orr.w	r3, r3, #3
 801483a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801483e:	e002      	b.n	8014846 <create_name+0x15e>
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	3b01      	subs	r3, #1
 8014844:	617b      	str	r3, [r7, #20]
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d009      	beq.n	8014860 <create_name+0x178>
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014852:	3b01      	subs	r3, #1
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	4413      	add	r3, r2
 801485a:	881b      	ldrh	r3, [r3, #0]
 801485c:	2b2e      	cmp	r3, #46	; 0x2e
 801485e:	d1ef      	bne.n	8014840 <create_name+0x158>

	b = i = 0; ni = 8;
 8014860:	2300      	movs	r3, #0
 8014862:	623b      	str	r3, [r7, #32]
 8014864:	2300      	movs	r3, #0
 8014866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801486a:	2308      	movs	r3, #8
 801486c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801486e:	69bb      	ldr	r3, [r7, #24]
 8014870:	1c5a      	adds	r2, r3, #1
 8014872:	61ba      	str	r2, [r7, #24]
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	4413      	add	r3, r2
 801487a:	881b      	ldrh	r3, [r3, #0]
 801487c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801487e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014880:	2b00      	cmp	r3, #0
 8014882:	f000 8090 	beq.w	80149a6 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014888:	2b20      	cmp	r3, #32
 801488a:	d006      	beq.n	801489a <create_name+0x1b2>
 801488c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801488e:	2b2e      	cmp	r3, #46	; 0x2e
 8014890:	d10a      	bne.n	80148a8 <create_name+0x1c0>
 8014892:	69ba      	ldr	r2, [r7, #24]
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	429a      	cmp	r2, r3
 8014898:	d006      	beq.n	80148a8 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 801489a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801489e:	f043 0303 	orr.w	r3, r3, #3
 80148a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148a6:	e07d      	b.n	80149a4 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80148a8:	6a3a      	ldr	r2, [r7, #32]
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d203      	bcs.n	80148b8 <create_name+0x1d0>
 80148b0:	69ba      	ldr	r2, [r7, #24]
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d123      	bne.n	8014900 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	2b0b      	cmp	r3, #11
 80148bc:	d106      	bne.n	80148cc <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 80148be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148c2:	f043 0303 	orr.w	r3, r3, #3
 80148c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148ca:	e076      	b.n	80149ba <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80148cc:	69ba      	ldr	r2, [r7, #24]
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d005      	beq.n	80148e0 <create_name+0x1f8>
 80148d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148d8:	f043 0303 	orr.w	r3, r3, #3
 80148dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80148e0:	69ba      	ldr	r2, [r7, #24]
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d867      	bhi.n	80149b8 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	61bb      	str	r3, [r7, #24]
 80148ec:	2308      	movs	r3, #8
 80148ee:	623b      	str	r3, [r7, #32]
 80148f0:	230b      	movs	r3, #11
 80148f2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80148f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80148fe:	e051      	b.n	80149a4 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014902:	2b7f      	cmp	r3, #127	; 0x7f
 8014904:	d914      	bls.n	8014930 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014908:	2100      	movs	r1, #0
 801490a:	4618      	mov	r0, r3
 801490c:	f001 fc8e 	bl	801622c <ff_convert>
 8014910:	4603      	mov	r3, r0
 8014912:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014916:	2b00      	cmp	r3, #0
 8014918:	d004      	beq.n	8014924 <create_name+0x23c>
 801491a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801491c:	3b80      	subs	r3, #128	; 0x80
 801491e:	4a24      	ldr	r2, [pc, #144]	; (80149b0 <create_name+0x2c8>)
 8014920:	5cd3      	ldrb	r3, [r2, r3]
 8014922:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014928:	f043 0302 	orr.w	r3, r3, #2
 801492c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014932:	2b00      	cmp	r3, #0
 8014934:	d007      	beq.n	8014946 <create_name+0x25e>
 8014936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014938:	4619      	mov	r1, r3
 801493a:	481e      	ldr	r0, [pc, #120]	; (80149b4 <create_name+0x2cc>)
 801493c:	f7fe fb3b 	bl	8012fb6 <chk_chr>
 8014940:	4603      	mov	r3, r0
 8014942:	2b00      	cmp	r3, #0
 8014944:	d008      	beq.n	8014958 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014946:	235f      	movs	r3, #95	; 0x5f
 8014948:	84bb      	strh	r3, [r7, #36]	; 0x24
 801494a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801494e:	f043 0303 	orr.w	r3, r3, #3
 8014952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014956:	e01b      	b.n	8014990 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801495a:	2b40      	cmp	r3, #64	; 0x40
 801495c:	d909      	bls.n	8014972 <create_name+0x28a>
 801495e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014960:	2b5a      	cmp	r3, #90	; 0x5a
 8014962:	d806      	bhi.n	8014972 <create_name+0x28a>
					b |= 2;
 8014964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014968:	f043 0302 	orr.w	r3, r3, #2
 801496c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014970:	e00e      	b.n	8014990 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014974:	2b60      	cmp	r3, #96	; 0x60
 8014976:	d90b      	bls.n	8014990 <create_name+0x2a8>
 8014978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801497a:	2b7a      	cmp	r3, #122	; 0x7a
 801497c:	d808      	bhi.n	8014990 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 801497e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014982:	f043 0301 	orr.w	r3, r3, #1
 8014986:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801498a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801498c:	3b20      	subs	r3, #32
 801498e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014996:	6a3b      	ldr	r3, [r7, #32]
 8014998:	1c59      	adds	r1, r3, #1
 801499a:	6239      	str	r1, [r7, #32]
 801499c:	4413      	add	r3, r2
 801499e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80149a0:	b2d2      	uxtb	r2, r2
 80149a2:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80149a4:	e763      	b.n	801486e <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 80149a6:	bf00      	nop
 80149a8:	e007      	b.n	80149ba <create_name+0x2d2>
 80149aa:	bf00      	nop
 80149ac:	0801b750 	.word	0x0801b750
 80149b0:	0801d064 	.word	0x0801d064
 80149b4:	0801b75c 	.word	0x0801b75c
			if (si > di) break;			/* No extension */
 80149b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	2be5      	cmp	r3, #229	; 0xe5
 80149c4:	d104      	bne.n	80149d0 <create_name+0x2e8>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80149cc:	2205      	movs	r2, #5
 80149ce:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80149d0:	69fb      	ldr	r3, [r7, #28]
 80149d2:	2b08      	cmp	r3, #8
 80149d4:	d104      	bne.n	80149e0 <create_name+0x2f8>
 80149d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80149e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80149e4:	f003 030c 	and.w	r3, r3, #12
 80149e8:	2b0c      	cmp	r3, #12
 80149ea:	d005      	beq.n	80149f8 <create_name+0x310>
 80149ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80149f0:	f003 0303 	and.w	r3, r3, #3
 80149f4:	2b03      	cmp	r3, #3
 80149f6:	d105      	bne.n	8014a04 <create_name+0x31c>
		cf |= NS_LFN;
 80149f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149fc:	f043 0302 	orr.w	r3, r3, #2
 8014a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a08:	f003 0302 	and.w	r3, r3, #2
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d117      	bne.n	8014a40 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014a10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a14:	f003 0303 	and.w	r3, r3, #3
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	d105      	bne.n	8014a28 <create_name+0x340>
 8014a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a20:	f043 0310 	orr.w	r3, r3, #16
 8014a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014a28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a2c:	f003 030c 	and.w	r3, r3, #12
 8014a30:	2b04      	cmp	r3, #4
 8014a32:	d105      	bne.n	8014a40 <create_name+0x358>
 8014a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a38:	f043 0308 	orr.w	r3, r3, #8
 8014a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014a46:	330b      	adds	r3, #11
 8014a48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014a4c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014a4e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3728      	adds	r7, #40	; 0x28
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b084      	sub	sp, #16
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	2b2f      	cmp	r3, #47	; 0x2f
 8014a68:	d003      	beq.n	8014a72 <follow_path+0x1a>
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	2b5c      	cmp	r3, #92	; 0x5c
 8014a70:	d102      	bne.n	8014a78 <follow_path+0x20>
		path++;
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	3301      	adds	r3, #1
 8014a76:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	2b1f      	cmp	r3, #31
 8014a86:	d80a      	bhi.n	8014a9e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8014a88:	2100      	movs	r1, #0
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f7ff f8a0 	bl	8013bd0 <dir_sdi>
 8014a90:	4603      	mov	r3, r0
 8014a92:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8014a9c:	e045      	b.n	8014b2a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff fe20 	bl	80146e8 <create_name>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8014aac:	7bfb      	ldrb	r3, [r7, #15]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d136      	bne.n	8014b20 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7ff fc49 	bl	801434a <dir_find>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014ac2:	7adb      	ldrb	r3, [r3, #11]
 8014ac4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8014ac6:	7bfb      	ldrb	r3, [r7, #15]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00a      	beq.n	8014ae2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014acc:	7bfb      	ldrb	r3, [r7, #15]
 8014ace:	2b04      	cmp	r3, #4
 8014ad0:	d128      	bne.n	8014b24 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014ad2:	7bbb      	ldrb	r3, [r7, #14]
 8014ad4:	f003 0304 	and.w	r3, r3, #4
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d123      	bne.n	8014b24 <follow_path+0xcc>
 8014adc:	2305      	movs	r3, #5
 8014ade:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8014ae0:	e020      	b.n	8014b24 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014ae2:	7bbb      	ldrb	r3, [r7, #14]
 8014ae4:	f003 0304 	and.w	r3, r3, #4
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d11d      	bne.n	8014b28 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014af2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	330b      	adds	r3, #11
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	f003 0310 	and.w	r3, r3, #16
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d102      	bne.n	8014b08 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8014b02:	2305      	movs	r3, #5
 8014b04:	73fb      	strb	r3, [r7, #15]
 8014b06:	e010      	b.n	8014b2a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014b0e:	68b9      	ldr	r1, [r7, #8]
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7ff fa32 	bl	8013f7a <ld_clust>
 8014b16:	4602      	mov	r2, r0
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014b1e:	e7be      	b.n	8014a9e <follow_path+0x46>
			if (res != FR_OK) break;
 8014b20:	bf00      	nop
 8014b22:	e002      	b.n	8014b2a <follow_path+0xd2>
				break;
 8014b24:	bf00      	nop
 8014b26:	e000      	b.n	8014b2a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014b28:	bf00      	nop
		}
	}

	return res;
 8014b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3710      	adds	r7, #16
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014b34:	b480      	push	{r7}
 8014b36:	b087      	sub	sp, #28
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d031      	beq.n	8014bae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	617b      	str	r3, [r7, #20]
 8014b50:	e002      	b.n	8014b58 <get_ldnumber+0x24>
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	3301      	adds	r3, #1
 8014b56:	617b      	str	r3, [r7, #20]
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	2b1f      	cmp	r3, #31
 8014b5e:	d903      	bls.n	8014b68 <get_ldnumber+0x34>
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	2b3a      	cmp	r3, #58	; 0x3a
 8014b66:	d1f4      	bne.n	8014b52 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	2b3a      	cmp	r3, #58	; 0x3a
 8014b6e:	d11c      	bne.n	8014baa <get_ldnumber+0x76>
			tp = *path;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	1c5a      	adds	r2, r3, #1
 8014b7a:	60fa      	str	r2, [r7, #12]
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	3b30      	subs	r3, #48	; 0x30
 8014b80:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	2b09      	cmp	r3, #9
 8014b86:	d80e      	bhi.n	8014ba6 <get_ldnumber+0x72>
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d10a      	bne.n	8014ba6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d107      	bne.n	8014ba6 <get_ldnumber+0x72>
					vol = (int)i;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	617b      	str	r3, [r7, #20]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	697a      	ldr	r2, [r7, #20]
 8014ba4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	e002      	b.n	8014bb0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014baa:	2300      	movs	r3, #0
 8014bac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014bae:	693b      	ldr	r3, [r7, #16]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	371c      	adds	r7, #28
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bba:	4770      	bx	lr

08014bbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8014bd4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8014bd8:	6839      	ldr	r1, [r7, #0]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f7fe fc07 	bl	80133ee <move_window>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d001      	beq.n	8014bea <check_fs+0x2e>
		return 3;
 8014be6:	2303      	movs	r3, #3
 8014be8:	e04a      	b.n	8014c80 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	781b      	ldrb	r3, [r3, #0]
 8014bf4:	021b      	lsls	r3, r3, #8
 8014bf6:	b21a      	sxth	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8014bfe:	b21b      	sxth	r3, r3
 8014c00:	4313      	orrs	r3, r2
 8014c02:	b21b      	sxth	r3, r3
 8014c04:	4a20      	ldr	r2, [pc, #128]	; (8014c88 <check_fs+0xcc>)
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d001      	beq.n	8014c0e <check_fs+0x52>
		return 2;
 8014c0a:	2302      	movs	r3, #2
 8014c0c:	e038      	b.n	8014c80 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	3336      	adds	r3, #54	; 0x36
 8014c12:	3303      	adds	r3, #3
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	061a      	lsls	r2, r3, #24
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	3336      	adds	r3, #54	; 0x36
 8014c1c:	3302      	adds	r3, #2
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	041b      	lsls	r3, r3, #16
 8014c22:	4313      	orrs	r3, r2
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	3236      	adds	r2, #54	; 0x36
 8014c28:	3201      	adds	r2, #1
 8014c2a:	7812      	ldrb	r2, [r2, #0]
 8014c2c:	0212      	lsls	r2, r2, #8
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8014c36:	4313      	orrs	r3, r2
 8014c38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014c3c:	4a13      	ldr	r2, [pc, #76]	; (8014c8c <check_fs+0xd0>)
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	d101      	bne.n	8014c46 <check_fs+0x8a>
		return 0;
 8014c42:	2300      	movs	r3, #0
 8014c44:	e01c      	b.n	8014c80 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	3352      	adds	r3, #82	; 0x52
 8014c4a:	3303      	adds	r3, #3
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	061a      	lsls	r2, r3, #24
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	3352      	adds	r3, #82	; 0x52
 8014c54:	3302      	adds	r3, #2
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	041b      	lsls	r3, r3, #16
 8014c5a:	4313      	orrs	r3, r2
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	3252      	adds	r2, #82	; 0x52
 8014c60:	3201      	adds	r2, #1
 8014c62:	7812      	ldrb	r2, [r2, #0]
 8014c64:	0212      	lsls	r2, r2, #8
 8014c66:	4313      	orrs	r3, r2
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8014c6e:	4313      	orrs	r3, r2
 8014c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014c74:	4a05      	ldr	r2, [pc, #20]	; (8014c8c <check_fs+0xd0>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d101      	bne.n	8014c7e <check_fs+0xc2>
		return 0;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	e000      	b.n	8014c80 <check_fs+0xc4>

	return 1;
 8014c7e:	2301      	movs	r3, #1
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	ffffaa55 	.word	0xffffaa55
 8014c8c:	00544146 	.word	0x00544146

08014c90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b096      	sub	sp, #88	; 0x58
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014ca4:	68b8      	ldr	r0, [r7, #8]
 8014ca6:	f7ff ff45 	bl	8014b34 <get_ldnumber>
 8014caa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	da01      	bge.n	8014cb6 <find_volume+0x26>
 8014cb2:	230b      	movs	r3, #11
 8014cb4:	e2a8      	b.n	8015208 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014cb6:	4a9d      	ldr	r2, [pc, #628]	; (8014f2c <find_volume+0x29c>)
 8014cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d101      	bne.n	8014cca <find_volume+0x3a>
 8014cc6:	230c      	movs	r3, #12
 8014cc8:	e29e      	b.n	8015208 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cce:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8014cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d01b      	beq.n	8014d12 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8014cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cdc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7fe f869 	bl	8012db8 <disk_status>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014cec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cf0:	f003 0301 	and.w	r3, r3, #1
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d10c      	bne.n	8014d12 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8014cf8:	79fb      	ldrb	r3, [r7, #7]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d007      	beq.n	8014d0e <find_volume+0x7e>
 8014cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d02:	f003 0304 	and.w	r3, r3, #4
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d001      	beq.n	8014d0e <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8014d0a:	230a      	movs	r3, #10
 8014d0c:	e27c      	b.n	8015208 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8014d0e:	2300      	movs	r3, #0
 8014d10:	e27a      	b.n	8015208 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d14:	2200      	movs	r2, #0
 8014d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d1c:	b2da      	uxtb	r2, r3
 8014d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7fe f85e 	bl	8012dec <disk_initialize>
 8014d30:	4603      	mov	r3, r0
 8014d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8014d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d3a:	f003 0301 	and.w	r3, r3, #1
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d001      	beq.n	8014d46 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014d42:	2303      	movs	r3, #3
 8014d44:	e260      	b.n	8015208 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8014d46:	79fb      	ldrb	r3, [r7, #7]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d007      	beq.n	8014d5c <find_volume+0xcc>
 8014d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d50:	f003 0304 	and.w	r3, r3, #4
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d001      	beq.n	8014d5c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8014d58:	230a      	movs	r3, #10
 8014d5a:	e255      	b.n	8015208 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8014d60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014d64:	f7ff ff2a 	bl	8014bbc <check_fs>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8014d6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	d153      	bne.n	8014e1e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8014d76:	2300      	movs	r3, #0
 8014d78:	643b      	str	r3, [r7, #64]	; 0x40
 8014d7a:	e028      	b.n	8014dce <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8014d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d80:	011b      	lsls	r3, r3, #4
 8014d82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014d86:	4413      	add	r3, r2
 8014d88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8014d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d8c:	3304      	adds	r3, #4
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d012      	beq.n	8014dba <find_volume+0x12a>
 8014d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d96:	330b      	adds	r3, #11
 8014d98:	781b      	ldrb	r3, [r3, #0]
 8014d9a:	061a      	lsls	r2, r3, #24
 8014d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9e:	330a      	adds	r3, #10
 8014da0:	781b      	ldrb	r3, [r3, #0]
 8014da2:	041b      	lsls	r3, r3, #16
 8014da4:	4313      	orrs	r3, r2
 8014da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014da8:	3209      	adds	r2, #9
 8014daa:	7812      	ldrb	r2, [r2, #0]
 8014dac:	0212      	lsls	r2, r2, #8
 8014dae:	4313      	orrs	r3, r2
 8014db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014db2:	3208      	adds	r2, #8
 8014db4:	7812      	ldrb	r2, [r2, #0]
 8014db6:	431a      	orrs	r2, r3
 8014db8:	e000      	b.n	8014dbc <find_volume+0x12c>
 8014dba:	2200      	movs	r2, #0
 8014dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dbe:	009b      	lsls	r3, r3, #2
 8014dc0:	3358      	adds	r3, #88	; 0x58
 8014dc2:	443b      	add	r3, r7
 8014dc4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8014dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dca:	3301      	adds	r3, #1
 8014dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8014dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dd0:	2b03      	cmp	r3, #3
 8014dd2:	d9d3      	bls.n	8014d7c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d002      	beq.n	8014de4 <find_volume+0x154>
 8014dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014de0:	3b01      	subs	r3, #1
 8014de2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8014de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014de6:	009b      	lsls	r3, r3, #2
 8014de8:	3358      	adds	r3, #88	; 0x58
 8014dea:	443b      	add	r3, r7
 8014dec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014df0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8014df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d005      	beq.n	8014e04 <find_volume+0x174>
 8014df8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014dfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014dfc:	f7ff fede 	bl	8014bbc <check_fs>
 8014e00:	4603      	mov	r3, r0
 8014e02:	e000      	b.n	8014e06 <find_volume+0x176>
 8014e04:	2302      	movs	r3, #2
 8014e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8014e0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d005      	beq.n	8014e1e <find_volume+0x18e>
 8014e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e14:	3301      	adds	r3, #1
 8014e16:	643b      	str	r3, [r7, #64]	; 0x40
 8014e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e1a:	2b03      	cmp	r3, #3
 8014e1c:	d9e2      	bls.n	8014de4 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e22:	2b03      	cmp	r3, #3
 8014e24:	d101      	bne.n	8014e2a <find_volume+0x19a>
 8014e26:	2301      	movs	r3, #1
 8014e28:	e1ee      	b.n	8015208 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8014e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d001      	beq.n	8014e36 <find_volume+0x1a6>
 8014e32:	230d      	movs	r3, #13
 8014e34:	e1e8      	b.n	8015208 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e38:	7b1b      	ldrb	r3, [r3, #12]
 8014e3a:	021b      	lsls	r3, r3, #8
 8014e3c:	b21a      	sxth	r2, r3
 8014e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e40:	7adb      	ldrb	r3, [r3, #11]
 8014e42:	b21b      	sxth	r3, r3
 8014e44:	4313      	orrs	r3, r2
 8014e46:	b21b      	sxth	r3, r3
 8014e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e4c:	d001      	beq.n	8014e52 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8014e4e:	230d      	movs	r3, #13
 8014e50:	e1da      	b.n	8015208 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8014e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e54:	7ddb      	ldrb	r3, [r3, #23]
 8014e56:	021b      	lsls	r3, r3, #8
 8014e58:	b21a      	sxth	r2, r3
 8014e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e5c:	7d9b      	ldrb	r3, [r3, #22]
 8014e5e:	b21b      	sxth	r3, r3
 8014e60:	4313      	orrs	r3, r2
 8014e62:	b21b      	sxth	r3, r3
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8014e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d112      	bne.n	8014e94 <find_volume+0x204>
 8014e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8014e74:	061a      	lsls	r2, r3, #24
 8014e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8014e7c:	041b      	lsls	r3, r3, #16
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e82:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8014e86:	0212      	lsls	r2, r2, #8
 8014e88:	4313      	orrs	r3, r2
 8014e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e8c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014e90:	4313      	orrs	r3, r2
 8014e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8014e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8014e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9e:	7c1a      	ldrb	r2, [r3, #16]
 8014ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8014ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d006      	beq.n	8014ebe <find_volume+0x22e>
 8014eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8014eb6:	2b02      	cmp	r3, #2
 8014eb8:	d001      	beq.n	8014ebe <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8014eba:	230d      	movs	r3, #13
 8014ebc:	e1a4      	b.n	8015208 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8014ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ec8:	fb02 f303 	mul.w	r3, r2, r3
 8014ecc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8014ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed0:	7b5a      	ldrb	r2, [r3, #13]
 8014ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8014ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eda:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d00a      	beq.n	8014ef8 <find_volume+0x268>
 8014ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ee4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014ee8:	461a      	mov	r2, r3
 8014eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8014ef8:	230d      	movs	r3, #13
 8014efa:	e185      	b.n	8015208 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8014efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014efe:	7c9b      	ldrb	r3, [r3, #18]
 8014f00:	021b      	lsls	r3, r3, #8
 8014f02:	b21a      	sxth	r2, r3
 8014f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f06:	7c5b      	ldrb	r3, [r3, #17]
 8014f08:	b21b      	sxth	r3, r3
 8014f0a:	4313      	orrs	r3, r2
 8014f0c:	b21b      	sxth	r3, r3
 8014f0e:	b29a      	uxth	r2, r3
 8014f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f12:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8014f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f18:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8014f1c:	f003 030f 	and.w	r3, r3, #15
 8014f20:	b29b      	uxth	r3, r3
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d004      	beq.n	8014f30 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8014f26:	230d      	movs	r3, #13
 8014f28:	e16e      	b.n	8015208 <find_volume+0x578>
 8014f2a:	bf00      	nop
 8014f2c:	20009690 	.word	0x20009690

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8014f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f32:	7d1b      	ldrb	r3, [r3, #20]
 8014f34:	021b      	lsls	r3, r3, #8
 8014f36:	b21a      	sxth	r2, r3
 8014f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3a:	7cdb      	ldrb	r3, [r3, #19]
 8014f3c:	b21b      	sxth	r3, r3
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	b21b      	sxth	r3, r3
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8014f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d112      	bne.n	8014f72 <find_volume+0x2e2>
 8014f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8014f52:	061a      	lsls	r2, r3, #24
 8014f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014f5a:	041b      	lsls	r3, r3, #16
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f60:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8014f64:	0212      	lsls	r2, r2, #8
 8014f66:	4313      	orrs	r3, r2
 8014f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014f6e:	4313      	orrs	r3, r2
 8014f70:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8014f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f74:	7bdb      	ldrb	r3, [r3, #15]
 8014f76:	021b      	lsls	r3, r3, #8
 8014f78:	b21a      	sxth	r2, r3
 8014f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f7c:	7b9b      	ldrb	r3, [r3, #14]
 8014f7e:	b21b      	sxth	r3, r3
 8014f80:	4313      	orrs	r3, r2
 8014f82:	b21b      	sxth	r3, r3
 8014f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8014f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d101      	bne.n	8014f90 <find_volume+0x300>
 8014f8c:	230d      	movs	r3, #13
 8014f8e:	e13b      	b.n	8015208 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8014f90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f94:	4413      	add	r3, r2
 8014f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f98:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8014f9c:	0912      	lsrs	r2, r2, #4
 8014f9e:	b292      	uxth	r2, r2
 8014fa0:	4413      	add	r3, r2
 8014fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d201      	bcs.n	8014fb0 <find_volume+0x320>
 8014fac:	230d      	movs	r3, #13
 8014fae:	e12b      	b.n	8015208 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8014fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb4:	1ad3      	subs	r3, r2, r3
 8014fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fb8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8014fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014fc0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <find_volume+0x33c>
 8014fc8:	230d      	movs	r3, #13
 8014fca:	e11d      	b.n	8015208 <find_volume+0x578>
	fmt = FS_FAT12;
 8014fcc:	2301      	movs	r3, #1
 8014fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8014fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014fd8:	4293      	cmp	r3, r2
 8014fda:	d902      	bls.n	8014fe2 <find_volume+0x352>
 8014fdc:	2302      	movs	r3, #2
 8014fde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	d902      	bls.n	8014ff2 <find_volume+0x362>
 8014fec:	2303      	movs	r3, #3
 8014fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff4:	1c9a      	adds	r2, r3, #2
 8014ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8014ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015000:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8015004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015008:	441a      	add	r2, r3
 801500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8015010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015014:	441a      	add	r2, r3
 8015016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015018:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 801501c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015020:	2b03      	cmp	r3, #3
 8015022:	d121      	bne.n	8015068 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8015024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015026:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801502a:	2b00      	cmp	r3, #0
 801502c:	d001      	beq.n	8015032 <find_volume+0x3a2>
 801502e:	230d      	movs	r3, #13
 8015030:	e0ea      	b.n	8015208 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8015032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015038:	061a      	lsls	r2, r3, #24
 801503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8015040:	041b      	lsls	r3, r3, #16
 8015042:	4313      	orrs	r3, r2
 8015044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015046:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801504a:	0212      	lsls	r2, r2, #8
 801504c:	4313      	orrs	r3, r2
 801504e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015050:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8015054:	431a      	orrs	r2, r3
 8015056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015058:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 801505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801505e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	647b      	str	r3, [r7, #68]	; 0x44
 8015066:	e025      	b.n	80150b4 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8015068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801506a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801506e:	2b00      	cmp	r3, #0
 8015070:	d101      	bne.n	8015076 <find_volume+0x3e6>
 8015072:	230d      	movs	r3, #13
 8015074:	e0c8      	b.n	8015208 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8015076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015078:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801507c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801507e:	441a      	add	r2, r3
 8015080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015082:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801508a:	2b02      	cmp	r3, #2
 801508c:	d104      	bne.n	8015098 <find_volume+0x408>
 801508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015094:	005b      	lsls	r3, r3, #1
 8015096:	e00c      	b.n	80150b2 <find_volume+0x422>
 8015098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801509a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801509e:	4613      	mov	r3, r2
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	4413      	add	r3, r2
 80150a4:	085a      	lsrs	r2, r3, #1
 80150a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80150ac:	f003 0301 	and.w	r3, r3, #1
 80150b0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80150b2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80150b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80150ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80150c0:	0a5b      	lsrs	r3, r3, #9
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d201      	bcs.n	80150ca <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80150c6:	230d      	movs	r3, #13
 80150c8:	e09e      	b.n	8015208 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80150ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150cc:	f04f 32ff 	mov.w	r2, #4294967295
 80150d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80150d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80150da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80150e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e2:	2280      	movs	r2, #128	; 0x80
 80150e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80150e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80150ec:	2b03      	cmp	r3, #3
 80150ee:	d177      	bne.n	80151e0 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80150f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150f6:	021b      	lsls	r3, r3, #8
 80150f8:	b21a      	sxth	r2, r3
 80150fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015100:	b21b      	sxth	r3, r3
 8015102:	4313      	orrs	r3, r2
 8015104:	b21b      	sxth	r3, r3
 8015106:	2b01      	cmp	r3, #1
 8015108:	d16a      	bne.n	80151e0 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 801510a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801510c:	3301      	adds	r3, #1
 801510e:	4619      	mov	r1, r3
 8015110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015112:	f7fe f96c 	bl	80133ee <move_window>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d161      	bne.n	80151e0 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 801511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511e:	2200      	movs	r2, #0
 8015120:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015126:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 801512a:	021b      	lsls	r3, r3, #8
 801512c:	b21a      	sxth	r2, r3
 801512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015130:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8015134:	b21b      	sxth	r3, r3
 8015136:	4313      	orrs	r3, r2
 8015138:	b21b      	sxth	r3, r3
 801513a:	4a35      	ldr	r2, [pc, #212]	; (8015210 <find_volume+0x580>)
 801513c:	4293      	cmp	r3, r2
 801513e:	d14f      	bne.n	80151e0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8015140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015142:	78db      	ldrb	r3, [r3, #3]
 8015144:	061a      	lsls	r2, r3, #24
 8015146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015148:	789b      	ldrb	r3, [r3, #2]
 801514a:	041b      	lsls	r3, r3, #16
 801514c:	4313      	orrs	r3, r2
 801514e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015150:	7852      	ldrb	r2, [r2, #1]
 8015152:	0212      	lsls	r2, r2, #8
 8015154:	4313      	orrs	r3, r2
 8015156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015158:	7812      	ldrb	r2, [r2, #0]
 801515a:	4313      	orrs	r3, r2
 801515c:	4a2d      	ldr	r2, [pc, #180]	; (8015214 <find_volume+0x584>)
 801515e:	4293      	cmp	r3, r2
 8015160:	d13e      	bne.n	80151e0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8015168:	061a      	lsls	r2, r3, #24
 801516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801516c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8015170:	041b      	lsls	r3, r3, #16
 8015172:	4313      	orrs	r3, r2
 8015174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015176:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 801517a:	0212      	lsls	r2, r2, #8
 801517c:	4313      	orrs	r3, r2
 801517e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015180:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8015184:	4313      	orrs	r3, r2
 8015186:	4a24      	ldr	r2, [pc, #144]	; (8015218 <find_volume+0x588>)
 8015188:	4293      	cmp	r3, r2
 801518a:	d129      	bne.n	80151e0 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 801518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801518e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8015192:	061a      	lsls	r2, r3, #24
 8015194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015196:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801519a:	041b      	lsls	r3, r3, #16
 801519c:	4313      	orrs	r3, r2
 801519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80151a4:	0212      	lsls	r2, r2, #8
 80151a6:	4313      	orrs	r3, r2
 80151a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80151ae:	431a      	orrs	r2, r3
 80151b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80151b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80151bc:	061a      	lsls	r2, r3, #24
 80151be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80151c4:	041b      	lsls	r3, r3, #16
 80151c6:	4313      	orrs	r3, r2
 80151c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80151ce:	0212      	lsls	r2, r2, #8
 80151d0:	4313      	orrs	r3, r2
 80151d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80151d8:	431a      	orrs	r2, r3
 80151da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80151e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80151e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80151ea:	4b0c      	ldr	r3, [pc, #48]	; (801521c <find_volume+0x58c>)
 80151ec:	881b      	ldrh	r3, [r3, #0]
 80151ee:	3301      	adds	r3, #1
 80151f0:	b29a      	uxth	r2, r3
 80151f2:	4b0a      	ldr	r3, [pc, #40]	; (801521c <find_volume+0x58c>)
 80151f4:	801a      	strh	r2, [r3, #0]
 80151f6:	4b09      	ldr	r3, [pc, #36]	; (801521c <find_volume+0x58c>)
 80151f8:	881a      	ldrh	r2, [r3, #0]
 80151fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8015200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015202:	f7fe f881 	bl	8013308 <clear_lock>
#endif

	return FR_OK;
 8015206:	2300      	movs	r3, #0
}
 8015208:	4618      	mov	r0, r3
 801520a:	3758      	adds	r7, #88	; 0x58
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}
 8015210:	ffffaa55 	.word	0xffffaa55
 8015214:	41615252 	.word	0x41615252
 8015218:	61417272 	.word	0x61417272
 801521c:	20009694 	.word	0x20009694

08015220 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d022      	beq.n	8015278 <validate+0x58>
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015238:	2b00      	cmp	r3, #0
 801523a:	d01d      	beq.n	8015278 <validate+0x58>
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015242:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015246:	2b00      	cmp	r3, #0
 8015248:	d016      	beq.n	8015278 <validate+0x58>
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015250:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 801525a:	429a      	cmp	r2, r3
 801525c:	d10c      	bne.n	8015278 <validate+0x58>
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015264:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8015268:	4618      	mov	r0, r3
 801526a:	f7fd fda5 	bl	8012db8 <disk_status>
 801526e:	4603      	mov	r3, r0
 8015270:	f003 0301 	and.w	r3, r3, #1
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8015278:	2309      	movs	r3, #9
 801527a:	e000      	b.n	801527e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	4618      	mov	r0, r3
 8015280:	3710      	adds	r7, #16
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
	...

08015288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b088      	sub	sp, #32
 801528c:	af00      	add	r7, sp, #0
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	60b9      	str	r1, [r7, #8]
 8015292:	4613      	mov	r3, r2
 8015294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801529a:	f107 0310 	add.w	r3, r7, #16
 801529e:	4618      	mov	r0, r3
 80152a0:	f7ff fc48 	bl	8014b34 <get_ldnumber>
 80152a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	da01      	bge.n	80152b0 <f_mount+0x28>
 80152ac:	230b      	movs	r3, #11
 80152ae:	e02d      	b.n	801530c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80152b0:	4a18      	ldr	r2, [pc, #96]	; (8015314 <f_mount+0x8c>)
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80152ba:	69bb      	ldr	r3, [r7, #24]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d006      	beq.n	80152ce <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80152c0:	69b8      	ldr	r0, [r7, #24]
 80152c2:	f7fe f821 	bl	8013308 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80152c6:	69bb      	ldr	r3, [r7, #24]
 80152c8:	2200      	movs	r2, #0
 80152ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d003      	beq.n	80152dc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2200      	movs	r2, #0
 80152d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80152dc:	68fa      	ldr	r2, [r7, #12]
 80152de:	490d      	ldr	r1, [pc, #52]	; (8015314 <f_mount+0x8c>)
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d002      	beq.n	80152f2 <f_mount+0x6a>
 80152ec:	79fb      	ldrb	r3, [r7, #7]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d001      	beq.n	80152f6 <f_mount+0x6e>
 80152f2:	2300      	movs	r3, #0
 80152f4:	e00a      	b.n	801530c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80152f6:	f107 0108 	add.w	r1, r7, #8
 80152fa:	f107 030c 	add.w	r3, r7, #12
 80152fe:	2200      	movs	r2, #0
 8015300:	4618      	mov	r0, r3
 8015302:	f7ff fcc5 	bl	8014c90 <find_volume>
 8015306:	4603      	mov	r3, r0
 8015308:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801530a:	7dfb      	ldrb	r3, [r7, #23]
}
 801530c:	4618      	mov	r0, r3
 801530e:	3720      	adds	r7, #32
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	20009690 	.word	0x20009690

08015318 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801531e:	af00      	add	r7, sp, #0
 8015320:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015328:	6018      	str	r0, [r3, #0]
 801532a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801532e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8015332:	6019      	str	r1, [r3, #0]
 8015334:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015338:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 801533c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 801533e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015342:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d101      	bne.n	8015350 <f_open+0x38>
 801534c:	2309      	movs	r3, #9
 801534e:	e260      	b.n	8015812 <f_open+0x4fa>
	fp->fs = 0;			/* Clear file object */
 8015350:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	2200      	movs	r2, #0
 801535c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8015360:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015364:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015368:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801536c:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 8015370:	7812      	ldrb	r2, [r2, #0]
 8015372:	f002 021f 	and.w	r2, r2, #31
 8015376:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8015378:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801537c:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015380:	781b      	ldrb	r3, [r3, #0]
 8015382:	f023 0301 	bic.w	r3, r3, #1
 8015386:	b2da      	uxtb	r2, r3
 8015388:	f107 0108 	add.w	r1, r7, #8
 801538c:	f107 0320 	add.w	r3, r7, #32
 8015390:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015394:	4618      	mov	r0, r3
 8015396:	f7ff fc7b 	bl	8014c90 <find_volume>
 801539a:	4603      	mov	r3, r0
 801539c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80153a0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	f040 8232 	bne.w	801580e <f_open+0x4f6>
		INIT_BUF(dj);
 80153aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153ae:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80153b2:	f107 0214 	add.w	r2, r7, #20
 80153b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80153ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153be:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80153c2:	4a9d      	ldr	r2, [pc, #628]	; (8015638 <f_open+0x320>)
 80153c4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 80153c8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153cc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	f107 0320 	add.w	r3, r7, #32
 80153d6:	4611      	mov	r1, r2
 80153d8:	4618      	mov	r0, r3
 80153da:	f7ff fb3d 	bl	8014a58 <follow_path>
 80153de:	4603      	mov	r3, r0
 80153e0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 80153e4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80153e8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80153ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80153f0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80153f4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d11d      	bne.n	8015438 <f_open+0x120>
			if (!dir)	/* Default directory itself */
 80153fc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015400:	2b00      	cmp	r3, #0
 8015402:	d103      	bne.n	801540c <f_open+0xf4>
				res = FR_INVALID_NAME;
 8015404:	2306      	movs	r3, #6
 8015406:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 801540a:	e015      	b.n	8015438 <f_open+0x120>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801540c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015410:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015414:	781b      	ldrb	r3, [r3, #0]
 8015416:	f023 0301 	bic.w	r3, r3, #1
 801541a:	2b00      	cmp	r3, #0
 801541c:	bf14      	ite	ne
 801541e:	2301      	movne	r3, #1
 8015420:	2300      	moveq	r3, #0
 8015422:	b2db      	uxtb	r3, r3
 8015424:	461a      	mov	r2, r3
 8015426:	f107 0320 	add.w	r3, r7, #32
 801542a:	4611      	mov	r1, r2
 801542c:	4618      	mov	r0, r3
 801542e:	f7fd fddd 	bl	8012fec <chk_lock>
 8015432:	4603      	mov	r3, r0
 8015434:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015438:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801543c:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	f003 031c 	and.w	r3, r3, #28
 8015446:	2b00      	cmp	r3, #0
 8015448:	f000 80e6 	beq.w	8015618 <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 801544c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015450:	2b00      	cmp	r3, #0
 8015452:	d027      	beq.n	80154a4 <f_open+0x18c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8015454:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015458:	2b04      	cmp	r3, #4
 801545a:	d10e      	bne.n	801547a <f_open+0x162>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801545c:	f7fd fe34 	bl	80130c8 <enq_lock>
 8015460:	4603      	mov	r3, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d006      	beq.n	8015474 <f_open+0x15c>
 8015466:	f107 0320 	add.w	r3, r7, #32
 801546a:	4618      	mov	r0, r3
 801546c:	f7ff f82e 	bl	80144cc <dir_register>
 8015470:	4603      	mov	r3, r0
 8015472:	e000      	b.n	8015476 <f_open+0x15e>
 8015474:	2312      	movs	r3, #18
 8015476:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801547a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801547e:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015482:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8015486:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 801548a:	7812      	ldrb	r2, [r2, #0]
 801548c:	f042 0208 	orr.w	r2, r2, #8
 8015490:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8015492:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015496:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801549a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801549e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80154a2:	e017      	b.n	80154d4 <f_open+0x1bc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80154a4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80154a8:	330b      	adds	r3, #11
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	f003 0311 	and.w	r3, r3, #17
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d003      	beq.n	80154bc <f_open+0x1a4>
					res = FR_DENIED;
 80154b4:	2307      	movs	r3, #7
 80154b6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80154ba:	e00b      	b.n	80154d4 <f_open+0x1bc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80154bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80154c0:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	f003 0304 	and.w	r3, r3, #4
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d002      	beq.n	80154d4 <f_open+0x1bc>
						res = FR_EXIST;
 80154ce:	2308      	movs	r3, #8
 80154d0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80154d4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f040 80c3 	bne.w	8015664 <f_open+0x34c>
 80154de:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80154e2:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	f003 0308 	and.w	r3, r3, #8
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	f000 80b9 	beq.w	8015664 <f_open+0x34c>
				dw = GET_FATTIME();				/* Created time */
 80154f2:	f7fa faf3 	bl	800fadc <get_fattime>
 80154f6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 80154fa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80154fe:	330e      	adds	r3, #14
 8015500:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8015504:	b2d2      	uxtb	r2, r2
 8015506:	701a      	strb	r2, [r3, #0]
 8015508:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801550c:	b29b      	uxth	r3, r3
 801550e:	0a1b      	lsrs	r3, r3, #8
 8015510:	b29a      	uxth	r2, r3
 8015512:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015516:	330f      	adds	r3, #15
 8015518:	b2d2      	uxtb	r2, r2
 801551a:	701a      	strb	r2, [r3, #0]
 801551c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015520:	0c1a      	lsrs	r2, r3, #16
 8015522:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015526:	3310      	adds	r3, #16
 8015528:	b2d2      	uxtb	r2, r2
 801552a:	701a      	strb	r2, [r3, #0]
 801552c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015530:	0e1a      	lsrs	r2, r3, #24
 8015532:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015536:	3311      	adds	r3, #17
 8015538:	b2d2      	uxtb	r2, r2
 801553a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 801553c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015540:	330b      	adds	r3, #11
 8015542:	2200      	movs	r2, #0
 8015544:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8015546:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801554a:	331c      	adds	r3, #28
 801554c:	2200      	movs	r2, #0
 801554e:	701a      	strb	r2, [r3, #0]
 8015550:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015554:	331d      	adds	r3, #29
 8015556:	2200      	movs	r2, #0
 8015558:	701a      	strb	r2, [r3, #0]
 801555a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801555e:	331e      	adds	r3, #30
 8015560:	2200      	movs	r2, #0
 8015562:	701a      	strb	r2, [r3, #0]
 8015564:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015568:	331f      	adds	r3, #31
 801556a:	2200      	movs	r2, #0
 801556c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801556e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015572:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801557a:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 801557e:	4618      	mov	r0, r3
 8015580:	f7fe fcfb 	bl	8013f7a <ld_clust>
 8015584:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 8015588:	2100      	movs	r1, #0
 801558a:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 801558e:	f7fe fd22 	bl	8013fd6 <st_clust>
				dj.fs->wflag = 1;
 8015592:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015596:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801559a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801559e:	2201      	movs	r2, #1
 80155a0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80155a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d05b      	beq.n	8015664 <f_open+0x34c>
					dw = dj.fs->winsect;
 80155ac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80155b0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80155b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80155b8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80155bc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 80155c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80155c4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80155c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80155cc:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe f9d1 	bl	8013978 <remove_chain>
 80155d6:	4603      	mov	r3, r0
 80155d8:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 80155dc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d13f      	bne.n	8015664 <f_open+0x34c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80155e4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80155e8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80155ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80155f0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80155f4:	3a01      	subs	r2, #1
 80155f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80155fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80155fe:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8015602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015606:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 801560a:	4618      	mov	r0, r3
 801560c:	f7fd feef 	bl	80133ee <move_window>
 8015610:	4603      	mov	r3, r0
 8015612:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015616:	e025      	b.n	8015664 <f_open+0x34c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8015618:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801561c:	2b00      	cmp	r3, #0
 801561e:	d121      	bne.n	8015664 <f_open+0x34c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8015620:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015624:	330b      	adds	r3, #11
 8015626:	781b      	ldrb	r3, [r3, #0]
 8015628:	f003 0310 	and.w	r3, r3, #16
 801562c:	2b00      	cmp	r3, #0
 801562e:	d005      	beq.n	801563c <f_open+0x324>
					res = FR_NO_FILE;
 8015630:	2304      	movs	r3, #4
 8015632:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8015636:	e015      	b.n	8015664 <f_open+0x34c>
 8015638:	20009800 	.word	0x20009800
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801563c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015640:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	f003 0302 	and.w	r3, r3, #2
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00a      	beq.n	8015664 <f_open+0x34c>
 801564e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015652:	330b      	adds	r3, #11
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	f003 0301 	and.w	r3, r3, #1
 801565a:	2b00      	cmp	r3, #0
 801565c:	d002      	beq.n	8015664 <f_open+0x34c>
						res = FR_DENIED;
 801565e:	2307      	movs	r3, #7
 8015660:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 8015664:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015668:	2b00      	cmp	r3, #0
 801566a:	d153      	bne.n	8015714 <f_open+0x3fc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801566c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015670:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	f003 0308 	and.w	r3, r3, #8
 801567a:	2b00      	cmp	r3, #0
 801567c:	d00b      	beq.n	8015696 <f_open+0x37e>
				mode |= FA__WRITTEN;
 801567e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015682:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 8015686:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801568a:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 801568e:	7812      	ldrb	r2, [r2, #0]
 8015690:	f042 0220 	orr.w	r2, r2, #32
 8015694:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8015696:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801569a:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801569e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80156a2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80156a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80156aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80156b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80156b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80156c2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80156c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80156ca:	f2a3 2351 	subw	r3, r3, #593	; 0x251
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	f023 0301 	bic.w	r3, r3, #1
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	bf14      	ite	ne
 80156d8:	2301      	movne	r3, #1
 80156da:	2300      	moveq	r3, #0
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	461a      	mov	r2, r3
 80156e0:	f107 0320 	add.w	r3, r7, #32
 80156e4:	4611      	mov	r1, r2
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fd fd12 	bl	8013110 <inc_lock>
 80156ec:	4602      	mov	r2, r0
 80156ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80156f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80156fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801570a:	2b00      	cmp	r3, #0
 801570c:	d102      	bne.n	8015714 <f_open+0x3fc>
 801570e:	2302      	movs	r3, #2
 8015710:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8015714:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8015718:	2b00      	cmp	r3, #0
 801571a:	d178      	bne.n	801580e <f_open+0x4f6>
			fp->flag = mode;					/* File access mode */
 801571c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	f507 7216 	add.w	r2, r7, #600	; 0x258
 801572a:	f2a2 2251 	subw	r2, r2, #593	; 0x251
 801572e:	7812      	ldrb	r2, [r2, #0]
 8015730:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8015734:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2200      	movs	r2, #0
 8015740:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8015744:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015748:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801574c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015750:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8015754:	4618      	mov	r0, r3
 8015756:	f7fe fc10 	bl	8013f7a <ld_clust>
 801575a:	4602      	mov	r2, r0
 801575c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801576a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801576e:	331f      	adds	r3, #31
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	061a      	lsls	r2, r3, #24
 8015774:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015778:	331e      	adds	r3, #30
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	041b      	lsls	r3, r3, #16
 801577e:	4313      	orrs	r3, r2
 8015780:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015784:	321d      	adds	r2, #29
 8015786:	7812      	ldrb	r2, [r2, #0]
 8015788:	0212      	lsls	r2, r2, #8
 801578a:	4313      	orrs	r3, r2
 801578c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015790:	321c      	adds	r2, #28
 8015792:	7812      	ldrb	r2, [r2, #0]
 8015794:	431a      	orrs	r2, r3
 8015796:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801579a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80157a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2200      	movs	r2, #0
 80157b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80157b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2200      	movs	r2, #0
 80157c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80157c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2200      	movs	r2, #0
 80157d0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80157d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157d8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80157dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80157e0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80157ee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80157f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80157fc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8015800:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8015804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 801580e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 8015812:	4618      	mov	r0, r3
 8015814:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b08c      	sub	sp, #48	; 0x30
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
 8015828:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	2200      	movs	r2, #0
 8015832:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8015834:	68f8      	ldr	r0, [r7, #12]
 8015836:	f7ff fcf3 	bl	8015220 <validate>
 801583a:	4603      	mov	r3, r0
 801583c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801583e:	7ffb      	ldrb	r3, [r7, #31]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <f_read+0x2c>
 8015844:	7ffb      	ldrb	r3, [r7, #31]
 8015846:	e150      	b.n	8015aea <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801584e:	2b00      	cmp	r3, #0
 8015850:	d003      	beq.n	801585a <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8015858:	e147      	b.n	8015aea <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015860:	f003 0301 	and.w	r3, r3, #1
 8015864:	2b00      	cmp	r3, #0
 8015866:	d101      	bne.n	801586c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8015868:	2307      	movs	r3, #7
 801586a:	e13e      	b.n	8015aea <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015878:	1ad3      	subs	r3, r2, r3
 801587a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	429a      	cmp	r2, r3
 8015882:	f240 812d 	bls.w	8015ae0 <f_read+0x2c4>
 8015886:	69bb      	ldr	r3, [r7, #24]
 8015888:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801588a:	e129      	b.n	8015ae0 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015896:	2b00      	cmp	r3, #0
 8015898:	f040 80f2 	bne.w	8015a80 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80158a2:	0a5b      	lsrs	r3, r3, #9
 80158a4:	b2da      	uxtb	r2, r3
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80158ac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80158b0:	3b01      	subs	r3, #1
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	4013      	ands	r3, r2
 80158b6:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80158b8:	7dfb      	ldrb	r3, [r7, #23]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d139      	bne.n	8015932 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d104      	bne.n	80158d2 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80158ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158d0:	e018      	b.n	8015904 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d008      	beq.n	80158ee <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80158e2:	4619      	mov	r1, r3
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f7fe f93e 	bl	8013b66 <clmt_clust>
 80158ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80158ec:	e00a      	b.n	8015904 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80158fa:	4619      	mov	r1, r3
 80158fc:	4610      	mov	r0, r2
 80158fe:	f7fd fe73 	bl	80135e8 <get_fat>
 8015902:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8015904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015906:	2b01      	cmp	r3, #1
 8015908:	d805      	bhi.n	8015916 <f_read+0xfa>
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2202      	movs	r2, #2
 801590e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015912:	2302      	movs	r3, #2
 8015914:	e0e9      	b.n	8015aea <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8015916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015918:	f1b3 3fff 	cmp.w	r3, #4294967295
 801591c:	d105      	bne.n	801592a <f_read+0x10e>
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2201      	movs	r2, #1
 8015922:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015926:	2301      	movs	r3, #1
 8015928:	e0df      	b.n	8015aea <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801592e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801593e:	4619      	mov	r1, r3
 8015940:	4610      	mov	r0, r2
 8015942:	f7fd fe2f 	bl	80135a4 <clust2sect>
 8015946:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d105      	bne.n	801595a <f_read+0x13e>
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2202      	movs	r2, #2
 8015952:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015956:	2302      	movs	r3, #2
 8015958:	e0c7      	b.n	8015aea <f_read+0x2ce>
			sect += csect;
 801595a:	7dfb      	ldrb	r3, [r7, #23]
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	4413      	add	r3, r2
 8015960:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	0a5b      	lsrs	r3, r3, #9
 8015966:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8015968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801596a:	2b00      	cmp	r3, #0
 801596c:	d046      	beq.n	80159fc <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801596e:	7dfa      	ldrb	r2, [r7, #23]
 8015970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015972:	4413      	add	r3, r2
 8015974:	68fa      	ldr	r2, [r7, #12]
 8015976:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801597a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801597e:	4293      	cmp	r3, r2
 8015980:	d908      	bls.n	8015994 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015988:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801598c:	461a      	mov	r2, r3
 801598e:	7dfb      	ldrb	r3, [r7, #23]
 8015990:	1ad3      	subs	r3, r2, r3
 8015992:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801599a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a0:	693a      	ldr	r2, [r7, #16]
 80159a2:	6a39      	ldr	r1, [r7, #32]
 80159a4:	f7fd fa48 	bl	8012e38 <disk_read>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d005      	beq.n	80159ba <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2201      	movs	r2, #1
 80159b2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80159b6:	2301      	movs	r3, #1
 80159b8:	e097      	b.n	8015aea <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80159c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d015      	beq.n	80159f4 <f_read+0x1d8>
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	1ad3      	subs	r3, r2, r3
 80159d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d90d      	bls.n	80159f4 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80159de:	693b      	ldr	r3, [r7, #16]
 80159e0:	1ad3      	subs	r3, r2, r3
 80159e2:	025b      	lsls	r3, r3, #9
 80159e4:	6a3a      	ldr	r2, [r7, #32]
 80159e6:	4413      	add	r3, r2
 80159e8:	68f9      	ldr	r1, [r7, #12]
 80159ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fd fa80 	bl	8012ef4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80159f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f6:	025b      	lsls	r3, r3, #9
 80159f8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80159fa:	e05b      	b.n	8015ab4 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015a02:	693a      	ldr	r2, [r7, #16]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d037      	beq.n	8015a78 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d01d      	beq.n	8015a52 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a1c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8015a20:	68f9      	ldr	r1, [r7, #12]
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8015a28:	2301      	movs	r3, #1
 8015a2a:	f7fd fa25 	bl	8012e78 <disk_write>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d005      	beq.n	8015a40 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2201      	movs	r2, #1
 8015a38:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	e054      	b.n	8015aea <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015a4a:	b2da      	uxtb	r2, r3
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a58:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8015a5c:	68f9      	ldr	r1, [r7, #12]
 8015a5e:	2301      	movs	r3, #1
 8015a60:	693a      	ldr	r2, [r7, #16]
 8015a62:	f7fd f9e9 	bl	8012e38 <disk_read>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d005      	beq.n	8015a78 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2201      	movs	r2, #1
 8015a70:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015a74:	2301      	movs	r3, #1
 8015a76:	e038      	b.n	8015aea <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	693a      	ldr	r2, [r7, #16]
 8015a7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a8a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015a8e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8015a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d901      	bls.n	8015a9c <f_read+0x280>
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015aa6:	68fa      	ldr	r2, [r7, #12]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015aac:	4619      	mov	r1, r3
 8015aae:	6a38      	ldr	r0, [r7, #32]
 8015ab0:	f7fd fa20 	bl	8012ef4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015ab4:	6a3a      	ldr	r2, [r7, #32]
 8015ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab8:	4413      	add	r3, r2
 8015aba:	623b      	str	r3, [r7, #32]
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac4:	441a      	add	r2, r3
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	681a      	ldr	r2, [r3, #0]
 8015ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad2:	441a      	add	r2, r3
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	601a      	str	r2, [r3, #0]
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f47f aed2 	bne.w	801588c <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8015ae8:	2300      	movs	r3, #0
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3730      	adds	r7, #48	; 0x30
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}

08015af2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b086      	sub	sp, #24
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7ff fb90 	bl	8015220 <validate>
 8015b00:	4603      	mov	r3, r0
 8015b02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b04:	7dfb      	ldrb	r3, [r7, #23]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	f040 80a8 	bne.w	8015c5c <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015b12:	f003 0320 	and.w	r3, r3, #32
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	f000 80a0 	beq.w	8015c5c <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d019      	beq.n	8015b5e <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015b30:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	f7fd f99b 	bl	8012e78 <disk_write>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d001      	beq.n	8015b4c <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8015b48:	2301      	movs	r3, #1
 8015b4a:	e088      	b.n	8015c5e <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b56:	b2da      	uxtb	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	f7fd fc3e 	bl	80133ee <move_window>
 8015b72:	4603      	mov	r3, r0
 8015b74:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8015b76:	7dfb      	ldrb	r3, [r7, #23]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d16f      	bne.n	8015c5c <f_sync+0x16a>
				dir = fp->dir_ptr;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015b82:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	330b      	adds	r3, #11
 8015b88:	781a      	ldrb	r2, [r3, #0]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	330b      	adds	r3, #11
 8015b8e:	f042 0220 	orr.w	r2, r2, #32
 8015b92:	b2d2      	uxtb	r2, r2
 8015b94:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	331c      	adds	r3, #28
 8015ba0:	b2d2      	uxtb	r2, r2
 8015ba2:	701a      	strb	r2, [r3, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	0a1b      	lsrs	r3, r3, #8
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	693b      	ldr	r3, [r7, #16]
 8015bb2:	331d      	adds	r3, #29
 8015bb4:	b2d2      	uxtb	r2, r2
 8015bb6:	701a      	strb	r2, [r3, #0]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015bbe:	0c1a      	lsrs	r2, r3, #16
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	331e      	adds	r3, #30
 8015bc4:	b2d2      	uxtb	r2, r2
 8015bc6:	701a      	strb	r2, [r3, #0]
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015bce:	0e1a      	lsrs	r2, r3, #24
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	331f      	adds	r3, #31
 8015bd4:	b2d2      	uxtb	r2, r2
 8015bd6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015bde:	4619      	mov	r1, r3
 8015be0:	6938      	ldr	r0, [r7, #16]
 8015be2:	f7fe f9f8 	bl	8013fd6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8015be6:	f7f9 ff79 	bl	800fadc <get_fattime>
 8015bea:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	3316      	adds	r3, #22
 8015bf0:	68fa      	ldr	r2, [r7, #12]
 8015bf2:	b2d2      	uxtb	r2, r2
 8015bf4:	701a      	strb	r2, [r3, #0]
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	0a1b      	lsrs	r3, r3, #8
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	3317      	adds	r3, #23
 8015c02:	b2d2      	uxtb	r2, r2
 8015c04:	701a      	strb	r2, [r3, #0]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	0c1a      	lsrs	r2, r3, #16
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	3318      	adds	r3, #24
 8015c0e:	b2d2      	uxtb	r2, r2
 8015c10:	701a      	strb	r2, [r3, #0]
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	0e1a      	lsrs	r2, r3, #24
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	3319      	adds	r3, #25
 8015c1a:	b2d2      	uxtb	r2, r2
 8015c1c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	3312      	adds	r3, #18
 8015c22:	2200      	movs	r2, #0
 8015c24:	701a      	strb	r2, [r3, #0]
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	3313      	adds	r3, #19
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015c34:	f023 0320 	bic.w	r3, r3, #32
 8015c38:	b2da      	uxtb	r2, r3
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015c46:	2201      	movs	r2, #1
 8015c48:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7fd fbf9 	bl	801344a <sync_fs>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8015c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3718      	adds	r7, #24
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b084      	sub	sp, #16
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f7ff ff3f 	bl	8015af2 <f_sync>
 8015c74:	4603      	mov	r3, r0
 8015c76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015c78:	7bfb      	ldrb	r3, [r7, #15]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d116      	bne.n	8015cac <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7ff face 	bl	8015220 <validate>
 8015c84:	4603      	mov	r3, r0
 8015c86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015c88:	7bfb      	ldrb	r3, [r7, #15]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d10e      	bne.n	8015cac <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fd faf3 	bl	8013280 <dec_lock>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015c9e:	7bfb      	ldrb	r3, [r7, #15]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d103      	bne.n	8015cac <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b090      	sub	sp, #64	; 0x40
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
 8015cbe:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f7ff faad 	bl	8015220 <validate>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8015ccc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d002      	beq.n	8015cda <f_lseek+0x24>
 8015cd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015cd8:	e247      	b.n	801616a <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d003      	beq.n	8015cec <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8015cea:	e23e      	b.n	801616a <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	f000 80f2 	beq.w	8015edc <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cfe:	d164      	bne.n	8015dca <f_lseek+0x114>
			tbl = fp->cltbl;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8015d06:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0a:	1d1a      	adds	r2, r3, #4
 8015d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	617b      	str	r3, [r7, #20]
 8015d12:	2302      	movs	r3, #2
 8015d14:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015d1c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d041      	beq.n	8015da8 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	613b      	str	r3, [r7, #16]
 8015d28:	2300      	movs	r3, #0
 8015d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2e:	3302      	adds	r3, #2
 8015d30:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d34:	60fb      	str	r3, [r7, #12]
 8015d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d38:	3301      	adds	r3, #1
 8015d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015d42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7fd fc4f 	bl	80135e8 <get_fat>
 8015d4a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8015d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d805      	bhi.n	8015d5e <f_lseek+0xa8>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	2202      	movs	r2, #2
 8015d56:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015d5a:	2302      	movs	r3, #2
 8015d5c:	e205      	b.n	801616a <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d64:	d105      	bne.n	8015d72 <f_lseek+0xbc>
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e1fb      	b.n	801616a <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	3301      	adds	r3, #1
 8015d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d0da      	beq.n	8015d32 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d809      	bhi.n	8015d98 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8015d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d86:	1d1a      	adds	r2, r3, #4
 8015d88:	627a      	str	r2, [r7, #36]	; 0x24
 8015d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d8c:	601a      	str	r2, [r3, #0]
 8015d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d90:	1d1a      	adds	r2, r3, #4
 8015d92:	627a      	str	r2, [r7, #36]	; 0x24
 8015d94:	693a      	ldr	r2, [r7, #16]
 8015d96:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015d9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d3bd      	bcc.n	8015d24 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8015dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8015db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d803      	bhi.n	8015dc2 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	601a      	str	r2, [r3, #0]
 8015dc0:	e1d1      	b.n	8016166 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015dc2:	2311      	movs	r3, #17
 8015dc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015dc8:	e1cd      	b.n	8016166 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015dd0:	683a      	ldr	r2, [r7, #0]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d903      	bls.n	8015dde <f_lseek+0x128>
				ofs = fp->fsize;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015ddc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	683a      	ldr	r2, [r7, #0]
 8015de2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	f000 81bc 	beq.w	8016166 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015dee:	683b      	ldr	r3, [r7, #0]
 8015df0:	3b01      	subs	r3, #1
 8015df2:	4619      	mov	r1, r3
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7fd feb6 	bl	8013b66 <clmt_clust>
 8015dfa:	4602      	mov	r2, r0
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015e0e:	4619      	mov	r1, r3
 8015e10:	4610      	mov	r0, r2
 8015e12:	f7fd fbc7 	bl	80135a4 <clust2sect>
 8015e16:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8015e18:	69bb      	ldr	r3, [r7, #24]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d105      	bne.n	8015e2a <f_lseek+0x174>
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2202      	movs	r2, #2
 8015e22:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015e26:	2302      	movs	r3, #2
 8015e28:	e19f      	b.n	801616a <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	0a5b      	lsrs	r3, r3, #9
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8015e36:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8015e3a:	3a01      	subs	r2, #1
 8015e3c:	4013      	ands	r3, r2
 8015e3e:	69ba      	ldr	r2, [r7, #24]
 8015e40:	4413      	add	r3, r2
 8015e42:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 8189 	beq.w	8016166 <f_lseek+0x4b0>
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8015e5a:	69ba      	ldr	r2, [r7, #24]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	f000 8182 	beq.w	8016166 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d01d      	beq.n	8015eac <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e76:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8015e7a:	6879      	ldr	r1, [r7, #4]
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8015e82:	2301      	movs	r3, #1
 8015e84:	f7fc fff8 	bl	8012e78 <disk_write>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d005      	beq.n	8015e9a <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2201      	movs	r2, #1
 8015e92:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015e96:	2301      	movs	r3, #1
 8015e98:	e167      	b.n	801616a <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015ea4:	b2da      	uxtb	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015eb2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8015eb6:	6879      	ldr	r1, [r7, #4]
 8015eb8:	2301      	movs	r3, #1
 8015eba:	69ba      	ldr	r2, [r7, #24]
 8015ebc:	f7fc ffbc 	bl	8012e38 <disk_read>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d005      	beq.n	8015ed2 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2201      	movs	r2, #1
 8015eca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015ece:	2301      	movs	r3, #1
 8015ed0:	e14b      	b.n	801616a <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	69ba      	ldr	r2, [r7, #24]
 8015ed6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8015eda:	e144      	b.n	8016166 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015ee2:	683a      	ldr	r2, [r7, #0]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d90a      	bls.n	8015efe <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015eee:	f003 0302 	and.w	r3, r3, #2
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d103      	bne.n	8015efe <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8015efc:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015f04:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	637b      	str	r3, [r7, #52]	; 0x34
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	f000 80c6 	beq.w	80160a6 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015f20:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8015f24:	025b      	lsls	r3, r3, #9
 8015f26:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015f28:	6a3b      	ldr	r3, [r7, #32]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d01e      	beq.n	8015f6c <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	1e5a      	subs	r2, r3, #1
 8015f32:	69fb      	ldr	r3, [r7, #28]
 8015f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8015f38:	6a3b      	ldr	r3, [r7, #32]
 8015f3a:	1e59      	subs	r1, r3, #1
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d312      	bcc.n	8015f6c <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8015f46:	6a3b      	ldr	r3, [r7, #32]
 8015f48:	1e5a      	subs	r2, r3, #1
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	425b      	negs	r3, r3
 8015f4e:	401a      	ands	r2, r3
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8015f5c:	683a      	ldr	r2, [r7, #0]
 8015f5e:	1ad3      	subs	r3, r2, r3
 8015f60:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f6a:	e029      	b.n	8015fc0 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015f72:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d11e      	bne.n	8015fb8 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015f80:	2100      	movs	r1, #0
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fd fd52 	bl	8013a2c <create_chain>
 8015f88:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8015f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f8c:	2b01      	cmp	r3, #1
 8015f8e:	d105      	bne.n	8015f9c <f_lseek+0x2e6>
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2202      	movs	r2, #2
 8015f94:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015f98:	2302      	movs	r3, #2
 8015f9a:	e0e6      	b.n	801616a <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8015f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fa2:	d105      	bne.n	8015fb0 <f_lseek+0x2fa>
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8015fac:	2301      	movs	r3, #1
 8015fae:	e0dc      	b.n	801616a <f_lseek+0x4b4>
					fp->sclust = clst;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8015fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d06f      	beq.n	80160a6 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8015fc6:	e047      	b.n	8016058 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8015fce:	f003 0302 	and.w	r3, r3, #2
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00d      	beq.n	8015ff2 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015fdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7fd fd24 	bl	8013a2c <create_chain>
 8015fe4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8015fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d10a      	bne.n	8016002 <f_lseek+0x34c>
							ofs = bcs; break;
 8015fec:	69fb      	ldr	r3, [r7, #28]
 8015fee:	603b      	str	r3, [r7, #0]
 8015ff0:	e036      	b.n	8016060 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015ff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fd faf4 	bl	80135e8 <get_fat>
 8016000:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8016002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016008:	d105      	bne.n	8016016 <f_lseek+0x360>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2201      	movs	r2, #1
 801600e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016012:	2301      	movs	r3, #1
 8016014:	e0a9      	b.n	801616a <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8016016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016018:	2b01      	cmp	r3, #1
 801601a:	d907      	bls.n	801602c <f_lseek+0x376>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016028:	429a      	cmp	r2, r3
 801602a:	d305      	bcc.n	8016038 <f_lseek+0x382>
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2202      	movs	r2, #2
 8016030:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016034:	2302      	movs	r3, #2
 8016036:	e098      	b.n	801616a <f_lseek+0x4b4>
					fp->clust = clst;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801603c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016046:	69fb      	ldr	r3, [r7, #28]
 8016048:	441a      	add	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8016050:	683a      	ldr	r2, [r7, #0]
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	1ad3      	subs	r3, r2, r3
 8016056:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8016058:	683a      	ldr	r2, [r7, #0]
 801605a:	69fb      	ldr	r3, [r7, #28]
 801605c:	429a      	cmp	r2, r3
 801605e:	d8b3      	bhi.n	8015fc8 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	441a      	add	r2, r3
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016076:	2b00      	cmp	r3, #0
 8016078:	d015      	beq.n	80160a6 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016082:	4618      	mov	r0, r3
 8016084:	f7fd fa8e 	bl	80135a4 <clust2sect>
 8016088:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 801608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801608c:	2b00      	cmp	r3, #0
 801608e:	d105      	bne.n	801609c <f_lseek+0x3e6>
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2202      	movs	r2, #2
 8016094:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8016098:	2302      	movs	r3, #2
 801609a:	e066      	b.n	801616a <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	0a5b      	lsrs	r3, r3, #9
 80160a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160a2:	4413      	add	r3, r2
 80160a4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80160ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d041      	beq.n	8016138 <f_lseek+0x482>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80160ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160bc:	429a      	cmp	r2, r3
 80160be:	d03b      	beq.n	8016138 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80160c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d01d      	beq.n	801610a <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80160d4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80160d8:	6879      	ldr	r1, [r7, #4]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80160e0:	2301      	movs	r3, #1
 80160e2:	f7fc fec9 	bl	8012e78 <disk_write>
 80160e6:	4603      	mov	r3, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d005      	beq.n	80160f8 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2201      	movs	r2, #1
 80160f0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80160f4:	2301      	movs	r3, #1
 80160f6:	e038      	b.n	801616a <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80160fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016102:	b2da      	uxtb	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016110:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8016114:	6879      	ldr	r1, [r7, #4]
 8016116:	2301      	movs	r3, #1
 8016118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801611a:	f7fc fe8d 	bl	8012e38 <disk_read>
 801611e:	4603      	mov	r3, r0
 8016120:	2b00      	cmp	r3, #0
 8016122:	d005      	beq.n	8016130 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2201      	movs	r2, #1
 8016128:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801612c:	2301      	movs	r3, #1
 801612e:	e01c      	b.n	801616a <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016134:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8016144:	429a      	cmp	r2, r3
 8016146:	d90e      	bls.n	8016166 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801615a:	f043 0320 	orr.w	r3, r3, #32
 801615e:	b2da      	uxtb	r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8016166:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801616a:	4618      	mov	r0, r3
 801616c:	3740      	adds	r7, #64	; 0x40
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
	...

08016174 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016174:	b480      	push	{r7}
 8016176:	b087      	sub	sp, #28
 8016178:	af00      	add	r7, sp, #0
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	60b9      	str	r1, [r7, #8]
 801617e:	4613      	mov	r3, r2
 8016180:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016182:	2301      	movs	r3, #1
 8016184:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016186:	2300      	movs	r3, #0
 8016188:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801618a:	4b1f      	ldr	r3, [pc, #124]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 801618c:	7a5b      	ldrb	r3, [r3, #9]
 801618e:	b2db      	uxtb	r3, r3
 8016190:	2b01      	cmp	r3, #1
 8016192:	d831      	bhi.n	80161f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016194:	4b1c      	ldr	r3, [pc, #112]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 8016196:	7a5b      	ldrb	r3, [r3, #9]
 8016198:	b2db      	uxtb	r3, r3
 801619a:	461a      	mov	r2, r3
 801619c:	4b1a      	ldr	r3, [pc, #104]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 801619e:	2100      	movs	r1, #0
 80161a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80161a2:	4b19      	ldr	r3, [pc, #100]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161a4:	7a5b      	ldrb	r3, [r3, #9]
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	4a17      	ldr	r2, [pc, #92]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	4413      	add	r3, r2
 80161ae:	68fa      	ldr	r2, [r7, #12]
 80161b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80161b2:	4b15      	ldr	r3, [pc, #84]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161b4:	7a5b      	ldrb	r3, [r3, #9]
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	461a      	mov	r2, r3
 80161ba:	4b13      	ldr	r3, [pc, #76]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161bc:	4413      	add	r3, r2
 80161be:	79fa      	ldrb	r2, [r7, #7]
 80161c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80161c2:	4b11      	ldr	r3, [pc, #68]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161c4:	7a5b      	ldrb	r3, [r3, #9]
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	1c5a      	adds	r2, r3, #1
 80161ca:	b2d1      	uxtb	r1, r2
 80161cc:	4a0e      	ldr	r2, [pc, #56]	; (8016208 <FATFS_LinkDriverEx+0x94>)
 80161ce:	7251      	strb	r1, [r2, #9]
 80161d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80161d2:	7dbb      	ldrb	r3, [r7, #22]
 80161d4:	3330      	adds	r3, #48	; 0x30
 80161d6:	b2da      	uxtb	r2, r3
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	3301      	adds	r3, #1
 80161e0:	223a      	movs	r2, #58	; 0x3a
 80161e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	3302      	adds	r3, #2
 80161e8:	222f      	movs	r2, #47	; 0x2f
 80161ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	3303      	adds	r3, #3
 80161f0:	2200      	movs	r2, #0
 80161f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80161f4:	2300      	movs	r3, #0
 80161f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80161f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	371c      	adds	r7, #28
 80161fe:	46bd      	mov	sp, r7
 8016200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop
 8016208:	20009a00 	.word	0x20009a00

0801620c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016216:	2200      	movs	r2, #0
 8016218:	6839      	ldr	r1, [r7, #0]
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7ff ffaa 	bl	8016174 <FATFS_LinkDriverEx>
 8016220:	4603      	mov	r3, r0
}
 8016222:	4618      	mov	r0, r3
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
	...

0801622c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 801622c:	b480      	push	{r7}
 801622e:	b085      	sub	sp, #20
 8016230:	af00      	add	r7, sp, #0
 8016232:	4603      	mov	r3, r0
 8016234:	6039      	str	r1, [r7, #0]
 8016236:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016238:	88fb      	ldrh	r3, [r7, #6]
 801623a:	2b7f      	cmp	r3, #127	; 0x7f
 801623c:	d802      	bhi.n	8016244 <ff_convert+0x18>
		c = chr;
 801623e:	88fb      	ldrh	r3, [r7, #6]
 8016240:	81fb      	strh	r3, [r7, #14]
 8016242:	e025      	b.n	8016290 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8016244:	683b      	ldr	r3, [r7, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d00b      	beq.n	8016262 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801624a:	88fb      	ldrh	r3, [r7, #6]
 801624c:	2bff      	cmp	r3, #255	; 0xff
 801624e:	d805      	bhi.n	801625c <ff_convert+0x30>
 8016250:	88fb      	ldrh	r3, [r7, #6]
 8016252:	3b80      	subs	r3, #128	; 0x80
 8016254:	4a12      	ldr	r2, [pc, #72]	; (80162a0 <ff_convert+0x74>)
 8016256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801625a:	e000      	b.n	801625e <ff_convert+0x32>
 801625c:	2300      	movs	r3, #0
 801625e:	81fb      	strh	r3, [r7, #14]
 8016260:	e016      	b.n	8016290 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8016262:	2300      	movs	r3, #0
 8016264:	81fb      	strh	r3, [r7, #14]
 8016266:	e009      	b.n	801627c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016268:	89fb      	ldrh	r3, [r7, #14]
 801626a:	4a0d      	ldr	r2, [pc, #52]	; (80162a0 <ff_convert+0x74>)
 801626c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016270:	88fa      	ldrh	r2, [r7, #6]
 8016272:	429a      	cmp	r2, r3
 8016274:	d006      	beq.n	8016284 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016276:	89fb      	ldrh	r3, [r7, #14]
 8016278:	3301      	adds	r3, #1
 801627a:	81fb      	strh	r3, [r7, #14]
 801627c:	89fb      	ldrh	r3, [r7, #14]
 801627e:	2b7f      	cmp	r3, #127	; 0x7f
 8016280:	d9f2      	bls.n	8016268 <ff_convert+0x3c>
 8016282:	e000      	b.n	8016286 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016284:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016286:	89fb      	ldrh	r3, [r7, #14]
 8016288:	3380      	adds	r3, #128	; 0x80
 801628a:	b29b      	uxth	r3, r3
 801628c:	b2db      	uxtb	r3, r3
 801628e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016290:	89fb      	ldrh	r3, [r7, #14]
}
 8016292:	4618      	mov	r0, r3
 8016294:	3714      	adds	r7, #20
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop
 80162a0:	0801d0f4 	.word	0x0801d0f4

080162a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80162a4:	b480      	push	{r7}
 80162a6:	b085      	sub	sp, #20
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4603      	mov	r3, r0
 80162ac:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80162ae:	2300      	movs	r3, #0
 80162b0:	60fb      	str	r3, [r7, #12]
 80162b2:	e002      	b.n	80162ba <ff_wtoupper+0x16>
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	3301      	adds	r3, #1
 80162b8:	60fb      	str	r3, [r7, #12]
 80162ba:	4a0f      	ldr	r2, [pc, #60]	; (80162f8 <ff_wtoupper+0x54>)
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d006      	beq.n	80162d4 <ff_wtoupper+0x30>
 80162c6:	4a0c      	ldr	r2, [pc, #48]	; (80162f8 <ff_wtoupper+0x54>)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80162ce:	88fa      	ldrh	r2, [r7, #6]
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d1ef      	bne.n	80162b4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80162d4:	4a08      	ldr	r2, [pc, #32]	; (80162f8 <ff_wtoupper+0x54>)
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d004      	beq.n	80162ea <ff_wtoupper+0x46>
 80162e0:	4a06      	ldr	r2, [pc, #24]	; (80162fc <ff_wtoupper+0x58>)
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80162e8:	e000      	b.n	80162ec <ff_wtoupper+0x48>
 80162ea:	88fb      	ldrh	r3, [r7, #6]
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3714      	adds	r7, #20
 80162f0:	46bd      	mov	sp, r7
 80162f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f6:	4770      	bx	lr
 80162f8:	0801d1f4 	.word	0x0801d1f4
 80162fc:	0801d3d4 	.word	0x0801d3d4

08016300 <f_PEL_open>:

//////////////////////////////////////////////////////////
// PELICULAS DESDE SD FILE
//////////////////////////////////////////////////////////
void f_PEL_open(FIL* f,char* Dir,char* Name,unsigned int QEsc)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b094      	sub	sp, #80	; 0x50
 8016304:	af02      	add	r7, sp, #8
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
 801630c:	603b      	str	r3, [r7, #0]
	int i;
	TP_CS_OFF;
 801630e:	2201      	movs	r2, #1
 8016310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016314:	481b      	ldr	r0, [pc, #108]	; (8016384 <f_PEL_open+0x84>)
 8016316:	f7f0 fcbb 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 801631a:	2201      	movs	r2, #1
 801631c:	2180      	movs	r1, #128	; 0x80
 801631e:	481a      	ldr	r0, [pc, #104]	; (8016388 <f_PEL_open+0x88>)
 8016320:	f7f0 fcb6 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8016324:	2200      	movs	r2, #0
 8016326:	2108      	movs	r1, #8
 8016328:	4817      	ldr	r0, [pc, #92]	; (8016388 <f_PEL_open+0x88>)
 801632a:	f7f0 fcb1 	bl	8006c90 <HAL_GPIO_WritePin>

	char File[50];
	for(i=0;i<=QEsc;i++)
 801632e:	2300      	movs	r3, #0
 8016330:	647b      	str	r3, [r7, #68]	; 0x44
 8016332:	e01a      	b.n	801636a <f_PEL_open+0x6a>
	{
		sprintf(File,"%s/PEL %s/PEL %s %d.bmp",Dir,Name,Name,i);
 8016334:	f107 0010 	add.w	r0, r7, #16
 8016338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801633a:	9301      	str	r3, [sp, #4]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	9300      	str	r3, [sp, #0]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	4911      	ldr	r1, [pc, #68]	; (801638c <f_PEL_open+0x8c>)
 8016346:	f003 fa77 	bl	8019838 <siprintf>
		f_open(&f[i],File,FA_READ);
 801634a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801634c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8016350:	fb02 f303 	mul.w	r3, r2, r3
 8016354:	68fa      	ldr	r2, [r7, #12]
 8016356:	4413      	add	r3, r2
 8016358:	f107 0110 	add.w	r1, r7, #16
 801635c:	2201      	movs	r2, #1
 801635e:	4618      	mov	r0, r3
 8016360:	f7fe ffda 	bl	8015318 <f_open>
	for(i=0;i<=QEsc;i++)
 8016364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016366:	3301      	adds	r3, #1
 8016368:	647b      	str	r3, [r7, #68]	; 0x44
 801636a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801636c:	683a      	ldr	r2, [r7, #0]
 801636e:	429a      	cmp	r2, r3
 8016370:	d2e0      	bcs.n	8016334 <f_PEL_open+0x34>
	}
	SD_CS_OFF;
 8016372:	2201      	movs	r2, #1
 8016374:	2108      	movs	r1, #8
 8016376:	4804      	ldr	r0, [pc, #16]	; (8016388 <f_PEL_open+0x88>)
 8016378:	f7f0 fc8a 	bl	8006c90 <HAL_GPIO_WritePin>
}
 801637c:	bf00      	nop
 801637e:	3748      	adds	r7, #72	; 0x48
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}
 8016384:	48000400 	.word	0x48000400
 8016388:	48000800 	.word	0x48000800
 801638c:	0801b798 	.word	0x0801b798

08016390 <f_PEL>:
void f_PEL(FIL* Pel,unsigned int x,unsigned int y,unsigned int offx,unsigned int offy,unsigned char Esc)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b086      	sub	sp, #24
 8016394:	af00      	add	r7, sp, #0
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
 801639c:	603b      	str	r3, [r7, #0]
    unsigned int xx;
    unsigned int yy;

    if(Esc==0)
 801639e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d104      	bne.n	80163b0 <f_PEL+0x20>
    {
      xx=x;
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	617b      	str	r3, [r7, #20]
      yy=y;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	613b      	str	r3, [r7, #16]
 80163ae:	e007      	b.n	80163c0 <f_PEL+0x30>
    }
    else
    {
      xx=x+offx;
 80163b0:	68ba      	ldr	r2, [r7, #8]
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	4413      	add	r3, r2
 80163b6:	617b      	str	r3, [r7, #20]
      yy=y+offy;
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	6a3b      	ldr	r3, [r7, #32]
 80163bc:	4413      	add	r3, r2
 80163be:	613b      	str	r3, [r7, #16]
    }
    f_PIC(&Pel[Esc],xx,yy);
 80163c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80163c4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 80163c8:	fb02 f303 	mul.w	r3, r2, r3
 80163cc:	68fa      	ldr	r2, [r7, #12]
 80163ce:	4413      	add	r3, r2
 80163d0:	693a      	ldr	r2, [r7, #16]
 80163d2:	6979      	ldr	r1, [r7, #20]
 80163d4:	4618      	mov	r0, r3
 80163d6:	f000 fb57 	bl	8016a88 <f_PIC>
}
 80163da:	bf00      	nop
 80163dc:	3718      	adds	r7, #24
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
	...

080163e4 <f_TECLADO_ALFA_Input>:

//////////////////////////////////////////////////////////
// TECLADO_ALFA DESDE SD FILE
//////////////////////////////////////////////////////////
void f_TECLADO_ALFA_Input(FIL* fi,unsigned int PantallaSI,unsigned int PantallaNO)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b0a0      	sub	sp, #128	; 0x80
 80163e8:	af02      	add	r7, sp, #8
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
   int f,c;
   char str[50];
   char Tecla[41];

   if(m_Teclado==0) sprintf(Tecla,"0123456789QWERTYUIOPASDFGHJKLN#^ZXCVBNM<");
 80163f0:	4b91      	ldr	r3, [pc, #580]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d105      	bne.n	8016404 <f_TECLADO_ALFA_Input+0x20>
 80163f8:	f107 0310 	add.w	r3, r7, #16
 80163fc:	498f      	ldr	r1, [pc, #572]	; (801663c <f_TECLADO_ALFA_Input+0x258>)
 80163fe:	4618      	mov	r0, r3
 8016400:	f003 fa1a 	bl	8019838 <siprintf>
   if(m_Teclado==1) sprintf(Tecla,"0123456789qwertyuiopasdfghjkLn#^zxcvbnm<");
 8016404:	4b8c      	ldr	r3, [pc, #560]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d105      	bne.n	8016418 <f_TECLADO_ALFA_Input+0x34>
 801640c:	f107 0310 	add.w	r3, r7, #16
 8016410:	498b      	ldr	r1, [pc, #556]	; (8016640 <f_TECLADO_ALFA_Input+0x25c>)
 8016412:	4618      	mov	r0, r3
 8016414:	f003 fa10 	bl	8019838 <siprintf>
   if(m_Teclado==2) sprintf(Tecla,"~!#$%c&@_?!=+-*%c%c^|xX<>()[]{}oO#^%c'.,:;!<",'%','/','\\','"');
 8016418:	4b87      	ldr	r3, [pc, #540]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	2b02      	cmp	r3, #2
 801641e:	d10a      	bne.n	8016436 <f_TECLADO_ALFA_Input+0x52>
 8016420:	f107 0010 	add.w	r0, r7, #16
 8016424:	2322      	movs	r3, #34	; 0x22
 8016426:	9301      	str	r3, [sp, #4]
 8016428:	235c      	movs	r3, #92	; 0x5c
 801642a:	9300      	str	r3, [sp, #0]
 801642c:	232f      	movs	r3, #47	; 0x2f
 801642e:	2225      	movs	r2, #37	; 0x25
 8016430:	4984      	ldr	r1, [pc, #528]	; (8016644 <f_TECLADO_ALFA_Input+0x260>)
 8016432:	f003 fa01 	bl	8019838 <siprintf>


   for(f=0;f<4;f++)
 8016436:	2300      	movs	r3, #0
 8016438:	677b      	str	r3, [r7, #116]	; 0x74
 801643a:	e133      	b.n	80166a4 <f_TECLADO_ALFA_Input+0x2c0>
   {
	   for(c=0;c<10;c++)
 801643c:	2300      	movs	r3, #0
 801643e:	673b      	str	r3, [r7, #112]	; 0x70
 8016440:	e129      	b.n	8016696 <f_TECLADO_ALFA_Input+0x2b2>
	   {
		   if( m_XPanel>c*32 && m_XPanel<(c+1)*32 && m_YPanel>80+f*32 && m_YPanel<80+(f+1)*32 )
 8016442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016444:	015b      	lsls	r3, r3, #5
 8016446:	461a      	mov	r2, r3
 8016448:	4b7f      	ldr	r3, [pc, #508]	; (8016648 <f_TECLADO_ALFA_Input+0x264>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	429a      	cmp	r2, r3
 801644e:	f080 811f 	bcs.w	8016690 <f_TECLADO_ALFA_Input+0x2ac>
 8016452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016454:	3301      	adds	r3, #1
 8016456:	015b      	lsls	r3, r3, #5
 8016458:	461a      	mov	r2, r3
 801645a:	4b7b      	ldr	r3, [pc, #492]	; (8016648 <f_TECLADO_ALFA_Input+0x264>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	429a      	cmp	r2, r3
 8016460:	f240 8116 	bls.w	8016690 <f_TECLADO_ALFA_Input+0x2ac>
 8016464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016466:	015b      	lsls	r3, r3, #5
 8016468:	3350      	adds	r3, #80	; 0x50
 801646a:	461a      	mov	r2, r3
 801646c:	4b77      	ldr	r3, [pc, #476]	; (801664c <f_TECLADO_ALFA_Input+0x268>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	429a      	cmp	r2, r3
 8016472:	f080 810d 	bcs.w	8016690 <f_TECLADO_ALFA_Input+0x2ac>
 8016476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016478:	3301      	adds	r3, #1
 801647a:	015b      	lsls	r3, r3, #5
 801647c:	3350      	adds	r3, #80	; 0x50
 801647e:	461a      	mov	r2, r3
 8016480:	4b72      	ldr	r3, [pc, #456]	; (801664c <f_TECLADO_ALFA_Input+0x268>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	429a      	cmp	r2, r3
 8016486:	f240 8103 	bls.w	8016690 <f_TECLADO_ALFA_Input+0x2ac>
		   {
	   		    f_PIC(&fi[1],c*32,80+f*32);
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 8016490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016492:	015b      	lsls	r3, r3, #5
 8016494:	4619      	mov	r1, r3
 8016496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016498:	015b      	lsls	r3, r3, #5
 801649a:	3350      	adds	r3, #80	; 0x50
 801649c:	461a      	mov	r2, r3
 801649e:	f000 faf3 	bl	8016a88 <f_PIC>

	   		    ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x5AF7,Tecla[f*10+c],4);
 80164a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164a4:	015b      	lsls	r3, r3, #5
 80164a6:	f103 000c 	add.w	r0, r3, #12
 80164aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164ac:	f1c3 0304 	rsb	r3, r3, #4
 80164b0:	0159      	lsls	r1, r3, #5
 80164b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164b4:	4613      	mov	r3, r2
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4413      	add	r3, r2
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	461a      	mov	r2, r3
 80164be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164c0:	4413      	add	r3, r2
 80164c2:	3378      	adds	r3, #120	; 0x78
 80164c4:	443b      	add	r3, r7
 80164c6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80164ca:	2204      	movs	r2, #4
 80164cc:	9201      	str	r2, [sp, #4]
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	f645 23f7 	movw	r3, #23287	; 0x5af7
 80164d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80164d8:	f7fa feac 	bl	8011234 <ILI9341_Draw_Char>
	   		    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 80164dc:	bf00      	nop
 80164de:	2102      	movs	r1, #2
 80164e0:	485b      	ldr	r0, [pc, #364]	; (8016650 <f_TECLADO_ALFA_Input+0x26c>)
 80164e2:	f7f0 fbbd 	bl	8006c60 <HAL_GPIO_ReadPin>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d0f8      	beq.n	80164de <f_TECLADO_ALFA_Input+0xfa>
		       	HAL_Delay(255);
 80164ec:	20ff      	movs	r0, #255	; 0xff
 80164ee:	f7ee fbdf 	bl	8004cb0 <HAL_Delay>
 			    f_PIC(&fi[0],c*32,80+f*32);
 80164f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164f4:	015b      	lsls	r3, r3, #5
 80164f6:	4619      	mov	r1, r3
 80164f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80164fa:	015b      	lsls	r3, r3, #5
 80164fc:	3350      	adds	r3, #80	; 0x50
 80164fe:	461a      	mov	r2, r3
 8016500:	68f8      	ldr	r0, [r7, #12]
 8016502:	f000 fac1 	bl	8016a88 <f_PIC>

		    	ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x0010,Tecla[f*10+c],4);
 8016506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016508:	015b      	lsls	r3, r3, #5
 801650a:	f103 000c 	add.w	r0, r3, #12
 801650e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016510:	f1c3 0304 	rsb	r3, r3, #4
 8016514:	0159      	lsls	r1, r3, #5
 8016516:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016518:	4613      	mov	r3, r2
 801651a:	009b      	lsls	r3, r3, #2
 801651c:	4413      	add	r3, r2
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	461a      	mov	r2, r3
 8016522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016524:	4413      	add	r3, r2
 8016526:	3378      	adds	r3, #120	; 0x78
 8016528:	443b      	add	r3, r7
 801652a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 801652e:	2204      	movs	r2, #4
 8016530:	9201      	str	r2, [sp, #4]
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	2310      	movs	r3, #16
 8016536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801653a:	f7fa fe7b 	bl	8011234 <ILI9341_Draw_Char>
 			    if(f*10+c != 30 && f*10+c != 31 && f*10+c != 39 && m_TecladoIndice<22)
 801653e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016540:	4613      	mov	r3, r2
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	4413      	add	r3, r2
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	461a      	mov	r2, r3
 801654a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801654c:	4413      	add	r3, r2
 801654e:	2b1e      	cmp	r3, #30
 8016550:	d032      	beq.n	80165b8 <f_TECLADO_ALFA_Input+0x1d4>
 8016552:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016554:	4613      	mov	r3, r2
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	4413      	add	r3, r2
 801655a:	005b      	lsls	r3, r3, #1
 801655c:	461a      	mov	r2, r3
 801655e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016560:	4413      	add	r3, r2
 8016562:	2b1f      	cmp	r3, #31
 8016564:	d028      	beq.n	80165b8 <f_TECLADO_ALFA_Input+0x1d4>
 8016566:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016568:	4613      	mov	r3, r2
 801656a:	009b      	lsls	r3, r3, #2
 801656c:	4413      	add	r3, r2
 801656e:	005b      	lsls	r3, r3, #1
 8016570:	461a      	mov	r2, r3
 8016572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016574:	4413      	add	r3, r2
 8016576:	2b27      	cmp	r3, #39	; 0x27
 8016578:	d01e      	beq.n	80165b8 <f_TECLADO_ALFA_Input+0x1d4>
 801657a:	4b36      	ldr	r3, [pc, #216]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2b15      	cmp	r3, #21
 8016580:	d81a      	bhi.n	80165b8 <f_TECLADO_ALFA_Input+0x1d4>
 			    {
 			    	m_TecladoStr[m_TecladoIndice]=Tecla[f*10+c];
 8016582:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016584:	4613      	mov	r3, r2
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	4413      	add	r3, r2
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	461a      	mov	r2, r3
 801658e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016590:	441a      	add	r2, r3
 8016592:	4b30      	ldr	r3, [pc, #192]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	3278      	adds	r2, #120	; 0x78
 8016598:	443a      	add	r2, r7
 801659a:	f812 1c68 	ldrb.w	r1, [r2, #-104]
 801659e:	4a2e      	ldr	r2, [pc, #184]	; (8016658 <f_TECLADO_ALFA_Input+0x274>)
 80165a0:	54d1      	strb	r1, [r2, r3]
 			    	m_TecladoStr[m_TecladoIndice+1]=0;
 80165a2:	4b2c      	ldr	r3, [pc, #176]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	3301      	adds	r3, #1
 80165a8:	4a2b      	ldr	r2, [pc, #172]	; (8016658 <f_TECLADO_ALFA_Input+0x274>)
 80165aa:	2100      	movs	r1, #0
 80165ac:	54d1      	strb	r1, [r2, r3]
 			    	m_TecladoIndice++;
 80165ae:	4b29      	ldr	r3, [pc, #164]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	3301      	adds	r3, #1
 80165b4:	4a27      	ldr	r2, [pc, #156]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165b6:	6013      	str	r3, [r2, #0]
 			    }
 			    if(f*10+c == 39 && m_TecladoIndice>0) m_TecladoIndice--,m_TecladoStr[m_TecladoIndice]=0;
 80165b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80165ba:	4613      	mov	r3, r2
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	4413      	add	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	461a      	mov	r2, r3
 80165c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165c6:	4413      	add	r3, r2
 80165c8:	2b27      	cmp	r3, #39	; 0x27
 80165ca:	d10d      	bne.n	80165e8 <f_TECLADO_ALFA_Input+0x204>
 80165cc:	4b21      	ldr	r3, [pc, #132]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d009      	beq.n	80165e8 <f_TECLADO_ALFA_Input+0x204>
 80165d4:	4b1f      	ldr	r3, [pc, #124]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	3b01      	subs	r3, #1
 80165da:	4a1e      	ldr	r2, [pc, #120]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165dc:	6013      	str	r3, [r2, #0]
 80165de:	4b1d      	ldr	r3, [pc, #116]	; (8016654 <f_TECLADO_ALFA_Input+0x270>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	4a1d      	ldr	r2, [pc, #116]	; (8016658 <f_TECLADO_ALFA_Input+0x274>)
 80165e4:	2100      	movs	r1, #0
 80165e6:	54d1      	strb	r1, [r2, r3]
 			    if(f*10+c == 31)
 80165e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80165ea:	4613      	mov	r3, r2
 80165ec:	009b      	lsls	r3, r3, #2
 80165ee:	4413      	add	r3, r2
 80165f0:	005b      	lsls	r3, r3, #1
 80165f2:	461a      	mov	r2, r3
 80165f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165f6:	4413      	add	r3, r2
 80165f8:	2b1f      	cmp	r3, #31
 80165fa:	d10a      	bne.n	8016612 <f_TECLADO_ALFA_Input+0x22e>
 			    {
 			    	if(m_Teclado!=0) m_Teclado=0;
 80165fc:	4b0e      	ldr	r3, [pc, #56]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d003      	beq.n	801660c <f_TECLADO_ALFA_Input+0x228>
 8016604:	4b0c      	ldr	r3, [pc, #48]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 8016606:	2200      	movs	r2, #0
 8016608:	701a      	strb	r2, [r3, #0]
 801660a:	e002      	b.n	8016612 <f_TECLADO_ALFA_Input+0x22e>
 			    	else			 m_Teclado=1;
 801660c:	4b0a      	ldr	r3, [pc, #40]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 801660e:	2201      	movs	r2, #1
 8016610:	701a      	strb	r2, [r3, #0]
 			    }
 			    if(f*10+c == 30)
 8016612:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016614:	4613      	mov	r3, r2
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	4413      	add	r3, r2
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	461a      	mov	r2, r3
 801661e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016620:	4413      	add	r3, r2
 8016622:	2b1e      	cmp	r3, #30
 8016624:	d11d      	bne.n	8016662 <f_TECLADO_ALFA_Input+0x27e>
 			    {
 			      	if(m_Teclado!=2) m_Teclado=2;
 8016626:	4b04      	ldr	r3, [pc, #16]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 8016628:	781b      	ldrb	r3, [r3, #0]
 801662a:	2b02      	cmp	r3, #2
 801662c:	d016      	beq.n	801665c <f_TECLADO_ALFA_Input+0x278>
 801662e:	4b02      	ldr	r3, [pc, #8]	; (8016638 <f_TECLADO_ALFA_Input+0x254>)
 8016630:	2202      	movs	r2, #2
 8016632:	701a      	strb	r2, [r3, #0]
 8016634:	e015      	b.n	8016662 <f_TECLADO_ALFA_Input+0x27e>
 8016636:	bf00      	nop
 8016638:	20009a4c 	.word	0x20009a4c
 801663c:	0801b808 	.word	0x0801b808
 8016640:	0801b834 	.word	0x0801b834
 8016644:	0801b860 	.word	0x0801b860
 8016648:	20009d48 	.word	0x20009d48
 801664c:	20009d4c 	.word	0x20009d4c
 8016650:	48000400 	.word	0x48000400
 8016654:	20009a44 	.word	0x20009a44
 8016658:	20009a10 	.word	0x20009a10
 			       	else			 m_Teclado=0;
 801665c:	4b73      	ldr	r3, [pc, #460]	; (801682c <f_TECLADO_ALFA_Input+0x448>)
 801665e:	2200      	movs	r2, #0
 8016660:	701a      	strb	r2, [r3, #0]
 			    }
 			    if(f*10+c == 30 || f*10+c == 31) f_TECLADO_ALFA_fondo(fi);
 8016662:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016664:	4613      	mov	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4413      	add	r3, r2
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	461a      	mov	r2, r3
 801666e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016670:	4413      	add	r3, r2
 8016672:	2b1e      	cmp	r3, #30
 8016674:	d009      	beq.n	801668a <f_TECLADO_ALFA_Input+0x2a6>
 8016676:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016678:	4613      	mov	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	4413      	add	r3, r2
 801667e:	005b      	lsls	r3, r3, #1
 8016680:	461a      	mov	r2, r3
 8016682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016684:	4413      	add	r3, r2
 8016686:	2b1f      	cmp	r3, #31
 8016688:	d102      	bne.n	8016690 <f_TECLADO_ALFA_Input+0x2ac>
 801668a:	68f8      	ldr	r0, [r7, #12]
 801668c:	f000 f936 	bl	80168fc <f_TECLADO_ALFA_fondo>
	   for(c=0;c<10;c++)
 8016690:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016692:	3301      	adds	r3, #1
 8016694:	673b      	str	r3, [r7, #112]	; 0x70
 8016696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016698:	2b09      	cmp	r3, #9
 801669a:	f77f aed2 	ble.w	8016442 <f_TECLADO_ALFA_Input+0x5e>
   for(f=0;f<4;f++)
 801669e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166a0:	3301      	adds	r3, #1
 80166a2:	677b      	str	r3, [r7, #116]	; 0x74
 80166a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166a6:	2b03      	cmp	r3, #3
 80166a8:	f77f aec8 	ble.w	801643c <f_TECLADO_ALFA_Input+0x58>
		   }
	   }
   }
   if( m_XPanel<80 && m_YPanel>208 )
 80166ac:	4b60      	ldr	r3, [pc, #384]	; (8016830 <f_TECLADO_ALFA_Input+0x44c>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2b4f      	cmp	r3, #79	; 0x4f
 80166b2:	d838      	bhi.n	8016726 <f_TECLADO_ALFA_Input+0x342>
 80166b4:	4b5f      	ldr	r3, [pc, #380]	; (8016834 <f_TECLADO_ALFA_Input+0x450>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	2bd0      	cmp	r3, #208	; 0xd0
 80166ba:	d934      	bls.n	8016726 <f_TECLADO_ALFA_Input+0x342>
   {
	    f_PIC(&fi[7],0,208);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 80166c2:	22d0      	movs	r2, #208	; 0xd0
 80166c4:	2100      	movs	r1, #0
 80166c6:	4618      	mov	r0, r3
 80166c8:	f000 f9de 	bl	8016a88 <f_PIC>
		ILI9341_Draw_String(26,207,0xffff,0x5AF7, "<-",4);
 80166cc:	2304      	movs	r3, #4
 80166ce:	9301      	str	r3, [sp, #4]
 80166d0:	4b59      	ldr	r3, [pc, #356]	; (8016838 <f_TECLADO_ALFA_Input+0x454>)
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	f645 23f7 	movw	r3, #23287	; 0x5af7
 80166d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166dc:	21cf      	movs	r1, #207	; 0xcf
 80166de:	201a      	movs	r0, #26
 80166e0:	f7fa fca6 	bl	8011030 <ILI9341_Draw_String>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 80166e4:	bf00      	nop
 80166e6:	2102      	movs	r1, #2
 80166e8:	4854      	ldr	r0, [pc, #336]	; (801683c <f_TECLADO_ALFA_Input+0x458>)
 80166ea:	f7f0 fab9 	bl	8006c60 <HAL_GPIO_ReadPin>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d0f8      	beq.n	80166e6 <f_TECLADO_ALFA_Input+0x302>
      	HAL_Delay(255);
 80166f4:	20ff      	movs	r0, #255	; 0xff
 80166f6:	f7ee fadb 	bl	8004cb0 <HAL_Delay>
        f_PIC(&fi[6],0,208);
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8016700:	22d0      	movs	r2, #208	; 0xd0
 8016702:	2100      	movs	r1, #0
 8016704:	4618      	mov	r0, r3
 8016706:	f000 f9bf 	bl	8016a88 <f_PIC>
        ILI9341_Draw_String(26,207,0xffff,0x0010, "<-",4);
 801670a:	2304      	movs	r3, #4
 801670c:	9301      	str	r3, [sp, #4]
 801670e:	4b4a      	ldr	r3, [pc, #296]	; (8016838 <f_TECLADO_ALFA_Input+0x454>)
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	2310      	movs	r3, #16
 8016714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016718:	21cf      	movs	r1, #207	; 0xcf
 801671a:	201a      	movs	r0, #26
 801671c:	f7fa fc88 	bl	8011030 <ILI9341_Draw_String>
        m_Pantalla=PantallaNO;
 8016720:	4a47      	ldr	r2, [pc, #284]	; (8016840 <f_TECLADO_ALFA_Input+0x45c>)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6013      	str	r3, [r2, #0]
   }
   if( m_XPanel>80 && m_XPanel<240 && m_YPanel>208 )
 8016726:	4b42      	ldr	r3, [pc, #264]	; (8016830 <f_TECLADO_ALFA_Input+0x44c>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	2b50      	cmp	r3, #80	; 0x50
 801672c:	d922      	bls.n	8016774 <f_TECLADO_ALFA_Input+0x390>
 801672e:	4b40      	ldr	r3, [pc, #256]	; (8016830 <f_TECLADO_ALFA_Input+0x44c>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2bef      	cmp	r3, #239	; 0xef
 8016734:	d81e      	bhi.n	8016774 <f_TECLADO_ALFA_Input+0x390>
 8016736:	4b3f      	ldr	r3, [pc, #252]	; (8016834 <f_TECLADO_ALFA_Input+0x450>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	2bd0      	cmp	r3, #208	; 0xd0
 801673c:	d91a      	bls.n	8016774 <f_TECLADO_ALFA_Input+0x390>
   {
	    f_PIC(&fi[5],80,208);
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 8016744:	22d0      	movs	r2, #208	; 0xd0
 8016746:	2150      	movs	r1, #80	; 0x50
 8016748:	4618      	mov	r0, r3
 801674a:	f000 f99d 	bl	8016a88 <f_PIC>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 801674e:	bf00      	nop
 8016750:	2102      	movs	r1, #2
 8016752:	483a      	ldr	r0, [pc, #232]	; (801683c <f_TECLADO_ALFA_Input+0x458>)
 8016754:	f7f0 fa84 	bl	8006c60 <HAL_GPIO_ReadPin>
 8016758:	4603      	mov	r3, r0
 801675a:	2b00      	cmp	r3, #0
 801675c:	d0f8      	beq.n	8016750 <f_TECLADO_ALFA_Input+0x36c>
      	HAL_Delay(255);
 801675e:	20ff      	movs	r0, #255	; 0xff
 8016760:	f7ee faa6 	bl	8004cb0 <HAL_Delay>
        f_PIC(&fi[4],80,208);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801676a:	22d0      	movs	r2, #208	; 0xd0
 801676c:	2150      	movs	r1, #80	; 0x50
 801676e:	4618      	mov	r0, r3
 8016770:	f000 f98a 	bl	8016a88 <f_PIC>
   }
   if( m_XPanel>240 && m_YPanel>208 )
 8016774:	4b2e      	ldr	r3, [pc, #184]	; (8016830 <f_TECLADO_ALFA_Input+0x44c>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	2bf0      	cmp	r3, #240	; 0xf0
 801677a:	d93a      	bls.n	80167f2 <f_TECLADO_ALFA_Input+0x40e>
 801677c:	4b2d      	ldr	r3, [pc, #180]	; (8016834 <f_TECLADO_ALFA_Input+0x450>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2bd0      	cmp	r3, #208	; 0xd0
 8016782:	d936      	bls.n	80167f2 <f_TECLADO_ALFA_Input+0x40e>
   {
	    f_PIC(&fi[7],240,208);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 801678a:	22d0      	movs	r2, #208	; 0xd0
 801678c:	21f0      	movs	r1, #240	; 0xf0
 801678e:	4618      	mov	r0, r3
 8016790:	f000 f97a 	bl	8016a88 <f_PIC>
		ILI9341_Draw_String(266,207,0xffff,0x5AF7, "OK",4);
 8016794:	2304      	movs	r3, #4
 8016796:	9301      	str	r3, [sp, #4]
 8016798:	4b2a      	ldr	r3, [pc, #168]	; (8016844 <f_TECLADO_ALFA_Input+0x460>)
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	f645 23f7 	movw	r3, #23287	; 0x5af7
 80167a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167a4:	21cf      	movs	r1, #207	; 0xcf
 80167a6:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80167aa:	f7fa fc41 	bl	8011030 <ILI9341_Draw_String>
	    while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 80167ae:	bf00      	nop
 80167b0:	2102      	movs	r1, #2
 80167b2:	4822      	ldr	r0, [pc, #136]	; (801683c <f_TECLADO_ALFA_Input+0x458>)
 80167b4:	f7f0 fa54 	bl	8006c60 <HAL_GPIO_ReadPin>
 80167b8:	4603      	mov	r3, r0
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d0f8      	beq.n	80167b0 <f_TECLADO_ALFA_Input+0x3cc>
      	HAL_Delay(255);
 80167be:	20ff      	movs	r0, #255	; 0xff
 80167c0:	f7ee fa76 	bl	8004cb0 <HAL_Delay>
        f_PIC(&fi[6],240,208);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80167ca:	22d0      	movs	r2, #208	; 0xd0
 80167cc:	21f0      	movs	r1, #240	; 0xf0
 80167ce:	4618      	mov	r0, r3
 80167d0:	f000 f95a 	bl	8016a88 <f_PIC>
        ILI9341_Draw_String(266,207,0xffff,0x0010, "OK",4);
 80167d4:	2304      	movs	r3, #4
 80167d6:	9301      	str	r3, [sp, #4]
 80167d8:	4b1a      	ldr	r3, [pc, #104]	; (8016844 <f_TECLADO_ALFA_Input+0x460>)
 80167da:	9300      	str	r3, [sp, #0]
 80167dc:	2310      	movs	r3, #16
 80167de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167e2:	21cf      	movs	r1, #207	; 0xcf
 80167e4:	f44f 7085 	mov.w	r0, #266	; 0x10a
 80167e8:	f7fa fc22 	bl	8011030 <ILI9341_Draw_String>
        m_Pantalla=PantallaSI;
 80167ec:	4a14      	ldr	r2, [pc, #80]	; (8016840 <f_TECLADO_ALFA_Input+0x45c>)
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	6013      	str	r3, [r2, #0]
   }
   sprintf(str,"%s                      ",m_TecladoStr);
 80167f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80167f6:	4a14      	ldr	r2, [pc, #80]	; (8016848 <f_TECLADO_ALFA_Input+0x464>)
 80167f8:	4914      	ldr	r1, [pc, #80]	; (801684c <f_TECLADO_ALFA_Input+0x468>)
 80167fa:	4618      	mov	r0, r3
 80167fc:	f003 f81c 	bl	8019838 <siprintf>
   m_TecladoStr[22]=0;
 8016800:	4b11      	ldr	r3, [pc, #68]	; (8016848 <f_TECLADO_ALFA_Input+0x464>)
 8016802:	2200      	movs	r2, #0
 8016804:	759a      	strb	r2, [r3, #22]
   str[21]=0;
 8016806:	2300      	movs	r3, #0
 8016808:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
   ILI9341_Draw_String(0,40,0,0x64DF,str,4);
 801680c:	2304      	movs	r3, #4
 801680e:	9301      	str	r3, [sp, #4]
 8016810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	f246 43df 	movw	r3, #25823	; 0x64df
 801681a:	2200      	movs	r2, #0
 801681c:	2128      	movs	r1, #40	; 0x28
 801681e:	2000      	movs	r0, #0
 8016820:	f7fa fc06 	bl	8011030 <ILI9341_Draw_String>
}
 8016824:	bf00      	nop
 8016826:	3778      	adds	r7, #120	; 0x78
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}
 801682c:	20009a4c 	.word	0x20009a4c
 8016830:	20009d48 	.word	0x20009d48
 8016834:	20009d4c 	.word	0x20009d4c
 8016838:	0801b890 	.word	0x0801b890
 801683c:	48000400 	.word	0x48000400
 8016840:	2000478c 	.word	0x2000478c
 8016844:	0801b894 	.word	0x0801b894
 8016848:	20009a10 	.word	0x20009a10
 801684c:	0801b898 	.word	0x0801b898

08016850 <f_TECLADO_ALFA_open>:

void f_TECLADO_ALFA_open(FIL* fi)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08c      	sub	sp, #48	; 0x30
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
   int f,c;
   char str[35];

   m_TecladoIndice=0;
 8016858:	4b1f      	ldr	r3, [pc, #124]	; (80168d8 <f_TECLADO_ALFA_open+0x88>)
 801685a:	2200      	movs	r2, #0
 801685c:	601a      	str	r2, [r3, #0]

   f_PIC_open(&fi[0],"REC/TECLADO ALFA/BOT TECLA UP.bmp");
 801685e:	491f      	ldr	r1, [pc, #124]	; (80168dc <f_TECLADO_ALFA_open+0x8c>)
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f000 f8e9 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[1],"REC/TECLADO ALFA/BOT TECLA DN.bmp");
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 801686c:	491c      	ldr	r1, [pc, #112]	; (80168e0 <f_TECLADO_ALFA_open+0x90>)
 801686e:	4618      	mov	r0, r3
 8016870:	f000 f8e2 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[2],"REC/TECLADO ALFA/BOT BUSCAR UP.bmp");
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f503 638b 	add.w	r3, r3, #1112	; 0x458
 801687a:	491a      	ldr	r1, [pc, #104]	; (80168e4 <f_TECLADO_ALFA_open+0x94>)
 801687c:	4618      	mov	r0, r3
 801687e:	f000 f8db 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[3],"REC/TECLADO ALFA/BOT BUSCAR DN.bmp");
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f203 6384 	addw	r3, r3, #1668	; 0x684
 8016888:	4917      	ldr	r1, [pc, #92]	; (80168e8 <f_TECLADO_ALFA_open+0x98>)
 801688a:	4618      	mov	r0, r3
 801688c:	f000 f8d4 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[4],"REC/TECLADO ALFA/BOT SP UP.bmp");
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016896:	4915      	ldr	r1, [pc, #84]	; (80168ec <f_TECLADO_ALFA_open+0x9c>)
 8016898:	4618      	mov	r0, r3
 801689a:	f000 f8cd 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[5],"REC/TECLADO ALFA/BOT SP DN.bmp");
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f603 23dc 	addw	r3, r3, #2780	; 0xadc
 80168a4:	4912      	ldr	r1, [pc, #72]	; (80168f0 <f_TECLADO_ALFA_open+0xa0>)
 80168a6:	4618      	mov	r0, r3
 80168a8:	f000 f8c6 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[6],"REC/TECLADO ALFA/BOT BARRA UP.bmp");
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80168b2:	4910      	ldr	r1, [pc, #64]	; (80168f4 <f_TECLADO_ALFA_open+0xa4>)
 80168b4:	4618      	mov	r0, r3
 80168b6:	f000 f8bf 	bl	8016a38 <f_PIC_open>
   f_PIC_open(&fi[7],"REC/TECLADO ALFA/BOT BARRA DN.bmp");
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f603 7334 	addw	r3, r3, #3892	; 0xf34
 80168c0:	490d      	ldr	r1, [pc, #52]	; (80168f8 <f_TECLADO_ALFA_open+0xa8>)
 80168c2:	4618      	mov	r0, r3
 80168c4:	f000 f8b8 	bl	8016a38 <f_PIC_open>
// ILI9341_Draw_String(0,80,WHITE,0x0010,str, 4);

   f_TECLADO_ALFA_fondo(fi);
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 f817 	bl	80168fc <f_TECLADO_ALFA_fondo>
}
 80168ce:	bf00      	nop
 80168d0:	3730      	adds	r7, #48	; 0x30
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
 80168d6:	bf00      	nop
 80168d8:	20009a44 	.word	0x20009a44
 80168dc:	0801b8b4 	.word	0x0801b8b4
 80168e0:	0801b8d8 	.word	0x0801b8d8
 80168e4:	0801b8fc 	.word	0x0801b8fc
 80168e8:	0801b920 	.word	0x0801b920
 80168ec:	0801b944 	.word	0x0801b944
 80168f0:	0801b964 	.word	0x0801b964
 80168f4:	0801b984 	.word	0x0801b984
 80168f8:	0801b9a8 	.word	0x0801b9a8

080168fc <f_TECLADO_ALFA_fondo>:

void f_TECLADO_ALFA_fondo(FIL* fi)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b092      	sub	sp, #72	; 0x48
 8016900:	af02      	add	r7, sp, #8
 8016902:	6078      	str	r0, [r7, #4]
	int f,c;

	char Tecla[41];

	if(m_Teclado==0) sprintf(Tecla,"0123456789QWERTYUIOPASDFGHJKLN#^ZXCVBNM<");
 8016904:	4b46      	ldr	r3, [pc, #280]	; (8016a20 <f_TECLADO_ALFA_fondo+0x124>)
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d105      	bne.n	8016918 <f_TECLADO_ALFA_fondo+0x1c>
 801690c:	f107 030c 	add.w	r3, r7, #12
 8016910:	4944      	ldr	r1, [pc, #272]	; (8016a24 <f_TECLADO_ALFA_fondo+0x128>)
 8016912:	4618      	mov	r0, r3
 8016914:	f002 ff90 	bl	8019838 <siprintf>
	if(m_Teclado==1) sprintf(Tecla,"0123456789qwertyuiopasdfghjkLn#^zxcvbnm<");
 8016918:	4b41      	ldr	r3, [pc, #260]	; (8016a20 <f_TECLADO_ALFA_fondo+0x124>)
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	2b01      	cmp	r3, #1
 801691e:	d105      	bne.n	801692c <f_TECLADO_ALFA_fondo+0x30>
 8016920:	f107 030c 	add.w	r3, r7, #12
 8016924:	4940      	ldr	r1, [pc, #256]	; (8016a28 <f_TECLADO_ALFA_fondo+0x12c>)
 8016926:	4618      	mov	r0, r3
 8016928:	f002 ff86 	bl	8019838 <siprintf>
	if(m_Teclado==2) sprintf(Tecla,"~!#$%c&@_?!=+-*%c%c^|xX<>()[]{}oO#^%c'.,:;!<",'%','/','\\','"');
 801692c:	4b3c      	ldr	r3, [pc, #240]	; (8016a20 <f_TECLADO_ALFA_fondo+0x124>)
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	2b02      	cmp	r3, #2
 8016932:	d10a      	bne.n	801694a <f_TECLADO_ALFA_fondo+0x4e>
 8016934:	f107 000c 	add.w	r0, r7, #12
 8016938:	2322      	movs	r3, #34	; 0x22
 801693a:	9301      	str	r3, [sp, #4]
 801693c:	235c      	movs	r3, #92	; 0x5c
 801693e:	9300      	str	r3, [sp, #0]
 8016940:	232f      	movs	r3, #47	; 0x2f
 8016942:	2225      	movs	r2, #37	; 0x25
 8016944:	4939      	ldr	r1, [pc, #228]	; (8016a2c <f_TECLADO_ALFA_fondo+0x130>)
 8016946:	f002 ff77 	bl	8019838 <siprintf>

	for(f=0;f<4;f++)
 801694a:	2300      	movs	r3, #0
 801694c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801694e:	e031      	b.n	80169b4 <f_TECLADO_ALFA_fondo+0xb8>
	{
	   	for(c=0;c<10;c++)
 8016950:	2300      	movs	r3, #0
 8016952:	63bb      	str	r3, [r7, #56]	; 0x38
 8016954:	e028      	b.n	80169a8 <f_TECLADO_ALFA_fondo+0xac>
	   	{
	   	   f_PIC(&fi[0],c*32,80+f*32);
 8016956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016958:	015b      	lsls	r3, r3, #5
 801695a:	4619      	mov	r1, r3
 801695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801695e:	015b      	lsls	r3, r3, #5
 8016960:	3350      	adds	r3, #80	; 0x50
 8016962:	461a      	mov	r2, r3
 8016964:	6878      	ldr	r0, [r7, #4]
 8016966:	f000 f88f 	bl	8016a88 <f_PIC>
	   	   ILI9341_Draw_Char(c*32+12,240-f*32-112,0xffff,0x0010,Tecla[f*10+c],4);
 801696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801696c:	015b      	lsls	r3, r3, #5
 801696e:	f103 000c 	add.w	r0, r3, #12
 8016972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016974:	f1c3 0304 	rsb	r3, r3, #4
 8016978:	0159      	lsls	r1, r3, #5
 801697a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801697c:	4613      	mov	r3, r2
 801697e:	009b      	lsls	r3, r3, #2
 8016980:	4413      	add	r3, r2
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	461a      	mov	r2, r3
 8016986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016988:	4413      	add	r3, r2
 801698a:	3340      	adds	r3, #64	; 0x40
 801698c:	443b      	add	r3, r7
 801698e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8016992:	2204      	movs	r2, #4
 8016994:	9201      	str	r2, [sp, #4]
 8016996:	9300      	str	r3, [sp, #0]
 8016998:	2310      	movs	r3, #16
 801699a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801699e:	f7fa fc49 	bl	8011234 <ILI9341_Draw_Char>
	   	for(c=0;c<10;c++)
 80169a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a4:	3301      	adds	r3, #1
 80169a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80169a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169aa:	2b09      	cmp	r3, #9
 80169ac:	ddd3      	ble.n	8016956 <f_TECLADO_ALFA_fondo+0x5a>
	for(f=0;f<4;f++)
 80169ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169b0:	3301      	adds	r3, #1
 80169b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80169b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169b6:	2b03      	cmp	r3, #3
 80169b8:	ddca      	ble.n	8016950 <f_TECLADO_ALFA_fondo+0x54>
	   	}
	}
	f_PIC(&fi[6],0,208);
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80169c0:	22d0      	movs	r2, #208	; 0xd0
 80169c2:	2100      	movs	r1, #0
 80169c4:	4618      	mov	r0, r3
 80169c6:	f000 f85f 	bl	8016a88 <f_PIC>
	ILI9341_Draw_String(26,207,0xffff,0x0010, "<-",4);
 80169ca:	2304      	movs	r3, #4
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	4b18      	ldr	r3, [pc, #96]	; (8016a30 <f_TECLADO_ALFA_fondo+0x134>)
 80169d0:	9300      	str	r3, [sp, #0]
 80169d2:	2310      	movs	r3, #16
 80169d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169d8:	21cf      	movs	r1, #207	; 0xcf
 80169da:	201a      	movs	r0, #26
 80169dc:	f7fa fb28 	bl	8011030 <ILI9341_Draw_String>
	f_PIC(&fi[4],80,208);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80169e6:	22d0      	movs	r2, #208	; 0xd0
 80169e8:	2150      	movs	r1, #80	; 0x50
 80169ea:	4618      	mov	r0, r3
 80169ec:	f000 f84c 	bl	8016a88 <f_PIC>
	f_PIC(&fi[6],240,208);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 80169f6:	22d0      	movs	r2, #208	; 0xd0
 80169f8:	21f0      	movs	r1, #240	; 0xf0
 80169fa:	4618      	mov	r0, r3
 80169fc:	f000 f844 	bl	8016a88 <f_PIC>
	ILI9341_Draw_String(266,207,0xffff,0x0010,"OK",4);
 8016a00:	2304      	movs	r3, #4
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	4b0b      	ldr	r3, [pc, #44]	; (8016a34 <f_TECLADO_ALFA_fondo+0x138>)
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	2310      	movs	r3, #16
 8016a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a0e:	21cf      	movs	r1, #207	; 0xcf
 8016a10:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8016a14:	f7fa fb0c 	bl	8011030 <ILI9341_Draw_String>
}
 8016a18:	bf00      	nop
 8016a1a:	3740      	adds	r7, #64	; 0x40
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}
 8016a20:	20009a4c 	.word	0x20009a4c
 8016a24:	0801b808 	.word	0x0801b808
 8016a28:	0801b834 	.word	0x0801b834
 8016a2c:	0801b860 	.word	0x0801b860
 8016a30:	0801b890 	.word	0x0801b890
 8016a34:	0801b894 	.word	0x0801b894

08016a38 <f_PIC_open>:

//////////////////////////////////////////////////////////
// PIC DESDE SD FILE
//////////////////////////////////////////////////////////
void f_PIC_open(FIL* f,char* Name)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b090      	sub	sp, #64	; 0x40
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
	char File[50];
	TP_CS_OFF;
 8016a42:	2201      	movs	r2, #1
 8016a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016a48:	480d      	ldr	r0, [pc, #52]	; (8016a80 <f_PIC_open+0x48>)
 8016a4a:	f7f0 f921 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 8016a4e:	2201      	movs	r2, #1
 8016a50:	2180      	movs	r1, #128	; 0x80
 8016a52:	480c      	ldr	r0, [pc, #48]	; (8016a84 <f_PIC_open+0x4c>)
 8016a54:	f7f0 f91c 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2108      	movs	r1, #8
 8016a5c:	4809      	ldr	r0, [pc, #36]	; (8016a84 <f_PIC_open+0x4c>)
 8016a5e:	f7f0 f917 	bl	8006c90 <HAL_GPIO_WritePin>
	f_open(f,Name,FA_READ);
 8016a62:	2201      	movs	r2, #1
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7fe fc56 	bl	8015318 <f_open>
	SD_CS_OFF;
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	2108      	movs	r1, #8
 8016a70:	4804      	ldr	r0, [pc, #16]	; (8016a84 <f_PIC_open+0x4c>)
 8016a72:	f7f0 f90d 	bl	8006c90 <HAL_GPIO_WritePin>
}
 8016a76:	bf00      	nop
 8016a78:	3740      	adds	r7, #64	; 0x40
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	48000400 	.word	0x48000400
 8016a84:	48000800 	.word	0x48000800

08016a88 <f_PIC>:
	SD_CS_ON;
	f_close(f);
	SD_CS_OFF;
}
void f_PIC(FIL* f,unsigned int x,unsigned int y)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	f5ad 6dea 	sub.w	sp, sp, #1872	; 0x750
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016a94:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8016a98:	6018      	str	r0, [r3, #0]
 8016a9a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016a9e:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8016aa2:	6019      	str	r1, [r3, #0]
 8016aa4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016aa8:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8016aac:	601a      	str	r2, [r3, #0]
	unsigned char 	dataIn[256],color[4],c;
	unsigned int 	col_16,TablaCol[256];
	UINT 			br,ERROR_SD;
	uint32_t		resto;

	TFT_CS_OFF;
 8016aae:	2201      	movs	r2, #1
 8016ab0:	2180      	movs	r1, #128	; 0x80
 8016ab2:	48d3      	ldr	r0, [pc, #844]	; (8016e00 <f_PIC+0x378>)
 8016ab4:	f7f0 f8ec 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8016ab8:	2200      	movs	r2, #0
 8016aba:	2108      	movs	r1, #8
 8016abc:	48d0      	ldr	r0, [pc, #832]	; (8016e00 <f_PIC+0x378>)
 8016abe:	f7f0 f8e7 	bl	8006c90 <HAL_GPIO_WritePin>

	f_lseek(f,0);
 8016ac2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016ac6:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8016aca:	2100      	movs	r1, #0
 8016acc:	6818      	ldr	r0, [r3, #0]
 8016ace:	f7ff f8f2 	bl	8015cb6 <f_lseek>
	f_read(f,dataIn,54,&br);
 8016ad2:	f107 0314 	add.w	r3, r7, #20
 8016ad6:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 8016ada:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8016ade:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 8016ae2:	2236      	movs	r2, #54	; 0x36
 8016ae4:	6800      	ldr	r0, [r0, #0]
 8016ae6:	f7fe fe99 	bl	801581c <f_read>

	uint32_t	AnchoBMP=(unsigned int)dataIn[0x12]+(unsigned int)dataIn[0x13]*256;
 8016aea:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016aee:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016af2:	7c9b      	ldrb	r3, [r3, #18]
 8016af4:	461a      	mov	r2, r3
 8016af6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016afa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016afe:	7cdb      	ldrb	r3, [r3, #19]
 8016b00:	021b      	lsls	r3, r3, #8
 8016b02:	4413      	add	r3, r2
 8016b04:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
	uint32_t	AltoBMP=(unsigned int)dataIn[0x16]+(unsigned int)dataIn[0x17]*256;
 8016b08:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b0c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b10:	7d9b      	ldrb	r3, [r3, #22]
 8016b12:	461a      	mov	r2, r3
 8016b14:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b18:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b1c:	7ddb      	ldrb	r3, [r3, #23]
 8016b1e:	021b      	lsls	r3, r3, #8
 8016b20:	4413      	add	r3, r2
 8016b22:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
	uint32_t	OffsetArray=(unsigned int)dataIn[0x0A]+(unsigned int)dataIn[0x0B]*256;
 8016b26:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b2a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b2e:	7a9b      	ldrb	r3, [r3, #10]
 8016b30:	461a      	mov	r2, r3
 8016b32:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b36:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b3a:	7adb      	ldrb	r3, [r3, #11]
 8016b3c:	021b      	lsls	r3, r3, #8
 8016b3e:	4413      	add	r3, r2
 8016b40:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
	uint32_t	LargoTablaColores=(unsigned int)dataIn[0x2E]+(unsigned int)dataIn[0x2F]*256;
 8016b44:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b48:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b4c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8016b50:	461a      	mov	r2, r3
 8016b52:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b56:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016b5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016b5e:	021b      	lsls	r3, r3, #8
 8016b60:	4413      	add	r3, r2
 8016b62:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730

	for(i=0;i<LargoTablaColores;i++)
 8016b66:	2300      	movs	r3, #0
 8016b68:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8016b6c:	e032      	b.n	8016bd4 <f_PIC+0x14c>
	{
		f_read(f,color,4,&br);
 8016b6e:	f107 0314 	add.w	r3, r7, #20
 8016b72:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8016b76:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8016b7a:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 8016b7e:	2204      	movs	r2, #4
 8016b80:	6800      	ldr	r0, [r0, #0]
 8016b82:	f7fe fe4b 	bl	801581c <f_read>
		TablaCol[i]=(color[2]/8)*2048+(color[1]/4)*32+(color[0])/8;
 8016b86:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016b8a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8016b8e:	789b      	ldrb	r3, [r3, #2]
 8016b90:	08db      	lsrs	r3, r3, #3
 8016b92:	b2db      	uxtb	r3, r3
 8016b94:	019b      	lsls	r3, r3, #6
 8016b96:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8016b9a:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8016b9e:	7852      	ldrb	r2, [r2, #1]
 8016ba0:	0892      	lsrs	r2, r2, #2
 8016ba2:	b2d2      	uxtb	r2, r2
 8016ba4:	4413      	add	r3, r2
 8016ba6:	015b      	lsls	r3, r3, #5
 8016ba8:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8016bac:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8016bb0:	7812      	ldrb	r2, [r2, #0]
 8016bb2:	08d2      	lsrs	r2, r2, #3
 8016bb4:	b2d2      	uxtb	r2, r2
 8016bb6:	4413      	add	r3, r2
 8016bb8:	4619      	mov	r1, r3
 8016bba:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016bbe:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8016bc2:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8016bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i=0;i<LargoTablaColores;i++)
 8016bca:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8016bce:	3301      	adds	r3, #1
 8016bd0:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8016bd4:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8016bd8:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d3c6      	bcc.n	8016b6e <f_PIC+0xe6>
	}

	f_lseek(f,OffsetArray);
 8016be0:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016be4:	f2a3 7344 	subw	r3, r3, #1860	; 0x744
 8016be8:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 8016bec:	6818      	ldr	r0, [r3, #0]
 8016bee:	f7ff f862 	bl	8015cb6 <f_lseek>
	uint32_t Peso=AnchoBMP*AltoBMP;
 8016bf2:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 8016bf6:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 8016bfa:	fb02 f303 	mul.w	r3, r2, r3
 8016bfe:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c

	SD_CS_OFF;
 8016c02:	2201      	movs	r2, #1
 8016c04:	2108      	movs	r1, #8
 8016c06:	487e      	ldr	r0, [pc, #504]	; (8016e00 <f_PIC+0x378>)
 8016c08:	f7f0 f842 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2180      	movs	r1, #128	; 0x80
 8016c10:	487b      	ldr	r0, [pc, #492]	; (8016e00 <f_PIC+0x378>)
 8016c12:	f7f0 f83d 	bl	8006c90 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 8016c16:	2004      	movs	r0, #4
 8016c18:	f7f9 fed6 	bl	80109c8 <ILI9341_Set_Rotation>
	unsigned int x1=x;
 8016c1c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016c20:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 8016c2a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016c2e:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8016c32:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	4413      	add	r3, r2
 8016c3a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8016c3e:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
	unsigned int x2=AnchoBMP+x-1;
 8016c42:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016c46:	f5a3 63e9 	sub.w	r3, r3, #1864	; 0x748
 8016c4a:	f8d7 273c 	ldr.w	r2, [r7, #1852]	; 0x73c
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4413      	add	r3, r2
 8016c52:	3b01      	subs	r3, #1
 8016c54:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
	unsigned int y2=239-y;
 8016c58:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016c5c:	f2a3 734c 	subw	r3, r3, #1868	; 0x74c
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8016c66:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
	ILI9341_Set_Address(x1,y1,x2,y2);
 8016c6a:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8016c6e:	f8d7 2720 	ldr.w	r2, [r7, #1824]	; 0x720
 8016c72:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 8016c76:	f8d7 0728 	ldr.w	r0, [r7, #1832]	; 0x728
 8016c7a:	f7f9 ff29 	bl	8010ad0 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016c84:	485e      	ldr	r0, [pc, #376]	; (8016e00 <f_PIC+0x378>)
 8016c86:	f7f0 f803 	bl	8006c90 <HAL_GPIO_WritePin>
	dataIn[0]=0x2C;
 8016c8a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016c8e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8016c92:	222c      	movs	r2, #44	; 0x2c
 8016c94:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, dataIn, 1, 1);
 8016c96:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	2201      	movs	r2, #1
 8016c9e:	4859      	ldr	r0, [pc, #356]	; (8016e04 <f_PIC+0x37c>)
 8016ca0:	f7f3 fa3f 	bl	800a122 <HAL_SPI_Transmit>
	DWORD sect ;

	for(i=0;i<Peso;i=i+256)
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8016caa:	e09c      	b.n	8016de6 <f_PIC+0x35e>
	{
		TFT_CS_OFF;
 8016cac:	2201      	movs	r2, #1
 8016cae:	2180      	movs	r1, #128	; 0x80
 8016cb0:	4853      	ldr	r0, [pc, #332]	; (8016e00 <f_PIC+0x378>)
 8016cb2:	f7ef ffed 	bl	8006c90 <HAL_GPIO_WritePin>
		SD_CS_ON;
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	2108      	movs	r1, #8
 8016cba:	4851      	ldr	r0, [pc, #324]	; (8016e00 <f_PIC+0x378>)
 8016cbc:	f7ef ffe8 	bl	8006c90 <HAL_GPIO_WritePin>

		resto = Peso-i;
 8016cc0:	f8d7 272c 	ldr.w	r2, [r7, #1836]	; 0x72c
 8016cc4:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740
		if(resto>256) resto=256;
 8016cce:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 8016cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016cd6:	d903      	bls.n	8016ce0 <f_PIC+0x258>
 8016cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016cdc:	f8c7 3740 	str.w	r3, [r7, #1856]	; 0x740

		f_read(f,dataIn,resto,&br);
 8016ce0:	f107 0314 	add.w	r3, r7, #20
 8016ce4:	f207 411c 	addw	r1, r7, #1052	; 0x41c
 8016ce8:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8016cec:	f2a2 7044 	subw	r0, r2, #1860	; 0x744
 8016cf0:	f8d7 2740 	ldr.w	r2, [r7, #1856]	; 0x740
 8016cf4:	6800      	ldr	r0, [r0, #0]
 8016cf6:	f7fe fd91 	bl	801581c <f_read>
		for(ii=0,iii=0;ii<resto;ii++,iii++)
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
 8016d00:	2300      	movs	r3, #0
 8016d02:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8016d06:	e041      	b.n	8016d8c <f_PIC+0x304>
		{
			dataOut[iii]=TablaCol[dataIn[ii]]>>8;
 8016d08:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d0c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8016d10:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8016d14:	4413      	add	r3, r2
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	461a      	mov	r2, r3
 8016d1a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d1e:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8016d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d26:	0a1b      	lsrs	r3, r3, #8
 8016d28:	b2d9      	uxtb	r1, r3
 8016d2a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d2e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8016d32:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8016d36:	4413      	add	r3, r2
 8016d38:	460a      	mov	r2, r1
 8016d3a:	701a      	strb	r2, [r3, #0]
			iii++;
 8016d3c:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8016d40:	3301      	adds	r3, #1
 8016d42:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
			dataOut[iii]=TablaCol[dataIn[ii]];
 8016d46:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d4a:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8016d4e:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8016d52:	4413      	add	r3, r2
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	461a      	mov	r2, r3
 8016d58:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d5c:	f5a3 63e7 	sub.w	r3, r3, #1848	; 0x738
 8016d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d64:	b2d9      	uxtb	r1, r3
 8016d66:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8016d6a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8016d6e:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8016d72:	4413      	add	r3, r2
 8016d74:	460a      	mov	r2, r1
 8016d76:	701a      	strb	r2, [r3, #0]
		for(ii=0,iii=0;ii<resto;ii++,iii++)
 8016d78:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	f8c7 3748 	str.w	r3, [r7, #1864]	; 0x748
 8016d82:	f8d7 3744 	ldr.w	r3, [r7, #1860]	; 0x744
 8016d86:	3301      	adds	r3, #1
 8016d88:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8016d8c:	f8d7 2748 	ldr.w	r2, [r7, #1864]	; 0x748
 8016d90:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d3b7      	bcc.n	8016d08 <f_PIC+0x280>
		}

		SD_CS_OFF;
 8016d98:	2201      	movs	r2, #1
 8016d9a:	2108      	movs	r1, #8
 8016d9c:	4818      	ldr	r0, [pc, #96]	; (8016e00 <f_PIC+0x378>)
 8016d9e:	f7ef ff77 	bl	8006c90 <HAL_GPIO_WritePin>
		TFT_CS_ON;
 8016da2:	2200      	movs	r2, #0
 8016da4:	2180      	movs	r1, #128	; 0x80
 8016da6:	4816      	ldr	r0, [pc, #88]	; (8016e00 <f_PIC+0x378>)
 8016da8:	f7ef ff72 	bl	8006c90 <HAL_GPIO_WritePin>
		TFT_DC_DATA;
 8016dac:	2201      	movs	r2, #1
 8016dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016db2:	4813      	ldr	r0, [pc, #76]	; (8016e00 <f_PIC+0x378>)
 8016db4:	f7ef ff6c 	bl	8006c90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,dataOut,resto*2,300);
 8016db8:	f8d7 3740 	ldr.w	r3, [r7, #1856]	; 0x740
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	b29a      	uxth	r2, r3
 8016dc2:	f207 511c 	addw	r1, r7, #1308	; 0x51c
 8016dc6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8016dca:	480e      	ldr	r0, [pc, #56]	; (8016e04 <f_PIC+0x37c>)
 8016dcc:	f7f3 f9a9 	bl	800a122 <HAL_SPI_Transmit>
		TFT_CS_OFF;
 8016dd0:	2201      	movs	r2, #1
 8016dd2:	2180      	movs	r1, #128	; 0x80
 8016dd4:	480a      	ldr	r0, [pc, #40]	; (8016e00 <f_PIC+0x378>)
 8016dd6:	f7ef ff5b 	bl	8006c90 <HAL_GPIO_WritePin>
	for(i=0;i<Peso;i=i+256)
 8016dda:	f8d7 374c 	ldr.w	r3, [r7, #1868]	; 0x74c
 8016dde:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016de2:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8016de6:	f8d7 274c 	ldr.w	r2, [r7, #1868]	; 0x74c
 8016dea:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8016dee:	429a      	cmp	r2, r3
 8016df0:	f4ff af5c 	bcc.w	8016cac <f_PIC+0x224>
	}
}
 8016df4:	bf00      	nop
 8016df6:	bf00      	nop
 8016df8:	f507 67ea 	add.w	r7, r7, #1872	; 0x750
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	48000800 	.word	0x48000800
 8016e04:	20009628 	.word	0x20009628

08016e08 <BCO>:

//////////////////////////////////////////////////////////
// BOTON CORREDERA DESDE FLASH INTERNA
//////////////////////////////////////////////////////////
void BCO(unsigned char* Bot,unsigned int x,unsigned int y,unsigned char Est,unsigned char Largo,unsigned char Pos,char* str)
{
 8016e08:	b590      	push	{r4, r7, lr}
 8016e0a:	b08b      	sub	sp, #44	; 0x2c
 8016e0c:	af02      	add	r7, sp, #8
 8016e0e:	60f8      	str	r0, [r7, #12]
 8016e10:	60b9      	str	r1, [r7, #8]
 8016e12:	607a      	str	r2, [r7, #4]
 8016e14:	70fb      	strb	r3, [r7, #3]
	TP_CS_OFF;
 8016e16:	2201      	movs	r2, #1
 8016e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016e1c:	48bc      	ldr	r0, [pc, #752]	; (8017110 <BCO+0x308>)
 8016e1e:	f7ef ff37 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 8016e22:	2201      	movs	r2, #1
 8016e24:	2108      	movs	r1, #8
 8016e26:	48bb      	ldr	r0, [pc, #748]	; (8017114 <BCO+0x30c>)
 8016e28:	f7ef ff32 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	2180      	movs	r1, #128	; 0x80
 8016e30:	48b8      	ldr	r0, [pc, #736]	; (8017114 <BCO+0x30c>)
 8016e32:	f7ef ff2d 	bl	8006c90 <HAL_GPIO_WritePin>
    uint16_t colorF=0x64DF;
 8016e36:	f246 43df 	movw	r3, #25823	; 0x64df
 8016e3a:	83fb      	strh	r3, [r7, #30]
    uint16_t colorT=0x0000;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	83bb      	strh	r3, [r7, #28]
    uint16_t xt=x+6+(Largo*3-(unsigned char)strlen(str))*7;
 8016e40:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016e44:	4613      	mov	r3, r2
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	189c      	adds	r4, r3, r2
 8016e4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e4c:	f7e9 f9c8 	bl	80001e0 <strlen>
 8016e50:	4603      	mov	r3, r0
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	1ae3      	subs	r3, r4, r3
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	461a      	mov	r2, r3
 8016e5a:	00d2      	lsls	r2, r2, #3
 8016e5c:	1ad3      	subs	r3, r2, r3
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	b29b      	uxth	r3, r3
 8016e64:	4413      	add	r3, r2
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	3306      	adds	r3, #6
 8016e6a:	837b      	strh	r3, [r7, #26]
    uint16_t yt=y;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	833b      	strh	r3, [r7, #24]
    uint16_t w=Largo*14*3;
 8016e70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	461a      	mov	r2, r3
 8016e78:	0052      	lsls	r2, r2, #1
 8016e7a:	4413      	add	r3, r2
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	00d2      	lsls	r2, r2, #3
 8016e80:	1ad3      	subs	r3, r2, r3
 8016e82:	005b      	lsls	r3, r3, #1
 8016e84:	82fb      	strh	r3, [r7, #22]
    Pos--;
 8016e86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016e8a:	3b01      	subs	r3, #1
 8016e8c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    switch(Est)
 8016e90:	78fb      	ldrb	r3, [r7, #3]
 8016e92:	2b03      	cmp	r3, #3
 8016e94:	f200 8137 	bhi.w	8017106 <BCO+0x2fe>
 8016e98:	a201      	add	r2, pc, #4	; (adr r2, 8016ea0 <BCO+0x98>)
 8016e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e9e:	bf00      	nop
 8016ea0:	08016eb1 	.word	0x08016eb1
 8016ea4:	08016f63 	.word	0x08016f63
 8016ea8:	0801703b 	.word	0x0801703b
 8016eac:	080170e3 	.word	0x080170e3
    {
    	case 0://H
   		ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 8016eb0:	8b78      	ldrh	r0, [r7, #26]
 8016eb2:	8b39      	ldrh	r1, [r7, #24]
 8016eb4:	8bba      	ldrh	r2, [r7, #28]
 8016eb6:	8bfc      	ldrh	r4, [r7, #30]
 8016eb8:	2304      	movs	r3, #4
 8016eba:	9301      	str	r3, [sp, #4]
 8016ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ebe:	9300      	str	r3, [sp, #0]
 8016ec0:	4623      	mov	r3, r4
 8016ec2:	f7fa f8b5 	bl	8011030 <ILI9341_Draw_String>
   		FillReg(x   ,40+y   ,w  ,8 ,0xFC00);
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016ecc:	8afa      	ldrh	r2, [r7, #22]
 8016ece:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	2308      	movs	r3, #8
 8016ed6:	68b8      	ldr	r0, [r7, #8]
 8016ed8:	f001 f826 	bl	8017f28 <FillReg>
   		FillReg(x+8 ,40+y+8 ,w-8,8 ,BLACK);
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	f103 0008 	add.w	r0, r3, #8
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ee8:	8afb      	ldrh	r3, [r7, #22]
 8016eea:	3b08      	subs	r3, #8
 8016eec:	461a      	mov	r2, r3
 8016eee:	2300      	movs	r3, #0
 8016ef0:	9300      	str	r3, [sp, #0]
 8016ef2:	2308      	movs	r3, #8
 8016ef4:	f001 f818 	bl	8017f28 <FillReg>
   		FillReg(x	,40+y	,8	,24,0xFC00);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016efe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016f02:	9300      	str	r3, [sp, #0]
 8016f04:	2318      	movs	r3, #24
 8016f06:	2208      	movs	r2, #8
 8016f08:	68b8      	ldr	r0, [r7, #8]
 8016f0a:	f001 f80d 	bl	8017f28 <FillReg>
   		FillReg(x+w ,40+y	,8	,24,0xFC00);
 8016f0e:	8afa      	ldrh	r2, [r7, #22]
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	18d0      	adds	r0, r2, r3
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016f1a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016f1e:	9300      	str	r3, [sp, #0]
 8016f20:	2318      	movs	r3, #24
 8016f22:	2208      	movs	r2, #8
 8016f24:	f001 f800 	bl	8017f28 <FillReg>
   		FillReg(x	,40+y+16,w  ,8 ,0xFC00);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016f2e:	8afa      	ldrh	r2, [r7, #22]
 8016f30:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016f34:	9300      	str	r3, [sp, #0]
 8016f36:	2308      	movs	r3, #8
 8016f38:	68b8      	ldr	r0, [r7, #8]
 8016f3a:	f000 fff5 	bl	8017f28 <FillReg>
    	PIC(Bot,x+14*3*Pos+12,y+30,0);
 8016f3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016f42:	222a      	movs	r2, #42	; 0x2a
 8016f44:	fb02 f303 	mul.w	r3, r2, r3
 8016f48:	461a      	mov	r2, r3
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	f103 010c 	add.w	r1, r3, #12
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f103 021e 	add.w	r2, r3, #30
 8016f58:	2300      	movs	r3, #0
 8016f5a:	68f8      	ldr	r0, [r7, #12]
 8016f5c:	f000 fc32 	bl	80177c4 <PIC>
    	break;
 8016f60:	e0d1      	b.n	8017106 <BCO+0x2fe>

    	case 1://H
   		FillReg(x   ,40+y   ,w  ,8 ,0xFC00);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016f68:	8afa      	ldrh	r2, [r7, #22]
 8016f6a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016f6e:	9300      	str	r3, [sp, #0]
 8016f70:	2308      	movs	r3, #8
 8016f72:	68b8      	ldr	r0, [r7, #8]
 8016f74:	f000 ffd8 	bl	8017f28 <FillReg>
   		FillReg(x+8 ,40+y+8 ,w-8,8 ,BLACK);
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	f103 0008 	add.w	r0, r3, #8
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016f84:	8afb      	ldrh	r3, [r7, #22]
 8016f86:	3b08      	subs	r3, #8
 8016f88:	461a      	mov	r2, r3
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	2308      	movs	r3, #8
 8016f90:	f000 ffca 	bl	8017f28 <FillReg>
   		FillReg(x	,40+y	,8	,24,0xFC00);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016f9a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016f9e:	9300      	str	r3, [sp, #0]
 8016fa0:	2318      	movs	r3, #24
 8016fa2:	2208      	movs	r2, #8
 8016fa4:	68b8      	ldr	r0, [r7, #8]
 8016fa6:	f000 ffbf 	bl	8017f28 <FillReg>
   		FillReg(x+w ,40+y	,8	,24,0xFC00);
 8016faa:	8afa      	ldrh	r2, [r7, #22]
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	18d0      	adds	r0, r2, r3
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016fb6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016fba:	9300      	str	r3, [sp, #0]
 8016fbc:	2318      	movs	r3, #24
 8016fbe:	2208      	movs	r2, #8
 8016fc0:	f000 ffb2 	bl	8017f28 <FillReg>
   		FillReg(x	,40+y+16,w  ,8 ,0xFC00);
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016fca:	8afa      	ldrh	r2, [r7, #22]
 8016fcc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8016fd0:	9300      	str	r3, [sp, #0]
 8016fd2:	2308      	movs	r3, #8
 8016fd4:	68b8      	ldr	r0, [r7, #8]
 8016fd6:	f000 ffa7 	bl	8017f28 <FillReg>
   		FillReg(x   ,30+y   ,w  ,10,0x64df);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f103 011e 	add.w	r1, r3, #30
 8016fe0:	8afa      	ldrh	r2, [r7, #22]
 8016fe2:	f246 43df 	movw	r3, #25823	; 0x64df
 8016fe6:	9300      	str	r3, [sp, #0]
 8016fe8:	230a      	movs	r3, #10
 8016fea:	68b8      	ldr	r0, [r7, #8]
 8016fec:	f000 ff9c 	bl	8017f28 <FillReg>
   		FillReg(x   ,64+y   ,w  ,10,0x64df);
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8016ff6:	8afa      	ldrh	r2, [r7, #22]
 8016ff8:	f246 43df 	movw	r3, #25823	; 0x64df
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	230a      	movs	r3, #10
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f000 ff91 	bl	8017f28 <FillReg>
   		PIC(Bot,x+14*3*Pos+12,y+30,0);
 8017006:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801700a:	222a      	movs	r2, #42	; 0x2a
 801700c:	fb02 f303 	mul.w	r3, r2, r3
 8017010:	461a      	mov	r2, r3
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	4413      	add	r3, r2
 8017016:	f103 010c 	add.w	r1, r3, #12
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f103 021e 	add.w	r2, r3, #30
 8017020:	2300      	movs	r3, #0
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f000 fbce 	bl	80177c4 <PIC>
   		while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8017028:	bf00      	nop
 801702a:	2102      	movs	r1, #2
 801702c:	4838      	ldr	r0, [pc, #224]	; (8017110 <BCO+0x308>)
 801702e:	f7ef fe17 	bl	8006c60 <HAL_GPIO_ReadPin>
 8017032:	4603      	mov	r3, r0
 8017034:	2b00      	cmp	r3, #0
 8017036:	d0f8      	beq.n	801702a <BCO+0x222>
    	break;
 8017038:	e065      	b.n	8017106 <BCO+0x2fe>

    	case 2://V
   		FillReg(x+2,y+2,w-2,35,colorF);
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	1c98      	adds	r0, r3, #2
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	1c99      	adds	r1, r3, #2
 8017042:	8afb      	ldrh	r3, [r7, #22]
 8017044:	3b02      	subs	r3, #2
 8017046:	461a      	mov	r2, r3
 8017048:	8bfb      	ldrh	r3, [r7, #30]
 801704a:	9300      	str	r3, [sp, #0]
 801704c:	2323      	movs	r3, #35	; 0x23
 801704e:	f000 ff6b 	bl	8017f28 <FillReg>
   		ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 8017052:	8b7b      	ldrh	r3, [r7, #26]
 8017054:	3301      	adds	r3, #1
 8017056:	4618      	mov	r0, r3
 8017058:	8b3b      	ldrh	r3, [r7, #24]
 801705a:	3301      	adds	r3, #1
 801705c:	461c      	mov	r4, r3
 801705e:	8bba      	ldrh	r2, [r7, #28]
 8017060:	8bf9      	ldrh	r1, [r7, #30]
 8017062:	2304      	movs	r3, #4
 8017064:	9301      	str	r3, [sp, #4]
 8017066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	460b      	mov	r3, r1
 801706c:	4621      	mov	r1, r4
 801706e:	f7f9 ffdf 	bl	8011030 <ILI9341_Draw_String>
   		FillReg(x   ,y   ,8 ,w  ,0xFC00);
 8017072:	8afb      	ldrh	r3, [r7, #22]
 8017074:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8017078:	9200      	str	r2, [sp, #0]
 801707a:	2208      	movs	r2, #8
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	68b8      	ldr	r0, [r7, #8]
 8017080:	f000 ff52 	bl	8017f28 <FillReg>
  		FillReg(x+8 ,y+8 ,8 ,w-8,BLACK);
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	f103 0008 	add.w	r0, r3, #8
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f103 0108 	add.w	r1, r3, #8
 8017090:	8afb      	ldrh	r3, [r7, #22]
 8017092:	3b08      	subs	r3, #8
 8017094:	461a      	mov	r2, r3
 8017096:	2300      	movs	r3, #0
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	4613      	mov	r3, r2
 801709c:	2208      	movs	r2, #8
 801709e:	f000 ff43 	bl	8017f28 <FillReg>
   		FillReg(x	,y	 ,24,8  ,0xFC00);
 80170a2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80170a6:	9300      	str	r3, [sp, #0]
 80170a8:	2308      	movs	r3, #8
 80170aa:	2218      	movs	r2, #24
 80170ac:	6879      	ldr	r1, [r7, #4]
 80170ae:	68b8      	ldr	r0, [r7, #8]
 80170b0:	f000 ff3a 	bl	8017f28 <FillReg>
  		FillReg(x   ,y+w ,24,8  ,0xFC00);
 80170b4:	8afa      	ldrh	r2, [r7, #22]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	18d1      	adds	r1, r2, r3
 80170ba:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	2308      	movs	r3, #8
 80170c2:	2218      	movs	r2, #24
 80170c4:	68b8      	ldr	r0, [r7, #8]
 80170c6:	f000 ff2f 	bl	8017f28 <FillReg>
   		FillReg(x+16,y   ,8 ,w  ,0xFC00);
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	f103 0010 	add.w	r0, r3, #16
 80170d0:	8afb      	ldrh	r3, [r7, #22]
 80170d2:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 80170d6:	9200      	str	r2, [sp, #0]
 80170d8:	2208      	movs	r2, #8
 80170da:	6879      	ldr	r1, [r7, #4]
 80170dc:	f000 ff24 	bl	8017f28 <FillReg>
    	break;
 80170e0:	e011      	b.n	8017106 <BCO+0x2fe>

    	case 3://H
    	PIC(Bot,x+30,y+14*3*Pos+12,0);
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	f103 011e 	add.w	r1, r3, #30
 80170e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80170ec:	222a      	movs	r2, #42	; 0x2a
 80170ee:	fb02 f303 	mul.w	r3, r2, r3
 80170f2:	461a      	mov	r2, r3
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	4413      	add	r3, r2
 80170f8:	f103 020c 	add.w	r2, r3, #12
 80170fc:	2300      	movs	r3, #0
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	f000 fb60 	bl	80177c4 <PIC>
    	break;
 8017104:	bf00      	nop
    }
}
 8017106:	bf00      	nop
 8017108:	3724      	adds	r7, #36	; 0x24
 801710a:	46bd      	mov	sp, r7
 801710c:	bd90      	pop	{r4, r7, pc}
 801710e:	bf00      	nop
 8017110:	48000400 	.word	0x48000400
 8017114:	48000800 	.word	0x48000800

08017118 <BCO_Activo>:
unsigned char BCO_Activo(unsigned int x,unsigned int y,unsigned char Est,unsigned char Largo)
{
 8017118:	b480      	push	{r7}
 801711a:	b087      	sub	sp, #28
 801711c:	af00      	add	r7, sp, #0
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	4611      	mov	r1, r2
 8017124:	461a      	mov	r2, r3
 8017126:	460b      	mov	r3, r1
 8017128:	71fb      	strb	r3, [r7, #7]
 801712a:	4613      	mov	r3, r2
 801712c:	71bb      	strb	r3, [r7, #6]
    uint16_t w=Largo*14*3/Largo;
 801712e:	232a      	movs	r3, #42	; 0x2a
 8017130:	82bb      	strh	r3, [r7, #20]
    uint16_t i;

    x=x+8;
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	3308      	adds	r3, #8
 8017136:	60fb      	str	r3, [r7, #12]

    if(Est==0)
 8017138:	79fb      	ldrb	r3, [r7, #7]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d133      	bne.n	80171a6 <BCO_Activo+0x8e>
    for(i=0;i<Largo;i++)
 801713e:	2300      	movs	r3, #0
 8017140:	82fb      	strh	r3, [r7, #22]
 8017142:	e02a      	b.n	801719a <BCO_Activo+0x82>
    {
    	if
		(
			(m_XPanel>(x+i*w) && m_XPanel<(x+(i+1)*w) )
 8017144:	8afb      	ldrh	r3, [r7, #22]
 8017146:	8aba      	ldrh	r2, [r7, #20]
 8017148:	fb02 f303 	mul.w	r3, r2, r3
 801714c:	461a      	mov	r2, r3
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	441a      	add	r2, r3
 8017152:	4b32      	ldr	r3, [pc, #200]	; (801721c <BCO_Activo+0x104>)
 8017154:	681b      	ldr	r3, [r3, #0]
		(
 8017156:	429a      	cmp	r2, r3
 8017158:	d21c      	bcs.n	8017194 <BCO_Activo+0x7c>
			(m_XPanel>(x+i*w) && m_XPanel<(x+(i+1)*w) )
 801715a:	8afb      	ldrh	r3, [r7, #22]
 801715c:	3301      	adds	r3, #1
 801715e:	8aba      	ldrh	r2, [r7, #20]
 8017160:	fb02 f303 	mul.w	r3, r2, r3
 8017164:	461a      	mov	r2, r3
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	441a      	add	r2, r3
 801716a:	4b2c      	ldr	r3, [pc, #176]	; (801721c <BCO_Activo+0x104>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	429a      	cmp	r2, r3
 8017170:	d910      	bls.n	8017194 <BCO_Activo+0x7c>
			&&
			(m_YPanel>y && m_YPanel<(y+62) )
 8017172:	4b2b      	ldr	r3, [pc, #172]	; (8017220 <BCO_Activo+0x108>)
 8017174:	681b      	ldr	r3, [r3, #0]
			&&
 8017176:	68ba      	ldr	r2, [r7, #8]
 8017178:	429a      	cmp	r2, r3
 801717a:	d20b      	bcs.n	8017194 <BCO_Activo+0x7c>
			(m_YPanel>y && m_YPanel<(y+62) )
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 8017182:	4b27      	ldr	r3, [pc, #156]	; (8017220 <BCO_Activo+0x108>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	429a      	cmp	r2, r3
 8017188:	d904      	bls.n	8017194 <BCO_Activo+0x7c>
		) return i+1;
 801718a:	8afb      	ldrh	r3, [r7, #22]
 801718c:	b2db      	uxtb	r3, r3
 801718e:	3301      	adds	r3, #1
 8017190:	b2db      	uxtb	r3, r3
 8017192:	e03c      	b.n	801720e <BCO_Activo+0xf6>
    for(i=0;i<Largo;i++)
 8017194:	8afb      	ldrh	r3, [r7, #22]
 8017196:	3301      	adds	r3, #1
 8017198:	82fb      	strh	r3, [r7, #22]
 801719a:	79bb      	ldrb	r3, [r7, #6]
 801719c:	b29b      	uxth	r3, r3
 801719e:	8afa      	ldrh	r2, [r7, #22]
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d3cf      	bcc.n	8017144 <BCO_Activo+0x2c>
 80171a4:	e032      	b.n	801720c <BCO_Activo+0xf4>
    }
    else
   	for(i=0;i<Largo;i++)
 80171a6:	2300      	movs	r3, #0
 80171a8:	82fb      	strh	r3, [r7, #22]
 80171aa:	e02a      	b.n	8017202 <BCO_Activo+0xea>
    {
    	if
		(
			(m_XPanel>x 	  && m_XPanel<(x+62) )
 80171ac:	4b1b      	ldr	r3, [pc, #108]	; (801721c <BCO_Activo+0x104>)
 80171ae:	681b      	ldr	r3, [r3, #0]
		(
 80171b0:	68fa      	ldr	r2, [r7, #12]
 80171b2:	429a      	cmp	r2, r3
 80171b4:	d222      	bcs.n	80171fc <BCO_Activo+0xe4>
			(m_XPanel>x 	  && m_XPanel<(x+62) )
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 80171bc:	4b17      	ldr	r3, [pc, #92]	; (801721c <BCO_Activo+0x104>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d91b      	bls.n	80171fc <BCO_Activo+0xe4>
			&&
			(m_YPanel>(y+i*w) && m_YPanel<(y+(i+1)*w) )
 80171c4:	8afb      	ldrh	r3, [r7, #22]
 80171c6:	8aba      	ldrh	r2, [r7, #20]
 80171c8:	fb02 f303 	mul.w	r3, r2, r3
 80171cc:	461a      	mov	r2, r3
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	441a      	add	r2, r3
 80171d2:	4b13      	ldr	r3, [pc, #76]	; (8017220 <BCO_Activo+0x108>)
 80171d4:	681b      	ldr	r3, [r3, #0]
			&&
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d210      	bcs.n	80171fc <BCO_Activo+0xe4>
			(m_YPanel>(y+i*w) && m_YPanel<(y+(i+1)*w) )
 80171da:	8afb      	ldrh	r3, [r7, #22]
 80171dc:	3301      	adds	r3, #1
 80171de:	8aba      	ldrh	r2, [r7, #20]
 80171e0:	fb02 f303 	mul.w	r3, r2, r3
 80171e4:	461a      	mov	r2, r3
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	441a      	add	r2, r3
 80171ea:	4b0d      	ldr	r3, [pc, #52]	; (8017220 <BCO_Activo+0x108>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d904      	bls.n	80171fc <BCO_Activo+0xe4>
		) return i+1;
 80171f2:	8afb      	ldrh	r3, [r7, #22]
 80171f4:	b2db      	uxtb	r3, r3
 80171f6:	3301      	adds	r3, #1
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	e008      	b.n	801720e <BCO_Activo+0xf6>
   	for(i=0;i<Largo;i++)
 80171fc:	8afb      	ldrh	r3, [r7, #22]
 80171fe:	3301      	adds	r3, #1
 8017200:	82fb      	strh	r3, [r7, #22]
 8017202:	79bb      	ldrb	r3, [r7, #6]
 8017204:	b29b      	uxth	r3, r3
 8017206:	8afa      	ldrh	r2, [r7, #22]
 8017208:	429a      	cmp	r2, r3
 801720a:	d3cf      	bcc.n	80171ac <BCO_Activo+0x94>
    }

    return 0;
 801720c:	2300      	movs	r3, #0
}
 801720e:	4618      	mov	r0, r3
 8017210:	371c      	adds	r7, #28
 8017212:	46bd      	mov	sp, r7
 8017214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017218:	4770      	bx	lr
 801721a:	bf00      	nop
 801721c:	20009d48 	.word	0x20009d48
 8017220:	20009d4c 	.word	0x20009d4c

08017224 <BOT>:
//////////////////////////////////////////////////////////
// BOTON PIC DESDE FLASH INTERNA
//////////////////////////////////////////////////////////
void BOT(unsigned char* ID,unsigned int x,unsigned int y,unsigned char Est)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	af00      	add	r7, sp, #0
 801722a:	60f8      	str	r0, [r7, #12]
 801722c:	60b9      	str	r1, [r7, #8]
 801722e:	607a      	str	r2, [r7, #4]
 8017230:	70fb      	strb	r3, [r7, #3]
    switch(Est)
 8017232:	78fb      	ldrb	r3, [r7, #3]
 8017234:	2b02      	cmp	r3, #2
 8017236:	d014      	beq.n	8017262 <BOT+0x3e>
 8017238:	2b02      	cmp	r3, #2
 801723a:	dc22      	bgt.n	8017282 <BOT+0x5e>
 801723c:	2b00      	cmp	r3, #0
 801723e:	d002      	beq.n	8017246 <BOT+0x22>
 8017240:	2b01      	cmp	r3, #1
 8017242:	d007      	beq.n	8017254 <BOT+0x30>
    	HAL_Delay(255);
    	PIC(ID,x,y,0);
    	//HAL_Delay(200);
    	break;
    }
}
 8017244:	e01d      	b.n	8017282 <BOT+0x5e>
   		PIC(ID,x,y,0);
 8017246:	2300      	movs	r3, #0
 8017248:	687a      	ldr	r2, [r7, #4]
 801724a:	68b9      	ldr	r1, [r7, #8]
 801724c:	68f8      	ldr	r0, [r7, #12]
 801724e:	f000 fab9 	bl	80177c4 <PIC>
    	break;
 8017252:	e016      	b.n	8017282 <BOT+0x5e>
       	PIC(ID,x,y,4);
 8017254:	2304      	movs	r3, #4
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	68b9      	ldr	r1, [r7, #8]
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f000 fab2 	bl	80177c4 <PIC>
    	break;
 8017260:	e00f      	b.n	8017282 <BOT+0x5e>
    	PIC(ID,x,y,4);
 8017262:	2304      	movs	r3, #4
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	68b9      	ldr	r1, [r7, #8]
 8017268:	68f8      	ldr	r0, [r7, #12]
 801726a:	f000 faab 	bl	80177c4 <PIC>
    	HAL_Delay(255);
 801726e:	20ff      	movs	r0, #255	; 0xff
 8017270:	f7ed fd1e 	bl	8004cb0 <HAL_Delay>
    	PIC(ID,x,y,0);
 8017274:	2300      	movs	r3, #0
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	f000 faa2 	bl	80177c4 <PIC>
    	break;
 8017280:	bf00      	nop
}
 8017282:	bf00      	nop
 8017284:	3710      	adds	r7, #16
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}

0801728a <CHECK_CIRC>:

void CHECK_CIRC(unsigned int x,unsigned int y,char* a,char* b,unsigned char Est)
{
 801728a:	b580      	push	{r7, lr}
 801728c:	b086      	sub	sp, #24
 801728e:	af02      	add	r7, sp, #8
 8017290:	60f8      	str	r0, [r7, #12]
 8017292:	60b9      	str	r1, [r7, #8]
 8017294:	607a      	str	r2, [r7, #4]
 8017296:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_String(x,y   ,WHITE,0x0010,a,2);
 8017298:	2302      	movs	r3, #2
 801729a:	9301      	str	r3, [sp, #4]
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	2310      	movs	r3, #16
 80172a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172a6:	68b9      	ldr	r1, [r7, #8]
 80172a8:	68f8      	ldr	r0, [r7, #12]
 80172aa:	f7f9 fec1 	bl	8011030 <ILI9341_Draw_String>
	ILI9341_Draw_String(x,y+15,WHITE,0x0010,b,2);
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	f103 010f 	add.w	r1, r3, #15
 80172b4:	2302      	movs	r3, #2
 80172b6:	9301      	str	r3, [sp, #4]
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	9300      	str	r3, [sp, #0]
 80172bc:	2310      	movs	r3, #16
 80172be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	f7f9 feb4 	bl	8011030 <ILI9341_Draw_String>
	x=x+76;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	334c      	adds	r3, #76	; 0x4c
 80172cc:	60fb      	str	r3, [r7, #12]
	y=y+16;
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	3310      	adds	r3, #16
 80172d2:	60bb      	str	r3, [r7, #8]
	switch(Est)
 80172d4:	7e3b      	ldrb	r3, [r7, #24]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d002      	beq.n	80172e0 <CHECK_CIRC+0x56>
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d012      	beq.n	8017304 <CHECK_CIRC+0x7a>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
  		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
  		ILI9341_Draw_Circle(x,y,8 ,0x0000,1);
    	break;
    }
}
 80172de:	e02b      	b.n	8017338 <CHECK_CIRC+0xae>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
 80172e0:	2301      	movs	r3, #1
 80172e2:	9300      	str	r3, [sp, #0]
 80172e4:	2300      	movs	r3, #0
 80172e6:	2210      	movs	r2, #16
 80172e8:	68b9      	ldr	r1, [r7, #8]
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f7f9 fca0 	bl	8010c30 <ILI9341_Draw_Circle>
   		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
 80172f0:	2301      	movs	r3, #1
 80172f2:	9300      	str	r3, [sp, #0]
 80172f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172f8:	220c      	movs	r2, #12
 80172fa:	68b9      	ldr	r1, [r7, #8]
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	f7f9 fc97 	bl	8010c30 <ILI9341_Draw_Circle>
    	break;
 8017302:	e019      	b.n	8017338 <CHECK_CIRC+0xae>
   		ILI9341_Draw_Circle(x,y,16,0x0000,1);
 8017304:	2301      	movs	r3, #1
 8017306:	9300      	str	r3, [sp, #0]
 8017308:	2300      	movs	r3, #0
 801730a:	2210      	movs	r2, #16
 801730c:	68b9      	ldr	r1, [r7, #8]
 801730e:	68f8      	ldr	r0, [r7, #12]
 8017310:	f7f9 fc8e 	bl	8010c30 <ILI9341_Draw_Circle>
  		ILI9341_Draw_Circle(x,y,12,0xFFFF,1);
 8017314:	2301      	movs	r3, #1
 8017316:	9300      	str	r3, [sp, #0]
 8017318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801731c:	220c      	movs	r2, #12
 801731e:	68b9      	ldr	r1, [r7, #8]
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	f7f9 fc85 	bl	8010c30 <ILI9341_Draw_Circle>
  		ILI9341_Draw_Circle(x,y,8 ,0x0000,1);
 8017326:	2301      	movs	r3, #1
 8017328:	9300      	str	r3, [sp, #0]
 801732a:	2300      	movs	r3, #0
 801732c:	2208      	movs	r2, #8
 801732e:	68b9      	ldr	r1, [r7, #8]
 8017330:	68f8      	ldr	r0, [r7, #12]
 8017332:	f7f9 fc7d 	bl	8010c30 <ILI9341_Draw_Circle>
    	break;
 8017336:	bf00      	nop
}
 8017338:	bf00      	nop
 801733a:	3710      	adds	r7, #16
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}

08017340 <CHECK_CIRC_Activo>:

unsigned char CHECK_CIRC_Activo(unsigned int x,unsigned int y)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
	x=x+60;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	333c      	adds	r3, #60	; 0x3c
 801734e:	607b      	str	r3, [r7, #4]
	if
    (
      (m_XPanel>x && m_XPanel<(x+32) )
 8017350:	4b10      	ldr	r3, [pc, #64]	; (8017394 <CHECK_CIRC_Activo+0x54>)
 8017352:	681b      	ldr	r3, [r3, #0]
    (
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	429a      	cmp	r2, r3
 8017358:	d217      	bcs.n	801738a <CHECK_CIRC_Activo+0x4a>
      (m_XPanel>x && m_XPanel<(x+32) )
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f103 0220 	add.w	r2, r3, #32
 8017360:	4b0c      	ldr	r3, [pc, #48]	; (8017394 <CHECK_CIRC_Activo+0x54>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	429a      	cmp	r2, r3
 8017366:	d910      	bls.n	801738a <CHECK_CIRC_Activo+0x4a>
      &&
      (m_YPanel>y && m_YPanel<(y+32) )
 8017368:	4b0b      	ldr	r3, [pc, #44]	; (8017398 <CHECK_CIRC_Activo+0x58>)
 801736a:	681b      	ldr	r3, [r3, #0]
      &&
 801736c:	683a      	ldr	r2, [r7, #0]
 801736e:	429a      	cmp	r2, r3
 8017370:	d20b      	bcs.n	801738a <CHECK_CIRC_Activo+0x4a>
      (m_YPanel>y && m_YPanel<(y+32) )
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	f103 0220 	add.w	r2, r3, #32
 8017378:	4b07      	ldr	r3, [pc, #28]	; (8017398 <CHECK_CIRC_Activo+0x58>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	429a      	cmp	r2, r3
 801737e:	d904      	bls.n	801738a <CHECK_CIRC_Activo+0x4a>
    )
	{
	   	HAL_Delay(200);
 8017380:	20c8      	movs	r0, #200	; 0xc8
 8017382:	f7ed fc95 	bl	8004cb0 <HAL_Delay>
		return 1;
 8017386:	2301      	movs	r3, #1
 8017388:	e000      	b.n	801738c <CHECK_CIRC_Activo+0x4c>
	}

    else return 0;
 801738a:	2300      	movs	r3, #0
}
 801738c:	4618      	mov	r0, r3
 801738e:	3708      	adds	r7, #8
 8017390:	46bd      	mov	sp, r7
 8017392:	bd80      	pop	{r7, pc}
 8017394:	20009d48 	.word	0x20009d48
 8017398:	20009d4c 	.word	0x20009d4c

0801739c <BOW>:
		return 1;
	}
	return 0;
}
void BOW(unsigned int x,unsigned int y,unsigned char Est,unsigned char LargoBoton,char* str)
{
 801739c:	b590      	push	{r4, r7, lr}
 801739e:	b08b      	sub	sp, #44	; 0x2c
 80173a0:	af02      	add	r7, sp, #8
 80173a2:	60f8      	str	r0, [r7, #12]
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	4611      	mov	r1, r2
 80173a8:	461a      	mov	r2, r3
 80173aa:	460b      	mov	r3, r1
 80173ac:	71fb      	strb	r3, [r7, #7]
 80173ae:	4613      	mov	r3, r2
 80173b0:	71bb      	strb	r3, [r7, #6]
	TP_CS_OFF;
 80173b2:	2201      	movs	r2, #1
 80173b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80173b8:	4876      	ldr	r0, [pc, #472]	; (8017594 <BOW+0x1f8>)
 80173ba:	f7ef fc69 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 80173be:	2201      	movs	r2, #1
 80173c0:	2108      	movs	r1, #8
 80173c2:	4875      	ldr	r0, [pc, #468]	; (8017598 <BOW+0x1fc>)
 80173c4:	f7ef fc64 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 80173c8:	2200      	movs	r2, #0
 80173ca:	2180      	movs	r1, #128	; 0x80
 80173cc:	4872      	ldr	r0, [pc, #456]	; (8017598 <BOW+0x1fc>)
 80173ce:	f7ef fc5f 	bl	8006c90 <HAL_GPIO_WritePin>
    uint16_t colorF=LIGHTGREY;
 80173d2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80173d6:	83fb      	strh	r3, [r7, #30]
    uint16_t colorT=0x0000;
 80173d8:	2300      	movs	r3, #0
 80173da:	83bb      	strh	r3, [r7, #28]
    uint16_t xt=x+2+((LargoBoton-(unsigned char)strlen(str)))*7;
 80173dc:	79bc      	ldrb	r4, [r7, #6]
 80173de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173e0:	f7e8 fefe 	bl	80001e0 <strlen>
 80173e4:	4603      	mov	r3, r0
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	1ae3      	subs	r3, r4, r3
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	461a      	mov	r2, r3
 80173ee:	00d2      	lsls	r2, r2, #3
 80173f0:	1ad3      	subs	r3, r2, r3
 80173f2:	b29a      	uxth	r2, r3
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	4413      	add	r3, r2
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	3302      	adds	r3, #2
 80173fe:	837b      	strh	r3, [r7, #26]
    uint16_t yt=y+3;
 8017400:	68bb      	ldr	r3, [r7, #8]
 8017402:	b29b      	uxth	r3, r3
 8017404:	3303      	adds	r3, #3
 8017406:	833b      	strh	r3, [r7, #24]
    uint16_t wx=LargoBoton*14;
 8017408:	79bb      	ldrb	r3, [r7, #6]
 801740a:	b29b      	uxth	r3, r3
 801740c:	461a      	mov	r2, r3
 801740e:	00d2      	lsls	r2, r2, #3
 8017410:	1ad3      	subs	r3, r2, r3
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	82fb      	strh	r3, [r7, #22]
    uint16_t wy=35;
 8017416:	2323      	movs	r3, #35	; 0x23
 8017418:	82bb      	strh	r3, [r7, #20]

    switch(Est)
 801741a:	79fb      	ldrb	r3, [r7, #7]
 801741c:	2b02      	cmp	r3, #2
 801741e:	f000 80bd 	beq.w	801759c <BOW+0x200>
 8017422:	2b02      	cmp	r3, #2
 8017424:	f300 8177 	bgt.w	8017716 <BOW+0x37a>
 8017428:	2b00      	cmp	r3, #0
 801742a:	d002      	beq.n	8017432 <BOW+0x96>
 801742c:	2b01      	cmp	r3, #1
 801742e:	d054      	beq.n	80174da <BOW+0x13e>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
   		HAL_Delay(55);
    	break;
    }
}
 8017430:	e171      	b.n	8017716 <BOW+0x37a>
   		FillReg(x+2,y+2,wx-2,35,colorF);
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	1c98      	adds	r0, r3, #2
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	1c99      	adds	r1, r3, #2
 801743a:	8afb      	ldrh	r3, [r7, #22]
 801743c:	3b02      	subs	r3, #2
 801743e:	461a      	mov	r2, r3
 8017440:	8bfb      	ldrh	r3, [r7, #30]
 8017442:	9300      	str	r3, [sp, #0]
 8017444:	2323      	movs	r3, #35	; 0x23
 8017446:	f000 fd6f 	bl	8017f28 <FillReg>
 		ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 801744a:	8b78      	ldrh	r0, [r7, #26]
 801744c:	8b39      	ldrh	r1, [r7, #24]
 801744e:	8bba      	ldrh	r2, [r7, #28]
 8017450:	8bfc      	ldrh	r4, [r7, #30]
 8017452:	2304      	movs	r3, #4
 8017454:	9301      	str	r3, [sp, #4]
 8017456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	4623      	mov	r3, r4
 801745c:	f7f9 fde8 	bl	8011030 <ILI9341_Draw_String>
   		FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017460:	8afa      	ldrh	r2, [r7, #22]
 8017462:	2300      	movs	r3, #0
 8017464:	9300      	str	r3, [sp, #0]
 8017466:	2302      	movs	r3, #2
 8017468:	68b9      	ldr	r1, [r7, #8]
 801746a:	68f8      	ldr	r0, [r7, #12]
 801746c:	f000 fd5c 	bl	8017f28 <FillReg>
   		FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017470:	2300      	movs	r3, #0
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	2325      	movs	r3, #37	; 0x25
 8017476:	2202      	movs	r2, #2
 8017478:	68b9      	ldr	r1, [r7, #8]
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f000 fd54 	bl	8017f28 <FillReg>
   		FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017480:	8afa      	ldrh	r2, [r7, #22]
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	18d0      	adds	r0, r2, r3
 8017486:	2300      	movs	r3, #0
 8017488:	9300      	str	r3, [sp, #0]
 801748a:	2325      	movs	r3, #37	; 0x25
 801748c:	2202      	movs	r2, #2
 801748e:	68b9      	ldr	r1, [r7, #8]
 8017490:	f000 fd4a 	bl	8017f28 <FillReg>
   		FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	f103 0123 	add.w	r1, r3, #35	; 0x23
 801749a:	8afa      	ldrh	r2, [r7, #22]
 801749c:	2300      	movs	r3, #0
 801749e:	9300      	str	r3, [sp, #0]
 80174a0:	2302      	movs	r3, #2
 80174a2:	68f8      	ldr	r0, [r7, #12]
 80174a4:	f000 fd40 	bl	8017f28 <FillReg>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	1c98      	adds	r0, r3, #2
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	1c99      	adds	r1, r3, #2
 80174b0:	8afb      	ldrh	r3, [r7, #22]
 80174b2:	3b04      	subs	r3, #4
 80174b4:	461a      	mov	r2, r3
 80174b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	2302      	movs	r3, #2
 80174be:	f000 fd33 	bl	8017f28 <FillReg>
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	1c98      	adds	r0, r3, #2
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	1c99      	adds	r1, r3, #2
 80174ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174ce:	9300      	str	r3, [sp, #0]
 80174d0:	2321      	movs	r3, #33	; 0x21
 80174d2:	2202      	movs	r2, #2
 80174d4:	f000 fd28 	bl	8017f28 <FillReg>
    	break;
 80174d8:	e11d      	b.n	8017716 <BOW+0x37a>
   		FillReg(x+2,y+2,wx-2,35,colorF);
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	1c98      	adds	r0, r3, #2
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	1c99      	adds	r1, r3, #2
 80174e2:	8afb      	ldrh	r3, [r7, #22]
 80174e4:	3b02      	subs	r3, #2
 80174e6:	461a      	mov	r2, r3
 80174e8:	8bfb      	ldrh	r3, [r7, #30]
 80174ea:	9300      	str	r3, [sp, #0]
 80174ec:	2323      	movs	r3, #35	; 0x23
 80174ee:	f000 fd1b 	bl	8017f28 <FillReg>
   		ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 80174f2:	8b7b      	ldrh	r3, [r7, #26]
 80174f4:	3301      	adds	r3, #1
 80174f6:	4618      	mov	r0, r3
 80174f8:	8b3b      	ldrh	r3, [r7, #24]
 80174fa:	3301      	adds	r3, #1
 80174fc:	461c      	mov	r4, r3
 80174fe:	8bba      	ldrh	r2, [r7, #28]
 8017500:	8bf9      	ldrh	r1, [r7, #30]
 8017502:	2304      	movs	r3, #4
 8017504:	9301      	str	r3, [sp, #4]
 8017506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017508:	9300      	str	r3, [sp, #0]
 801750a:	460b      	mov	r3, r1
 801750c:	4621      	mov	r1, r4
 801750e:	f7f9 fd8f 	bl	8011030 <ILI9341_Draw_String>
     	FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017512:	8afa      	ldrh	r2, [r7, #22]
 8017514:	2300      	movs	r3, #0
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	2302      	movs	r3, #2
 801751a:	68b9      	ldr	r1, [r7, #8]
 801751c:	68f8      	ldr	r0, [r7, #12]
 801751e:	f000 fd03 	bl	8017f28 <FillReg>
      	FillReg(x	,y	 ,2	  ,37 ,BLACK);
 8017522:	2300      	movs	r3, #0
 8017524:	9300      	str	r3, [sp, #0]
 8017526:	2325      	movs	r3, #37	; 0x25
 8017528:	2202      	movs	r2, #2
 801752a:	68b9      	ldr	r1, [r7, #8]
 801752c:	68f8      	ldr	r0, [r7, #12]
 801752e:	f000 fcfb 	bl	8017f28 <FillReg>
      	FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 8017532:	8afa      	ldrh	r2, [r7, #22]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	18d0      	adds	r0, r2, r3
 8017538:	2300      	movs	r3, #0
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	2325      	movs	r3, #37	; 0x25
 801753e:	2202      	movs	r2, #2
 8017540:	68b9      	ldr	r1, [r7, #8]
 8017542:	f000 fcf1 	bl	8017f28 <FillReg>
      	FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	f103 0123 	add.w	r1, r3, #35	; 0x23
 801754c:	8afa      	ldrh	r2, [r7, #22]
 801754e:	2300      	movs	r3, #0
 8017550:	9300      	str	r3, [sp, #0]
 8017552:	2302      	movs	r3, #2
 8017554:	68f8      	ldr	r0, [r7, #12]
 8017556:	f000 fce7 	bl	8017f28 <FillReg>
      	FillReg(x+2 ,y+33,wx-4,2  ,WHITE);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	1c98      	adds	r0, r3, #2
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8017564:	8afb      	ldrh	r3, [r7, #22]
 8017566:	3b04      	subs	r3, #4
 8017568:	461a      	mov	r2, r3
 801756a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801756e:	9300      	str	r3, [sp, #0]
 8017570:	2302      	movs	r3, #2
 8017572:	f000 fcd9 	bl	8017f28 <FillReg>
      	FillReg(x+wx-2,y+2,2  ,33 ,WHITE);
 8017576:	8afa      	ldrh	r2, [r7, #22]
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	4413      	add	r3, r2
 801757c:	1e98      	subs	r0, r3, #2
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	1c99      	adds	r1, r3, #2
 8017582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	2321      	movs	r3, #33	; 0x21
 801758a:	2202      	movs	r2, #2
 801758c:	f000 fccc 	bl	8017f28 <FillReg>
    	break;
 8017590:	e0c1      	b.n	8017716 <BOW+0x37a>
 8017592:	bf00      	nop
 8017594:	48000400 	.word	0x48000400
 8017598:	48000800 	.word	0x48000800
       	FillReg(x+2,y+2,wx-2,35,colorF);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	1c98      	adds	r0, r3, #2
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	1c99      	adds	r1, r3, #2
 80175a4:	8afb      	ldrh	r3, [r7, #22]
 80175a6:	3b02      	subs	r3, #2
 80175a8:	461a      	mov	r2, r3
 80175aa:	8bfb      	ldrh	r3, [r7, #30]
 80175ac:	9300      	str	r3, [sp, #0]
 80175ae:	2323      	movs	r3, #35	; 0x23
 80175b0:	f000 fcba 	bl	8017f28 <FillReg>
       	ILI9341_Draw_String(xt+1,yt+1,colorT,colorF,str,4);
 80175b4:	8b7b      	ldrh	r3, [r7, #26]
 80175b6:	3301      	adds	r3, #1
 80175b8:	4618      	mov	r0, r3
 80175ba:	8b3b      	ldrh	r3, [r7, #24]
 80175bc:	3301      	adds	r3, #1
 80175be:	461c      	mov	r4, r3
 80175c0:	8bba      	ldrh	r2, [r7, #28]
 80175c2:	8bf9      	ldrh	r1, [r7, #30]
 80175c4:	2304      	movs	r3, #4
 80175c6:	9301      	str	r3, [sp, #4]
 80175c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175ca:	9300      	str	r3, [sp, #0]
 80175cc:	460b      	mov	r3, r1
 80175ce:	4621      	mov	r1, r4
 80175d0:	f7f9 fd2e 	bl	8011030 <ILI9341_Draw_String>
       	FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 80175d4:	8afa      	ldrh	r2, [r7, #22]
 80175d6:	2300      	movs	r3, #0
 80175d8:	9300      	str	r3, [sp, #0]
 80175da:	2302      	movs	r3, #2
 80175dc:	68b9      	ldr	r1, [r7, #8]
 80175de:	68f8      	ldr	r0, [r7, #12]
 80175e0:	f000 fca2 	bl	8017f28 <FillReg>
       	FillReg(x	,y	 ,2	  ,37 ,BLACK);
 80175e4:	2300      	movs	r3, #0
 80175e6:	9300      	str	r3, [sp, #0]
 80175e8:	2325      	movs	r3, #37	; 0x25
 80175ea:	2202      	movs	r2, #2
 80175ec:	68b9      	ldr	r1, [r7, #8]
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f000 fc9a 	bl	8017f28 <FillReg>
       	FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 80175f4:	8afa      	ldrh	r2, [r7, #22]
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	18d0      	adds	r0, r2, r3
 80175fa:	2300      	movs	r3, #0
 80175fc:	9300      	str	r3, [sp, #0]
 80175fe:	2325      	movs	r3, #37	; 0x25
 8017600:	2202      	movs	r2, #2
 8017602:	68b9      	ldr	r1, [r7, #8]
 8017604:	f000 fc90 	bl	8017f28 <FillReg>
       	FillReg(x	,y+35,wx  ,2  ,BLACK);
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	f103 0123 	add.w	r1, r3, #35	; 0x23
 801760e:	8afa      	ldrh	r2, [r7, #22]
 8017610:	2300      	movs	r3, #0
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	2302      	movs	r3, #2
 8017616:	68f8      	ldr	r0, [r7, #12]
 8017618:	f000 fc86 	bl	8017f28 <FillReg>
       	FillReg(x+2 ,y+33,wx-4,2  ,WHITE);
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	1c98      	adds	r0, r3, #2
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8017626:	8afb      	ldrh	r3, [r7, #22]
 8017628:	3b04      	subs	r3, #4
 801762a:	461a      	mov	r2, r3
 801762c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	2302      	movs	r3, #2
 8017634:	f000 fc78 	bl	8017f28 <FillReg>
      	FillReg(x+wx-2,y+2,2  ,33 ,WHITE);
 8017638:	8afa      	ldrh	r2, [r7, #22]
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	4413      	add	r3, r2
 801763e:	1e98      	subs	r0, r3, #2
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	1c99      	adds	r1, r3, #2
 8017644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017648:	9300      	str	r3, [sp, #0]
 801764a:	2321      	movs	r3, #33	; 0x21
 801764c:	2202      	movs	r2, #2
 801764e:	f000 fc6b 	bl	8017f28 <FillReg>
       	while( HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == 0 );
 8017652:	bf00      	nop
 8017654:	2102      	movs	r1, #2
 8017656:	4832      	ldr	r0, [pc, #200]	; (8017720 <BOW+0x384>)
 8017658:	f7ef fb02 	bl	8006c60 <HAL_GPIO_ReadPin>
 801765c:	4603      	mov	r3, r0
 801765e:	2b00      	cmp	r3, #0
 8017660:	d0f8      	beq.n	8017654 <BOW+0x2b8>
       	HAL_Delay(255);
 8017662:	20ff      	movs	r0, #255	; 0xff
 8017664:	f7ed fb24 	bl	8004cb0 <HAL_Delay>
    	FillReg(x+2,y+2,wx-2,35,colorF);
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	1c98      	adds	r0, r3, #2
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	1c99      	adds	r1, r3, #2
 8017670:	8afb      	ldrh	r3, [r7, #22]
 8017672:	3b02      	subs	r3, #2
 8017674:	461a      	mov	r2, r3
 8017676:	8bfb      	ldrh	r3, [r7, #30]
 8017678:	9300      	str	r3, [sp, #0]
 801767a:	2323      	movs	r3, #35	; 0x23
 801767c:	f000 fc54 	bl	8017f28 <FillReg>
    	ILI9341_Draw_String(xt,yt,colorT,colorF,str,4);
 8017680:	8b78      	ldrh	r0, [r7, #26]
 8017682:	8b39      	ldrh	r1, [r7, #24]
 8017684:	8bba      	ldrh	r2, [r7, #28]
 8017686:	8bfc      	ldrh	r4, [r7, #30]
 8017688:	2304      	movs	r3, #4
 801768a:	9301      	str	r3, [sp, #4]
 801768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768e:	9300      	str	r3, [sp, #0]
 8017690:	4623      	mov	r3, r4
 8017692:	f7f9 fccd 	bl	8011030 <ILI9341_Draw_String>
   		FillReg(x   ,y	 ,wx  ,2  ,BLACK);
 8017696:	8afa      	ldrh	r2, [r7, #22]
 8017698:	2300      	movs	r3, #0
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	2302      	movs	r3, #2
 801769e:	68b9      	ldr	r1, [r7, #8]
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f000 fc41 	bl	8017f28 <FillReg>
   		FillReg(x	,y	 ,2	  ,37 ,BLACK);
 80176a6:	2300      	movs	r3, #0
 80176a8:	9300      	str	r3, [sp, #0]
 80176aa:	2325      	movs	r3, #37	; 0x25
 80176ac:	2202      	movs	r2, #2
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	68f8      	ldr	r0, [r7, #12]
 80176b2:	f000 fc39 	bl	8017f28 <FillReg>
   		FillReg(x+wx,y	 ,2	  ,37 ,BLACK);
 80176b6:	8afa      	ldrh	r2, [r7, #22]
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	18d0      	adds	r0, r2, r3
 80176bc:	2300      	movs	r3, #0
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	2325      	movs	r3, #37	; 0x25
 80176c2:	2202      	movs	r2, #2
 80176c4:	68b9      	ldr	r1, [r7, #8]
 80176c6:	f000 fc2f 	bl	8017f28 <FillReg>
   		FillReg(x	,y+35,wx  ,2  ,BLACK);
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80176d0:	8afa      	ldrh	r2, [r7, #22]
 80176d2:	2300      	movs	r3, #0
 80176d4:	9300      	str	r3, [sp, #0]
 80176d6:	2302      	movs	r3, #2
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f000 fc25 	bl	8017f28 <FillReg>
   		FillReg(x+2 ,y+2 ,wx-4,2  ,WHITE);
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	1c98      	adds	r0, r3, #2
 80176e2:	68bb      	ldr	r3, [r7, #8]
 80176e4:	1c99      	adds	r1, r3, #2
 80176e6:	8afb      	ldrh	r3, [r7, #22]
 80176e8:	3b04      	subs	r3, #4
 80176ea:	461a      	mov	r2, r3
 80176ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	2302      	movs	r3, #2
 80176f4:	f000 fc18 	bl	8017f28 <FillReg>
   		FillReg(x+2	,y+2 ,2	  ,33 ,WHITE);
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	1c98      	adds	r0, r3, #2
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	1c99      	adds	r1, r3, #2
 8017700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	2321      	movs	r3, #33	; 0x21
 8017708:	2202      	movs	r2, #2
 801770a:	f000 fc0d 	bl	8017f28 <FillReg>
   		HAL_Delay(55);
 801770e:	2037      	movs	r0, #55	; 0x37
 8017710:	f7ed face 	bl	8004cb0 <HAL_Delay>
    	break;
 8017714:	bf00      	nop
}
 8017716:	bf00      	nop
 8017718:	3724      	adds	r7, #36	; 0x24
 801771a:	46bd      	mov	sp, r7
 801771c:	bd90      	pop	{r4, r7, pc}
 801771e:	bf00      	nop
 8017720:	48000400 	.word	0x48000400

08017724 <SPI_TransmitReceive>:

//////////////////////////////////////////////////////////
// SPI
//////////////////////////////////////////////////////////
uint8_t SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t Data)
{//Transmit Receive 1 byte
 8017724:	b480      	push	{r7}
 8017726:	b083      	sub	sp, #12
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	460b      	mov	r3, r1
 801772e:	70fb      	strb	r3, [r7, #3]
  *(__IO uint8_t *)&hspi->Instance->DR=Data;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	330c      	adds	r3, #12
 8017736:	78fa      	ldrb	r2, [r7, #3]
 8017738:	701a      	strb	r2, [r3, #0]
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	689b      	ldr	r3, [r3, #8]
 8017740:	f003 0301 	and.w	r3, r3, #1
 8017744:	2b01      	cmp	r3, #1
 8017746:	d105      	bne.n	8017754 <SPI_TransmitReceive+0x30>
	  return *(__IO uint8_t *)&hspi->Instance->DR;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	330c      	adds	r3, #12
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	b2db      	uxtb	r3, r3
 8017752:	e000      	b.n	8017756 <SPI_TransmitReceive+0x32>
  return 0;
 8017754:	2300      	movs	r3, #0
}
 8017756:	4618      	mov	r0, r3
 8017758:	370c      	adds	r7, #12
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr
	...

08017764 <SPI_TxByte>:

void SPI_TxByte(uint8_t data)
{//Transmit 1 byte
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	4603      	mov	r3, r0
 801776c:	71fb      	strb	r3, [r7, #7]
	SPI_TransmitReceive(&SD_SPI_HANDLE,data);
 801776e:	79fb      	ldrb	r3, [r7, #7]
 8017770:	4619      	mov	r1, r3
 8017772:	4803      	ldr	r0, [pc, #12]	; (8017780 <SPI_TxByte+0x1c>)
 8017774:	f7ff ffd6 	bl	8017724 <SPI_TransmitReceive>
}
 8017778:	bf00      	nop
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	20008b88 	.word	0x20008b88

08017784 <SPI_RxByte>:

uint8_t SPI_RxByte(void)
{//Receive 1 byte
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
	uint8_t data=0xFF;
 801778a:	23ff      	movs	r3, #255	; 0xff
 801778c:	71fb      	strb	r3, [r7, #7]
	return SPI_TransmitReceive(&SD_SPI_HANDLE,data);
 801778e:	79fb      	ldrb	r3, [r7, #7]
 8017790:	4619      	mov	r1, r3
 8017792:	4804      	ldr	r0, [pc, #16]	; (80177a4 <SPI_RxByte+0x20>)
 8017794:	f7ff ffc6 	bl	8017724 <SPI_TransmitReceive>
 8017798:	4603      	mov	r3, r0
}
 801779a:	4618      	mov	r0, r3
 801779c:	3708      	adds	r7, #8
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}
 80177a2:	bf00      	nop
 80177a4:	20008b88 	.word	0x20008b88

080177a8 <SPI_RxBytePtr>:
void SPI_RxBytePtr(uint8_t *buff)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b082      	sub	sp, #8
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80177b0:	f7ff ffe8 	bl	8017784 <SPI_RxByte>
 80177b4:	4603      	mov	r3, r0
 80177b6:	461a      	mov	r2, r3
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	701a      	strb	r2, [r3, #0]
}
 80177bc:	bf00      	nop
 80177be:	3708      	adds	r7, #8
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}

080177c4 <PIC>:
void DibujarTeclasFlechas(void);
void FondoTeclas(void);
void CalculoXY(void);

void PIC(unsigned char* ID,unsigned int x,unsigned int y,unsigned char Brillo)
{
 80177c4:	b590      	push	{r4, r7, lr}
 80177c6:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	f507 648a 	add.w	r4, r7, #1104	; 0x450
 80177d0:	f2a4 4444 	subw	r4, r4, #1092	; 0x444
 80177d4:	6020      	str	r0, [r4, #0]
 80177d6:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 80177da:	f5a0 6089 	sub.w	r0, r0, #1096	; 0x448
 80177de:	6001      	str	r1, [r0, #0]
 80177e0:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80177e4:	f2a1 414c 	subw	r1, r1, #1100	; 0x44c
 80177e8:	600a      	str	r2, [r1, #0]
 80177ea:	461a      	mov	r2, r3
 80177ec:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80177f0:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80177f4:	701a      	strb	r2, [r3, #0]
	uint32_t	ii;
	uint16_t    cRGB[256],R,G,B,RGB;
	unsigned char data[512];
	unsigned int q,c,d,i;

	m_Memoria=ID;
 80177f6:	4ab5      	ldr	r2, [pc, #724]	; (8017acc <PIC+0x308>)
 80177f8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80177fc:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	6013      	str	r3, [r2, #0]

	TP_CS_OFF;
 8017804:	2201      	movs	r2, #1
 8017806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801780a:	48b1      	ldr	r0, [pc, #708]	; (8017ad0 <PIC+0x30c>)
 801780c:	f7ef fa40 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_OFF;
 8017810:	2201      	movs	r2, #1
 8017812:	2108      	movs	r1, #8
 8017814:	48af      	ldr	r0, [pc, #700]	; (8017ad4 <PIC+0x310>)
 8017816:	f7ef fa3b 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801781a:	2200      	movs	r2, #0
 801781c:	2180      	movs	r1, #128	; 0x80
 801781e:	48ad      	ldr	r0, [pc, #692]	; (8017ad4 <PIC+0x310>)
 8017820:	f7ef fa36 	bl	8006c90 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 8017824:	2004      	movs	r0, #4
 8017826:	f7f9 f8cf 	bl	80109c8 <ILI9341_Set_Rotation>

	uint32_t AnchoBMP=LeerFlashAbs(0)<<8;
 801782a:	2000      	movs	r0, #0
 801782c:	f001 f8c2 	bl	80189b4 <LeerFlashAbs>
 8017830:	4603      	mov	r3, r0
 8017832:	021b      	lsls	r3, r3, #8
 8017834:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	AnchoBMP=AnchoBMP | LeerFlashRel();
 8017838:	f001 f8d8 	bl	80189ec <LeerFlashRel>
 801783c:	4603      	mov	r3, r0
 801783e:	461a      	mov	r2, r3
 8017840:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8017844:	4313      	orrs	r3, r2
 8017846:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	uint32_t AltoBMP = LeerFlashRel()<<8;
 801784a:	f001 f8cf 	bl	80189ec <LeerFlashRel>
 801784e:	4603      	mov	r3, r0
 8017850:	021b      	lsls	r3, r3, #8
 8017852:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
	AltoBMP=AltoBMP | LeerFlashRel();
 8017856:	f001 f8c9 	bl	80189ec <LeerFlashRel>
 801785a:	4603      	mov	r3, r0
 801785c:	461a      	mov	r2, r3
 801785e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8017862:	4313      	orrs	r3, r2
 8017864:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
	uint32_t Peso=AnchoBMP*AltoBMP;
 8017868:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 801786c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8017870:	fb02 f303 	mul.w	r3, r2, r3
 8017874:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

	//sprintf(data,"Ancho %d Alto %d",AnchoBMP,AltoBMP);
	//ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);

	LeerFlashRel();
 8017878:	f001 f8b8 	bl	80189ec <LeerFlashRel>
	LeerFlashRel();
 801787c:	f001 f8b6 	bl	80189ec <LeerFlashRel>
	LeerFlashRel();
 8017880:	f001 f8b4 	bl	80189ec <LeerFlashRel>

	uint32_t LargoTablaColores= LeerFlashRel();
 8017884:	f001 f8b2 	bl	80189ec <LeerFlashRel>
 8017888:	4603      	mov	r3, r0
 801788a:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
	if(LargoTablaColores==0) 	LargoTablaColores=256;
 801788e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8017892:	2b00      	cmp	r3, #0
 8017894:	d103      	bne.n	801789e <PIC+0xda>
 8017896:	f44f 7380 	mov.w	r3, #256	; 0x100
 801789a:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

	for(i=0;i<LargoTablaColores;i++)
 801789e:	2300      	movs	r3, #0
 80178a0:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80178a4:	e0b5      	b.n	8017a12 <PIC+0x24e>
	{
		cRGB[i]=(uint16_t)LeerFlashRel()<<8;
 80178a6:	f001 f8a1 	bl	80189ec <LeerFlashRel>
 80178aa:	4603      	mov	r3, r0
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	021b      	lsls	r3, r3, #8
 80178b0:	b299      	uxth	r1, r3
 80178b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80178b6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80178ba:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80178be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		cRGB[i]=cRGB[i] | LeerFlashRel();
 80178c2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80178c6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80178ca:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80178ce:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80178d2:	f001 f88b 	bl	80189ec <LeerFlashRel>
 80178d6:	4603      	mov	r3, r0
 80178d8:	b29b      	uxth	r3, r3
 80178da:	4323      	orrs	r3, r4
 80178dc:	b299      	uxth	r1, r3
 80178de:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80178e2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80178e6:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 80178ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		if(Brillo !=0 )
 80178ee:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80178f2:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	f000 8085 	beq.w	8017a08 <PIC+0x244>
		{
			R=cRGB[i]>>11;
 80178fe:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017902:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8017906:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801790a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801790e:	0adb      	lsrs	r3, r3, #11
 8017910:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
			G=cRGB[i]>>5 & 0x3F;
 8017914:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017918:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801791c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8017920:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017924:	095b      	lsrs	r3, r3, #5
 8017926:	b29b      	uxth	r3, r3
 8017928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801792c:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
			B=cRGB[i] & 0x1F;
 8017930:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017934:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8017938:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 801793c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017940:	f003 031f 	and.w	r3, r3, #31
 8017944:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446

			if((R+Brillo)<0x1F) R=R+Brillo;
 8017948:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 801794c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017950:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	4413      	add	r3, r2
 8017958:	2b1e      	cmp	r3, #30
 801795a:	dc0b      	bgt.n	8017974 <PIC+0x1b0>
 801795c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017960:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	b29a      	uxth	r2, r3
 8017968:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 801796c:	4413      	add	r3, r2
 801796e:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8017972:	e002      	b.n	801797a <PIC+0x1b6>
			else			  	R=0x1f;
 8017974:	231f      	movs	r3, #31
 8017976:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
			if((G+Brillo)<0x3F) G=G+Brillo;
 801797a:	f8b7 2448 	ldrh.w	r2, [r7, #1096]	; 0x448
 801797e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017982:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8017986:	781b      	ldrb	r3, [r3, #0]
 8017988:	4413      	add	r3, r2
 801798a:	2b3e      	cmp	r3, #62	; 0x3e
 801798c:	dc0b      	bgt.n	80179a6 <PIC+0x1e2>
 801798e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017992:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	b29a      	uxth	r2, r3
 801799a:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 801799e:	4413      	add	r3, r2
 80179a0:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
 80179a4:	e002      	b.n	80179ac <PIC+0x1e8>
			else			  	G=0x3f;
 80179a6:	233f      	movs	r3, #63	; 0x3f
 80179a8:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
			if((B+Brillo)<0x1F) B=B+Brillo;
 80179ac:	f8b7 2446 	ldrh.w	r2, [r7, #1094]	; 0x446
 80179b0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80179b4:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	4413      	add	r3, r2
 80179bc:	2b1e      	cmp	r3, #30
 80179be:	dc0b      	bgt.n	80179d8 <PIC+0x214>
 80179c0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80179c4:	f2a3 434d 	subw	r3, r3, #1101	; 0x44d
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 80179d0:	4413      	add	r3, r2
 80179d2:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
 80179d6:	e002      	b.n	80179de <PIC+0x21a>
			else			  	B=0x1f;
 80179d8:	231f      	movs	r3, #31
 80179da:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
			cRGB[i]=R*2048+G*32+B;
 80179de:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80179e2:	019a      	lsls	r2, r3, #6
 80179e4:	f8b7 3448 	ldrh.w	r3, [r7, #1096]	; 0x448
 80179e8:	4413      	add	r3, r2
 80179ea:	b29b      	uxth	r3, r3
 80179ec:	015b      	lsls	r3, r3, #5
 80179ee:	b29a      	uxth	r2, r3
 80179f0:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 80179f4:	4413      	add	r3, r2
 80179f6:	b299      	uxth	r1, r3
 80179f8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80179fc:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8017a00:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8017a04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0;i<LargoTablaColores;i++)
 8017a08:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8017a12:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8017a16:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	f4ff af43 	bcc.w	80178a6 <PIC+0xe2>
			//sprintf(data,"%X %X %X %X",R,G,B,RGB);
			//ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);
		}
	}

	unsigned int x1=x;
 8017a20:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017a24:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 8017a2e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017a32:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8017a36:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	4413      	add	r3, r2
 8017a3e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8017a42:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	unsigned int x2=AnchoBMP+x-1;
 8017a46:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017a4a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8017a4e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4413      	add	r3, r2
 8017a56:	3b01      	subs	r3, #1
 8017a58:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	unsigned int y2=239-y;
 8017a5c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017a60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8017a6a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	ILI9341_Set_Address(x1,y1,x2,y2);
 8017a6e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8017a72:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8017a76:	f8d7 1428 	ldr.w	r1, [r7, #1064]	; 0x428
 8017a7a:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8017a7e:	f7f9 f827 	bl	8010ad0 <ILI9341_Set_Address>

	TFT_DC_COMMAND;
 8017a82:	2200      	movs	r2, #0
 8017a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017a88:	4812      	ldr	r0, [pc, #72]	; (8017ad4 <PIC+0x310>)
 8017a8a:	f7ef f901 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=0x2C;
 8017a8e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017a92:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8017a96:	222c      	movs	r2, #44	; 0x2c
 8017a98:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, data, 1, 1);
 8017a9a:	f107 0114 	add.w	r1, r7, #20
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	480d      	ldr	r0, [pc, #52]	; (8017ad8 <PIC+0x314>)
 8017aa4:	f7f2 fb3d 	bl	800a122 <HAL_SPI_Transmit>

	ii=0;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	do
	{
		q=LeerFlashRel();
 8017aae:	f000 ff9d 	bl	80189ec <LeerFlashRel>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		c=LeerFlashRel();
 8017ab8:	f000 ff98 	bl	80189ec <LeerFlashRel>
 8017abc:	4603      	mov	r3, r0
 8017abe:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		for(i=0;i<q*2;i++)
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8017ac8:	e038      	b.n	8017b3c <PIC+0x378>
 8017aca:	bf00      	nop
 8017acc:	20009a0c 	.word	0x20009a0c
 8017ad0:	48000400 	.word	0x48000400
 8017ad4:	48000800 	.word	0x48000800
 8017ad8:	20009628 	.word	0x20009628
		{
			data[i]=(uint8_t)(cRGB[c]>>8);
 8017adc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017ae0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8017ae4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8017ae8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017aec:	0a1b      	lsrs	r3, r3, #8
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	b2d9      	uxtb	r1, r3
 8017af2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017af6:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 8017afa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8017afe:	4413      	add	r3, r2
 8017b00:	460a      	mov	r2, r1
 8017b02:	701a      	strb	r2, [r3, #0]
			i++;
 8017b04:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8017b08:	3301      	adds	r3, #1
 8017b0a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
			data[i]=(uint8_t)(cRGB[c] & 0x00FF);
 8017b0e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017b12:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8017b16:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8017b1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017b1e:	b2d9      	uxtb	r1, r3
 8017b20:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8017b24:	f2a3 423c 	subw	r2, r3, #1084	; 0x43c
 8017b28:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8017b2c:	4413      	add	r3, r2
 8017b2e:	460a      	mov	r2, r1
 8017b30:	701a      	strb	r2, [r3, #0]
		for(i=0;i<q*2;i++)
 8017b32:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8017b36:	3301      	adds	r3, #1
 8017b38:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8017b3c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8017b40:	005b      	lsls	r3, r3, #1
 8017b42:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d3c8      	bcc.n	8017adc <PIC+0x318>
		}
		TFT_DC_DATA;
 8017b4a:	2201      	movs	r2, #1
 8017b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017b50:	4812      	ldr	r0, [pc, #72]	; (8017b9c <PIC+0x3d8>)
 8017b52:	f7ef f89d 	bl	8006c90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,data,q*2,100);
 8017b56:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8017b5a:	b29b      	uxth	r3, r3
 8017b5c:	005b      	lsls	r3, r3, #1
 8017b5e:	b29a      	uxth	r2, r3
 8017b60:	f107 0114 	add.w	r1, r7, #20
 8017b64:	2364      	movs	r3, #100	; 0x64
 8017b66:	480e      	ldr	r0, [pc, #56]	; (8017ba0 <PIC+0x3dc>)
 8017b68:	f7f2 fadb 	bl	800a122 <HAL_SPI_Transmit>
		ii=ii+q;
 8017b6c:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8017b70:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8017b74:	4413      	add	r3, r2
 8017b76:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c

	}while(ii<Peso);
 8017b7a:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8017b7e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d393      	bcc.n	8017aae <PIC+0x2ea>

//	sprintf(data,"%X %X %X %X",R,G,B,RGB);
//	ILI9341_Draw_String(0,80,WHITE,0x0010,data,4);

	TFT_CS_OFF;
 8017b86:	2201      	movs	r2, #1
 8017b88:	2180      	movs	r1, #128	; 0x80
 8017b8a:	4804      	ldr	r0, [pc, #16]	; (8017b9c <PIC+0x3d8>)
 8017b8c:	f7ef f880 	bl	8006c90 <HAL_GPIO_WritePin>
}
 8017b90:	bf00      	nop
 8017b92:	f207 4754 	addw	r7, r7, #1108	; 0x454
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd90      	pop	{r4, r7, pc}
 8017b9a:	bf00      	nop
 8017b9c:	48000800 	.word	0x48000800
 8017ba0:	20009628 	.word	0x20009628

08017ba4 <f_BMP>:

void f_BMP(char* File,unsigned int x,unsigned int y)
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	f6ad 1d78 	subw	sp, sp, #2424	; 0x978
 8017baa:	af00      	add	r7, sp, #0
 8017bac:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017bb0:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8017bb4:	6018      	str	r0, [r3, #0]
 8017bb6:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017bba:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8017bbe:	6019      	str	r1, [r3, #0]
 8017bc0:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017bc4:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8017bc8:	601a      	str	r2, [r3, #0]
	unsigned char 	dataIn[256],color[4],c;
	unsigned int 	col_16,TablaCol[256];
	UINT 			br,ERROR_SD;
	FIL Fil;

	TP_CS_OFF;
 8017bca:	2201      	movs	r2, #1
 8017bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017bd0:	48d2      	ldr	r0, [pc, #840]	; (8017f1c <f_BMP+0x378>)
 8017bd2:	f7ef f85d 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_OFF;
 8017bd6:	2201      	movs	r2, #1
 8017bd8:	2180      	movs	r1, #128	; 0x80
 8017bda:	48d1      	ldr	r0, [pc, #836]	; (8017f20 <f_BMP+0x37c>)
 8017bdc:	f7ef f858 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8017be0:	2200      	movs	r2, #0
 8017be2:	2108      	movs	r1, #8
 8017be4:	48ce      	ldr	r0, [pc, #824]	; (8017f20 <f_BMP+0x37c>)
 8017be6:	f7ef f853 	bl	8006c90 <HAL_GPIO_WritePin>

	f_open(&Fil,File,FA_READ);
 8017bea:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017bee:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8017bf2:	f107 0014 	add.w	r0, r7, #20
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	6819      	ldr	r1, [r3, #0]
 8017bfa:	f7fd fb8d 	bl	8015318 <f_open>
	f_read(&Fil,dataIn,54,&br);
 8017bfe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8017c02:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8017c06:	f107 0014 	add.w	r0, r7, #20
 8017c0a:	2236      	movs	r2, #54	; 0x36
 8017c0c:	f7fd fe06 	bl	801581c <f_read>

	uint32_t	AnchoBMP=(unsigned int)dataIn[0x12]+(unsigned int)dataIn[0x13]*256;
 8017c10:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c14:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c18:	7c9b      	ldrb	r3, [r3, #18]
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c20:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c24:	7cdb      	ldrb	r3, [r3, #19]
 8017c26:	021b      	lsls	r3, r3, #8
 8017c28:	4413      	add	r3, r2
 8017c2a:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
	uint32_t	AltoBMP=(unsigned int)dataIn[0x16]+(unsigned int)dataIn[0x17]*256;
 8017c2e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c32:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c36:	7d9b      	ldrb	r3, [r3, #22]
 8017c38:	461a      	mov	r2, r3
 8017c3a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c3e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c42:	7ddb      	ldrb	r3, [r3, #23]
 8017c44:	021b      	lsls	r3, r3, #8
 8017c46:	4413      	add	r3, r2
 8017c48:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
	uint32_t	OffsetArray=(unsigned int)dataIn[0x0A]+(unsigned int)dataIn[0x0B]*256;
 8017c4c:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c50:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c54:	7a9b      	ldrb	r3, [r3, #10]
 8017c56:	461a      	mov	r2, r3
 8017c58:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c5c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c60:	7adb      	ldrb	r3, [r3, #11]
 8017c62:	021b      	lsls	r3, r3, #8
 8017c64:	4413      	add	r3, r2
 8017c66:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
	uint32_t	LargoTablaColores=(unsigned int)dataIn[0x2E]+(unsigned int)dataIn[0x2F]*256;
 8017c6a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c6e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c72:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8017c76:	461a      	mov	r2, r3
 8017c78:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017c7c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017c80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017c84:	021b      	lsls	r3, r3, #8
 8017c86:	4413      	add	r3, r2
 8017c88:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c

	for(i=0;i<LargoTablaColores;i++)
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8017c92:	e02f      	b.n	8017cf4 <f_BMP+0x150>
	{
		f_read(&Fil,color,4,&br);
 8017c94:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8017c98:	f207 6144 	addw	r1, r7, #1604	; 0x644
 8017c9c:	f107 0014 	add.w	r0, r7, #20
 8017ca0:	2204      	movs	r2, #4
 8017ca2:	f7fd fdbb 	bl	801581c <f_read>
		TablaCol[i]=(color[2]/8)*2048+(color[1]/4)*32+(color[0])/8;
 8017ca6:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017caa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017cae:	789b      	ldrb	r3, [r3, #2]
 8017cb0:	08db      	lsrs	r3, r3, #3
 8017cb2:	b2db      	uxtb	r3, r3
 8017cb4:	019b      	lsls	r3, r3, #6
 8017cb6:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8017cba:	f5a2 724d 	sub.w	r2, r2, #820	; 0x334
 8017cbe:	7852      	ldrb	r2, [r2, #1]
 8017cc0:	0892      	lsrs	r2, r2, #2
 8017cc2:	b2d2      	uxtb	r2, r2
 8017cc4:	4413      	add	r3, r2
 8017cc6:	015b      	lsls	r3, r3, #5
 8017cc8:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8017ccc:	f5a2 724d 	sub.w	r2, r2, #820	; 0x334
 8017cd0:	7812      	ldrb	r2, [r2, #0]
 8017cd2:	08d2      	lsrs	r2, r2, #3
 8017cd4:	b2d2      	uxtb	r2, r2
 8017cd6:	4413      	add	r3, r2
 8017cd8:	4619      	mov	r1, r3
 8017cda:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017cde:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8017ce2:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8017ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i=0;i<LargoTablaColores;i++)
 8017cea:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8017cee:	3301      	adds	r3, #1
 8017cf0:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8017cf4:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8017cf8:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d3c9      	bcc.n	8017c94 <f_BMP+0xf0>
	}

	f_lseek(&Fil,OffsetArray);
 8017d00:	f107 0314 	add.w	r3, r7, #20
 8017d04:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7fd ffd4 	bl	8015cb6 <f_lseek>
	uint32_t Peso=AnchoBMP*AltoBMP;
 8017d0e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8017d12:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 8017d16:	fb02 f303 	mul.w	r3, r2, r3
 8017d1a:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958

	SD_CS_OFF;
 8017d1e:	2201      	movs	r2, #1
 8017d20:	2108      	movs	r1, #8
 8017d22:	487f      	ldr	r0, [pc, #508]	; (8017f20 <f_BMP+0x37c>)
 8017d24:	f7ee ffb4 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8017d28:	2200      	movs	r2, #0
 8017d2a:	2180      	movs	r1, #128	; 0x80
 8017d2c:	487c      	ldr	r0, [pc, #496]	; (8017f20 <f_BMP+0x37c>)
 8017d2e:	f7ee ffaf 	bl	8006c90 <HAL_GPIO_WritePin>
	ILI9341_Set_Rotation(4);
 8017d32:	2004      	movs	r0, #4
 8017d34:	f7f8 fe48 	bl	80109c8 <ILI9341_Set_Rotation>
	unsigned int x1=x;
 8017d38:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017d3c:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
	unsigned int y1=240-(unsigned int)AltoBMP-y;
 8017d46:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017d4a:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8017d4e:	f8d7 2964 	ldr.w	r2, [r7, #2404]	; 0x964
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	4413      	add	r3, r2
 8017d56:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8017d5a:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
	unsigned int x2=AnchoBMP+x-1;
 8017d5e:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017d62:	f5a3 6317 	sub.w	r3, r3, #2416	; 0x970
 8017d66:	f8d7 2968 	ldr.w	r2, [r7, #2408]	; 0x968
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	4413      	add	r3, r2
 8017d6e:	3b01      	subs	r3, #1
 8017d70:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
	unsigned int y2=239-y;
 8017d74:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017d78:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8017d82:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
	ILI9341_Set_Address(x1,y1,x2,y2);
 8017d86:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 8017d8a:	f8d7 294c 	ldr.w	r2, [r7, #2380]	; 0x94c
 8017d8e:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 8017d92:	f8d7 0954 	ldr.w	r0, [r7, #2388]	; 0x954
 8017d96:	f7f8 fe9b 	bl	8010ad0 <ILI9341_Set_Address>
	TFT_DC_COMMAND;
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017da0:	485f      	ldr	r0, [pc, #380]	; (8017f20 <f_BMP+0x37c>)
 8017da2:	f7ee ff75 	bl	8006c90 <HAL_GPIO_WritePin>
	dataIn[0]=0x2C;
 8017da6:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017daa:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8017dae:	222c      	movs	r2, #44	; 0x2c
 8017db0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, dataIn, 1, 1);
 8017db2:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8017db6:	2301      	movs	r3, #1
 8017db8:	2201      	movs	r2, #1
 8017dba:	485a      	ldr	r0, [pc, #360]	; (8017f24 <f_BMP+0x380>)
 8017dbc:	f7f2 f9b1 	bl	800a122 <HAL_SPI_Transmit>
	TFT_CS_OFF;
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	2180      	movs	r1, #128	; 0x80
 8017dc4:	4856      	ldr	r0, [pc, #344]	; (8017f20 <f_BMP+0x37c>)
 8017dc6:	f7ee ff63 	bl	8006c90 <HAL_GPIO_WritePin>
	DWORD sect ;

	for(i=0;i<Peso;i=i+256)
 8017dca:	2300      	movs	r3, #0
 8017dcc:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8017dd0:	e083      	b.n	8017eda <f_BMP+0x336>
	{
		TFT_CS_OFF;
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	2180      	movs	r1, #128	; 0x80
 8017dd6:	4852      	ldr	r0, [pc, #328]	; (8017f20 <f_BMP+0x37c>)
 8017dd8:	f7ee ff5a 	bl	8006c90 <HAL_GPIO_WritePin>
		SD_CS_ON;
 8017ddc:	2200      	movs	r2, #0
 8017dde:	2108      	movs	r1, #8
 8017de0:	484f      	ldr	r0, [pc, #316]	; (8017f20 <f_BMP+0x37c>)
 8017de2:	f7ee ff55 	bl	8006c90 <HAL_GPIO_WritePin>

		f_read(&Fil,dataIn,256,&br);
 8017de6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8017dea:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8017dee:	f107 0014 	add.w	r0, r7, #20
 8017df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017df6:	f7fd fd11 	bl	801581c <f_read>
		for(ii=0,iii=0;ii<256;ii++,iii++)
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8017e00:	2300      	movs	r3, #0
 8017e02:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8017e06:	e041      	b.n	8017e8c <f_BMP+0x2e8>
		{
			dataOut[iii]=TablaCol[dataIn[ii]]>>8;
 8017e08:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e0c:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8017e10:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8017e14:	4413      	add	r3, r2
 8017e16:	781b      	ldrb	r3, [r3, #0]
 8017e18:	461a      	mov	r2, r3
 8017e1a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e1e:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8017e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e26:	0a1b      	lsrs	r3, r3, #8
 8017e28:	b2d9      	uxtb	r1, r3
 8017e2a:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e2e:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8017e32:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8017e36:	4413      	add	r3, r2
 8017e38:	460a      	mov	r2, r1
 8017e3a:	701a      	strb	r2, [r3, #0]
			iii++;
 8017e3c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8017e40:	3301      	adds	r3, #1
 8017e42:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
			dataOut[iii]=TablaCol[dataIn[ii]];
 8017e46:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e4a:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 8017e4e:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8017e52:	4413      	add	r3, r2
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	461a      	mov	r2, r3
 8017e58:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e5c:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8017e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e64:	b2d9      	uxtb	r1, r3
 8017e66:	f607 1378 	addw	r3, r7, #2424	; 0x978
 8017e6a:	f5a3 720c 	sub.w	r2, r3, #560	; 0x230
 8017e6e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8017e72:	4413      	add	r3, r2
 8017e74:	460a      	mov	r2, r1
 8017e76:	701a      	strb	r2, [r3, #0]
		for(ii=0,iii=0;ii<256;ii++,iii++)
 8017e78:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
 8017e82:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8017e86:	3301      	adds	r3, #1
 8017e88:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8017e8c:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 8017e90:	2bff      	cmp	r3, #255	; 0xff
 8017e92:	d9b9      	bls.n	8017e08 <f_BMP+0x264>
		}
		SD_CS_OFF;
 8017e94:	2201      	movs	r2, #1
 8017e96:	2108      	movs	r1, #8
 8017e98:	4821      	ldr	r0, [pc, #132]	; (8017f20 <f_BMP+0x37c>)
 8017e9a:	f7ee fef9 	bl	8006c90 <HAL_GPIO_WritePin>
		TFT_CS_ON;
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	2180      	movs	r1, #128	; 0x80
 8017ea2:	481f      	ldr	r0, [pc, #124]	; (8017f20 <f_BMP+0x37c>)
 8017ea4:	f7ee fef4 	bl	8006c90 <HAL_GPIO_WritePin>
		TFT_DC_DATA;
 8017ea8:	2201      	movs	r2, #1
 8017eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017eae:	481c      	ldr	r0, [pc, #112]	; (8017f20 <f_BMP+0x37c>)
 8017eb0:	f7ee feee 	bl	8006c90 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&lcd_spi,dataOut,512,100);
 8017eb4:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8017eb8:	2364      	movs	r3, #100	; 0x64
 8017eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ebe:	4819      	ldr	r0, [pc, #100]	; (8017f24 <f_BMP+0x380>)
 8017ec0:	f7f2 f92f 	bl	800a122 <HAL_SPI_Transmit>
		TFT_CS_OFF;
 8017ec4:	2201      	movs	r2, #1
 8017ec6:	2180      	movs	r1, #128	; 0x80
 8017ec8:	4815      	ldr	r0, [pc, #84]	; (8017f20 <f_BMP+0x37c>)
 8017eca:	f7ee fee1 	bl	8006c90 <HAL_GPIO_WritePin>
	for(i=0;i<Peso;i=i+256)
 8017ece:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8017ed2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8017ed6:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8017eda:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 8017ede:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	f4ff af75 	bcc.w	8017dd2 <f_BMP+0x22e>
	}
	TFT_CS_OFF;
 8017ee8:	2201      	movs	r2, #1
 8017eea:	2180      	movs	r1, #128	; 0x80
 8017eec:	480c      	ldr	r0, [pc, #48]	; (8017f20 <f_BMP+0x37c>)
 8017eee:	f7ee fecf 	bl	8006c90 <HAL_GPIO_WritePin>
	SD_CS_ON;
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	2108      	movs	r1, #8
 8017ef6:	480a      	ldr	r0, [pc, #40]	; (8017f20 <f_BMP+0x37c>)
 8017ef8:	f7ee feca 	bl	8006c90 <HAL_GPIO_WritePin>
	f_close(&Fil);
 8017efc:	f107 0314 	add.w	r3, r7, #20
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7fd feb0 	bl	8015c66 <f_close>
	SD_CS_OFF;
 8017f06:	2201      	movs	r2, #1
 8017f08:	2108      	movs	r1, #8
 8017f0a:	4805      	ldr	r0, [pc, #20]	; (8017f20 <f_BMP+0x37c>)
 8017f0c:	f7ee fec0 	bl	8006c90 <HAL_GPIO_WritePin>

}
 8017f10:	bf00      	nop
 8017f12:	f607 1778 	addw	r7, r7, #2424	; 0x978
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	48000400 	.word	0x48000400
 8017f20:	48000800 	.word	0x48000800
 8017f24:	20009628 	.word	0x20009628

08017f28 <FillReg>:


void FillReg(unsigned int x,unsigned int y,
			 unsigned int wx,unsigned int wy,
			 unsigned int color)
{
 8017f28:	b590      	push	{r4, r7, lr}
 8017f2a:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8017f2e:	af00      	add	r7, sp, #0
 8017f30:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8017f34:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8017f38:	6020      	str	r0, [r4, #0]
 8017f3a:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8017f3e:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8017f42:	6001      	str	r1, [r0, #0]
 8017f44:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8017f48:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8017f4c:	600a      	str	r2, [r1, #0]
 8017f4e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8017f52:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8017f56:	6013      	str	r3, [r2, #0]
	SD_CS_OFF;
 8017f58:	2201      	movs	r2, #1
 8017f5a:	2108      	movs	r1, #8
 8017f5c:	485c      	ldr	r0, [pc, #368]	; (80180d0 <FillReg+0x1a8>)
 8017f5e:	f7ee fe97 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 8017f62:	2200      	movs	r2, #0
 8017f64:	2180      	movs	r1, #128	; 0x80
 8017f66:	485a      	ldr	r0, [pc, #360]	; (80180d0 <FillReg+0x1a8>)
 8017f68:	f7ee fe92 	bl	8006c90 <HAL_GPIO_WritePin>

	uint16_t	i;
	uint32_t	Peso=wx*wy;
 8017f6c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017f70:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8017f74:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8017f78:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	6812      	ldr	r2, [r2, #0]
 8017f80:	fb02 f303 	mul.w	r3, r2, r3
 8017f84:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

	uint8_t data[640];

	ILI9341_Set_Rotation(4);
 8017f88:	2004      	movs	r0, #4
 8017f8a:	f7f8 fd1d 	bl	80109c8 <ILI9341_Set_Rotation>
	unsigned int x1=x;
 8017f8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017f92:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	unsigned int y1=240-wy-y;
 8017f9c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017fa0:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8017fa4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017fa8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017fac:	6812      	ldr	r2, [r2, #0]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8017fb6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	unsigned int x2=wx+x-1;
 8017fba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017fbe:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8017fc2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017fc6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017fca:	6812      	ldr	r2, [r2, #0]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4413      	add	r3, r2
 8017fd0:	3b01      	subs	r3, #1
 8017fd2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	unsigned int y2=239-y;
 8017fd6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8017fda:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8017fe4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	ILI9341_Set_Address(x1,y1,x2,y2);
 8017fe8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8017fec:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8017ff0:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8017ff4:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8017ff8:	f7f8 fd6a 	bl	8010ad0 <ILI9341_Set_Address>

	TFT_DC_COMMAND;
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8018002:	4833      	ldr	r0, [pc, #204]	; (80180d0 <FillReg+0x1a8>)
 8018004:	f7ee fe44 	bl	8006c90 <HAL_GPIO_WritePin>
	data[0]=0x2C;
 8018008:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801800c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8018010:	222c      	movs	r2, #44	; 0x2c
 8018012:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&lcd_spi, data, 1, 1);
 8018014:	f107 0110 	add.w	r1, r7, #16
 8018018:	2301      	movs	r3, #1
 801801a:	2201      	movs	r2, #1
 801801c:	482d      	ldr	r0, [pc, #180]	; (80180d4 <FillReg+0x1ac>)
 801801e:	f7f2 f880 	bl	800a122 <HAL_SPI_Transmit>

	for(i=0;i<wx;i++)
 8018022:	2300      	movs	r3, #0
 8018024:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 8018028:	e01c      	b.n	8018064 <FillReg+0x13c>
	{
			data[i*2]=color>>8;
 801802a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 801802e:	0a1a      	lsrs	r2, r3, #8
 8018030:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8018034:	005b      	lsls	r3, r3, #1
 8018036:	b2d1      	uxtb	r1, r2
 8018038:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 801803c:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8018040:	54d1      	strb	r1, [r2, r3]
			data[i*2+1]=color & 0xff;
 8018042:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8018046:	005b      	lsls	r3, r3, #1
 8018048:	3301      	adds	r3, #1
 801804a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 801804e:	b2d1      	uxtb	r1, r2
 8018050:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8018054:	f5a2 7226 	sub.w	r2, r2, #664	; 0x298
 8018058:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<wx;i++)
 801805a:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 801805e:	3301      	adds	r3, #1
 8018060:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 8018064:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8018068:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 801806c:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8018070:	6812      	ldr	r2, [r2, #0]
 8018072:	429a      	cmp	r2, r3
 8018074:	d8d9      	bhi.n	801802a <FillReg+0x102>
	}

	TFT_DC_DATA;
 8018076:	2201      	movs	r2, #1
 8018078:	f44f 7100 	mov.w	r1, #512	; 0x200
 801807c:	4814      	ldr	r0, [pc, #80]	; (80180d0 <FillReg+0x1a8>)
 801807e:	f7ee fe07 	bl	8006c90 <HAL_GPIO_WritePin>
	for(i=0;i<wy;i++)
 8018082:	2300      	movs	r3, #0
 8018084:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 8018088:	e012      	b.n	80180b0 <FillReg+0x188>
	{
		HAL_SPI_Transmit(&lcd_spi,data,wx*2,10);
 801808a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801808e:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	b29b      	uxth	r3, r3
 8018096:	005b      	lsls	r3, r3, #1
 8018098:	b29a      	uxth	r2, r3
 801809a:	f107 0110 	add.w	r1, r7, #16
 801809e:	230a      	movs	r3, #10
 80180a0:	480c      	ldr	r0, [pc, #48]	; (80180d4 <FillReg+0x1ac>)
 80180a2:	f7f2 f83e 	bl	800a122 <HAL_SPI_Transmit>
	for(i=0;i<wy;i++)
 80180a6:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80180aa:	3301      	adds	r3, #1
 80180ac:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
 80180b0:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 80180b4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80180b8:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80180bc:	6812      	ldr	r2, [r2, #0]
 80180be:	429a      	cmp	r2, r3
 80180c0:	d8e3      	bhi.n	801808a <FillReg+0x162>
	}

}
 80180c2:	bf00      	nop
 80180c4:	bf00      	nop
 80180c6:	f507 772b 	add.w	r7, r7, #684	; 0x2ac
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd90      	pop	{r4, r7, pc}
 80180ce:	bf00      	nop
 80180d0:	48000800 	.word	0x48000800
 80180d4:	20009628 	.word	0x20009628

080180d8 <Encabezamiento3>:
void AtencionTecladoNumerico()
{
    //asmAtencionTecladoNumerico();
}
void Encabezamiento3(char* str)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b086      	sub	sp, #24
 80180dc:	af02      	add	r7, sp, #8
 80180de:	6078      	str	r0, [r7, #4]
	FillReg(0,0,319,33,0x0010);
 80180e0:	2310      	movs	r3, #16
 80180e2:	9300      	str	r3, [sp, #0]
 80180e4:	2321      	movs	r3, #33	; 0x21
 80180e6:	f240 123f 	movw	r2, #319	; 0x13f
 80180ea:	2100      	movs	r1, #0
 80180ec:	2000      	movs	r0, #0
 80180ee:	f7ff ff1b 	bl	8017f28 <FillReg>
    uint16_t x=(22-(unsigned char)strlen(str))/2;
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7e8 f874 	bl	80001e0 <strlen>
 80180f8:	4603      	mov	r3, r0
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	f1c3 0316 	rsb	r3, r3, #22
 8018100:	0fda      	lsrs	r2, r3, #31
 8018102:	4413      	add	r3, r2
 8018104:	105b      	asrs	r3, r3, #1
 8018106:	81fb      	strh	r3, [r7, #14]
    ILI9341_Draw_String(x*14+7, 0, WHITE, 0x0010, str, 4);
 8018108:	89fa      	ldrh	r2, [r7, #14]
 801810a:	4613      	mov	r3, r2
 801810c:	00db      	lsls	r3, r3, #3
 801810e:	1a9b      	subs	r3, r3, r2
 8018110:	005b      	lsls	r3, r3, #1
 8018112:	3307      	adds	r3, #7
 8018114:	4618      	mov	r0, r3
 8018116:	2304      	movs	r3, #4
 8018118:	9301      	str	r3, [sp, #4]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	9300      	str	r3, [sp, #0]
 801811e:	2310      	movs	r3, #16
 8018120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018124:	2100      	movs	r1, #0
 8018126:	f7f8 ff83 	bl	8011030 <ILI9341_Draw_String>
}
 801812a:	bf00      	nop
 801812c:	3710      	adds	r7, #16
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}
	...

08018134 <GraficarOSC>:
void GraficarPWM(void)
{
}

void GraficarOSC(void)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 801813a:	af00      	add	r7, sp, #0
  SD_CS_OFF;
 801813c:	2201      	movs	r2, #1
 801813e:	2108      	movs	r1, #8
 8018140:	48d3      	ldr	r0, [pc, #844]	; (8018490 <GraficarOSC+0x35c>)
 8018142:	f7ee fda5 	bl	8006c90 <HAL_GPIO_WritePin>
  TFT_CS_ON;
 8018146:	2200      	movs	r2, #0
 8018148:	2180      	movs	r1, #128	; 0x80
 801814a:	48d1      	ldr	r0, [pc, #836]	; (8018490 <GraficarOSC+0x35c>)
 801814c:	f7ee fda0 	bl	8006c90 <HAL_GPIO_WritePin>

  uint16_t i,x;
  uint8_t data[500];
  uint32_t ya0,yp0,ya1,yp1,ya2,yp2,ya3,yp3;

  ILI9341_Set_Rotation(0);
 8018150:	2000      	movs	r0, #0
 8018152:	f7f8 fc39 	bl	80109c8 <ILI9341_Set_Rotation>
  ILI9341_Set_Address(0,0,239,319);
 8018156:	f240 133f 	movw	r3, #319	; 0x13f
 801815a:	22ef      	movs	r2, #239	; 0xef
 801815c:	2100      	movs	r1, #0
 801815e:	2000      	movs	r0, #0
 8018160:	f7f8 fcb6 	bl	8010ad0 <ILI9341_Set_Address>

  TFT_DC_COMMAND;
 8018164:	2200      	movs	r2, #0
 8018166:	f44f 7100 	mov.w	r1, #512	; 0x200
 801816a:	48c9      	ldr	r0, [pc, #804]	; (8018490 <GraficarOSC+0x35c>)
 801816c:	f7ee fd90 	bl	8006c90 <HAL_GPIO_WritePin>
  data[0]=0x2c;
 8018170:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018174:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018178:	222c      	movs	r2, #44	; 0x2c
 801817a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&lcd_spi,data,1,10);
 801817c:	4639      	mov	r1, r7
 801817e:	230a      	movs	r3, #10
 8018180:	2201      	movs	r2, #1
 8018182:	48c4      	ldr	r0, [pc, #784]	; (8018494 <GraficarOSC+0x360>)
 8018184:	f7f1 ffcd 	bl	800a122 <HAL_SPI_Transmit>
  TFT_DC_DATA;
 8018188:	2201      	movs	r2, #1
 801818a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801818e:	48c0      	ldr	r0, [pc, #768]	; (8018490 <GraficarOSC+0x35c>)
 8018190:	f7ee fd7e 	bl	8006c90 <HAL_GPIO_WritePin>
  for(x=0;x<320;x++)
 8018194:	2300      	movs	r3, #0
 8018196:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 801819a:	e2fa      	b.n	8018792 <GraficarOSC+0x65e>
  {
	  if(x==0||x==50||x==100||x==150||x==200||x==250||x==300)  for(i=0;i<480;i=i+2) data[i]=0xff,data[i+1]=0xff;
 801819c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d018      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181a4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181a8:	2b32      	cmp	r3, #50	; 0x32
 80181aa:	d014      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181ac:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181b0:	2b64      	cmp	r3, #100	; 0x64
 80181b2:	d010      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181b4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181b8:	2b96      	cmp	r3, #150	; 0x96
 80181ba:	d00c      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181bc:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181c0:	2bc8      	cmp	r3, #200	; 0xc8
 80181c2:	d008      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181c4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181c8:	2bfa      	cmp	r3, #250	; 0xfa
 80181ca:	d004      	beq.n	80181d6 <GraficarOSC+0xa2>
 80181cc:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80181d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80181d4:	d11f      	bne.n	8018216 <GraficarOSC+0xe2>
 80181d6:	2300      	movs	r3, #0
 80181d8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80181dc:	e015      	b.n	801820a <GraficarOSC+0xd6>
 80181de:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80181e2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80181e6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80181ea:	21ff      	movs	r1, #255	; 0xff
 80181ec:	54d1      	strb	r1, [r2, r3]
 80181ee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80181f2:	3301      	adds	r3, #1
 80181f4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80181f8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80181fc:	21ff      	movs	r1, #255	; 0xff
 80181fe:	54d1      	strb	r1, [r2, r3]
 8018200:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018204:	3302      	adds	r3, #2
 8018206:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801820a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801820e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8018212:	d3e4      	bcc.n	80181de <GraficarOSC+0xaa>
 8018214:	e01e      	b.n	8018254 <GraficarOSC+0x120>
	  else for(i=0;i<480;i=i+2) data[i]=0x064,data[i+1]=0xDF;
 8018216:	2300      	movs	r3, #0
 8018218:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801821c:	e015      	b.n	801824a <GraficarOSC+0x116>
 801821e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018222:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018226:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801822a:	2164      	movs	r1, #100	; 0x64
 801822c:	54d1      	strb	r1, [r2, r3]
 801822e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018232:	3301      	adds	r3, #1
 8018234:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018238:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801823c:	21df      	movs	r1, #223	; 0xdf
 801823e:	54d1      	strb	r1, [r2, r3]
 8018240:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018244:	3302      	adds	r3, #2
 8018246:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801824a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801824e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8018252:	d3e4      	bcc.n	801821e <GraficarOSC+0xea>

	  if(x<=300)
 8018254:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018258:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801825c:	d85f      	bhi.n	801831e <GraficarOSC+0x1ea>
	  {
		  data[0]=0xff;
 801825e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018262:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018266:	22ff      	movs	r2, #255	; 0xff
 8018268:	701a      	strb	r2, [r3, #0]
		  data[1]=0xff;
 801826a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801826e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018272:	22ff      	movs	r2, #255	; 0xff
 8018274:	705a      	strb	r2, [r3, #1]
		  data[80]=0xff;
 8018276:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801827a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801827e:	22ff      	movs	r2, #255	; 0xff
 8018280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		  data[81]=0xff;
 8018284:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018288:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801828c:	22ff      	movs	r2, #255	; 0xff
 801828e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		  data[160]=0xff;
 8018292:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018296:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801829a:	22ff      	movs	r2, #255	; 0xff
 801829c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		  data[161]=0xff;
 80182a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182a4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182a8:	22ff      	movs	r2, #255	; 0xff
 80182aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		  data[240]=0xff;
 80182ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182b2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182b6:	22ff      	movs	r2, #255	; 0xff
 80182b8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		  data[241]=0xff;
 80182bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182c0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182c4:	22ff      	movs	r2, #255	; 0xff
 80182c6:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		  data[320]=0xff;
 80182ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182ce:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182d2:	22ff      	movs	r2, #255	; 0xff
 80182d4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
		  data[321]=0xff;
 80182d8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182dc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182e0:	22ff      	movs	r2, #255	; 0xff
 80182e2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		  data[400]=0xff;
 80182e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182ea:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182ee:	22ff      	movs	r2, #255	; 0xff
 80182f0:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
		  data[401]=0xff;
 80182f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80182f8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80182fc:	22ff      	movs	r2, #255	; 0xff
 80182fe:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
		  data[479]=0xff;
 8018302:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018306:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801830a:	22ff      	movs	r2, #255	; 0xff
 801830c:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
		  data[480]=0xff;
 8018310:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8018314:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8018318:	22ff      	movs	r2, #255	; 0xff
 801831a:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
	  }

	  ya0=(OSCCanal1[x]/120+40)*2;
 801831e:	4b5e      	ldr	r3, [pc, #376]	; (8018498 <GraficarOSC+0x364>)
 8018320:	681a      	ldr	r2, [r3, #0]
 8018322:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018326:	009b      	lsls	r3, r3, #2
 8018328:	4413      	add	r3, r2
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a5b      	ldr	r2, [pc, #364]	; (801849c <GraficarOSC+0x368>)
 801832e:	fba2 2303 	umull	r2, r3, r2, r3
 8018332:	099b      	lsrs	r3, r3, #6
 8018334:	3328      	adds	r3, #40	; 0x28
 8018336:	005b      	lsls	r3, r3, #1
 8018338:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	  yp0=(OSCCanal1[x+1]/120+40)*2;
 801833c:	4b56      	ldr	r3, [pc, #344]	; (8018498 <GraficarOSC+0x364>)
 801833e:	681a      	ldr	r2, [r3, #0]
 8018340:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018344:	3301      	adds	r3, #1
 8018346:	009b      	lsls	r3, r3, #2
 8018348:	4413      	add	r3, r2
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	4a53      	ldr	r2, [pc, #332]	; (801849c <GraficarOSC+0x368>)
 801834e:	fba2 2303 	umull	r2, r3, r2, r3
 8018352:	099b      	lsrs	r3, r3, #6
 8018354:	3328      	adds	r3, #40	; 0x28
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	  ya1=(OSCCanal2[x]/120+80)*2;
 801835c:	4b50      	ldr	r3, [pc, #320]	; (80184a0 <GraficarOSC+0x36c>)
 801835e:	681a      	ldr	r2, [r3, #0]
 8018360:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	4413      	add	r3, r2
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	4a4c      	ldr	r2, [pc, #304]	; (801849c <GraficarOSC+0x368>)
 801836c:	fba2 2303 	umull	r2, r3, r2, r3
 8018370:	099b      	lsrs	r3, r3, #6
 8018372:	3350      	adds	r3, #80	; 0x50
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	  yp1=(OSCCanal2[x+1]/120+80)*2;
 801837a:	4b49      	ldr	r3, [pc, #292]	; (80184a0 <GraficarOSC+0x36c>)
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018382:	3301      	adds	r3, #1
 8018384:	009b      	lsls	r3, r3, #2
 8018386:	4413      	add	r3, r2
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	4a44      	ldr	r2, [pc, #272]	; (801849c <GraficarOSC+0x368>)
 801838c:	fba2 2303 	umull	r2, r3, r2, r3
 8018390:	099b      	lsrs	r3, r3, #6
 8018392:	3350      	adds	r3, #80	; 0x50
 8018394:	005b      	lsls	r3, r3, #1
 8018396:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	  ya2=(OSCCanal3[x]/120+120)*2;
 801839a:	4b42      	ldr	r3, [pc, #264]	; (80184a4 <GraficarOSC+0x370>)
 801839c:	681a      	ldr	r2, [r3, #0]
 801839e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	4413      	add	r3, r2
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4a3c      	ldr	r2, [pc, #240]	; (801849c <GraficarOSC+0x368>)
 80183aa:	fba2 2303 	umull	r2, r3, r2, r3
 80183ae:	099b      	lsrs	r3, r3, #6
 80183b0:	3378      	adds	r3, #120	; 0x78
 80183b2:	005b      	lsls	r3, r3, #1
 80183b4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	  yp2=(OSCCanal3[x+1]/120+120)*2;
 80183b8:	4b3a      	ldr	r3, [pc, #232]	; (80184a4 <GraficarOSC+0x370>)
 80183ba:	681a      	ldr	r2, [r3, #0]
 80183bc:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80183c0:	3301      	adds	r3, #1
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	4413      	add	r3, r2
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	4a34      	ldr	r2, [pc, #208]	; (801849c <GraficarOSC+0x368>)
 80183ca:	fba2 2303 	umull	r2, r3, r2, r3
 80183ce:	099b      	lsrs	r3, r3, #6
 80183d0:	3378      	adds	r3, #120	; 0x78
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

	  ya3=(OSCCanal4[x]/120+160)*2;
 80183d8:	4b33      	ldr	r3, [pc, #204]	; (80184a8 <GraficarOSC+0x374>)
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80183e0:	009b      	lsls	r3, r3, #2
 80183e2:	4413      	add	r3, r2
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	4a2d      	ldr	r2, [pc, #180]	; (801849c <GraficarOSC+0x368>)
 80183e8:	fba2 2303 	umull	r2, r3, r2, r3
 80183ec:	099b      	lsrs	r3, r3, #6
 80183ee:	33a0      	adds	r3, #160	; 0xa0
 80183f0:	005b      	lsls	r3, r3, #1
 80183f2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  yp3=(OSCCanal4[x+1]/120+160)*2;
 80183f6:	4b2c      	ldr	r3, [pc, #176]	; (80184a8 <GraficarOSC+0x374>)
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80183fe:	3301      	adds	r3, #1
 8018400:	009b      	lsls	r3, r3, #2
 8018402:	4413      	add	r3, r2
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	4a25      	ldr	r2, [pc, #148]	; (801849c <GraficarOSC+0x368>)
 8018408:	fba2 2303 	umull	r2, r3, r2, r3
 801840c:	099b      	lsrs	r3, r3, #6
 801840e:	33a0      	adds	r3, #160	; 0xa0
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	  if(yp0>ya0) for(i=ya0;i<=yp0 & i<480;i=i+2) data[i]=RED>>8, data[i+1]=RED;
 8018416:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801841a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801841e:	429a      	cmp	r2, r3
 8018420:	d931      	bls.n	8018486 <GraficarOSC+0x352>
 8018422:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8018426:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801842a:	e015      	b.n	8018458 <GraficarOSC+0x324>
 801842c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018430:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018434:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018438:	21f8      	movs	r1, #248	; 0xf8
 801843a:	54d1      	strb	r1, [r2, r3]
 801843c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018440:	3301      	adds	r3, #1
 8018442:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018446:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801844a:	2100      	movs	r1, #0
 801844c:	54d1      	strb	r1, [r2, r3]
 801844e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018452:	3302      	adds	r3, #2
 8018454:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018458:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801845c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8018460:	429a      	cmp	r2, r3
 8018462:	bf2c      	ite	cs
 8018464:	2301      	movcs	r3, #1
 8018466:	2300      	movcc	r3, #0
 8018468:	b2da      	uxtb	r2, r3
 801846a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801846e:	f240 11df 	movw	r1, #479	; 0x1df
 8018472:	428b      	cmp	r3, r1
 8018474:	bf94      	ite	ls
 8018476:	2301      	movls	r3, #1
 8018478:	2300      	movhi	r3, #0
 801847a:	b2db      	uxtb	r3, r3
 801847c:	4013      	ands	r3, r2
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b00      	cmp	r3, #0
 8018482:	d1d3      	bne.n	801842c <GraficarOSC+0x2f8>
 8018484:	e03e      	b.n	8018504 <GraficarOSC+0x3d0>
	  else for(i=yp0;i<=ya0 & i<480;i=i+2) data[i]=RED>>8, data[i+1]=RED;
 8018486:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801848a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801848e:	e023      	b.n	80184d8 <GraficarOSC+0x3a4>
 8018490:	48000800 	.word	0x48000800
 8018494:	20009628 	.word	0x20009628
 8018498:	200088c4 	.word	0x200088c4
 801849c:	88888889 	.word	0x88888889
 80184a0:	200088c8 	.word	0x200088c8
 80184a4:	200088cc 	.word	0x200088cc
 80184a8:	200088d0 	.word	0x200088d0
 80184ac:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80184b0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80184b4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80184b8:	21f8      	movs	r1, #248	; 0xf8
 80184ba:	54d1      	strb	r1, [r2, r3]
 80184bc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80184c0:	3301      	adds	r3, #1
 80184c2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80184c6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80184ca:	2100      	movs	r1, #0
 80184cc:	54d1      	strb	r1, [r2, r3]
 80184ce:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80184d2:	3302      	adds	r3, #2
 80184d4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80184d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80184dc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80184e0:	429a      	cmp	r2, r3
 80184e2:	bf2c      	ite	cs
 80184e4:	2301      	movcs	r3, #1
 80184e6:	2300      	movcc	r3, #0
 80184e8:	b2da      	uxtb	r2, r3
 80184ea:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80184ee:	f240 11df 	movw	r1, #479	; 0x1df
 80184f2:	428b      	cmp	r3, r1
 80184f4:	bf94      	ite	ls
 80184f6:	2301      	movls	r3, #1
 80184f8:	2300      	movhi	r3, #0
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	4013      	ands	r3, r2
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	2b00      	cmp	r3, #0
 8018502:	d1d3      	bne.n	80184ac <GraficarOSC+0x378>

	  if(yp1>ya1) for(i=ya1;i<=yp1 & i<480;i=i+2) data[i]=DARKGREEN>>8, data[i+1]=DARKGREEN;
 8018504:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8018508:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801850c:	429a      	cmp	r2, r3
 801850e:	d931      	bls.n	8018574 <GraficarOSC+0x440>
 8018510:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8018514:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018518:	e015      	b.n	8018546 <GraficarOSC+0x412>
 801851a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801851e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018522:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018526:	2103      	movs	r1, #3
 8018528:	54d1      	strb	r1, [r2, r3]
 801852a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801852e:	3301      	adds	r3, #1
 8018530:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018534:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018538:	21e0      	movs	r1, #224	; 0xe0
 801853a:	54d1      	strb	r1, [r2, r3]
 801853c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018540:	3302      	adds	r3, #2
 8018542:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018546:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801854a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801854e:	429a      	cmp	r2, r3
 8018550:	bf2c      	ite	cs
 8018552:	2301      	movcs	r3, #1
 8018554:	2300      	movcc	r3, #0
 8018556:	b2da      	uxtb	r2, r3
 8018558:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801855c:	f240 11df 	movw	r1, #479	; 0x1df
 8018560:	428b      	cmp	r3, r1
 8018562:	bf94      	ite	ls
 8018564:	2301      	movls	r3, #1
 8018566:	2300      	movhi	r3, #0
 8018568:	b2db      	uxtb	r3, r3
 801856a:	4013      	ands	r3, r2
 801856c:	b2db      	uxtb	r3, r3
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1d3      	bne.n	801851a <GraficarOSC+0x3e6>
 8018572:	e030      	b.n	80185d6 <GraficarOSC+0x4a2>
	  else for(i=yp1;i<=ya1 & i<480;i=i+2) data[i]=DARKGREEN>>8, data[i+1]=DARKGREEN;
 8018574:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8018578:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801857c:	e015      	b.n	80185aa <GraficarOSC+0x476>
 801857e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018582:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018586:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801858a:	2103      	movs	r1, #3
 801858c:	54d1      	strb	r1, [r2, r3]
 801858e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018592:	3301      	adds	r3, #1
 8018594:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018598:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801859c:	21e0      	movs	r1, #224	; 0xe0
 801859e:	54d1      	strb	r1, [r2, r3]
 80185a0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80185a4:	3302      	adds	r3, #2
 80185a6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80185aa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80185ae:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80185b2:	429a      	cmp	r2, r3
 80185b4:	bf2c      	ite	cs
 80185b6:	2301      	movcs	r3, #1
 80185b8:	2300      	movcc	r3, #0
 80185ba:	b2da      	uxtb	r2, r3
 80185bc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80185c0:	f240 11df 	movw	r1, #479	; 0x1df
 80185c4:	428b      	cmp	r3, r1
 80185c6:	bf94      	ite	ls
 80185c8:	2301      	movls	r3, #1
 80185ca:	2300      	movhi	r3, #0
 80185cc:	b2db      	uxtb	r3, r3
 80185ce:	4013      	ands	r3, r2
 80185d0:	b2db      	uxtb	r3, r3
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d1d3      	bne.n	801857e <GraficarOSC+0x44a>

	  if(yp2>ya2) for(i=ya2;i<=yp2 & i<480;i=i+2) data[i]=YELLOW>>8, data[i+1]=YELLOW;
 80185d6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80185da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80185de:	429a      	cmp	r2, r3
 80185e0:	d931      	bls.n	8018646 <GraficarOSC+0x512>
 80185e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80185e6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80185ea:	e015      	b.n	8018618 <GraficarOSC+0x4e4>
 80185ec:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80185f0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80185f4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80185f8:	21ff      	movs	r1, #255	; 0xff
 80185fa:	54d1      	strb	r1, [r2, r3]
 80185fc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018600:	3301      	adds	r3, #1
 8018602:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018606:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801860a:	21e0      	movs	r1, #224	; 0xe0
 801860c:	54d1      	strb	r1, [r2, r3]
 801860e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018612:	3302      	adds	r3, #2
 8018614:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018618:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801861c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8018620:	429a      	cmp	r2, r3
 8018622:	bf2c      	ite	cs
 8018624:	2301      	movcs	r3, #1
 8018626:	2300      	movcc	r3, #0
 8018628:	b2da      	uxtb	r2, r3
 801862a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801862e:	f240 11df 	movw	r1, #479	; 0x1df
 8018632:	428b      	cmp	r3, r1
 8018634:	bf94      	ite	ls
 8018636:	2301      	movls	r3, #1
 8018638:	2300      	movhi	r3, #0
 801863a:	b2db      	uxtb	r3, r3
 801863c:	4013      	ands	r3, r2
 801863e:	b2db      	uxtb	r3, r3
 8018640:	2b00      	cmp	r3, #0
 8018642:	d1d3      	bne.n	80185ec <GraficarOSC+0x4b8>
 8018644:	e030      	b.n	80186a8 <GraficarOSC+0x574>
  	  else for(i=yp2;i<=ya2 & i<480;i=i+2) data[i]=YELLOW>>8, data[i+1]=YELLOW;
 8018646:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801864a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801864e:	e015      	b.n	801867c <GraficarOSC+0x548>
 8018650:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018654:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8018658:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801865c:	21ff      	movs	r1, #255	; 0xff
 801865e:	54d1      	strb	r1, [r2, r3]
 8018660:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018664:	3301      	adds	r3, #1
 8018666:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801866a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801866e:	21e0      	movs	r1, #224	; 0xe0
 8018670:	54d1      	strb	r1, [r2, r3]
 8018672:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018676:	3302      	adds	r3, #2
 8018678:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801867c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018680:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8018684:	429a      	cmp	r2, r3
 8018686:	bf2c      	ite	cs
 8018688:	2301      	movcs	r3, #1
 801868a:	2300      	movcc	r3, #0
 801868c:	b2da      	uxtb	r2, r3
 801868e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018692:	f240 11df 	movw	r1, #479	; 0x1df
 8018696:	428b      	cmp	r3, r1
 8018698:	bf94      	ite	ls
 801869a:	2301      	movls	r3, #1
 801869c:	2300      	movhi	r3, #0
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	4013      	ands	r3, r2
 80186a2:	b2db      	uxtb	r3, r3
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d1d3      	bne.n	8018650 <GraficarOSC+0x51c>

	  if(yp3>ya3) for(i=ya3;i<=yp3 & i<480;i=i+2) data[i]=PURPLE>>8, data[i+1]=PURPLE;
 80186a8:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80186ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d931      	bls.n	8018718 <GraficarOSC+0x5e4>
 80186b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80186b8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80186bc:	e015      	b.n	80186ea <GraficarOSC+0x5b6>
 80186be:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80186c2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80186c6:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80186ca:	2178      	movs	r1, #120	; 0x78
 80186cc:	54d1      	strb	r1, [r2, r3]
 80186ce:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80186d2:	3301      	adds	r3, #1
 80186d4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80186d8:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80186dc:	210f      	movs	r1, #15
 80186de:	54d1      	strb	r1, [r2, r3]
 80186e0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80186e4:	3302      	adds	r3, #2
 80186e6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 80186ea:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80186ee:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80186f2:	429a      	cmp	r2, r3
 80186f4:	bf2c      	ite	cs
 80186f6:	2301      	movcs	r3, #1
 80186f8:	2300      	movcc	r3, #0
 80186fa:	b2da      	uxtb	r2, r3
 80186fc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018700:	f240 11df 	movw	r1, #479	; 0x1df
 8018704:	428b      	cmp	r3, r1
 8018706:	bf94      	ite	ls
 8018708:	2301      	movls	r3, #1
 801870a:	2300      	movhi	r3, #0
 801870c:	b2db      	uxtb	r3, r3
 801870e:	4013      	ands	r3, r2
 8018710:	b2db      	uxtb	r3, r3
 8018712:	2b00      	cmp	r3, #0
 8018714:	d1d3      	bne.n	80186be <GraficarOSC+0x58a>
 8018716:	e030      	b.n	801877a <GraficarOSC+0x646>
  	  else for(i=yp3;i<=ya3 & i<480;i=i+2) data[i]=PURPLE>>8, data[i+1]=PURPLE;
 8018718:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801871c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8018720:	e015      	b.n	801874e <GraficarOSC+0x61a>
 8018722:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018726:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801872a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801872e:	2178      	movs	r1, #120	; 0x78
 8018730:	54d1      	strb	r1, [r2, r3]
 8018732:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018736:	3301      	adds	r3, #1
 8018738:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801873c:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8018740:	210f      	movs	r1, #15
 8018742:	54d1      	strb	r1, [r2, r3]
 8018744:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018748:	3302      	adds	r3, #2
 801874a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 801874e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018752:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8018756:	429a      	cmp	r2, r3
 8018758:	bf2c      	ite	cs
 801875a:	2301      	movcs	r3, #1
 801875c:	2300      	movcc	r3, #0
 801875e:	b2da      	uxtb	r2, r3
 8018760:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8018764:	f240 11df 	movw	r1, #479	; 0x1df
 8018768:	428b      	cmp	r3, r1
 801876a:	bf94      	ite	ls
 801876c:	2301      	movls	r3, #1
 801876e:	2300      	movhi	r3, #0
 8018770:	b2db      	uxtb	r3, r3
 8018772:	4013      	ands	r3, r2
 8018774:	b2db      	uxtb	r3, r3
 8018776:	2b00      	cmp	r3, #0
 8018778:	d1d3      	bne.n	8018722 <GraficarOSC+0x5ee>

	  HAL_SPI_Transmit(&lcd_spi,data,480,10);
 801877a:	4639      	mov	r1, r7
 801877c:	230a      	movs	r3, #10
 801877e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018782:	480a      	ldr	r0, [pc, #40]	; (80187ac <GraficarOSC+0x678>)
 8018784:	f7f1 fccd 	bl	800a122 <HAL_SPI_Transmit>
  for(x=0;x<320;x++)
 8018788:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 801878c:	3301      	adds	r3, #1
 801878e:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 8018792:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8018796:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801879a:	f4ff acff 	bcc.w	801819c <GraficarOSC+0x68>
  }
}
 801879e:	bf00      	nop
 80187a0:	bf00      	nop
 80187a2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd80      	pop	{r7, pc}
 80187aa:	bf00      	nop
 80187ac:	20009628 	.word	0x20009628

080187b0 <FondoTeclas>:
void FondoBlanco()
{
	FillReg(0,0,319,200,WHITE);
}
void FondoTeclas()
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af02      	add	r7, sp, #8
	FillReg(0,200,319,39,0x64DF);//azul
 80187b6:	f246 43df 	movw	r3, #25823	; 0x64df
 80187ba:	9300      	str	r3, [sp, #0]
 80187bc:	2327      	movs	r3, #39	; 0x27
 80187be:	f240 123f 	movw	r2, #319	; 0x13f
 80187c2:	21c8      	movs	r1, #200	; 0xc8
 80187c4:	2000      	movs	r0, #0
 80187c6:	f7ff fbaf 	bl	8017f28 <FillReg>
}
 80187ca:	bf00      	nop
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <FondoCompletoAzul>:
void FondoCompletoAzul()
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af02      	add	r7, sp, #8
	FillReg(0,0,320,240,0x64DF);//azul
 80187d6:	f246 43df 	movw	r3, #25823	; 0x64df
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	23f0      	movs	r3, #240	; 0xf0
 80187de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80187e2:	2100      	movs	r1, #0
 80187e4:	2000      	movs	r0, #0
 80187e6:	f7ff fb9f 	bl	8017f28 <FillReg>
}
 80187ea:	bf00      	nop
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <DPMChico>:
	TFT_CS_ON;
	ILI9341_Set_Rotation(4);
	ILI9341_Draw_Pixel(orix+x,oriy-y,color);
}
void DPMChico(unsigned int x,unsigned int y,unsigned char LargoBoton,unsigned int ColorFont,unsigned int ColorFondo,char* str)
{
 80187f0:	b590      	push	{r4, r7, lr}
 80187f2:	b089      	sub	sp, #36	; 0x24
 80187f4:	af02      	add	r7, sp, #8
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	60b9      	str	r1, [r7, #8]
 80187fa:	603b      	str	r3, [r7, #0]
 80187fc:	4613      	mov	r3, r2
 80187fe:	71fb      	strb	r3, [r7, #7]

	SD_CS_OFF;
 8018800:	2201      	movs	r2, #1
 8018802:	2108      	movs	r1, #8
 8018804:	4833      	ldr	r0, [pc, #204]	; (80188d4 <DPMChico+0xe4>)
 8018806:	f7ee fa43 	bl	8006c90 <HAL_GPIO_WritePin>
	TFT_CS_ON;
 801880a:	2200      	movs	r2, #0
 801880c:	2180      	movs	r1, #128	; 0x80
 801880e:	4831      	ldr	r0, [pc, #196]	; (80188d4 <DPMChico+0xe4>)
 8018810:	f7ee fa3e 	bl	8006c90 <HAL_GPIO_WritePin>

	ILI9341_Set_Rotation(4);
 8018814:	2004      	movs	r0, #4
 8018816:	f7f8 f8d7 	bl	80109c8 <ILI9341_Set_Rotation>

    uint16_t xt=x+2+(LargoBoton-(unsigned char)strlen(str))*7;
 801881a:	79fc      	ldrb	r4, [r7, #7]
 801881c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801881e:	f7e7 fcdf 	bl	80001e0 <strlen>
 8018822:	4603      	mov	r3, r0
 8018824:	b2db      	uxtb	r3, r3
 8018826:	1ae3      	subs	r3, r4, r3
 8018828:	b29b      	uxth	r3, r3
 801882a:	461a      	mov	r2, r3
 801882c:	00d2      	lsls	r2, r2, #3
 801882e:	1ad3      	subs	r3, r2, r3
 8018830:	b29a      	uxth	r2, r3
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	b29b      	uxth	r3, r3
 8018836:	4413      	add	r3, r2
 8018838:	b29b      	uxth	r3, r3
 801883a:	3302      	adds	r3, #2
 801883c:	82fb      	strh	r3, [r7, #22]
    uint16_t yt=y+3;
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	b29b      	uxth	r3, r3
 8018842:	3303      	adds	r3, #3
 8018844:	82bb      	strh	r3, [r7, #20]
    uint16_t wx=LargoBoton*14;
 8018846:	79fb      	ldrb	r3, [r7, #7]
 8018848:	b29b      	uxth	r3, r3
 801884a:	461a      	mov	r2, r3
 801884c:	00d2      	lsls	r2, r2, #3
 801884e:	1ad3      	subs	r3, r2, r3
 8018850:	005b      	lsls	r3, r3, #1
 8018852:	827b      	strh	r3, [r7, #18]
    uint16_t wy=35;
 8018854:	2323      	movs	r3, #35	; 0x23
 8018856:	823b      	strh	r3, [r7, #16]

    FillReg(x+2,y+2,wx-2,35,ColorFondo);
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	1c98      	adds	r0, r3, #2
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	1c99      	adds	r1, r3, #2
 8018860:	8a7b      	ldrh	r3, [r7, #18]
 8018862:	3b02      	subs	r3, #2
 8018864:	461a      	mov	r2, r3
 8018866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018868:	9300      	str	r3, [sp, #0]
 801886a:	2323      	movs	r3, #35	; 0x23
 801886c:	f7ff fb5c 	bl	8017f28 <FillReg>
   	ILI9341_Draw_String(xt,yt,ColorFont,ColorFondo,str,4);
 8018870:	8af8      	ldrh	r0, [r7, #22]
 8018872:	8ab9      	ldrh	r1, [r7, #20]
 8018874:	2304      	movs	r3, #4
 8018876:	9301      	str	r3, [sp, #4]
 8018878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887a:	9300      	str	r3, [sp, #0]
 801887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887e:	683a      	ldr	r2, [r7, #0]
 8018880:	f7f8 fbd6 	bl	8011030 <ILI9341_Draw_String>
   	FillReg(x   ,y	 ,wx  ,2  ,0);
 8018884:	8a7a      	ldrh	r2, [r7, #18]
 8018886:	2300      	movs	r3, #0
 8018888:	9300      	str	r3, [sp, #0]
 801888a:	2302      	movs	r3, #2
 801888c:	68b9      	ldr	r1, [r7, #8]
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f7ff fb4a 	bl	8017f28 <FillReg>
   	FillReg(x	,y	 ,2	  ,37 ,0);
 8018894:	2300      	movs	r3, #0
 8018896:	9300      	str	r3, [sp, #0]
 8018898:	2325      	movs	r3, #37	; 0x25
 801889a:	2202      	movs	r2, #2
 801889c:	68b9      	ldr	r1, [r7, #8]
 801889e:	68f8      	ldr	r0, [r7, #12]
 80188a0:	f7ff fb42 	bl	8017f28 <FillReg>
   	FillReg(x+wx,y	 ,2	  ,37 ,0);
 80188a4:	8a7a      	ldrh	r2, [r7, #18]
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	18d0      	adds	r0, r2, r3
 80188aa:	2300      	movs	r3, #0
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	2325      	movs	r3, #37	; 0x25
 80188b0:	2202      	movs	r2, #2
 80188b2:	68b9      	ldr	r1, [r7, #8]
 80188b4:	f7ff fb38 	bl	8017f28 <FillReg>
   	FillReg(x	,y+35,wx  ,2  ,0);
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80188be:	8a7a      	ldrh	r2, [r7, #18]
 80188c0:	2300      	movs	r3, #0
 80188c2:	9300      	str	r3, [sp, #0]
 80188c4:	2302      	movs	r3, #2
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f7ff fb2e 	bl	8017f28 <FillReg>
}
 80188cc:	bf00      	nop
 80188ce:	371c      	adds	r7, #28
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd90      	pop	{r4, r7, pc}
 80188d4:	48000800 	.word	0x48000800

080188d8 <BOW_Activo>:
    ) return 1;
    return 0;
}

unsigned char  BOW_Activo(unsigned int x,unsigned int y,unsigned char LargoBoton)
{
 80188d8:	b480      	push	{r7}
 80188da:	b085      	sub	sp, #20
 80188dc:	af00      	add	r7, sp, #0
 80188de:	60f8      	str	r0, [r7, #12]
 80188e0:	60b9      	str	r1, [r7, #8]
 80188e2:	4613      	mov	r3, r2
 80188e4:	71fb      	strb	r3, [r7, #7]
    if
    (
      (m_XPanel>x && m_XPanel<(x+7+14*LargoBoton ) )
 80188e6:	4b13      	ldr	r3, [pc, #76]	; (8018934 <BOW_Activo+0x5c>)
 80188e8:	681b      	ldr	r3, [r3, #0]
    (
 80188ea:	68fa      	ldr	r2, [r7, #12]
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d21a      	bcs.n	8018926 <BOW_Activo+0x4e>
      (m_XPanel>x && m_XPanel<(x+7+14*LargoBoton ) )
 80188f0:	79fa      	ldrb	r2, [r7, #7]
 80188f2:	4613      	mov	r3, r2
 80188f4:	00db      	lsls	r3, r3, #3
 80188f6:	1a9b      	subs	r3, r3, r2
 80188f8:	005b      	lsls	r3, r3, #1
 80188fa:	461a      	mov	r2, r3
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	4413      	add	r3, r2
 8018900:	1dda      	adds	r2, r3, #7
 8018902:	4b0c      	ldr	r3, [pc, #48]	; (8018934 <BOW_Activo+0x5c>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	429a      	cmp	r2, r3
 8018908:	d90d      	bls.n	8018926 <BOW_Activo+0x4e>
      &&
      (m_YPanel>y && m_YPanel<(y+30 ) )
 801890a:	4b0b      	ldr	r3, [pc, #44]	; (8018938 <BOW_Activo+0x60>)
 801890c:	681b      	ldr	r3, [r3, #0]
      &&
 801890e:	68ba      	ldr	r2, [r7, #8]
 8018910:	429a      	cmp	r2, r3
 8018912:	d208      	bcs.n	8018926 <BOW_Activo+0x4e>
      (m_YPanel>y && m_YPanel<(y+30 ) )
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	f103 021e 	add.w	r2, r3, #30
 801891a:	4b07      	ldr	r3, [pc, #28]	; (8018938 <BOW_Activo+0x60>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	429a      	cmp	r2, r3
 8018920:	d901      	bls.n	8018926 <BOW_Activo+0x4e>
    ) return 1;
 8018922:	2301      	movs	r3, #1
 8018924:	e000      	b.n	8018928 <BOW_Activo+0x50>
    else return 0;
 8018926:	2300      	movs	r3, #0
}
 8018928:	4618      	mov	r0, r3
 801892a:	3714      	adds	r7, #20
 801892c:	46bd      	mov	sp, r7
 801892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018932:	4770      	bx	lr
 8018934:	20009d48 	.word	0x20009d48
 8018938:	20009d4c 	.word	0x20009d4c

0801893c <BOT_Activo>:
{
	return BOW_Activo(col*14,38*fil,LargoBoton*14);
}

unsigned char  BOT_Activo(unsigned char* ID,unsigned int x,unsigned int y)
{
 801893c:	b480      	push	{r7}
 801893e:	b087      	sub	sp, #28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	607a      	str	r2, [r7, #4]
	int	AnchoBMP=(unsigned int)ID[0]*256+(unsigned int)ID[1];
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	781b      	ldrb	r3, [r3, #0]
 801894c:	021b      	lsls	r3, r3, #8
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	3201      	adds	r2, #1
 8018952:	7812      	ldrb	r2, [r2, #0]
 8018954:	4413      	add	r3, r2
 8018956:	617b      	str	r3, [r7, #20]
	int AltoBMP=(unsigned int)ID[2]*256+(unsigned int)ID[3];
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	3302      	adds	r3, #2
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	021b      	lsls	r3, r3, #8
 8018960:	68fa      	ldr	r2, [r7, #12]
 8018962:	3203      	adds	r2, #3
 8018964:	7812      	ldrb	r2, [r2, #0]
 8018966:	4413      	add	r3, r2
 8018968:	613b      	str	r3, [r7, #16]
    if
    (
      (m_XPanel>x && m_XPanel<(x+AnchoBMP) )
 801896a:	4b10      	ldr	r3, [pc, #64]	; (80189ac <BOT_Activo+0x70>)
 801896c:	681b      	ldr	r3, [r3, #0]
    (
 801896e:	68ba      	ldr	r2, [r7, #8]
 8018970:	429a      	cmp	r2, r3
 8018972:	d214      	bcs.n	801899e <BOT_Activo+0x62>
      (m_XPanel>x && m_XPanel<(x+AnchoBMP) )
 8018974:	697a      	ldr	r2, [r7, #20]
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	441a      	add	r2, r3
 801897a:	4b0c      	ldr	r3, [pc, #48]	; (80189ac <BOT_Activo+0x70>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	429a      	cmp	r2, r3
 8018980:	d90d      	bls.n	801899e <BOT_Activo+0x62>
      &&
      (m_YPanel>y && m_YPanel<(y+AltoBMP) )
 8018982:	4b0b      	ldr	r3, [pc, #44]	; (80189b0 <BOT_Activo+0x74>)
 8018984:	681b      	ldr	r3, [r3, #0]
      &&
 8018986:	687a      	ldr	r2, [r7, #4]
 8018988:	429a      	cmp	r2, r3
 801898a:	d208      	bcs.n	801899e <BOT_Activo+0x62>
      (m_YPanel>y && m_YPanel<(y+AltoBMP) )
 801898c:	693a      	ldr	r2, [r7, #16]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	441a      	add	r2, r3
 8018992:	4b07      	ldr	r3, [pc, #28]	; (80189b0 <BOT_Activo+0x74>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	429a      	cmp	r2, r3
 8018998:	d901      	bls.n	801899e <BOT_Activo+0x62>
    ) return 1;
 801899a:	2301      	movs	r3, #1
 801899c:	e000      	b.n	80189a0 <BOT_Activo+0x64>
    else return 0;
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	371c      	adds	r7, #28
 80189a4:	46bd      	mov	sp, r7
 80189a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189aa:	4770      	bx	lr
 80189ac:	20009d48 	.word	0x20009d48
 80189b0:	20009d4c 	.word	0x20009d4c

080189b4 <LeerFlashAbs>:

unsigned char LeerFlashAbs(unsigned long Pos);
unsigned char LeerFlashRel();

unsigned char LeerFlashAbs(unsigned long Pos)
{
 80189b4:	b480      	push	{r7}
 80189b6:	b083      	sub	sp, #12
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
	m_PosFlashST=Pos;
 80189bc:	4a09      	ldr	r2, [pc, #36]	; (80189e4 <LeerFlashAbs+0x30>)
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6013      	str	r3, [r2, #0]
	m_PosFlashST++;
 80189c2:	4b08      	ldr	r3, [pc, #32]	; (80189e4 <LeerFlashAbs+0x30>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	3301      	adds	r3, #1
 80189c8:	4a06      	ldr	r2, [pc, #24]	; (80189e4 <LeerFlashAbs+0x30>)
 80189ca:	6013      	str	r3, [r2, #0]
	return m_Memoria[Pos];
 80189cc:	4b06      	ldr	r3, [pc, #24]	; (80189e8 <LeerFlashAbs+0x34>)
 80189ce:	681a      	ldr	r2, [r3, #0]
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	4413      	add	r3, r2
 80189d4:	781b      	ldrb	r3, [r3, #0]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	370c      	adds	r7, #12
 80189da:	46bd      	mov	sp, r7
 80189dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e0:	4770      	bx	lr
 80189e2:	bf00      	nop
 80189e4:	20009d44 	.word	0x20009d44
 80189e8:	20009a0c 	.word	0x20009a0c

080189ec <LeerFlashRel>:

unsigned char LeerFlashRel()
{
 80189ec:	b480      	push	{r7}
 80189ee:	b083      	sub	sp, #12
 80189f0:	af00      	add	r7, sp, #0
	unsigned char a=m_Memoria[m_PosFlashST];
 80189f2:	4b09      	ldr	r3, [pc, #36]	; (8018a18 <LeerFlashRel+0x2c>)
 80189f4:	681a      	ldr	r2, [r3, #0]
 80189f6:	4b09      	ldr	r3, [pc, #36]	; (8018a1c <LeerFlashRel+0x30>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	4413      	add	r3, r2
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	71fb      	strb	r3, [r7, #7]
	m_PosFlashST++;
 8018a00:	4b06      	ldr	r3, [pc, #24]	; (8018a1c <LeerFlashRel+0x30>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	3301      	adds	r3, #1
 8018a06:	4a05      	ldr	r2, [pc, #20]	; (8018a1c <LeerFlashRel+0x30>)
 8018a08:	6013      	str	r3, [r2, #0]
	return a;
 8018a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	370c      	adds	r7, #12
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr
 8018a18:	20009a0c 	.word	0x20009a0c
 8018a1c:	20009d44 	.word	0x20009d44

08018a20 <MenuSet>:
{

}

void MenuSet(unsigned char MenuNro,char* Buffer,unsigned int PantallaProx)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b087      	sub	sp, #28
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	4603      	mov	r3, r0
 8018a28:	60b9      	str	r1, [r7, #8]
 8018a2a:	607a      	str	r2, [r7, #4]
 8018a2c:	73fb      	strb	r3, [r7, #15]
	int i;

	if(MenuNro==0) m_MenuMax=0,m_PantallaExt=0;
 8018a2e:	7bfb      	ldrb	r3, [r7, #15]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d105      	bne.n	8018a40 <MenuSet+0x20>
 8018a34:	4b25      	ldr	r3, [pc, #148]	; (8018acc <MenuSet+0xac>)
 8018a36:	2200      	movs	r2, #0
 8018a38:	601a      	str	r2, [r3, #0]
 8018a3a:	4b25      	ldr	r3, [pc, #148]	; (8018ad0 <MenuSet+0xb0>)
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	601a      	str	r2, [r3, #0]
	for(i=0;Buffer[i]!=0 && i<20;i++) m_MenuStr[MenuNro][i]=Buffer[i];
 8018a40:	2300      	movs	r3, #0
 8018a42:	617b      	str	r3, [r7, #20]
 8018a44:	e012      	b.n	8018a6c <MenuSet+0x4c>
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	68ba      	ldr	r2, [r7, #8]
 8018a4a:	4413      	add	r3, r2
 8018a4c:	7bfa      	ldrb	r2, [r7, #15]
 8018a4e:	7818      	ldrb	r0, [r3, #0]
 8018a50:	4920      	ldr	r1, [pc, #128]	; (8018ad4 <MenuSet+0xb4>)
 8018a52:	4613      	mov	r3, r2
 8018a54:	009b      	lsls	r3, r3, #2
 8018a56:	4413      	add	r3, r2
 8018a58:	009a      	lsls	r2, r3, #2
 8018a5a:	4413      	add	r3, r2
 8018a5c:	18ca      	adds	r2, r1, r3
 8018a5e:	697b      	ldr	r3, [r7, #20]
 8018a60:	4413      	add	r3, r2
 8018a62:	4602      	mov	r2, r0
 8018a64:	701a      	strb	r2, [r3, #0]
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	3301      	adds	r3, #1
 8018a6a:	617b      	str	r3, [r7, #20]
 8018a6c:	697b      	ldr	r3, [r7, #20]
 8018a6e:	68ba      	ldr	r2, [r7, #8]
 8018a70:	4413      	add	r3, r2
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d012      	beq.n	8018a9e <MenuSet+0x7e>
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	2b13      	cmp	r3, #19
 8018a7c:	dde3      	ble.n	8018a46 <MenuSet+0x26>
	for(;i<20;i++) m_MenuStr[MenuNro][i]=' ';
 8018a7e:	e00e      	b.n	8018a9e <MenuSet+0x7e>
 8018a80:	7bfa      	ldrb	r2, [r7, #15]
 8018a82:	4914      	ldr	r1, [pc, #80]	; (8018ad4 <MenuSet+0xb4>)
 8018a84:	4613      	mov	r3, r2
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	4413      	add	r3, r2
 8018a8a:	009a      	lsls	r2, r3, #2
 8018a8c:	4413      	add	r3, r2
 8018a8e:	18ca      	adds	r2, r1, r3
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	4413      	add	r3, r2
 8018a94:	2220      	movs	r2, #32
 8018a96:	701a      	strb	r2, [r3, #0]
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	3301      	adds	r3, #1
 8018a9c:	617b      	str	r3, [r7, #20]
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	2b13      	cmp	r3, #19
 8018aa2:	dded      	ble.n	8018a80 <MenuSet+0x60>
	if(MenuNro>m_MenuMax) m_MenuMax=MenuNro;
 8018aa4:	7bfa      	ldrb	r2, [r7, #15]
 8018aa6:	4b09      	ldr	r3, [pc, #36]	; (8018acc <MenuSet+0xac>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d902      	bls.n	8018ab4 <MenuSet+0x94>
 8018aae:	7bfb      	ldrb	r3, [r7, #15]
 8018ab0:	4a06      	ldr	r2, [pc, #24]	; (8018acc <MenuSet+0xac>)
 8018ab2:	6013      	str	r3, [r2, #0]
	m_PantallaProx[MenuNro]=PantallaProx;
 8018ab4:	7bfb      	ldrb	r3, [r7, #15]
 8018ab6:	4908      	ldr	r1, [pc, #32]	; (8018ad8 <MenuSet+0xb8>)
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018abe:	bf00      	nop
 8018ac0:	371c      	adds	r7, #28
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop
 8018acc:	20009a50 	.word	0x20009a50
 8018ad0:	20004790 	.word	0x20004790
 8018ad4:	20009a54 	.word	0x20009a54
 8018ad8:	20004794 	.word	0x20004794

08018adc <MenuPrint>:

void MenuPrint()
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b084      	sub	sp, #16
 8018ae0:	af02      	add	r7, sp, #8

	int i;

	for(i=0;(i+m_PantallaExt*6)<=m_MenuMax && i<6;i++)
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	607b      	str	r3, [r7, #4]
 8018ae6:	e01e      	b.n	8018b26 <MenuPrint+0x4a>
		BOW(5,35+33*i,0,22,m_MenuStr[i+m_PantallaExt*6]);
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	4613      	mov	r3, r2
 8018aec:	015b      	lsls	r3, r3, #5
 8018aee:	4413      	add	r3, r2
 8018af0:	3323      	adds	r3, #35	; 0x23
 8018af2:	4619      	mov	r1, r3
 8018af4:	4b1a      	ldr	r3, [pc, #104]	; (8018b60 <MenuPrint+0x84>)
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	4613      	mov	r3, r2
 8018afa:	005b      	lsls	r3, r3, #1
 8018afc:	4413      	add	r3, r2
 8018afe:	005b      	lsls	r3, r3, #1
 8018b00:	461a      	mov	r2, r3
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	441a      	add	r2, r3
 8018b06:	4613      	mov	r3, r2
 8018b08:	009b      	lsls	r3, r3, #2
 8018b0a:	4413      	add	r3, r2
 8018b0c:	009a      	lsls	r2, r3, #2
 8018b0e:	4413      	add	r3, r2
 8018b10:	4a14      	ldr	r2, [pc, #80]	; (8018b64 <MenuPrint+0x88>)
 8018b12:	4413      	add	r3, r2
 8018b14:	9300      	str	r3, [sp, #0]
 8018b16:	2316      	movs	r3, #22
 8018b18:	2200      	movs	r2, #0
 8018b1a:	2005      	movs	r0, #5
 8018b1c:	f7fe fc3e 	bl	801739c <BOW>
	for(i=0;(i+m_PantallaExt*6)<=m_MenuMax && i<6;i++)
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	3301      	adds	r3, #1
 8018b24:	607b      	str	r3, [r7, #4]
 8018b26:	4b0e      	ldr	r3, [pc, #56]	; (8018b60 <MenuPrint+0x84>)
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	005b      	lsls	r3, r3, #1
 8018b32:	461a      	mov	r2, r3
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	441a      	add	r2, r3
 8018b38:	4b0b      	ldr	r3, [pc, #44]	; (8018b68 <MenuPrint+0x8c>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	d802      	bhi.n	8018b46 <MenuPrint+0x6a>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	2b05      	cmp	r3, #5
 8018b44:	ddd0      	ble.n	8018ae8 <MenuPrint+0xc>

	//BOW(5,202,0,7,"SUBIR");
   	BOW(5,202,0,22,"VOLVER");
 8018b46:	4b09      	ldr	r3, [pc, #36]	; (8018b6c <MenuPrint+0x90>)
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	2316      	movs	r3, #22
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	21ca      	movs	r1, #202	; 0xca
 8018b50:	2005      	movs	r0, #5
 8018b52:	f7fe fc23 	bl	801739c <BOW>
   	//BOW(215,202,0,7,"BAJAR");
}
 8018b56:	bf00      	nop
 8018b58:	3708      	adds	r7, #8
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	20004790 	.word	0x20004790
 8018b64:	20009a54 	.word	0x20009a54
 8018b68:	20009a50 	.word	0x20009a50
 8018b6c:	0801b9cc 	.word	0x0801b9cc

08018b70 <MenuAtencion>:

void MenuAtencion(void)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b084      	sub	sp, #16
 8018b74:	af02      	add	r7, sp, #8
	for(int i=0;i<6 && (i+m_PantallaExt*6)<=m_MenuMax;i++)
 8018b76:	2300      	movs	r3, #0
 8018b78:	607b      	str	r3, [r7, #4]
 8018b7a:	e039      	b.n	8018bf0 <MenuAtencion+0x80>
	{
		if(BOW_Activo(6,35+33*i,22) )
 8018b7c:	687a      	ldr	r2, [r7, #4]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	015b      	lsls	r3, r3, #5
 8018b82:	4413      	add	r3, r2
 8018b84:	3323      	adds	r3, #35	; 0x23
 8018b86:	2216      	movs	r2, #22
 8018b88:	4619      	mov	r1, r3
 8018b8a:	2006      	movs	r0, #6
 8018b8c:	f7ff fea4 	bl	80188d8 <BOW_Activo>
 8018b90:	4603      	mov	r3, r0
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d029      	beq.n	8018bea <MenuAtencion+0x7a>
		{
			BOW(5,35+33*i,2,22,m_MenuStr[6*m_PantallaExt+i]);
 8018b96:	687a      	ldr	r2, [r7, #4]
 8018b98:	4613      	mov	r3, r2
 8018b9a:	015b      	lsls	r3, r3, #5
 8018b9c:	4413      	add	r3, r2
 8018b9e:	3323      	adds	r3, #35	; 0x23
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	4b27      	ldr	r3, [pc, #156]	; (8018c40 <MenuAtencion+0xd0>)
 8018ba4:	681a      	ldr	r2, [r3, #0]
 8018ba6:	4613      	mov	r3, r2
 8018ba8:	005b      	lsls	r3, r3, #1
 8018baa:	4413      	add	r3, r2
 8018bac:	005b      	lsls	r3, r3, #1
 8018bae:	461a      	mov	r2, r3
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	441a      	add	r2, r3
 8018bb4:	4613      	mov	r3, r2
 8018bb6:	009b      	lsls	r3, r3, #2
 8018bb8:	4413      	add	r3, r2
 8018bba:	009a      	lsls	r2, r3, #2
 8018bbc:	4413      	add	r3, r2
 8018bbe:	4a21      	ldr	r2, [pc, #132]	; (8018c44 <MenuAtencion+0xd4>)
 8018bc0:	4413      	add	r3, r2
 8018bc2:	9300      	str	r3, [sp, #0]
 8018bc4:	2316      	movs	r3, #22
 8018bc6:	2202      	movs	r2, #2
 8018bc8:	2005      	movs	r0, #5
 8018bca:	f7fe fbe7 	bl	801739c <BOW>
			m_Pantalla=m_PantallaProx[6*m_PantallaExt+i];
 8018bce:	4b1c      	ldr	r3, [pc, #112]	; (8018c40 <MenuAtencion+0xd0>)
 8018bd0:	681a      	ldr	r2, [r3, #0]
 8018bd2:	4613      	mov	r3, r2
 8018bd4:	005b      	lsls	r3, r3, #1
 8018bd6:	4413      	add	r3, r2
 8018bd8:	005b      	lsls	r3, r3, #1
 8018bda:	461a      	mov	r2, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	4413      	add	r3, r2
 8018be0:	4a19      	ldr	r2, [pc, #100]	; (8018c48 <MenuAtencion+0xd8>)
 8018be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018be6:	4a19      	ldr	r2, [pc, #100]	; (8018c4c <MenuAtencion+0xdc>)
 8018be8:	6013      	str	r3, [r2, #0]
	for(int i=0;i<6 && (i+m_PantallaExt*6)<=m_MenuMax;i++)
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	3301      	adds	r3, #1
 8018bee:	607b      	str	r3, [r7, #4]
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	2b05      	cmp	r3, #5
 8018bf4:	dc0c      	bgt.n	8018c10 <MenuAtencion+0xa0>
 8018bf6:	4b12      	ldr	r3, [pc, #72]	; (8018c40 <MenuAtencion+0xd0>)
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	4613      	mov	r3, r2
 8018bfc:	005b      	lsls	r3, r3, #1
 8018bfe:	4413      	add	r3, r2
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	461a      	mov	r2, r3
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	441a      	add	r2, r3
 8018c08:	4b11      	ldr	r3, [pc, #68]	; (8018c50 <MenuAtencion+0xe0>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d9b5      	bls.n	8018b7c <MenuAtencion+0xc>
	{
		if(m_PantallaExt>0) m_PantallaExt--;
		MenuPrint();
		BOW(5,202,2,7,"SUBIR");
	}*/
	if(BOW_Activo(5,202,22) )
 8018c10:	2216      	movs	r2, #22
 8018c12:	21ca      	movs	r1, #202	; 0xca
 8018c14:	2005      	movs	r0, #5
 8018c16:	f7ff fe5f 	bl	80188d8 <BOW_Activo>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d00a      	beq.n	8018c36 <MenuAtencion+0xc6>
	{
		BOW(5,202,2,22,"VOLVER");
 8018c20:	4b0c      	ldr	r3, [pc, #48]	; (8018c54 <MenuAtencion+0xe4>)
 8018c22:	9300      	str	r3, [sp, #0]
 8018c24:	2316      	movs	r3, #22
 8018c26:	2202      	movs	r2, #2
 8018c28:	21ca      	movs	r1, #202	; 0xca
 8018c2a:	2005      	movs	r0, #5
 8018c2c:	f7fe fbb6 	bl	801739c <BOW>
		m_Pantalla=MENU_PRINCIPAL;
 8018c30:	4b06      	ldr	r3, [pc, #24]	; (8018c4c <MenuAtencion+0xdc>)
 8018c32:	2204      	movs	r2, #4
 8018c34:	601a      	str	r2, [r3, #0]
		if(m_PantallaExt < m_MenuMax/6) m_PantallaExt++;
		MenuPrint();
		BOW(215,202,2,7,"BAJAR");
	}
	*/
}
 8018c36:	bf00      	nop
 8018c38:	3708      	adds	r7, #8
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	20004790 	.word	0x20004790
 8018c44:	20009a54 	.word	0x20009a54
 8018c48:	20004794 	.word	0x20004794
 8018c4c:	2000478c 	.word	0x2000478c
 8018c50:	20009a50 	.word	0x20009a50
 8018c54:	0801b9cc 	.word	0x0801b9cc

08018c58 <XPT2046_TouchGetCoordinates>:
#define TP_READ_Y 0xD0

void XPT2046_TouchGetCoordinates();

void XPT2046_TouchGetCoordinates()
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b092      	sub	sp, #72	; 0x48
 8018c5c:	af02      	add	r7, sp, #8
	uint8_t calibrar=0;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    static const uint8_t cmd_read_x[] = { TP_READ_X };
    static const uint8_t cmd_read_y[] = { TP_READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    MODIFY_REG(hspi3.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256);
 8018c64:	4b97      	ldr	r3, [pc, #604]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	681a      	ldr	r2, [r3, #0]
 8018c6a:	4b96      	ldr	r3, [pc, #600]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8018c72:	601a      	str	r2, [r3, #0]

    char str[30];

    SD_CS_OFF;
 8018c74:	2201      	movs	r2, #1
 8018c76:	2108      	movs	r1, #8
 8018c78:	4893      	ldr	r0, [pc, #588]	; (8018ec8 <XPT2046_TouchGetCoordinates+0x270>)
 8018c7a:	f7ee f809 	bl	8006c90 <HAL_GPIO_WritePin>
   	TFT_CS_OFF;
 8018c7e:	2201      	movs	r2, #1
 8018c80:	2180      	movs	r1, #128	; 0x80
 8018c82:	4891      	ldr	r0, [pc, #580]	; (8018ec8 <XPT2046_TouchGetCoordinates+0x270>)
 8018c84:	f7ee f804 	bl	8006c90 <HAL_GPIO_WritePin>
   	TP_CS_ON;
 8018c88:	2200      	movs	r2, #0
 8018c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018c8e:	488f      	ldr	r0, [pc, #572]	; (8018ecc <XPT2046_TouchGetCoordinates+0x274>)
 8018c90:	f7ed fffe 	bl	8006c90 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8018c94:	2300      	movs	r3, #0
 8018c96:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t avg_y = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t nsamples = 0;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for(uint8_t i = 0; i < 16; i++)
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8018ca8:	e041      	b.n	8018d2e <XPT2046_TouchGetCoordinates+0xd6>
    {
        if(HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin)!=0  )
 8018caa:	2102      	movs	r1, #2
 8018cac:	4887      	ldr	r0, [pc, #540]	; (8018ecc <XPT2046_TouchGetCoordinates+0x274>)
 8018cae:	f7ed ffd7 	bl	8006c60 <HAL_GPIO_ReadPin>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d13f      	bne.n	8018d38 <XPT2046_TouchGetCoordinates+0xe0>
            break;

        nsamples++;
 8018cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018cbc:	3301      	adds	r3, #1
 8018cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8018cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8018cc6:	2201      	movs	r2, #1
 8018cc8:	4981      	ldr	r1, [pc, #516]	; (8018ed0 <XPT2046_TouchGetCoordinates+0x278>)
 8018cca:	487e      	ldr	r0, [pc, #504]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018ccc:	f7f1 fa29 	bl	800a122 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8018cd0:	f107 0208 	add.w	r2, r7, #8
 8018cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd8:	9300      	str	r3, [sp, #0]
 8018cda:	2302      	movs	r3, #2
 8018cdc:	497d      	ldr	r1, [pc, #500]	; (8018ed4 <XPT2046_TouchGetCoordinates+0x27c>)
 8018cde:	4879      	ldr	r0, [pc, #484]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018ce0:	f7f1 fb94 	bl	800a40c <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8018ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce8:	2201      	movs	r2, #1
 8018cea:	497b      	ldr	r1, [pc, #492]	; (8018ed8 <XPT2046_TouchGetCoordinates+0x280>)
 8018cec:	4875      	ldr	r0, [pc, #468]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018cee:	f7f1 fa18 	bl	800a122 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8018cf2:	1d3a      	adds	r2, r7, #4
 8018cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8018cf8:	9300      	str	r3, [sp, #0]
 8018cfa:	2302      	movs	r3, #2
 8018cfc:	4975      	ldr	r1, [pc, #468]	; (8018ed4 <XPT2046_TouchGetCoordinates+0x27c>)
 8018cfe:	4871      	ldr	r0, [pc, #452]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018d00:	f7f1 fb84 	bl	800a40c <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8018d04:	793b      	ldrb	r3, [r7, #4]
 8018d06:	021b      	lsls	r3, r3, #8
 8018d08:	797a      	ldrb	r2, [r7, #5]
 8018d0a:	4313      	orrs	r3, r2
 8018d0c:	461a      	mov	r2, r3
 8018d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d10:	4413      	add	r3, r2
 8018d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8018d14:	7a3b      	ldrb	r3, [r7, #8]
 8018d16:	021b      	lsls	r3, r3, #8
 8018d18:	7a7a      	ldrb	r2, [r7, #9]
 8018d1a:	4313      	orrs	r3, r2
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d20:	4413      	add	r3, r2
 8018d22:	63bb      	str	r3, [r7, #56]	; 0x38
    for(uint8_t i = 0; i < 16; i++)
 8018d24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8018d28:	3301      	adds	r3, #1
 8018d2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8018d2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8018d32:	2b0f      	cmp	r3, #15
 8018d34:	d9b9      	bls.n	8018caa <XPT2046_TouchGetCoordinates+0x52>
 8018d36:	e000      	b.n	8018d3a <XPT2046_TouchGetCoordinates+0xe2>
            break;
 8018d38:	bf00      	nop
    }

   	TP_CS_OFF;
 8018d3a:	2201      	movs	r2, #1
 8018d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018d40:	4862      	ldr	r0, [pc, #392]	; (8018ecc <XPT2046_TouchGetCoordinates+0x274>)
 8018d42:	f7ed ffa5 	bl	8006c90 <HAL_GPIO_WritePin>
   	MODIFY_REG(hspi3.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_2);
 8018d46:	4b5f      	ldr	r3, [pc, #380]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	4b5d      	ldr	r3, [pc, #372]	; (8018ec4 <XPT2046_TouchGetCoordinates+0x26c>)
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8018d54:	601a      	str	r2, [r3, #0]

    if(nsamples==16)
 8018d56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018d5a:	2b10      	cmp	r3, #16
 8018d5c:	f040 80a7 	bne.w	8018eae <XPT2046_TouchGetCoordinates+0x256>
    {
    	uint32_t raw_x = (avg_x / 16);
 8018d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d62:	091b      	lsrs	r3, r3, #4
 8018d64:	633b      	str	r3, [r7, #48]	; 0x30
    	uint32_t raw_y = (avg_y / 16);
 8018d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d68:	091b      	lsrs	r3, r3, #4
 8018d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    	if(calibrar==1)
 8018d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d133      	bne.n	8018ddc <XPT2046_TouchGetCoordinates+0x184>
    	{
    		TFT_CS_ON;
 8018d74:	2200      	movs	r2, #0
 8018d76:	2180      	movs	r1, #128	; 0x80
 8018d78:	4853      	ldr	r0, [pc, #332]	; (8018ec8 <XPT2046_TouchGetCoordinates+0x270>)
 8018d7a:	f7ed ff89 	bl	8006c90 <HAL_GPIO_WritePin>
    		FillReg(0,0,320,240,0xFC00);
 8018d7e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8018d82:	9300      	str	r3, [sp, #0]
 8018d84:	23f0      	movs	r3, #240	; 0xf0
 8018d86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	f7ff f8cb 	bl	8017f28 <FillReg>
    		sprintf(str,"CRUDO");
 8018d92:	f107 030c 	add.w	r3, r7, #12
 8018d96:	4951      	ldr	r1, [pc, #324]	; (8018edc <XPT2046_TouchGetCoordinates+0x284>)
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f000 fd4d 	bl	8019838 <siprintf>
    		ILI9341_Draw_String(10,10, 0, 0xFC00,str,4);
 8018d9e:	2304      	movs	r3, #4
 8018da0:	9301      	str	r3, [sp, #4]
 8018da2:	f107 030c 	add.w	r3, r7, #12
 8018da6:	9300      	str	r3, [sp, #0]
 8018da8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8018dac:	2200      	movs	r2, #0
 8018dae:	210a      	movs	r1, #10
 8018db0:	200a      	movs	r0, #10
 8018db2:	f7f8 f93d 	bl	8011030 <ILI9341_Draw_String>
    		sprintf(str,"x=%d y=%d",(int)raw_x,(int)raw_y);
 8018db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dba:	f107 000c 	add.w	r0, r7, #12
 8018dbe:	4948      	ldr	r1, [pc, #288]	; (8018ee0 <XPT2046_TouchGetCoordinates+0x288>)
 8018dc0:	f000 fd3a 	bl	8019838 <siprintf>
    		ILI9341_Draw_String(10,40, 0, 0xFC00,str,4);
 8018dc4:	2304      	movs	r3, #4
 8018dc6:	9301      	str	r3, [sp, #4]
 8018dc8:	f107 030c 	add.w	r3, r7, #12
 8018dcc:	9300      	str	r3, [sp, #0]
 8018dce:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	2128      	movs	r1, #40	; 0x28
 8018dd6:	200a      	movs	r0, #10
 8018dd8:	f7f8 f92a 	bl	8011030 <ILI9341_Draw_String>
    	}
    	if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8018ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018de2:	4293      	cmp	r3, r2
 8018de4:	d802      	bhi.n	8018dec <XPT2046_TouchGetCoordinates+0x194>
 8018de6:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8018dea:	633b      	str	r3, [r7, #48]	; 0x30
    	if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8018dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dee:	f647 02df 	movw	r2, #30943	; 0x78df
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d902      	bls.n	8018dfc <XPT2046_TouchGetCoordinates+0x1a4>
 8018df6:	f647 03df 	movw	r3, #30943	; 0x78df
 8018dfa:	633b      	str	r3, [r7, #48]	; 0x30

    	if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 8018dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dfe:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018e02:	d802      	bhi.n	8018e0a <XPT2046_TouchGetCoordinates+0x1b2>
 8018e04:	f240 63e9 	movw	r3, #1769	; 0x6e9
 8018e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    	if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 8018e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e0c:	f247 62a3 	movw	r2, #30371	; 0x76a3
 8018e10:	4293      	cmp	r3, r2
 8018e12:	d902      	bls.n	8018e1a <XPT2046_TouchGetCoordinates+0x1c2>
 8018e14:	f247 63a3 	movw	r3, #30371	; 0x76a3
 8018e18:	62fb      	str	r3, [r7, #44]	; 0x2c

    	m_XPanel = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 8018e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e1c:	4613      	mov	r3, r2
 8018e1e:	009b      	lsls	r3, r3, #2
 8018e20:	4413      	add	r3, r2
 8018e22:	019b      	lsls	r3, r3, #6
 8018e24:	f5a3 236a 	sub.w	r3, r3, #958464	; 0xea000
 8018e28:	f5a3 63e8 	sub.w	r3, r3, #1856	; 0x740
 8018e2c:	4a2d      	ldr	r2, [pc, #180]	; (8018ee4 <XPT2046_TouchGetCoordinates+0x28c>)
 8018e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8018e32:	0b1b      	lsrs	r3, r3, #12
 8018e34:	4a2c      	ldr	r2, [pc, #176]	; (8018ee8 <XPT2046_TouchGetCoordinates+0x290>)
 8018e36:	6013      	str	r3, [r2, #0]
    	m_YPanel = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8018e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	011b      	lsls	r3, r3, #4
 8018e3e:	1a9b      	subs	r3, r3, r2
 8018e40:	011b      	lsls	r3, r3, #4
 8018e42:	f5a3 23cf 	sub.w	r3, r3, #423936	; 0x67800
 8018e46:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8018e4a:	4a28      	ldr	r2, [pc, #160]	; (8018eec <XPT2046_TouchGetCoordinates+0x294>)
 8018e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8018e50:	0b5b      	lsrs	r3, r3, #13
 8018e52:	4a27      	ldr	r2, [pc, #156]	; (8018ef0 <XPT2046_TouchGetCoordinates+0x298>)
 8018e54:	6013      	str	r3, [r2, #0]

    	if(calibrar==1)
 8018e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e5a:	2b01      	cmp	r3, #1
 8018e5c:	d12d      	bne.n	8018eba <XPT2046_TouchGetCoordinates+0x262>
    	{
    		sprintf(str,"COCIDO");
 8018e5e:	f107 030c 	add.w	r3, r7, #12
 8018e62:	4924      	ldr	r1, [pc, #144]	; (8018ef4 <XPT2046_TouchGetCoordinates+0x29c>)
 8018e64:	4618      	mov	r0, r3
 8018e66:	f000 fce7 	bl	8019838 <siprintf>
    		ILI9341_Draw_String(10,100, 0,0xFC00,str,4);
 8018e6a:	2304      	movs	r3, #4
 8018e6c:	9301      	str	r3, [sp, #4]
 8018e6e:	f107 030c 	add.w	r3, r7, #12
 8018e72:	9300      	str	r3, [sp, #0]
 8018e74:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8018e78:	2200      	movs	r2, #0
 8018e7a:	2164      	movs	r1, #100	; 0x64
 8018e7c:	200a      	movs	r0, #10
 8018e7e:	f7f8 f8d7 	bl	8011030 <ILI9341_Draw_String>
    		sprintf(str,"x=%d y=%d",m_XPanel,m_YPanel);
 8018e82:	4b19      	ldr	r3, [pc, #100]	; (8018ee8 <XPT2046_TouchGetCoordinates+0x290>)
 8018e84:	681a      	ldr	r2, [r3, #0]
 8018e86:	4b1a      	ldr	r3, [pc, #104]	; (8018ef0 <XPT2046_TouchGetCoordinates+0x298>)
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	f107 000c 	add.w	r0, r7, #12
 8018e8e:	4914      	ldr	r1, [pc, #80]	; (8018ee0 <XPT2046_TouchGetCoordinates+0x288>)
 8018e90:	f000 fcd2 	bl	8019838 <siprintf>
    		ILI9341_Draw_String(10,140, 0,0xFC00,str,4);
 8018e94:	2304      	movs	r3, #4
 8018e96:	9301      	str	r3, [sp, #4]
 8018e98:	f107 030c 	add.w	r3, r7, #12
 8018e9c:	9300      	str	r3, [sp, #0]
 8018e9e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	218c      	movs	r1, #140	; 0x8c
 8018ea6:	200a      	movs	r0, #10
 8018ea8:	f7f8 f8c2 	bl	8011030 <ILI9341_Draw_String>
    	}
    }
    else m_XPanel=0,m_YPanel=0;
}
 8018eac:	e005      	b.n	8018eba <XPT2046_TouchGetCoordinates+0x262>
    else m_XPanel=0,m_YPanel=0;
 8018eae:	4b0e      	ldr	r3, [pc, #56]	; (8018ee8 <XPT2046_TouchGetCoordinates+0x290>)
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	601a      	str	r2, [r3, #0]
 8018eb4:	4b0e      	ldr	r3, [pc, #56]	; (8018ef0 <XPT2046_TouchGetCoordinates+0x298>)
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	601a      	str	r2, [r3, #0]
}
 8018eba:	bf00      	nop
 8018ebc:	3740      	adds	r7, #64	; 0x40
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	20008b88 	.word	0x20008b88
 8018ec8:	48000800 	.word	0x48000800
 8018ecc:	48000400 	.word	0x48000400
 8018ed0:	0801d5b4 	.word	0x0801d5b4
 8018ed4:	0801d5b8 	.word	0x0801d5b8
 8018ed8:	0801d5bc 	.word	0x0801d5bc
 8018edc:	0801b9d4 	.word	0x0801b9d4
 8018ee0:	0801b9dc 	.word	0x0801b9dc
 8018ee4:	2586e16b 	.word	0x2586e16b
 8018ee8:	20009d48 	.word	0x20009d48
 8018eec:	495265c9 	.word	0x495265c9
 8018ef0:	20009d4c 	.word	0x20009d4c
 8018ef4:	0801b9e8 	.word	0x0801b9e8

08018ef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018efc:	2200      	movs	r2, #0
 8018efe:	4912      	ldr	r1, [pc, #72]	; (8018f48 <MX_USB_DEVICE_Init+0x50>)
 8018f00:	4812      	ldr	r0, [pc, #72]	; (8018f4c <MX_USB_DEVICE_Init+0x54>)
 8018f02:	f7f8 feb8 	bl	8011c76 <USBD_Init>
 8018f06:	4603      	mov	r3, r0
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d001      	beq.n	8018f10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018f0c:	f7eb f89e 	bl	800404c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018f10:	490f      	ldr	r1, [pc, #60]	; (8018f50 <MX_USB_DEVICE_Init+0x58>)
 8018f12:	480e      	ldr	r0, [pc, #56]	; (8018f4c <MX_USB_DEVICE_Init+0x54>)
 8018f14:	f7f8 feda 	bl	8011ccc <USBD_RegisterClass>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d001      	beq.n	8018f22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018f1e:	f7eb f895 	bl	800404c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018f22:	490c      	ldr	r1, [pc, #48]	; (8018f54 <MX_USB_DEVICE_Init+0x5c>)
 8018f24:	4809      	ldr	r0, [pc, #36]	; (8018f4c <MX_USB_DEVICE_Init+0x54>)
 8018f26:	f7f8 fe37 	bl	8011b98 <USBD_CDC_RegisterInterface>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d001      	beq.n	8018f34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018f30:	f7eb f88c 	bl	800404c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018f34:	4805      	ldr	r0, [pc, #20]	; (8018f4c <MX_USB_DEVICE_Init+0x54>)
 8018f36:	f7f8 fee3 	bl	8011d00 <USBD_Start>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d001      	beq.n	8018f44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018f40:	f7eb f884 	bl	800404c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018f44:	bf00      	nop
 8018f46:	bd80      	pop	{r7, pc}
 8018f48:	20000150 	.word	0x20000150
 8018f4c:	20009d50 	.word	0x20009d50
 8018f50:	2000003c 	.word	0x2000003c
 8018f54:	20000140 	.word	0x20000140

08018f58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */


  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	4905      	ldr	r1, [pc, #20]	; (8018f74 <CDC_Init_FS+0x1c>)
 8018f60:	4805      	ldr	r0, [pc, #20]	; (8018f78 <CDC_Init_FS+0x20>)
 8018f62:	f7f8 fe30 	bl	8011bc6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018f66:	4905      	ldr	r1, [pc, #20]	; (8018f7c <CDC_Init_FS+0x24>)
 8018f68:	4803      	ldr	r0, [pc, #12]	; (8018f78 <CDC_Init_FS+0x20>)
 8018f6a:	f7f8 fe46 	bl	8011bfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018f6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	bd80      	pop	{r7, pc}
 8018f74:	2000a078 	.word	0x2000a078
 8018f78:	20009d50 	.word	0x20009d50
 8018f7c:	2000a014 	.word	0x2000a014

08018f80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018f80:	b480      	push	{r7}
 8018f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018f84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8e:	4770      	bx	lr

08018f90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018f90:	b480      	push	{r7}
 8018f92:	b083      	sub	sp, #12
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	4603      	mov	r3, r0
 8018f98:	6039      	str	r1, [r7, #0]
 8018f9a:	71fb      	strb	r3, [r7, #7]
 8018f9c:	4613      	mov	r3, r2
 8018f9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018fa0:	79fb      	ldrb	r3, [r7, #7]
 8018fa2:	2b23      	cmp	r3, #35	; 0x23
 8018fa4:	d84a      	bhi.n	801903c <CDC_Control_FS+0xac>
 8018fa6:	a201      	add	r2, pc, #4	; (adr r2, 8018fac <CDC_Control_FS+0x1c>)
 8018fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fac:	0801903d 	.word	0x0801903d
 8018fb0:	0801903d 	.word	0x0801903d
 8018fb4:	0801903d 	.word	0x0801903d
 8018fb8:	0801903d 	.word	0x0801903d
 8018fbc:	0801903d 	.word	0x0801903d
 8018fc0:	0801903d 	.word	0x0801903d
 8018fc4:	0801903d 	.word	0x0801903d
 8018fc8:	0801903d 	.word	0x0801903d
 8018fcc:	0801903d 	.word	0x0801903d
 8018fd0:	0801903d 	.word	0x0801903d
 8018fd4:	0801903d 	.word	0x0801903d
 8018fd8:	0801903d 	.word	0x0801903d
 8018fdc:	0801903d 	.word	0x0801903d
 8018fe0:	0801903d 	.word	0x0801903d
 8018fe4:	0801903d 	.word	0x0801903d
 8018fe8:	0801903d 	.word	0x0801903d
 8018fec:	0801903d 	.word	0x0801903d
 8018ff0:	0801903d 	.word	0x0801903d
 8018ff4:	0801903d 	.word	0x0801903d
 8018ff8:	0801903d 	.word	0x0801903d
 8018ffc:	0801903d 	.word	0x0801903d
 8019000:	0801903d 	.word	0x0801903d
 8019004:	0801903d 	.word	0x0801903d
 8019008:	0801903d 	.word	0x0801903d
 801900c:	0801903d 	.word	0x0801903d
 8019010:	0801903d 	.word	0x0801903d
 8019014:	0801903d 	.word	0x0801903d
 8019018:	0801903d 	.word	0x0801903d
 801901c:	0801903d 	.word	0x0801903d
 8019020:	0801903d 	.word	0x0801903d
 8019024:	0801903d 	.word	0x0801903d
 8019028:	0801903d 	.word	0x0801903d
 801902c:	0801903d 	.word	0x0801903d
 8019030:	0801903d 	.word	0x0801903d
 8019034:	0801903d 	.word	0x0801903d
 8019038:	0801903d 	.word	0x0801903d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801903c:	bf00      	nop
  }

  return (USBD_OK);
 801903e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019040:	4618      	mov	r0, r3
 8019042:	370c      	adds	r7, #12
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr

0801904c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	int i;
		for(i=0;i<10;i++)
 8019056:	2300      	movs	r3, #0
 8019058:	60fb      	str	r3, [r7, #12]
 801905a:	e00b      	b.n	8019074 <CDC_Receive_FS+0x28>
		{
			BufferRX[i]=Buf[i]	;
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	687a      	ldr	r2, [r7, #4]
 8019060:	4413      	add	r3, r2
 8019062:	7819      	ldrb	r1, [r3, #0]
 8019064:	4a0c      	ldr	r2, [pc, #48]	; (8019098 <CDC_Receive_FS+0x4c>)
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	4413      	add	r3, r2
 801906a:	460a      	mov	r2, r1
 801906c:	701a      	strb	r2, [r3, #0]
		for(i=0;i<10;i++)
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	3301      	adds	r3, #1
 8019072:	60fb      	str	r3, [r7, #12]
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	2b09      	cmp	r3, #9
 8019078:	ddf0      	ble.n	801905c <CDC_Receive_FS+0x10>
		}
		USBRX=1;
 801907a:	4b08      	ldr	r3, [pc, #32]	; (801909c <CDC_Receive_FS+0x50>)
 801907c:	2201      	movs	r2, #1
 801907e:	601a      	str	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019080:	6879      	ldr	r1, [r7, #4]
 8019082:	4807      	ldr	r0, [pc, #28]	; (80190a0 <CDC_Receive_FS+0x54>)
 8019084:	f7f8 fdb9 	bl	8011bfa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019088:	4805      	ldr	r0, [pc, #20]	; (80190a0 <CDC_Receive_FS+0x54>)
 801908a:	f7f8 fdca 	bl	8011c22 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801908e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019090:	4618      	mov	r0, r3
 8019092:	3710      	adds	r7, #16
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}
 8019098:	20004850 	.word	0x20004850
 801909c:	20008e34 	.word	0x20008e34
 80190a0:	20009d50 	.word	0x20009d50

080190a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80190a4:	b480      	push	{r7}
 80190a6:	b083      	sub	sp, #12
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	4603      	mov	r3, r0
 80190ac:	6039      	str	r1, [r7, #0]
 80190ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	2212      	movs	r2, #18
 80190b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80190b6:	4b03      	ldr	r3, [pc, #12]	; (80190c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	370c      	adds	r7, #12
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr
 80190c4:	2000016c 	.word	0x2000016c

080190c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80190c8:	b480      	push	{r7}
 80190ca:	b083      	sub	sp, #12
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	6039      	str	r1, [r7, #0]
 80190d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	2204      	movs	r2, #4
 80190d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80190da:	4b03      	ldr	r3, [pc, #12]	; (80190e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80190dc:	4618      	mov	r0, r3
 80190de:	370c      	adds	r7, #12
 80190e0:	46bd      	mov	sp, r7
 80190e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e6:	4770      	bx	lr
 80190e8:	20000180 	.word	0x20000180

080190ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	4603      	mov	r3, r0
 80190f4:	6039      	str	r1, [r7, #0]
 80190f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80190f8:	79fb      	ldrb	r3, [r7, #7]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d105      	bne.n	801910a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80190fe:	683a      	ldr	r2, [r7, #0]
 8019100:	4907      	ldr	r1, [pc, #28]	; (8019120 <USBD_FS_ProductStrDescriptor+0x34>)
 8019102:	4808      	ldr	r0, [pc, #32]	; (8019124 <USBD_FS_ProductStrDescriptor+0x38>)
 8019104:	f7f9 fd79 	bl	8012bfa <USBD_GetString>
 8019108:	e004      	b.n	8019114 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801910a:	683a      	ldr	r2, [r7, #0]
 801910c:	4904      	ldr	r1, [pc, #16]	; (8019120 <USBD_FS_ProductStrDescriptor+0x34>)
 801910e:	4805      	ldr	r0, [pc, #20]	; (8019124 <USBD_FS_ProductStrDescriptor+0x38>)
 8019110:	f7f9 fd73 	bl	8012bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 8019114:	4b02      	ldr	r3, [pc, #8]	; (8019120 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019116:	4618      	mov	r0, r3
 8019118:	3708      	adds	r7, #8
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop
 8019120:	2000c080 	.word	0x2000c080
 8019124:	0801b9f0 	.word	0x0801b9f0

08019128 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b082      	sub	sp, #8
 801912c:	af00      	add	r7, sp, #0
 801912e:	4603      	mov	r3, r0
 8019130:	6039      	str	r1, [r7, #0]
 8019132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019134:	683a      	ldr	r2, [r7, #0]
 8019136:	4904      	ldr	r1, [pc, #16]	; (8019148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019138:	4804      	ldr	r0, [pc, #16]	; (801914c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801913a:	f7f9 fd5e 	bl	8012bfa <USBD_GetString>
  return USBD_StrDesc;
 801913e:	4b02      	ldr	r3, [pc, #8]	; (8019148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019140:	4618      	mov	r0, r3
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}
 8019148:	2000c080 	.word	0x2000c080
 801914c:	0801ba08 	.word	0x0801ba08

08019150 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b082      	sub	sp, #8
 8019154:	af00      	add	r7, sp, #0
 8019156:	4603      	mov	r3, r0
 8019158:	6039      	str	r1, [r7, #0]
 801915a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	221a      	movs	r2, #26
 8019160:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019162:	f000 f843 	bl	80191ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019166:	4b02      	ldr	r3, [pc, #8]	; (8019170 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019168:	4618      	mov	r0, r3
 801916a:	3708      	adds	r7, #8
 801916c:	46bd      	mov	sp, r7
 801916e:	bd80      	pop	{r7, pc}
 8019170:	20000184 	.word	0x20000184

08019174 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b082      	sub	sp, #8
 8019178:	af00      	add	r7, sp, #0
 801917a:	4603      	mov	r3, r0
 801917c:	6039      	str	r1, [r7, #0]
 801917e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019180:	79fb      	ldrb	r3, [r7, #7]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d105      	bne.n	8019192 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019186:	683a      	ldr	r2, [r7, #0]
 8019188:	4907      	ldr	r1, [pc, #28]	; (80191a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801918a:	4808      	ldr	r0, [pc, #32]	; (80191ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801918c:	f7f9 fd35 	bl	8012bfa <USBD_GetString>
 8019190:	e004      	b.n	801919c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019192:	683a      	ldr	r2, [r7, #0]
 8019194:	4904      	ldr	r1, [pc, #16]	; (80191a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019196:	4805      	ldr	r0, [pc, #20]	; (80191ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8019198:	f7f9 fd2f 	bl	8012bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 801919c:	4b02      	ldr	r3, [pc, #8]	; (80191a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801919e:	4618      	mov	r0, r3
 80191a0:	3708      	adds	r7, #8
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}
 80191a6:	bf00      	nop
 80191a8:	2000c080 	.word	0x2000c080
 80191ac:	0801ba1c 	.word	0x0801ba1c

080191b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	4603      	mov	r3, r0
 80191b8:	6039      	str	r1, [r7, #0]
 80191ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80191bc:	79fb      	ldrb	r3, [r7, #7]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d105      	bne.n	80191ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80191c2:	683a      	ldr	r2, [r7, #0]
 80191c4:	4907      	ldr	r1, [pc, #28]	; (80191e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80191c6:	4808      	ldr	r0, [pc, #32]	; (80191e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80191c8:	f7f9 fd17 	bl	8012bfa <USBD_GetString>
 80191cc:	e004      	b.n	80191d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80191ce:	683a      	ldr	r2, [r7, #0]
 80191d0:	4904      	ldr	r1, [pc, #16]	; (80191e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80191d2:	4805      	ldr	r0, [pc, #20]	; (80191e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80191d4:	f7f9 fd11 	bl	8012bfa <USBD_GetString>
  }
  return USBD_StrDesc;
 80191d8:	4b02      	ldr	r3, [pc, #8]	; (80191e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3708      	adds	r7, #8
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}
 80191e2:	bf00      	nop
 80191e4:	2000c080 	.word	0x2000c080
 80191e8:	0801ba28 	.word	0x0801ba28

080191ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80191f2:	4b0f      	ldr	r3, [pc, #60]	; (8019230 <Get_SerialNum+0x44>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80191f8:	4b0e      	ldr	r3, [pc, #56]	; (8019234 <Get_SerialNum+0x48>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80191fe:	4b0e      	ldr	r3, [pc, #56]	; (8019238 <Get_SerialNum+0x4c>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019204:	68fa      	ldr	r2, [r7, #12]
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	4413      	add	r3, r2
 801920a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d009      	beq.n	8019226 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019212:	2208      	movs	r2, #8
 8019214:	4909      	ldr	r1, [pc, #36]	; (801923c <Get_SerialNum+0x50>)
 8019216:	68f8      	ldr	r0, [r7, #12]
 8019218:	f000 f814 	bl	8019244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801921c:	2204      	movs	r2, #4
 801921e:	4908      	ldr	r1, [pc, #32]	; (8019240 <Get_SerialNum+0x54>)
 8019220:	68b8      	ldr	r0, [r7, #8]
 8019222:	f000 f80f 	bl	8019244 <IntToUnicode>
  }
}
 8019226:	bf00      	nop
 8019228:	3710      	adds	r7, #16
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	1ffff7ac 	.word	0x1ffff7ac
 8019234:	1ffff7b0 	.word	0x1ffff7b0
 8019238:	1ffff7b4 	.word	0x1ffff7b4
 801923c:	20000186 	.word	0x20000186
 8019240:	20000196 	.word	0x20000196

08019244 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019244:	b480      	push	{r7}
 8019246:	b087      	sub	sp, #28
 8019248:	af00      	add	r7, sp, #0
 801924a:	60f8      	str	r0, [r7, #12]
 801924c:	60b9      	str	r1, [r7, #8]
 801924e:	4613      	mov	r3, r2
 8019250:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019252:	2300      	movs	r3, #0
 8019254:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019256:	2300      	movs	r3, #0
 8019258:	75fb      	strb	r3, [r7, #23]
 801925a:	e027      	b.n	80192ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	0f1b      	lsrs	r3, r3, #28
 8019260:	2b09      	cmp	r3, #9
 8019262:	d80b      	bhi.n	801927c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	0f1b      	lsrs	r3, r3, #28
 8019268:	b2da      	uxtb	r2, r3
 801926a:	7dfb      	ldrb	r3, [r7, #23]
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	4619      	mov	r1, r3
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	440b      	add	r3, r1
 8019274:	3230      	adds	r2, #48	; 0x30
 8019276:	b2d2      	uxtb	r2, r2
 8019278:	701a      	strb	r2, [r3, #0]
 801927a:	e00a      	b.n	8019292 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	0f1b      	lsrs	r3, r3, #28
 8019280:	b2da      	uxtb	r2, r3
 8019282:	7dfb      	ldrb	r3, [r7, #23]
 8019284:	005b      	lsls	r3, r3, #1
 8019286:	4619      	mov	r1, r3
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	440b      	add	r3, r1
 801928c:	3237      	adds	r2, #55	; 0x37
 801928e:	b2d2      	uxtb	r2, r2
 8019290:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	011b      	lsls	r3, r3, #4
 8019296:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019298:	7dfb      	ldrb	r3, [r7, #23]
 801929a:	005b      	lsls	r3, r3, #1
 801929c:	3301      	adds	r3, #1
 801929e:	68ba      	ldr	r2, [r7, #8]
 80192a0:	4413      	add	r3, r2
 80192a2:	2200      	movs	r2, #0
 80192a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80192a6:	7dfb      	ldrb	r3, [r7, #23]
 80192a8:	3301      	adds	r3, #1
 80192aa:	75fb      	strb	r3, [r7, #23]
 80192ac:	7dfa      	ldrb	r2, [r7, #23]
 80192ae:	79fb      	ldrb	r3, [r7, #7]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d3d3      	bcc.n	801925c <IntToUnicode+0x18>
  }
}
 80192b4:	bf00      	nop
 80192b6:	bf00      	nop
 80192b8:	371c      	adds	r7, #28
 80192ba:	46bd      	mov	sp, r7
 80192bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c0:	4770      	bx	lr
	...

080192c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b084      	sub	sp, #16
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4a10      	ldr	r2, [pc, #64]	; (8019314 <HAL_PCD_MspInit+0x50>)
 80192d2:	4293      	cmp	r3, r2
 80192d4:	d119      	bne.n	801930a <HAL_PCD_MspInit+0x46>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80192d6:	4b10      	ldr	r3, [pc, #64]	; (8019318 <HAL_PCD_MspInit+0x54>)
 80192d8:	69db      	ldr	r3, [r3, #28]
 80192da:	4a0f      	ldr	r2, [pc, #60]	; (8019318 <HAL_PCD_MspInit+0x54>)
 80192dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80192e0:	61d3      	str	r3, [r2, #28]
 80192e2:	4b0d      	ldr	r3, [pc, #52]	; (8019318 <HAL_PCD_MspInit+0x54>)
 80192e4:	69db      	ldr	r3, [r3, #28]
 80192e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80192ea:	60fb      	str	r3, [r7, #12]
 80192ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 80192ee:	4b0b      	ldr	r3, [pc, #44]	; (801931c <HAL_PCD_MspInit+0x58>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	4a0a      	ldr	r2, [pc, #40]	; (801931c <HAL_PCD_MspInit+0x58>)
 80192f4:	f043 0320 	orr.w	r3, r3, #32
 80192f8:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80192fa:	2200      	movs	r2, #0
 80192fc:	2100      	movs	r1, #0
 80192fe:	204b      	movs	r0, #75	; 0x4b
 8019300:	f7ec ff2d 	bl	800615e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8019304:	204b      	movs	r0, #75	; 0x4b
 8019306:	f7ec ff46 	bl	8006196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801930a:	bf00      	nop
 801930c:	3710      	adds	r7, #16
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}
 8019312:	bf00      	nop
 8019314:	40005c00 	.word	0x40005c00
 8019318:	40021000 	.word	0x40021000
 801931c:	40010000 	.word	0x40010000

08019320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b082      	sub	sp, #8
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8019334:	4619      	mov	r1, r3
 8019336:	4610      	mov	r0, r2
 8019338:	f7f8 fd2b 	bl	8011d92 <USBD_LL_SetupStage>
}
 801933c:	bf00      	nop
 801933e:	3708      	adds	r7, #8
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
 801934c:	460b      	mov	r3, r1
 801934e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8019356:	78fa      	ldrb	r2, [r7, #3]
 8019358:	6879      	ldr	r1, [r7, #4]
 801935a:	4613      	mov	r3, r2
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	4413      	add	r3, r2
 8019360:	00db      	lsls	r3, r3, #3
 8019362:	440b      	add	r3, r1
 8019364:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	78fb      	ldrb	r3, [r7, #3]
 801936c:	4619      	mov	r1, r3
 801936e:	f7f8 fd5d 	bl	8011e2c <USBD_LL_DataOutStage>
}
 8019372:	bf00      	nop
 8019374:	3708      	adds	r7, #8
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}

0801937a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801937a:	b580      	push	{r7, lr}
 801937c:	b082      	sub	sp, #8
 801937e:	af00      	add	r7, sp, #0
 8019380:	6078      	str	r0, [r7, #4]
 8019382:	460b      	mov	r3, r1
 8019384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801938c:	78fa      	ldrb	r2, [r7, #3]
 801938e:	6879      	ldr	r1, [r7, #4]
 8019390:	4613      	mov	r3, r2
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	4413      	add	r3, r2
 8019396:	00db      	lsls	r3, r3, #3
 8019398:	440b      	add	r3, r1
 801939a:	333c      	adds	r3, #60	; 0x3c
 801939c:	681a      	ldr	r2, [r3, #0]
 801939e:	78fb      	ldrb	r3, [r7, #3]
 80193a0:	4619      	mov	r1, r3
 80193a2:	f7f8 fdb4 	bl	8011f0e <USBD_LL_DataInStage>
}
 80193a6:	bf00      	nop
 80193a8:	3708      	adds	r7, #8
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bd80      	pop	{r7, pc}

080193ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80193ae:	b580      	push	{r7, lr}
 80193b0:	b082      	sub	sp, #8
 80193b2:	af00      	add	r7, sp, #0
 80193b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80193bc:	4618      	mov	r0, r3
 80193be:	f7f8 fec7 	bl	8012150 <USBD_LL_SOF>
}
 80193c2:	bf00      	nop
 80193c4:	3708      	adds	r7, #8
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}

080193ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80193ca:	b580      	push	{r7, lr}
 80193cc:	b084      	sub	sp, #16
 80193ce:	af00      	add	r7, sp, #0
 80193d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80193d2:	2301      	movs	r3, #1
 80193d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	689b      	ldr	r3, [r3, #8]
 80193da:	2b02      	cmp	r3, #2
 80193dc:	d001      	beq.n	80193e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80193de:	f7ea fe35 	bl	800404c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80193e8:	7bfa      	ldrb	r2, [r7, #15]
 80193ea:	4611      	mov	r1, r2
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7f8 fe74 	bl	80120da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7f8 fe2d 	bl	8012058 <USBD_LL_Reset>
}
 80193fe:	bf00      	nop
 8019400:	3710      	adds	r7, #16
 8019402:	46bd      	mov	sp, r7
 8019404:	bd80      	pop	{r7, pc}
	...

08019408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8019416:	4618      	mov	r0, r3
 8019418:	f7f8 fe6f 	bl	80120fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	699b      	ldr	r3, [r3, #24]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d005      	beq.n	8019430 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019424:	4b04      	ldr	r3, [pc, #16]	; (8019438 <HAL_PCD_SuspendCallback+0x30>)
 8019426:	691b      	ldr	r3, [r3, #16]
 8019428:	4a03      	ldr	r2, [pc, #12]	; (8019438 <HAL_PCD_SuspendCallback+0x30>)
 801942a:	f043 0306 	orr.w	r3, r3, #6
 801942e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019430:	bf00      	nop
 8019432:	3708      	adds	r7, #8
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}
 8019438:	e000ed00 	.word	0xe000ed00

0801943c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b082      	sub	sp, #8
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801944a:	4618      	mov	r0, r3
 801944c:	f7f8 fe6a 	bl	8012124 <USBD_LL_Resume>
}
 8019450:	bf00      	nop
 8019452:	3708      	adds	r7, #8
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}

08019458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8019460:	4a29      	ldr	r2, [pc, #164]	; (8019508 <USBD_LL_Init+0xb0>)
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	4a27      	ldr	r2, [pc, #156]	; (8019508 <USBD_LL_Init+0xb0>)
 801946c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8019470:	4b25      	ldr	r3, [pc, #148]	; (8019508 <USBD_LL_Init+0xb0>)
 8019472:	4a26      	ldr	r2, [pc, #152]	; (801950c <USBD_LL_Init+0xb4>)
 8019474:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019476:	4b24      	ldr	r3, [pc, #144]	; (8019508 <USBD_LL_Init+0xb0>)
 8019478:	2208      	movs	r2, #8
 801947a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801947c:	4b22      	ldr	r3, [pc, #136]	; (8019508 <USBD_LL_Init+0xb0>)
 801947e:	2202      	movs	r2, #2
 8019480:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019482:	4b21      	ldr	r3, [pc, #132]	; (8019508 <USBD_LL_Init+0xb0>)
 8019484:	2202      	movs	r2, #2
 8019486:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019488:	4b1f      	ldr	r3, [pc, #124]	; (8019508 <USBD_LL_Init+0xb0>)
 801948a:	2200      	movs	r2, #0
 801948c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801948e:	4b1e      	ldr	r3, [pc, #120]	; (8019508 <USBD_LL_Init+0xb0>)
 8019490:	2200      	movs	r2, #0
 8019492:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019494:	4b1c      	ldr	r3, [pc, #112]	; (8019508 <USBD_LL_Init+0xb0>)
 8019496:	2200      	movs	r2, #0
 8019498:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801949a:	481b      	ldr	r0, [pc, #108]	; (8019508 <USBD_LL_Init+0xb0>)
 801949c:	f7ed fc2a 	bl	8006cf4 <HAL_PCD_Init>
 80194a0:	4603      	mov	r3, r0
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d001      	beq.n	80194aa <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 80194a6:	f7ea fdd1 	bl	800404c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80194b0:	2318      	movs	r3, #24
 80194b2:	2200      	movs	r2, #0
 80194b4:	2100      	movs	r1, #0
 80194b6:	f7ef f89d 	bl	80085f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80194c0:	2358      	movs	r3, #88	; 0x58
 80194c2:	2200      	movs	r2, #0
 80194c4:	2180      	movs	r1, #128	; 0x80
 80194c6:	f7ef f895 	bl	80085f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80194d0:	23c0      	movs	r3, #192	; 0xc0
 80194d2:	2200      	movs	r2, #0
 80194d4:	2181      	movs	r1, #129	; 0x81
 80194d6:	f7ef f88d 	bl	80085f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80194e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80194e4:	2200      	movs	r2, #0
 80194e6:	2101      	movs	r1, #1
 80194e8:	f7ef f884 	bl	80085f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80194f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80194f6:	2200      	movs	r2, #0
 80194f8:	2182      	movs	r1, #130	; 0x82
 80194fa:	f7ef f87b 	bl	80085f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80194fe:	2300      	movs	r3, #0
}
 8019500:	4618      	mov	r0, r3
 8019502:	3708      	adds	r7, #8
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}
 8019508:	2000c280 	.word	0x2000c280
 801950c:	40005c00 	.word	0x40005c00

08019510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b084      	sub	sp, #16
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019518:	2300      	movs	r3, #0
 801951a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801951c:	2300      	movs	r3, #0
 801951e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019526:	4618      	mov	r0, r3
 8019528:	f7ed fcb6 	bl	8006e98 <HAL_PCD_Start>
 801952c:	4603      	mov	r3, r0
 801952e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019530:	7bfb      	ldrb	r3, [r7, #15]
 8019532:	4618      	mov	r0, r3
 8019534:	f000 f954 	bl	80197e0 <USBD_Get_USB_Status>
 8019538:	4603      	mov	r3, r0
 801953a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801953c:	7bbb      	ldrb	r3, [r7, #14]
}
 801953e:	4618      	mov	r0, r3
 8019540:	3710      	adds	r7, #16
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}

08019546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019546:	b580      	push	{r7, lr}
 8019548:	b084      	sub	sp, #16
 801954a:	af00      	add	r7, sp, #0
 801954c:	6078      	str	r0, [r7, #4]
 801954e:	4608      	mov	r0, r1
 8019550:	4611      	mov	r1, r2
 8019552:	461a      	mov	r2, r3
 8019554:	4603      	mov	r3, r0
 8019556:	70fb      	strb	r3, [r7, #3]
 8019558:	460b      	mov	r3, r1
 801955a:	70bb      	strb	r3, [r7, #2]
 801955c:	4613      	mov	r3, r2
 801955e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019560:	2300      	movs	r3, #0
 8019562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019564:	2300      	movs	r3, #0
 8019566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801956e:	78bb      	ldrb	r3, [r7, #2]
 8019570:	883a      	ldrh	r2, [r7, #0]
 8019572:	78f9      	ldrb	r1, [r7, #3]
 8019574:	f7ed fdaf 	bl	80070d6 <HAL_PCD_EP_Open>
 8019578:	4603      	mov	r3, r0
 801957a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801957c:	7bfb      	ldrb	r3, [r7, #15]
 801957e:	4618      	mov	r0, r3
 8019580:	f000 f92e 	bl	80197e0 <USBD_Get_USB_Status>
 8019584:	4603      	mov	r3, r0
 8019586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019588:	7bbb      	ldrb	r3, [r7, #14]
}
 801958a:	4618      	mov	r0, r3
 801958c:	3710      	adds	r7, #16
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}

08019592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019592:	b580      	push	{r7, lr}
 8019594:	b084      	sub	sp, #16
 8019596:	af00      	add	r7, sp, #0
 8019598:	6078      	str	r0, [r7, #4]
 801959a:	460b      	mov	r3, r1
 801959c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801959e:	2300      	movs	r3, #0
 80195a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195a2:	2300      	movs	r3, #0
 80195a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80195ac:	78fa      	ldrb	r2, [r7, #3]
 80195ae:	4611      	mov	r1, r2
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7ed fded 	bl	8007190 <HAL_PCD_EP_Close>
 80195b6:	4603      	mov	r3, r0
 80195b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80195ba:	7bfb      	ldrb	r3, [r7, #15]
 80195bc:	4618      	mov	r0, r3
 80195be:	f000 f90f 	bl	80197e0 <USBD_Get_USB_Status>
 80195c2:	4603      	mov	r3, r0
 80195c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80195c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80195c8:	4618      	mov	r0, r3
 80195ca:	3710      	adds	r7, #16
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bd80      	pop	{r7, pc}

080195d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	460b      	mov	r3, r1
 80195da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80195dc:	2300      	movs	r3, #0
 80195de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195e0:	2300      	movs	r3, #0
 80195e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80195ea:	78fa      	ldrb	r2, [r7, #3]
 80195ec:	4611      	mov	r1, r2
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7ed fe96 	bl	8007320 <HAL_PCD_EP_SetStall>
 80195f4:	4603      	mov	r3, r0
 80195f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80195f8:	7bfb      	ldrb	r3, [r7, #15]
 80195fa:	4618      	mov	r0, r3
 80195fc:	f000 f8f0 	bl	80197e0 <USBD_Get_USB_Status>
 8019600:	4603      	mov	r3, r0
 8019602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019604:	7bbb      	ldrb	r3, [r7, #14]
}
 8019606:	4618      	mov	r0, r3
 8019608:	3710      	adds	r7, #16
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801960e:	b580      	push	{r7, lr}
 8019610:	b084      	sub	sp, #16
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
 8019616:	460b      	mov	r3, r1
 8019618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801961a:	2300      	movs	r3, #0
 801961c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801961e:	2300      	movs	r3, #0
 8019620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019628:	78fa      	ldrb	r2, [r7, #3]
 801962a:	4611      	mov	r1, r2
 801962c:	4618      	mov	r0, r3
 801962e:	f7ed fec9 	bl	80073c4 <HAL_PCD_EP_ClrStall>
 8019632:	4603      	mov	r3, r0
 8019634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019636:	7bfb      	ldrb	r3, [r7, #15]
 8019638:	4618      	mov	r0, r3
 801963a:	f000 f8d1 	bl	80197e0 <USBD_Get_USB_Status>
 801963e:	4603      	mov	r3, r0
 8019640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019642:	7bbb      	ldrb	r3, [r7, #14]
}
 8019644:	4618      	mov	r0, r3
 8019646:	3710      	adds	r7, #16
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}

0801964c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801964c:	b480      	push	{r7}
 801964e:	b085      	sub	sp, #20
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
 8019654:	460b      	mov	r3, r1
 8019656:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801965e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019664:	2b00      	cmp	r3, #0
 8019666:	da0c      	bge.n	8019682 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019668:	78fb      	ldrb	r3, [r7, #3]
 801966a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801966e:	68f9      	ldr	r1, [r7, #12]
 8019670:	1c5a      	adds	r2, r3, #1
 8019672:	4613      	mov	r3, r2
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	4413      	add	r3, r2
 8019678:	00db      	lsls	r3, r3, #3
 801967a:	440b      	add	r3, r1
 801967c:	3302      	adds	r3, #2
 801967e:	781b      	ldrb	r3, [r3, #0]
 8019680:	e00b      	b.n	801969a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019682:	78fb      	ldrb	r3, [r7, #3]
 8019684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019688:	68f9      	ldr	r1, [r7, #12]
 801968a:	4613      	mov	r3, r2
 801968c:	009b      	lsls	r3, r3, #2
 801968e:	4413      	add	r3, r2
 8019690:	00db      	lsls	r3, r3, #3
 8019692:	440b      	add	r3, r1
 8019694:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8019698:	781b      	ldrb	r3, [r3, #0]
  }
}
 801969a:	4618      	mov	r0, r3
 801969c:	3714      	adds	r7, #20
 801969e:	46bd      	mov	sp, r7
 80196a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a4:	4770      	bx	lr

080196a6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80196a6:	b580      	push	{r7, lr}
 80196a8:	b084      	sub	sp, #16
 80196aa:	af00      	add	r7, sp, #0
 80196ac:	6078      	str	r0, [r7, #4]
 80196ae:	460b      	mov	r3, r1
 80196b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196b2:	2300      	movs	r3, #0
 80196b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196b6:	2300      	movs	r3, #0
 80196b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80196c0:	78fa      	ldrb	r2, [r7, #3]
 80196c2:	4611      	mov	r1, r2
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7ed fce1 	bl	800708c <HAL_PCD_SetAddress>
 80196ca:	4603      	mov	r3, r0
 80196cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80196ce:	7bfb      	ldrb	r3, [r7, #15]
 80196d0:	4618      	mov	r0, r3
 80196d2:	f000 f885 	bl	80197e0 <USBD_Get_USB_Status>
 80196d6:	4603      	mov	r3, r0
 80196d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80196da:	7bbb      	ldrb	r3, [r7, #14]
}
 80196dc:	4618      	mov	r0, r3
 80196de:	3710      	adds	r7, #16
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}

080196e4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b086      	sub	sp, #24
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	60f8      	str	r0, [r7, #12]
 80196ec:	607a      	str	r2, [r7, #4]
 80196ee:	461a      	mov	r2, r3
 80196f0:	460b      	mov	r3, r1
 80196f2:	72fb      	strb	r3, [r7, #11]
 80196f4:	4613      	mov	r3, r2
 80196f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196f8:	2300      	movs	r3, #0
 80196fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196fc:	2300      	movs	r3, #0
 80196fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019706:	893b      	ldrh	r3, [r7, #8]
 8019708:	7af9      	ldrb	r1, [r7, #11]
 801970a:	687a      	ldr	r2, [r7, #4]
 801970c:	f7ed fdd1 	bl	80072b2 <HAL_PCD_EP_Transmit>
 8019710:	4603      	mov	r3, r0
 8019712:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019714:	7dfb      	ldrb	r3, [r7, #23]
 8019716:	4618      	mov	r0, r3
 8019718:	f000 f862 	bl	80197e0 <USBD_Get_USB_Status>
 801971c:	4603      	mov	r3, r0
 801971e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019720:	7dbb      	ldrb	r3, [r7, #22]
}
 8019722:	4618      	mov	r0, r3
 8019724:	3718      	adds	r7, #24
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}

0801972a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801972a:	b580      	push	{r7, lr}
 801972c:	b086      	sub	sp, #24
 801972e:	af00      	add	r7, sp, #0
 8019730:	60f8      	str	r0, [r7, #12]
 8019732:	607a      	str	r2, [r7, #4]
 8019734:	461a      	mov	r2, r3
 8019736:	460b      	mov	r3, r1
 8019738:	72fb      	strb	r3, [r7, #11]
 801973a:	4613      	mov	r3, r2
 801973c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801973e:	2300      	movs	r3, #0
 8019740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019742:	2300      	movs	r3, #0
 8019744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801974c:	893b      	ldrh	r3, [r7, #8]
 801974e:	7af9      	ldrb	r1, [r7, #11]
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	f7ed fd65 	bl	8007220 <HAL_PCD_EP_Receive>
 8019756:	4603      	mov	r3, r0
 8019758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801975a:	7dfb      	ldrb	r3, [r7, #23]
 801975c:	4618      	mov	r0, r3
 801975e:	f000 f83f 	bl	80197e0 <USBD_Get_USB_Status>
 8019762:	4603      	mov	r3, r0
 8019764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019766:	7dbb      	ldrb	r3, [r7, #22]
}
 8019768:	4618      	mov	r0, r3
 801976a:	3718      	adds	r7, #24
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}

08019770 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b082      	sub	sp, #8
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	460b      	mov	r3, r1
 801977a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019782:	78fa      	ldrb	r2, [r7, #3]
 8019784:	4611      	mov	r1, r2
 8019786:	4618      	mov	r0, r3
 8019788:	f7ed fd7b 	bl	8007282 <HAL_PCD_EP_GetRxCount>
 801978c:	4603      	mov	r3, r0
}
 801978e:	4618      	mov	r0, r3
 8019790:	3708      	adds	r7, #8
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
	...

08019798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019798:	b480      	push	{r7}
 801979a:	b083      	sub	sp, #12
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80197a0:	4b03      	ldr	r3, [pc, #12]	; (80197b0 <USBD_static_malloc+0x18>)
}
 80197a2:	4618      	mov	r0, r3
 80197a4:	370c      	adds	r7, #12
 80197a6:	46bd      	mov	sp, r7
 80197a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ac:	4770      	bx	lr
 80197ae:	bf00      	nop
 80197b0:	2000c56c 	.word	0x2000c56c

080197b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80197b4:	b480      	push	{r7}
 80197b6:	b083      	sub	sp, #12
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]

}
 80197bc:	bf00      	nop
 80197be:	370c      	adds	r7, #12
 80197c0:	46bd      	mov	sp, r7
 80197c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c6:	4770      	bx	lr

080197c8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c8:	b480      	push	{r7}
 80197ca:	b083      	sub	sp, #12
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
 80197d0:	460b      	mov	r3, r1
 80197d2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80197d4:	bf00      	nop
 80197d6:	370c      	adds	r7, #12
 80197d8:	46bd      	mov	sp, r7
 80197da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197de:	4770      	bx	lr

080197e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80197e0:	b480      	push	{r7}
 80197e2:	b085      	sub	sp, #20
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	4603      	mov	r3, r0
 80197e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197ea:	2300      	movs	r3, #0
 80197ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80197ee:	79fb      	ldrb	r3, [r7, #7]
 80197f0:	2b03      	cmp	r3, #3
 80197f2:	d817      	bhi.n	8019824 <USBD_Get_USB_Status+0x44>
 80197f4:	a201      	add	r2, pc, #4	; (adr r2, 80197fc <USBD_Get_USB_Status+0x1c>)
 80197f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197fa:	bf00      	nop
 80197fc:	0801980d 	.word	0x0801980d
 8019800:	08019813 	.word	0x08019813
 8019804:	08019819 	.word	0x08019819
 8019808:	0801981f 	.word	0x0801981f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801980c:	2300      	movs	r3, #0
 801980e:	73fb      	strb	r3, [r7, #15]
    break;
 8019810:	e00b      	b.n	801982a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019812:	2302      	movs	r3, #2
 8019814:	73fb      	strb	r3, [r7, #15]
    break;
 8019816:	e008      	b.n	801982a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019818:	2301      	movs	r3, #1
 801981a:	73fb      	strb	r3, [r7, #15]
    break;
 801981c:	e005      	b.n	801982a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801981e:	2302      	movs	r3, #2
 8019820:	73fb      	strb	r3, [r7, #15]
    break;
 8019822:	e002      	b.n	801982a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019824:	2302      	movs	r3, #2
 8019826:	73fb      	strb	r3, [r7, #15]
    break;
 8019828:	bf00      	nop
  }
  return usb_status;
 801982a:	7bfb      	ldrb	r3, [r7, #15]
}
 801982c:	4618      	mov	r0, r3
 801982e:	3714      	adds	r7, #20
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <siprintf>:
 8019838:	b40e      	push	{r1, r2, r3}
 801983a:	b500      	push	{lr}
 801983c:	b09c      	sub	sp, #112	; 0x70
 801983e:	ab1d      	add	r3, sp, #116	; 0x74
 8019840:	9002      	str	r0, [sp, #8]
 8019842:	9006      	str	r0, [sp, #24]
 8019844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019848:	4809      	ldr	r0, [pc, #36]	; (8019870 <siprintf+0x38>)
 801984a:	9107      	str	r1, [sp, #28]
 801984c:	9104      	str	r1, [sp, #16]
 801984e:	4909      	ldr	r1, [pc, #36]	; (8019874 <siprintf+0x3c>)
 8019850:	f853 2b04 	ldr.w	r2, [r3], #4
 8019854:	9105      	str	r1, [sp, #20]
 8019856:	6800      	ldr	r0, [r0, #0]
 8019858:	9301      	str	r3, [sp, #4]
 801985a:	a902      	add	r1, sp, #8
 801985c:	f000 f992 	bl	8019b84 <_svfiprintf_r>
 8019860:	9b02      	ldr	r3, [sp, #8]
 8019862:	2200      	movs	r2, #0
 8019864:	701a      	strb	r2, [r3, #0]
 8019866:	b01c      	add	sp, #112	; 0x70
 8019868:	f85d eb04 	ldr.w	lr, [sp], #4
 801986c:	b003      	add	sp, #12
 801986e:	4770      	bx	lr
 8019870:	200001ec 	.word	0x200001ec
 8019874:	ffff0208 	.word	0xffff0208

08019878 <memset>:
 8019878:	4402      	add	r2, r0
 801987a:	4603      	mov	r3, r0
 801987c:	4293      	cmp	r3, r2
 801987e:	d100      	bne.n	8019882 <memset+0xa>
 8019880:	4770      	bx	lr
 8019882:	f803 1b01 	strb.w	r1, [r3], #1
 8019886:	e7f9      	b.n	801987c <memset+0x4>

08019888 <__errno>:
 8019888:	4b01      	ldr	r3, [pc, #4]	; (8019890 <__errno+0x8>)
 801988a:	6818      	ldr	r0, [r3, #0]
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	200001ec 	.word	0x200001ec

08019894 <__libc_init_array>:
 8019894:	b570      	push	{r4, r5, r6, lr}
 8019896:	4d0d      	ldr	r5, [pc, #52]	; (80198cc <__libc_init_array+0x38>)
 8019898:	4c0d      	ldr	r4, [pc, #52]	; (80198d0 <__libc_init_array+0x3c>)
 801989a:	1b64      	subs	r4, r4, r5
 801989c:	10a4      	asrs	r4, r4, #2
 801989e:	2600      	movs	r6, #0
 80198a0:	42a6      	cmp	r6, r4
 80198a2:	d109      	bne.n	80198b8 <__libc_init_array+0x24>
 80198a4:	4d0b      	ldr	r5, [pc, #44]	; (80198d4 <__libc_init_array+0x40>)
 80198a6:	4c0c      	ldr	r4, [pc, #48]	; (80198d8 <__libc_init_array+0x44>)
 80198a8:	f001 fcaa 	bl	801b200 <_init>
 80198ac:	1b64      	subs	r4, r4, r5
 80198ae:	10a4      	asrs	r4, r4, #2
 80198b0:	2600      	movs	r6, #0
 80198b2:	42a6      	cmp	r6, r4
 80198b4:	d105      	bne.n	80198c2 <__libc_init_array+0x2e>
 80198b6:	bd70      	pop	{r4, r5, r6, pc}
 80198b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80198bc:	4798      	blx	r3
 80198be:	3601      	adds	r6, #1
 80198c0:	e7ee      	b.n	80198a0 <__libc_init_array+0xc>
 80198c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80198c6:	4798      	blx	r3
 80198c8:	3601      	adds	r6, #1
 80198ca:	e7f2      	b.n	80198b2 <__libc_init_array+0x1e>
 80198cc:	0801d7c8 	.word	0x0801d7c8
 80198d0:	0801d7c8 	.word	0x0801d7c8
 80198d4:	0801d7c8 	.word	0x0801d7c8
 80198d8:	0801d7cc 	.word	0x0801d7cc

080198dc <__retarget_lock_acquire_recursive>:
 80198dc:	4770      	bx	lr

080198de <__retarget_lock_release_recursive>:
 80198de:	4770      	bx	lr

080198e0 <_free_r>:
 80198e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198e2:	2900      	cmp	r1, #0
 80198e4:	d044      	beq.n	8019970 <_free_r+0x90>
 80198e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198ea:	9001      	str	r0, [sp, #4]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	f1a1 0404 	sub.w	r4, r1, #4
 80198f2:	bfb8      	it	lt
 80198f4:	18e4      	addlt	r4, r4, r3
 80198f6:	f000 f8df 	bl	8019ab8 <__malloc_lock>
 80198fa:	4a1e      	ldr	r2, [pc, #120]	; (8019974 <_free_r+0x94>)
 80198fc:	9801      	ldr	r0, [sp, #4]
 80198fe:	6813      	ldr	r3, [r2, #0]
 8019900:	b933      	cbnz	r3, 8019910 <_free_r+0x30>
 8019902:	6063      	str	r3, [r4, #4]
 8019904:	6014      	str	r4, [r2, #0]
 8019906:	b003      	add	sp, #12
 8019908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801990c:	f000 b8da 	b.w	8019ac4 <__malloc_unlock>
 8019910:	42a3      	cmp	r3, r4
 8019912:	d908      	bls.n	8019926 <_free_r+0x46>
 8019914:	6825      	ldr	r5, [r4, #0]
 8019916:	1961      	adds	r1, r4, r5
 8019918:	428b      	cmp	r3, r1
 801991a:	bf01      	itttt	eq
 801991c:	6819      	ldreq	r1, [r3, #0]
 801991e:	685b      	ldreq	r3, [r3, #4]
 8019920:	1949      	addeq	r1, r1, r5
 8019922:	6021      	streq	r1, [r4, #0]
 8019924:	e7ed      	b.n	8019902 <_free_r+0x22>
 8019926:	461a      	mov	r2, r3
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	b10b      	cbz	r3, 8019930 <_free_r+0x50>
 801992c:	42a3      	cmp	r3, r4
 801992e:	d9fa      	bls.n	8019926 <_free_r+0x46>
 8019930:	6811      	ldr	r1, [r2, #0]
 8019932:	1855      	adds	r5, r2, r1
 8019934:	42a5      	cmp	r5, r4
 8019936:	d10b      	bne.n	8019950 <_free_r+0x70>
 8019938:	6824      	ldr	r4, [r4, #0]
 801993a:	4421      	add	r1, r4
 801993c:	1854      	adds	r4, r2, r1
 801993e:	42a3      	cmp	r3, r4
 8019940:	6011      	str	r1, [r2, #0]
 8019942:	d1e0      	bne.n	8019906 <_free_r+0x26>
 8019944:	681c      	ldr	r4, [r3, #0]
 8019946:	685b      	ldr	r3, [r3, #4]
 8019948:	6053      	str	r3, [r2, #4]
 801994a:	440c      	add	r4, r1
 801994c:	6014      	str	r4, [r2, #0]
 801994e:	e7da      	b.n	8019906 <_free_r+0x26>
 8019950:	d902      	bls.n	8019958 <_free_r+0x78>
 8019952:	230c      	movs	r3, #12
 8019954:	6003      	str	r3, [r0, #0]
 8019956:	e7d6      	b.n	8019906 <_free_r+0x26>
 8019958:	6825      	ldr	r5, [r4, #0]
 801995a:	1961      	adds	r1, r4, r5
 801995c:	428b      	cmp	r3, r1
 801995e:	bf04      	itt	eq
 8019960:	6819      	ldreq	r1, [r3, #0]
 8019962:	685b      	ldreq	r3, [r3, #4]
 8019964:	6063      	str	r3, [r4, #4]
 8019966:	bf04      	itt	eq
 8019968:	1949      	addeq	r1, r1, r5
 801996a:	6021      	streq	r1, [r4, #0]
 801996c:	6054      	str	r4, [r2, #4]
 801996e:	e7ca      	b.n	8019906 <_free_r+0x26>
 8019970:	b003      	add	sp, #12
 8019972:	bd30      	pop	{r4, r5, pc}
 8019974:	2000c8cc 	.word	0x2000c8cc

08019978 <sbrk_aligned>:
 8019978:	b570      	push	{r4, r5, r6, lr}
 801997a:	4e0e      	ldr	r6, [pc, #56]	; (80199b4 <sbrk_aligned+0x3c>)
 801997c:	460c      	mov	r4, r1
 801997e:	6831      	ldr	r1, [r6, #0]
 8019980:	4605      	mov	r5, r0
 8019982:	b911      	cbnz	r1, 801998a <sbrk_aligned+0x12>
 8019984:	f000 fba6 	bl	801a0d4 <_sbrk_r>
 8019988:	6030      	str	r0, [r6, #0]
 801998a:	4621      	mov	r1, r4
 801998c:	4628      	mov	r0, r5
 801998e:	f000 fba1 	bl	801a0d4 <_sbrk_r>
 8019992:	1c43      	adds	r3, r0, #1
 8019994:	d00a      	beq.n	80199ac <sbrk_aligned+0x34>
 8019996:	1cc4      	adds	r4, r0, #3
 8019998:	f024 0403 	bic.w	r4, r4, #3
 801999c:	42a0      	cmp	r0, r4
 801999e:	d007      	beq.n	80199b0 <sbrk_aligned+0x38>
 80199a0:	1a21      	subs	r1, r4, r0
 80199a2:	4628      	mov	r0, r5
 80199a4:	f000 fb96 	bl	801a0d4 <_sbrk_r>
 80199a8:	3001      	adds	r0, #1
 80199aa:	d101      	bne.n	80199b0 <sbrk_aligned+0x38>
 80199ac:	f04f 34ff 	mov.w	r4, #4294967295
 80199b0:	4620      	mov	r0, r4
 80199b2:	bd70      	pop	{r4, r5, r6, pc}
 80199b4:	2000c8d0 	.word	0x2000c8d0

080199b8 <_malloc_r>:
 80199b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199bc:	1ccd      	adds	r5, r1, #3
 80199be:	f025 0503 	bic.w	r5, r5, #3
 80199c2:	3508      	adds	r5, #8
 80199c4:	2d0c      	cmp	r5, #12
 80199c6:	bf38      	it	cc
 80199c8:	250c      	movcc	r5, #12
 80199ca:	2d00      	cmp	r5, #0
 80199cc:	4607      	mov	r7, r0
 80199ce:	db01      	blt.n	80199d4 <_malloc_r+0x1c>
 80199d0:	42a9      	cmp	r1, r5
 80199d2:	d905      	bls.n	80199e0 <_malloc_r+0x28>
 80199d4:	230c      	movs	r3, #12
 80199d6:	603b      	str	r3, [r7, #0]
 80199d8:	2600      	movs	r6, #0
 80199da:	4630      	mov	r0, r6
 80199dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019ab4 <_malloc_r+0xfc>
 80199e4:	f000 f868 	bl	8019ab8 <__malloc_lock>
 80199e8:	f8d8 3000 	ldr.w	r3, [r8]
 80199ec:	461c      	mov	r4, r3
 80199ee:	bb5c      	cbnz	r4, 8019a48 <_malloc_r+0x90>
 80199f0:	4629      	mov	r1, r5
 80199f2:	4638      	mov	r0, r7
 80199f4:	f7ff ffc0 	bl	8019978 <sbrk_aligned>
 80199f8:	1c43      	adds	r3, r0, #1
 80199fa:	4604      	mov	r4, r0
 80199fc:	d155      	bne.n	8019aaa <_malloc_r+0xf2>
 80199fe:	f8d8 4000 	ldr.w	r4, [r8]
 8019a02:	4626      	mov	r6, r4
 8019a04:	2e00      	cmp	r6, #0
 8019a06:	d145      	bne.n	8019a94 <_malloc_r+0xdc>
 8019a08:	2c00      	cmp	r4, #0
 8019a0a:	d048      	beq.n	8019a9e <_malloc_r+0xe6>
 8019a0c:	6823      	ldr	r3, [r4, #0]
 8019a0e:	4631      	mov	r1, r6
 8019a10:	4638      	mov	r0, r7
 8019a12:	eb04 0903 	add.w	r9, r4, r3
 8019a16:	f000 fb5d 	bl	801a0d4 <_sbrk_r>
 8019a1a:	4581      	cmp	r9, r0
 8019a1c:	d13f      	bne.n	8019a9e <_malloc_r+0xe6>
 8019a1e:	6821      	ldr	r1, [r4, #0]
 8019a20:	1a6d      	subs	r5, r5, r1
 8019a22:	4629      	mov	r1, r5
 8019a24:	4638      	mov	r0, r7
 8019a26:	f7ff ffa7 	bl	8019978 <sbrk_aligned>
 8019a2a:	3001      	adds	r0, #1
 8019a2c:	d037      	beq.n	8019a9e <_malloc_r+0xe6>
 8019a2e:	6823      	ldr	r3, [r4, #0]
 8019a30:	442b      	add	r3, r5
 8019a32:	6023      	str	r3, [r4, #0]
 8019a34:	f8d8 3000 	ldr.w	r3, [r8]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d038      	beq.n	8019aae <_malloc_r+0xf6>
 8019a3c:	685a      	ldr	r2, [r3, #4]
 8019a3e:	42a2      	cmp	r2, r4
 8019a40:	d12b      	bne.n	8019a9a <_malloc_r+0xe2>
 8019a42:	2200      	movs	r2, #0
 8019a44:	605a      	str	r2, [r3, #4]
 8019a46:	e00f      	b.n	8019a68 <_malloc_r+0xb0>
 8019a48:	6822      	ldr	r2, [r4, #0]
 8019a4a:	1b52      	subs	r2, r2, r5
 8019a4c:	d41f      	bmi.n	8019a8e <_malloc_r+0xd6>
 8019a4e:	2a0b      	cmp	r2, #11
 8019a50:	d917      	bls.n	8019a82 <_malloc_r+0xca>
 8019a52:	1961      	adds	r1, r4, r5
 8019a54:	42a3      	cmp	r3, r4
 8019a56:	6025      	str	r5, [r4, #0]
 8019a58:	bf18      	it	ne
 8019a5a:	6059      	strne	r1, [r3, #4]
 8019a5c:	6863      	ldr	r3, [r4, #4]
 8019a5e:	bf08      	it	eq
 8019a60:	f8c8 1000 	streq.w	r1, [r8]
 8019a64:	5162      	str	r2, [r4, r5]
 8019a66:	604b      	str	r3, [r1, #4]
 8019a68:	4638      	mov	r0, r7
 8019a6a:	f104 060b 	add.w	r6, r4, #11
 8019a6e:	f000 f829 	bl	8019ac4 <__malloc_unlock>
 8019a72:	f026 0607 	bic.w	r6, r6, #7
 8019a76:	1d23      	adds	r3, r4, #4
 8019a78:	1af2      	subs	r2, r6, r3
 8019a7a:	d0ae      	beq.n	80199da <_malloc_r+0x22>
 8019a7c:	1b9b      	subs	r3, r3, r6
 8019a7e:	50a3      	str	r3, [r4, r2]
 8019a80:	e7ab      	b.n	80199da <_malloc_r+0x22>
 8019a82:	42a3      	cmp	r3, r4
 8019a84:	6862      	ldr	r2, [r4, #4]
 8019a86:	d1dd      	bne.n	8019a44 <_malloc_r+0x8c>
 8019a88:	f8c8 2000 	str.w	r2, [r8]
 8019a8c:	e7ec      	b.n	8019a68 <_malloc_r+0xb0>
 8019a8e:	4623      	mov	r3, r4
 8019a90:	6864      	ldr	r4, [r4, #4]
 8019a92:	e7ac      	b.n	80199ee <_malloc_r+0x36>
 8019a94:	4634      	mov	r4, r6
 8019a96:	6876      	ldr	r6, [r6, #4]
 8019a98:	e7b4      	b.n	8019a04 <_malloc_r+0x4c>
 8019a9a:	4613      	mov	r3, r2
 8019a9c:	e7cc      	b.n	8019a38 <_malloc_r+0x80>
 8019a9e:	230c      	movs	r3, #12
 8019aa0:	603b      	str	r3, [r7, #0]
 8019aa2:	4638      	mov	r0, r7
 8019aa4:	f000 f80e 	bl	8019ac4 <__malloc_unlock>
 8019aa8:	e797      	b.n	80199da <_malloc_r+0x22>
 8019aaa:	6025      	str	r5, [r4, #0]
 8019aac:	e7dc      	b.n	8019a68 <_malloc_r+0xb0>
 8019aae:	605b      	str	r3, [r3, #4]
 8019ab0:	deff      	udf	#255	; 0xff
 8019ab2:	bf00      	nop
 8019ab4:	2000c8cc 	.word	0x2000c8cc

08019ab8 <__malloc_lock>:
 8019ab8:	4801      	ldr	r0, [pc, #4]	; (8019ac0 <__malloc_lock+0x8>)
 8019aba:	f7ff bf0f 	b.w	80198dc <__retarget_lock_acquire_recursive>
 8019abe:	bf00      	nop
 8019ac0:	2000c8c8 	.word	0x2000c8c8

08019ac4 <__malloc_unlock>:
 8019ac4:	4801      	ldr	r0, [pc, #4]	; (8019acc <__malloc_unlock+0x8>)
 8019ac6:	f7ff bf0a 	b.w	80198de <__retarget_lock_release_recursive>
 8019aca:	bf00      	nop
 8019acc:	2000c8c8 	.word	0x2000c8c8

08019ad0 <__ssputs_r>:
 8019ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ad4:	688e      	ldr	r6, [r1, #8]
 8019ad6:	461f      	mov	r7, r3
 8019ad8:	42be      	cmp	r6, r7
 8019ada:	680b      	ldr	r3, [r1, #0]
 8019adc:	4682      	mov	sl, r0
 8019ade:	460c      	mov	r4, r1
 8019ae0:	4690      	mov	r8, r2
 8019ae2:	d82c      	bhi.n	8019b3e <__ssputs_r+0x6e>
 8019ae4:	898a      	ldrh	r2, [r1, #12]
 8019ae6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019aea:	d026      	beq.n	8019b3a <__ssputs_r+0x6a>
 8019aec:	6965      	ldr	r5, [r4, #20]
 8019aee:	6909      	ldr	r1, [r1, #16]
 8019af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019af4:	eba3 0901 	sub.w	r9, r3, r1
 8019af8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019afc:	1c7b      	adds	r3, r7, #1
 8019afe:	444b      	add	r3, r9
 8019b00:	106d      	asrs	r5, r5, #1
 8019b02:	429d      	cmp	r5, r3
 8019b04:	bf38      	it	cc
 8019b06:	461d      	movcc	r5, r3
 8019b08:	0553      	lsls	r3, r2, #21
 8019b0a:	d527      	bpl.n	8019b5c <__ssputs_r+0x8c>
 8019b0c:	4629      	mov	r1, r5
 8019b0e:	f7ff ff53 	bl	80199b8 <_malloc_r>
 8019b12:	4606      	mov	r6, r0
 8019b14:	b360      	cbz	r0, 8019b70 <__ssputs_r+0xa0>
 8019b16:	6921      	ldr	r1, [r4, #16]
 8019b18:	464a      	mov	r2, r9
 8019b1a:	f000 faeb 	bl	801a0f4 <memcpy>
 8019b1e:	89a3      	ldrh	r3, [r4, #12]
 8019b20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b28:	81a3      	strh	r3, [r4, #12]
 8019b2a:	6126      	str	r6, [r4, #16]
 8019b2c:	6165      	str	r5, [r4, #20]
 8019b2e:	444e      	add	r6, r9
 8019b30:	eba5 0509 	sub.w	r5, r5, r9
 8019b34:	6026      	str	r6, [r4, #0]
 8019b36:	60a5      	str	r5, [r4, #8]
 8019b38:	463e      	mov	r6, r7
 8019b3a:	42be      	cmp	r6, r7
 8019b3c:	d900      	bls.n	8019b40 <__ssputs_r+0x70>
 8019b3e:	463e      	mov	r6, r7
 8019b40:	6820      	ldr	r0, [r4, #0]
 8019b42:	4632      	mov	r2, r6
 8019b44:	4641      	mov	r1, r8
 8019b46:	f000 faab 	bl	801a0a0 <memmove>
 8019b4a:	68a3      	ldr	r3, [r4, #8]
 8019b4c:	1b9b      	subs	r3, r3, r6
 8019b4e:	60a3      	str	r3, [r4, #8]
 8019b50:	6823      	ldr	r3, [r4, #0]
 8019b52:	4433      	add	r3, r6
 8019b54:	6023      	str	r3, [r4, #0]
 8019b56:	2000      	movs	r0, #0
 8019b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b5c:	462a      	mov	r2, r5
 8019b5e:	f000 fad7 	bl	801a110 <_realloc_r>
 8019b62:	4606      	mov	r6, r0
 8019b64:	2800      	cmp	r0, #0
 8019b66:	d1e0      	bne.n	8019b2a <__ssputs_r+0x5a>
 8019b68:	6921      	ldr	r1, [r4, #16]
 8019b6a:	4650      	mov	r0, sl
 8019b6c:	f7ff feb8 	bl	80198e0 <_free_r>
 8019b70:	230c      	movs	r3, #12
 8019b72:	f8ca 3000 	str.w	r3, [sl]
 8019b76:	89a3      	ldrh	r3, [r4, #12]
 8019b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b7c:	81a3      	strh	r3, [r4, #12]
 8019b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b82:	e7e9      	b.n	8019b58 <__ssputs_r+0x88>

08019b84 <_svfiprintf_r>:
 8019b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b88:	4698      	mov	r8, r3
 8019b8a:	898b      	ldrh	r3, [r1, #12]
 8019b8c:	061b      	lsls	r3, r3, #24
 8019b8e:	b09d      	sub	sp, #116	; 0x74
 8019b90:	4607      	mov	r7, r0
 8019b92:	460d      	mov	r5, r1
 8019b94:	4614      	mov	r4, r2
 8019b96:	d50e      	bpl.n	8019bb6 <_svfiprintf_r+0x32>
 8019b98:	690b      	ldr	r3, [r1, #16]
 8019b9a:	b963      	cbnz	r3, 8019bb6 <_svfiprintf_r+0x32>
 8019b9c:	2140      	movs	r1, #64	; 0x40
 8019b9e:	f7ff ff0b 	bl	80199b8 <_malloc_r>
 8019ba2:	6028      	str	r0, [r5, #0]
 8019ba4:	6128      	str	r0, [r5, #16]
 8019ba6:	b920      	cbnz	r0, 8019bb2 <_svfiprintf_r+0x2e>
 8019ba8:	230c      	movs	r3, #12
 8019baa:	603b      	str	r3, [r7, #0]
 8019bac:	f04f 30ff 	mov.w	r0, #4294967295
 8019bb0:	e0d0      	b.n	8019d54 <_svfiprintf_r+0x1d0>
 8019bb2:	2340      	movs	r3, #64	; 0x40
 8019bb4:	616b      	str	r3, [r5, #20]
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8019bba:	2320      	movs	r3, #32
 8019bbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019bc4:	2330      	movs	r3, #48	; 0x30
 8019bc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019d6c <_svfiprintf_r+0x1e8>
 8019bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bce:	f04f 0901 	mov.w	r9, #1
 8019bd2:	4623      	mov	r3, r4
 8019bd4:	469a      	mov	sl, r3
 8019bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bda:	b10a      	cbz	r2, 8019be0 <_svfiprintf_r+0x5c>
 8019bdc:	2a25      	cmp	r2, #37	; 0x25
 8019bde:	d1f9      	bne.n	8019bd4 <_svfiprintf_r+0x50>
 8019be0:	ebba 0b04 	subs.w	fp, sl, r4
 8019be4:	d00b      	beq.n	8019bfe <_svfiprintf_r+0x7a>
 8019be6:	465b      	mov	r3, fp
 8019be8:	4622      	mov	r2, r4
 8019bea:	4629      	mov	r1, r5
 8019bec:	4638      	mov	r0, r7
 8019bee:	f7ff ff6f 	bl	8019ad0 <__ssputs_r>
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	f000 80a9 	beq.w	8019d4a <_svfiprintf_r+0x1c6>
 8019bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bfa:	445a      	add	r2, fp
 8019bfc:	9209      	str	r2, [sp, #36]	; 0x24
 8019bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	f000 80a1 	beq.w	8019d4a <_svfiprintf_r+0x1c6>
 8019c08:	2300      	movs	r3, #0
 8019c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8019c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c12:	f10a 0a01 	add.w	sl, sl, #1
 8019c16:	9304      	str	r3, [sp, #16]
 8019c18:	9307      	str	r3, [sp, #28]
 8019c1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c1e:	931a      	str	r3, [sp, #104]	; 0x68
 8019c20:	4654      	mov	r4, sl
 8019c22:	2205      	movs	r2, #5
 8019c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c28:	4850      	ldr	r0, [pc, #320]	; (8019d6c <_svfiprintf_r+0x1e8>)
 8019c2a:	f7e6 fae1 	bl	80001f0 <memchr>
 8019c2e:	9a04      	ldr	r2, [sp, #16]
 8019c30:	b9d8      	cbnz	r0, 8019c6a <_svfiprintf_r+0xe6>
 8019c32:	06d0      	lsls	r0, r2, #27
 8019c34:	bf44      	itt	mi
 8019c36:	2320      	movmi	r3, #32
 8019c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c3c:	0711      	lsls	r1, r2, #28
 8019c3e:	bf44      	itt	mi
 8019c40:	232b      	movmi	r3, #43	; 0x2b
 8019c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c46:	f89a 3000 	ldrb.w	r3, [sl]
 8019c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c4c:	d015      	beq.n	8019c7a <_svfiprintf_r+0xf6>
 8019c4e:	9a07      	ldr	r2, [sp, #28]
 8019c50:	4654      	mov	r4, sl
 8019c52:	2000      	movs	r0, #0
 8019c54:	f04f 0c0a 	mov.w	ip, #10
 8019c58:	4621      	mov	r1, r4
 8019c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c5e:	3b30      	subs	r3, #48	; 0x30
 8019c60:	2b09      	cmp	r3, #9
 8019c62:	d94d      	bls.n	8019d00 <_svfiprintf_r+0x17c>
 8019c64:	b1b0      	cbz	r0, 8019c94 <_svfiprintf_r+0x110>
 8019c66:	9207      	str	r2, [sp, #28]
 8019c68:	e014      	b.n	8019c94 <_svfiprintf_r+0x110>
 8019c6a:	eba0 0308 	sub.w	r3, r0, r8
 8019c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8019c72:	4313      	orrs	r3, r2
 8019c74:	9304      	str	r3, [sp, #16]
 8019c76:	46a2      	mov	sl, r4
 8019c78:	e7d2      	b.n	8019c20 <_svfiprintf_r+0x9c>
 8019c7a:	9b03      	ldr	r3, [sp, #12]
 8019c7c:	1d19      	adds	r1, r3, #4
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	9103      	str	r1, [sp, #12]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	bfbb      	ittet	lt
 8019c86:	425b      	neglt	r3, r3
 8019c88:	f042 0202 	orrlt.w	r2, r2, #2
 8019c8c:	9307      	strge	r3, [sp, #28]
 8019c8e:	9307      	strlt	r3, [sp, #28]
 8019c90:	bfb8      	it	lt
 8019c92:	9204      	strlt	r2, [sp, #16]
 8019c94:	7823      	ldrb	r3, [r4, #0]
 8019c96:	2b2e      	cmp	r3, #46	; 0x2e
 8019c98:	d10c      	bne.n	8019cb4 <_svfiprintf_r+0x130>
 8019c9a:	7863      	ldrb	r3, [r4, #1]
 8019c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8019c9e:	d134      	bne.n	8019d0a <_svfiprintf_r+0x186>
 8019ca0:	9b03      	ldr	r3, [sp, #12]
 8019ca2:	1d1a      	adds	r2, r3, #4
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	9203      	str	r2, [sp, #12]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	bfb8      	it	lt
 8019cac:	f04f 33ff 	movlt.w	r3, #4294967295
 8019cb0:	3402      	adds	r4, #2
 8019cb2:	9305      	str	r3, [sp, #20]
 8019cb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019d7c <_svfiprintf_r+0x1f8>
 8019cb8:	7821      	ldrb	r1, [r4, #0]
 8019cba:	2203      	movs	r2, #3
 8019cbc:	4650      	mov	r0, sl
 8019cbe:	f7e6 fa97 	bl	80001f0 <memchr>
 8019cc2:	b138      	cbz	r0, 8019cd4 <_svfiprintf_r+0x150>
 8019cc4:	9b04      	ldr	r3, [sp, #16]
 8019cc6:	eba0 000a 	sub.w	r0, r0, sl
 8019cca:	2240      	movs	r2, #64	; 0x40
 8019ccc:	4082      	lsls	r2, r0
 8019cce:	4313      	orrs	r3, r2
 8019cd0:	3401      	adds	r4, #1
 8019cd2:	9304      	str	r3, [sp, #16]
 8019cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cd8:	4825      	ldr	r0, [pc, #148]	; (8019d70 <_svfiprintf_r+0x1ec>)
 8019cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019cde:	2206      	movs	r2, #6
 8019ce0:	f7e6 fa86 	bl	80001f0 <memchr>
 8019ce4:	2800      	cmp	r0, #0
 8019ce6:	d038      	beq.n	8019d5a <_svfiprintf_r+0x1d6>
 8019ce8:	4b22      	ldr	r3, [pc, #136]	; (8019d74 <_svfiprintf_r+0x1f0>)
 8019cea:	bb1b      	cbnz	r3, 8019d34 <_svfiprintf_r+0x1b0>
 8019cec:	9b03      	ldr	r3, [sp, #12]
 8019cee:	3307      	adds	r3, #7
 8019cf0:	f023 0307 	bic.w	r3, r3, #7
 8019cf4:	3308      	adds	r3, #8
 8019cf6:	9303      	str	r3, [sp, #12]
 8019cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cfa:	4433      	add	r3, r6
 8019cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cfe:	e768      	b.n	8019bd2 <_svfiprintf_r+0x4e>
 8019d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d04:	460c      	mov	r4, r1
 8019d06:	2001      	movs	r0, #1
 8019d08:	e7a6      	b.n	8019c58 <_svfiprintf_r+0xd4>
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	3401      	adds	r4, #1
 8019d0e:	9305      	str	r3, [sp, #20]
 8019d10:	4619      	mov	r1, r3
 8019d12:	f04f 0c0a 	mov.w	ip, #10
 8019d16:	4620      	mov	r0, r4
 8019d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d1c:	3a30      	subs	r2, #48	; 0x30
 8019d1e:	2a09      	cmp	r2, #9
 8019d20:	d903      	bls.n	8019d2a <_svfiprintf_r+0x1a6>
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d0c6      	beq.n	8019cb4 <_svfiprintf_r+0x130>
 8019d26:	9105      	str	r1, [sp, #20]
 8019d28:	e7c4      	b.n	8019cb4 <_svfiprintf_r+0x130>
 8019d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d2e:	4604      	mov	r4, r0
 8019d30:	2301      	movs	r3, #1
 8019d32:	e7f0      	b.n	8019d16 <_svfiprintf_r+0x192>
 8019d34:	ab03      	add	r3, sp, #12
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	462a      	mov	r2, r5
 8019d3a:	4b0f      	ldr	r3, [pc, #60]	; (8019d78 <_svfiprintf_r+0x1f4>)
 8019d3c:	a904      	add	r1, sp, #16
 8019d3e:	4638      	mov	r0, r7
 8019d40:	f3af 8000 	nop.w
 8019d44:	1c42      	adds	r2, r0, #1
 8019d46:	4606      	mov	r6, r0
 8019d48:	d1d6      	bne.n	8019cf8 <_svfiprintf_r+0x174>
 8019d4a:	89ab      	ldrh	r3, [r5, #12]
 8019d4c:	065b      	lsls	r3, r3, #25
 8019d4e:	f53f af2d 	bmi.w	8019bac <_svfiprintf_r+0x28>
 8019d52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d54:	b01d      	add	sp, #116	; 0x74
 8019d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5a:	ab03      	add	r3, sp, #12
 8019d5c:	9300      	str	r3, [sp, #0]
 8019d5e:	462a      	mov	r2, r5
 8019d60:	4b05      	ldr	r3, [pc, #20]	; (8019d78 <_svfiprintf_r+0x1f4>)
 8019d62:	a904      	add	r1, sp, #16
 8019d64:	4638      	mov	r0, r7
 8019d66:	f000 f879 	bl	8019e5c <_printf_i>
 8019d6a:	e7eb      	b.n	8019d44 <_svfiprintf_r+0x1c0>
 8019d6c:	0801d5bd 	.word	0x0801d5bd
 8019d70:	0801d5c7 	.word	0x0801d5c7
 8019d74:	00000000 	.word	0x00000000
 8019d78:	08019ad1 	.word	0x08019ad1
 8019d7c:	0801d5c3 	.word	0x0801d5c3

08019d80 <_printf_common>:
 8019d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d84:	4616      	mov	r6, r2
 8019d86:	4699      	mov	r9, r3
 8019d88:	688a      	ldr	r2, [r1, #8]
 8019d8a:	690b      	ldr	r3, [r1, #16]
 8019d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019d90:	4293      	cmp	r3, r2
 8019d92:	bfb8      	it	lt
 8019d94:	4613      	movlt	r3, r2
 8019d96:	6033      	str	r3, [r6, #0]
 8019d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019d9c:	4607      	mov	r7, r0
 8019d9e:	460c      	mov	r4, r1
 8019da0:	b10a      	cbz	r2, 8019da6 <_printf_common+0x26>
 8019da2:	3301      	adds	r3, #1
 8019da4:	6033      	str	r3, [r6, #0]
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	0699      	lsls	r1, r3, #26
 8019daa:	bf42      	ittt	mi
 8019dac:	6833      	ldrmi	r3, [r6, #0]
 8019dae:	3302      	addmi	r3, #2
 8019db0:	6033      	strmi	r3, [r6, #0]
 8019db2:	6825      	ldr	r5, [r4, #0]
 8019db4:	f015 0506 	ands.w	r5, r5, #6
 8019db8:	d106      	bne.n	8019dc8 <_printf_common+0x48>
 8019dba:	f104 0a19 	add.w	sl, r4, #25
 8019dbe:	68e3      	ldr	r3, [r4, #12]
 8019dc0:	6832      	ldr	r2, [r6, #0]
 8019dc2:	1a9b      	subs	r3, r3, r2
 8019dc4:	42ab      	cmp	r3, r5
 8019dc6:	dc26      	bgt.n	8019e16 <_printf_common+0x96>
 8019dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019dcc:	1e13      	subs	r3, r2, #0
 8019dce:	6822      	ldr	r2, [r4, #0]
 8019dd0:	bf18      	it	ne
 8019dd2:	2301      	movne	r3, #1
 8019dd4:	0692      	lsls	r2, r2, #26
 8019dd6:	d42b      	bmi.n	8019e30 <_printf_common+0xb0>
 8019dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ddc:	4649      	mov	r1, r9
 8019dde:	4638      	mov	r0, r7
 8019de0:	47c0      	blx	r8
 8019de2:	3001      	adds	r0, #1
 8019de4:	d01e      	beq.n	8019e24 <_printf_common+0xa4>
 8019de6:	6823      	ldr	r3, [r4, #0]
 8019de8:	6922      	ldr	r2, [r4, #16]
 8019dea:	f003 0306 	and.w	r3, r3, #6
 8019dee:	2b04      	cmp	r3, #4
 8019df0:	bf02      	ittt	eq
 8019df2:	68e5      	ldreq	r5, [r4, #12]
 8019df4:	6833      	ldreq	r3, [r6, #0]
 8019df6:	1aed      	subeq	r5, r5, r3
 8019df8:	68a3      	ldr	r3, [r4, #8]
 8019dfa:	bf0c      	ite	eq
 8019dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e00:	2500      	movne	r5, #0
 8019e02:	4293      	cmp	r3, r2
 8019e04:	bfc4      	itt	gt
 8019e06:	1a9b      	subgt	r3, r3, r2
 8019e08:	18ed      	addgt	r5, r5, r3
 8019e0a:	2600      	movs	r6, #0
 8019e0c:	341a      	adds	r4, #26
 8019e0e:	42b5      	cmp	r5, r6
 8019e10:	d11a      	bne.n	8019e48 <_printf_common+0xc8>
 8019e12:	2000      	movs	r0, #0
 8019e14:	e008      	b.n	8019e28 <_printf_common+0xa8>
 8019e16:	2301      	movs	r3, #1
 8019e18:	4652      	mov	r2, sl
 8019e1a:	4649      	mov	r1, r9
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	47c0      	blx	r8
 8019e20:	3001      	adds	r0, #1
 8019e22:	d103      	bne.n	8019e2c <_printf_common+0xac>
 8019e24:	f04f 30ff 	mov.w	r0, #4294967295
 8019e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e2c:	3501      	adds	r5, #1
 8019e2e:	e7c6      	b.n	8019dbe <_printf_common+0x3e>
 8019e30:	18e1      	adds	r1, r4, r3
 8019e32:	1c5a      	adds	r2, r3, #1
 8019e34:	2030      	movs	r0, #48	; 0x30
 8019e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019e3a:	4422      	add	r2, r4
 8019e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019e44:	3302      	adds	r3, #2
 8019e46:	e7c7      	b.n	8019dd8 <_printf_common+0x58>
 8019e48:	2301      	movs	r3, #1
 8019e4a:	4622      	mov	r2, r4
 8019e4c:	4649      	mov	r1, r9
 8019e4e:	4638      	mov	r0, r7
 8019e50:	47c0      	blx	r8
 8019e52:	3001      	adds	r0, #1
 8019e54:	d0e6      	beq.n	8019e24 <_printf_common+0xa4>
 8019e56:	3601      	adds	r6, #1
 8019e58:	e7d9      	b.n	8019e0e <_printf_common+0x8e>
	...

08019e5c <_printf_i>:
 8019e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e60:	7e0f      	ldrb	r7, [r1, #24]
 8019e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019e64:	2f78      	cmp	r7, #120	; 0x78
 8019e66:	4691      	mov	r9, r2
 8019e68:	4680      	mov	r8, r0
 8019e6a:	460c      	mov	r4, r1
 8019e6c:	469a      	mov	sl, r3
 8019e6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019e72:	d807      	bhi.n	8019e84 <_printf_i+0x28>
 8019e74:	2f62      	cmp	r7, #98	; 0x62
 8019e76:	d80a      	bhi.n	8019e8e <_printf_i+0x32>
 8019e78:	2f00      	cmp	r7, #0
 8019e7a:	f000 80d4 	beq.w	801a026 <_printf_i+0x1ca>
 8019e7e:	2f58      	cmp	r7, #88	; 0x58
 8019e80:	f000 80c0 	beq.w	801a004 <_printf_i+0x1a8>
 8019e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019e8c:	e03a      	b.n	8019f04 <_printf_i+0xa8>
 8019e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019e92:	2b15      	cmp	r3, #21
 8019e94:	d8f6      	bhi.n	8019e84 <_printf_i+0x28>
 8019e96:	a101      	add	r1, pc, #4	; (adr r1, 8019e9c <_printf_i+0x40>)
 8019e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e9c:	08019ef5 	.word	0x08019ef5
 8019ea0:	08019f09 	.word	0x08019f09
 8019ea4:	08019e85 	.word	0x08019e85
 8019ea8:	08019e85 	.word	0x08019e85
 8019eac:	08019e85 	.word	0x08019e85
 8019eb0:	08019e85 	.word	0x08019e85
 8019eb4:	08019f09 	.word	0x08019f09
 8019eb8:	08019e85 	.word	0x08019e85
 8019ebc:	08019e85 	.word	0x08019e85
 8019ec0:	08019e85 	.word	0x08019e85
 8019ec4:	08019e85 	.word	0x08019e85
 8019ec8:	0801a00d 	.word	0x0801a00d
 8019ecc:	08019f35 	.word	0x08019f35
 8019ed0:	08019fc7 	.word	0x08019fc7
 8019ed4:	08019e85 	.word	0x08019e85
 8019ed8:	08019e85 	.word	0x08019e85
 8019edc:	0801a02f 	.word	0x0801a02f
 8019ee0:	08019e85 	.word	0x08019e85
 8019ee4:	08019f35 	.word	0x08019f35
 8019ee8:	08019e85 	.word	0x08019e85
 8019eec:	08019e85 	.word	0x08019e85
 8019ef0:	08019fcf 	.word	0x08019fcf
 8019ef4:	682b      	ldr	r3, [r5, #0]
 8019ef6:	1d1a      	adds	r2, r3, #4
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	602a      	str	r2, [r5, #0]
 8019efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f04:	2301      	movs	r3, #1
 8019f06:	e09f      	b.n	801a048 <_printf_i+0x1ec>
 8019f08:	6820      	ldr	r0, [r4, #0]
 8019f0a:	682b      	ldr	r3, [r5, #0]
 8019f0c:	0607      	lsls	r7, r0, #24
 8019f0e:	f103 0104 	add.w	r1, r3, #4
 8019f12:	6029      	str	r1, [r5, #0]
 8019f14:	d501      	bpl.n	8019f1a <_printf_i+0xbe>
 8019f16:	681e      	ldr	r6, [r3, #0]
 8019f18:	e003      	b.n	8019f22 <_printf_i+0xc6>
 8019f1a:	0646      	lsls	r6, r0, #25
 8019f1c:	d5fb      	bpl.n	8019f16 <_printf_i+0xba>
 8019f1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f22:	2e00      	cmp	r6, #0
 8019f24:	da03      	bge.n	8019f2e <_printf_i+0xd2>
 8019f26:	232d      	movs	r3, #45	; 0x2d
 8019f28:	4276      	negs	r6, r6
 8019f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f2e:	485a      	ldr	r0, [pc, #360]	; (801a098 <_printf_i+0x23c>)
 8019f30:	230a      	movs	r3, #10
 8019f32:	e012      	b.n	8019f5a <_printf_i+0xfe>
 8019f34:	682b      	ldr	r3, [r5, #0]
 8019f36:	6820      	ldr	r0, [r4, #0]
 8019f38:	1d19      	adds	r1, r3, #4
 8019f3a:	6029      	str	r1, [r5, #0]
 8019f3c:	0605      	lsls	r5, r0, #24
 8019f3e:	d501      	bpl.n	8019f44 <_printf_i+0xe8>
 8019f40:	681e      	ldr	r6, [r3, #0]
 8019f42:	e002      	b.n	8019f4a <_printf_i+0xee>
 8019f44:	0641      	lsls	r1, r0, #25
 8019f46:	d5fb      	bpl.n	8019f40 <_printf_i+0xe4>
 8019f48:	881e      	ldrh	r6, [r3, #0]
 8019f4a:	4853      	ldr	r0, [pc, #332]	; (801a098 <_printf_i+0x23c>)
 8019f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8019f4e:	bf0c      	ite	eq
 8019f50:	2308      	moveq	r3, #8
 8019f52:	230a      	movne	r3, #10
 8019f54:	2100      	movs	r1, #0
 8019f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019f5a:	6865      	ldr	r5, [r4, #4]
 8019f5c:	60a5      	str	r5, [r4, #8]
 8019f5e:	2d00      	cmp	r5, #0
 8019f60:	bfa2      	ittt	ge
 8019f62:	6821      	ldrge	r1, [r4, #0]
 8019f64:	f021 0104 	bicge.w	r1, r1, #4
 8019f68:	6021      	strge	r1, [r4, #0]
 8019f6a:	b90e      	cbnz	r6, 8019f70 <_printf_i+0x114>
 8019f6c:	2d00      	cmp	r5, #0
 8019f6e:	d04b      	beq.n	801a008 <_printf_i+0x1ac>
 8019f70:	4615      	mov	r5, r2
 8019f72:	fbb6 f1f3 	udiv	r1, r6, r3
 8019f76:	fb03 6711 	mls	r7, r3, r1, r6
 8019f7a:	5dc7      	ldrb	r7, [r0, r7]
 8019f7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019f80:	4637      	mov	r7, r6
 8019f82:	42bb      	cmp	r3, r7
 8019f84:	460e      	mov	r6, r1
 8019f86:	d9f4      	bls.n	8019f72 <_printf_i+0x116>
 8019f88:	2b08      	cmp	r3, #8
 8019f8a:	d10b      	bne.n	8019fa4 <_printf_i+0x148>
 8019f8c:	6823      	ldr	r3, [r4, #0]
 8019f8e:	07de      	lsls	r6, r3, #31
 8019f90:	d508      	bpl.n	8019fa4 <_printf_i+0x148>
 8019f92:	6923      	ldr	r3, [r4, #16]
 8019f94:	6861      	ldr	r1, [r4, #4]
 8019f96:	4299      	cmp	r1, r3
 8019f98:	bfde      	ittt	le
 8019f9a:	2330      	movle	r3, #48	; 0x30
 8019f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019fa4:	1b52      	subs	r2, r2, r5
 8019fa6:	6122      	str	r2, [r4, #16]
 8019fa8:	f8cd a000 	str.w	sl, [sp]
 8019fac:	464b      	mov	r3, r9
 8019fae:	aa03      	add	r2, sp, #12
 8019fb0:	4621      	mov	r1, r4
 8019fb2:	4640      	mov	r0, r8
 8019fb4:	f7ff fee4 	bl	8019d80 <_printf_common>
 8019fb8:	3001      	adds	r0, #1
 8019fba:	d14a      	bne.n	801a052 <_printf_i+0x1f6>
 8019fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc0:	b004      	add	sp, #16
 8019fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fc6:	6823      	ldr	r3, [r4, #0]
 8019fc8:	f043 0320 	orr.w	r3, r3, #32
 8019fcc:	6023      	str	r3, [r4, #0]
 8019fce:	4833      	ldr	r0, [pc, #204]	; (801a09c <_printf_i+0x240>)
 8019fd0:	2778      	movs	r7, #120	; 0x78
 8019fd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019fd6:	6823      	ldr	r3, [r4, #0]
 8019fd8:	6829      	ldr	r1, [r5, #0]
 8019fda:	061f      	lsls	r7, r3, #24
 8019fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8019fe0:	d402      	bmi.n	8019fe8 <_printf_i+0x18c>
 8019fe2:	065f      	lsls	r7, r3, #25
 8019fe4:	bf48      	it	mi
 8019fe6:	b2b6      	uxthmi	r6, r6
 8019fe8:	07df      	lsls	r7, r3, #31
 8019fea:	bf48      	it	mi
 8019fec:	f043 0320 	orrmi.w	r3, r3, #32
 8019ff0:	6029      	str	r1, [r5, #0]
 8019ff2:	bf48      	it	mi
 8019ff4:	6023      	strmi	r3, [r4, #0]
 8019ff6:	b91e      	cbnz	r6, 801a000 <_printf_i+0x1a4>
 8019ff8:	6823      	ldr	r3, [r4, #0]
 8019ffa:	f023 0320 	bic.w	r3, r3, #32
 8019ffe:	6023      	str	r3, [r4, #0]
 801a000:	2310      	movs	r3, #16
 801a002:	e7a7      	b.n	8019f54 <_printf_i+0xf8>
 801a004:	4824      	ldr	r0, [pc, #144]	; (801a098 <_printf_i+0x23c>)
 801a006:	e7e4      	b.n	8019fd2 <_printf_i+0x176>
 801a008:	4615      	mov	r5, r2
 801a00a:	e7bd      	b.n	8019f88 <_printf_i+0x12c>
 801a00c:	682b      	ldr	r3, [r5, #0]
 801a00e:	6826      	ldr	r6, [r4, #0]
 801a010:	6961      	ldr	r1, [r4, #20]
 801a012:	1d18      	adds	r0, r3, #4
 801a014:	6028      	str	r0, [r5, #0]
 801a016:	0635      	lsls	r5, r6, #24
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	d501      	bpl.n	801a020 <_printf_i+0x1c4>
 801a01c:	6019      	str	r1, [r3, #0]
 801a01e:	e002      	b.n	801a026 <_printf_i+0x1ca>
 801a020:	0670      	lsls	r0, r6, #25
 801a022:	d5fb      	bpl.n	801a01c <_printf_i+0x1c0>
 801a024:	8019      	strh	r1, [r3, #0]
 801a026:	2300      	movs	r3, #0
 801a028:	6123      	str	r3, [r4, #16]
 801a02a:	4615      	mov	r5, r2
 801a02c:	e7bc      	b.n	8019fa8 <_printf_i+0x14c>
 801a02e:	682b      	ldr	r3, [r5, #0]
 801a030:	1d1a      	adds	r2, r3, #4
 801a032:	602a      	str	r2, [r5, #0]
 801a034:	681d      	ldr	r5, [r3, #0]
 801a036:	6862      	ldr	r2, [r4, #4]
 801a038:	2100      	movs	r1, #0
 801a03a:	4628      	mov	r0, r5
 801a03c:	f7e6 f8d8 	bl	80001f0 <memchr>
 801a040:	b108      	cbz	r0, 801a046 <_printf_i+0x1ea>
 801a042:	1b40      	subs	r0, r0, r5
 801a044:	6060      	str	r0, [r4, #4]
 801a046:	6863      	ldr	r3, [r4, #4]
 801a048:	6123      	str	r3, [r4, #16]
 801a04a:	2300      	movs	r3, #0
 801a04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a050:	e7aa      	b.n	8019fa8 <_printf_i+0x14c>
 801a052:	6923      	ldr	r3, [r4, #16]
 801a054:	462a      	mov	r2, r5
 801a056:	4649      	mov	r1, r9
 801a058:	4640      	mov	r0, r8
 801a05a:	47d0      	blx	sl
 801a05c:	3001      	adds	r0, #1
 801a05e:	d0ad      	beq.n	8019fbc <_printf_i+0x160>
 801a060:	6823      	ldr	r3, [r4, #0]
 801a062:	079b      	lsls	r3, r3, #30
 801a064:	d413      	bmi.n	801a08e <_printf_i+0x232>
 801a066:	68e0      	ldr	r0, [r4, #12]
 801a068:	9b03      	ldr	r3, [sp, #12]
 801a06a:	4298      	cmp	r0, r3
 801a06c:	bfb8      	it	lt
 801a06e:	4618      	movlt	r0, r3
 801a070:	e7a6      	b.n	8019fc0 <_printf_i+0x164>
 801a072:	2301      	movs	r3, #1
 801a074:	4632      	mov	r2, r6
 801a076:	4649      	mov	r1, r9
 801a078:	4640      	mov	r0, r8
 801a07a:	47d0      	blx	sl
 801a07c:	3001      	adds	r0, #1
 801a07e:	d09d      	beq.n	8019fbc <_printf_i+0x160>
 801a080:	3501      	adds	r5, #1
 801a082:	68e3      	ldr	r3, [r4, #12]
 801a084:	9903      	ldr	r1, [sp, #12]
 801a086:	1a5b      	subs	r3, r3, r1
 801a088:	42ab      	cmp	r3, r5
 801a08a:	dcf2      	bgt.n	801a072 <_printf_i+0x216>
 801a08c:	e7eb      	b.n	801a066 <_printf_i+0x20a>
 801a08e:	2500      	movs	r5, #0
 801a090:	f104 0619 	add.w	r6, r4, #25
 801a094:	e7f5      	b.n	801a082 <_printf_i+0x226>
 801a096:	bf00      	nop
 801a098:	0801d5ce 	.word	0x0801d5ce
 801a09c:	0801d5df 	.word	0x0801d5df

0801a0a0 <memmove>:
 801a0a0:	4288      	cmp	r0, r1
 801a0a2:	b510      	push	{r4, lr}
 801a0a4:	eb01 0402 	add.w	r4, r1, r2
 801a0a8:	d902      	bls.n	801a0b0 <memmove+0x10>
 801a0aa:	4284      	cmp	r4, r0
 801a0ac:	4623      	mov	r3, r4
 801a0ae:	d807      	bhi.n	801a0c0 <memmove+0x20>
 801a0b0:	1e43      	subs	r3, r0, #1
 801a0b2:	42a1      	cmp	r1, r4
 801a0b4:	d008      	beq.n	801a0c8 <memmove+0x28>
 801a0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a0be:	e7f8      	b.n	801a0b2 <memmove+0x12>
 801a0c0:	4402      	add	r2, r0
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	428a      	cmp	r2, r1
 801a0c6:	d100      	bne.n	801a0ca <memmove+0x2a>
 801a0c8:	bd10      	pop	{r4, pc}
 801a0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a0d2:	e7f7      	b.n	801a0c4 <memmove+0x24>

0801a0d4 <_sbrk_r>:
 801a0d4:	b538      	push	{r3, r4, r5, lr}
 801a0d6:	4d06      	ldr	r5, [pc, #24]	; (801a0f0 <_sbrk_r+0x1c>)
 801a0d8:	2300      	movs	r3, #0
 801a0da:	4604      	mov	r4, r0
 801a0dc:	4608      	mov	r0, r1
 801a0de:	602b      	str	r3, [r5, #0]
 801a0e0:	f7ea fce0 	bl	8004aa4 <_sbrk>
 801a0e4:	1c43      	adds	r3, r0, #1
 801a0e6:	d102      	bne.n	801a0ee <_sbrk_r+0x1a>
 801a0e8:	682b      	ldr	r3, [r5, #0]
 801a0ea:	b103      	cbz	r3, 801a0ee <_sbrk_r+0x1a>
 801a0ec:	6023      	str	r3, [r4, #0]
 801a0ee:	bd38      	pop	{r3, r4, r5, pc}
 801a0f0:	2000c8c4 	.word	0x2000c8c4

0801a0f4 <memcpy>:
 801a0f4:	440a      	add	r2, r1
 801a0f6:	4291      	cmp	r1, r2
 801a0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0fc:	d100      	bne.n	801a100 <memcpy+0xc>
 801a0fe:	4770      	bx	lr
 801a100:	b510      	push	{r4, lr}
 801a102:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a106:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a10a:	4291      	cmp	r1, r2
 801a10c:	d1f9      	bne.n	801a102 <memcpy+0xe>
 801a10e:	bd10      	pop	{r4, pc}

0801a110 <_realloc_r>:
 801a110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a114:	4680      	mov	r8, r0
 801a116:	4614      	mov	r4, r2
 801a118:	460e      	mov	r6, r1
 801a11a:	b921      	cbnz	r1, 801a126 <_realloc_r+0x16>
 801a11c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a120:	4611      	mov	r1, r2
 801a122:	f7ff bc49 	b.w	80199b8 <_malloc_r>
 801a126:	b92a      	cbnz	r2, 801a134 <_realloc_r+0x24>
 801a128:	f7ff fbda 	bl	80198e0 <_free_r>
 801a12c:	4625      	mov	r5, r4
 801a12e:	4628      	mov	r0, r5
 801a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a134:	f000 f81b 	bl	801a16e <_malloc_usable_size_r>
 801a138:	4284      	cmp	r4, r0
 801a13a:	4607      	mov	r7, r0
 801a13c:	d802      	bhi.n	801a144 <_realloc_r+0x34>
 801a13e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a142:	d812      	bhi.n	801a16a <_realloc_r+0x5a>
 801a144:	4621      	mov	r1, r4
 801a146:	4640      	mov	r0, r8
 801a148:	f7ff fc36 	bl	80199b8 <_malloc_r>
 801a14c:	4605      	mov	r5, r0
 801a14e:	2800      	cmp	r0, #0
 801a150:	d0ed      	beq.n	801a12e <_realloc_r+0x1e>
 801a152:	42bc      	cmp	r4, r7
 801a154:	4622      	mov	r2, r4
 801a156:	4631      	mov	r1, r6
 801a158:	bf28      	it	cs
 801a15a:	463a      	movcs	r2, r7
 801a15c:	f7ff ffca 	bl	801a0f4 <memcpy>
 801a160:	4631      	mov	r1, r6
 801a162:	4640      	mov	r0, r8
 801a164:	f7ff fbbc 	bl	80198e0 <_free_r>
 801a168:	e7e1      	b.n	801a12e <_realloc_r+0x1e>
 801a16a:	4635      	mov	r5, r6
 801a16c:	e7df      	b.n	801a12e <_realloc_r+0x1e>

0801a16e <_malloc_usable_size_r>:
 801a16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a172:	1f18      	subs	r0, r3, #4
 801a174:	2b00      	cmp	r3, #0
 801a176:	bfbc      	itt	lt
 801a178:	580b      	ldrlt	r3, [r1, r0]
 801a17a:	18c0      	addlt	r0, r0, r3
 801a17c:	4770      	bx	lr
	...

0801a180 <sin>:
 801a180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a182:	ec53 2b10 	vmov	r2, r3, d0
 801a186:	4828      	ldr	r0, [pc, #160]	; (801a228 <sin+0xa8>)
 801a188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a18c:	4281      	cmp	r1, r0
 801a18e:	dc07      	bgt.n	801a1a0 <sin+0x20>
 801a190:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a220 <sin+0xa0>
 801a194:	2000      	movs	r0, #0
 801a196:	b005      	add	sp, #20
 801a198:	f85d eb04 	ldr.w	lr, [sp], #4
 801a19c:	f000 b910 	b.w	801a3c0 <__kernel_sin>
 801a1a0:	4822      	ldr	r0, [pc, #136]	; (801a22c <sin+0xac>)
 801a1a2:	4281      	cmp	r1, r0
 801a1a4:	dd09      	ble.n	801a1ba <sin+0x3a>
 801a1a6:	ee10 0a10 	vmov	r0, s0
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	f7e6 f874 	bl	8000298 <__aeabi_dsub>
 801a1b0:	ec41 0b10 	vmov	d0, r0, r1
 801a1b4:	b005      	add	sp, #20
 801a1b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1ba:	4668      	mov	r0, sp
 801a1bc:	f000 f9c0 	bl	801a540 <__ieee754_rem_pio2>
 801a1c0:	f000 0003 	and.w	r0, r0, #3
 801a1c4:	2801      	cmp	r0, #1
 801a1c6:	d00c      	beq.n	801a1e2 <sin+0x62>
 801a1c8:	2802      	cmp	r0, #2
 801a1ca:	d011      	beq.n	801a1f0 <sin+0x70>
 801a1cc:	b9f0      	cbnz	r0, 801a20c <sin+0x8c>
 801a1ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1d2:	ed9d 0b00 	vldr	d0, [sp]
 801a1d6:	2001      	movs	r0, #1
 801a1d8:	f000 f8f2 	bl	801a3c0 <__kernel_sin>
 801a1dc:	ec51 0b10 	vmov	r0, r1, d0
 801a1e0:	e7e6      	b.n	801a1b0 <sin+0x30>
 801a1e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1e6:	ed9d 0b00 	vldr	d0, [sp]
 801a1ea:	f000 f821 	bl	801a230 <__kernel_cos>
 801a1ee:	e7f5      	b.n	801a1dc <sin+0x5c>
 801a1f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a1f4:	ed9d 0b00 	vldr	d0, [sp]
 801a1f8:	2001      	movs	r0, #1
 801a1fa:	f000 f8e1 	bl	801a3c0 <__kernel_sin>
 801a1fe:	ec53 2b10 	vmov	r2, r3, d0
 801a202:	ee10 0a10 	vmov	r0, s0
 801a206:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a20a:	e7d1      	b.n	801a1b0 <sin+0x30>
 801a20c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a210:	ed9d 0b00 	vldr	d0, [sp]
 801a214:	f000 f80c 	bl	801a230 <__kernel_cos>
 801a218:	e7f1      	b.n	801a1fe <sin+0x7e>
 801a21a:	bf00      	nop
 801a21c:	f3af 8000 	nop.w
	...
 801a228:	3fe921fb 	.word	0x3fe921fb
 801a22c:	7fefffff 	.word	0x7fefffff

0801a230 <__kernel_cos>:
 801a230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a234:	ec57 6b10 	vmov	r6, r7, d0
 801a238:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a23c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a240:	ed8d 1b00 	vstr	d1, [sp]
 801a244:	da07      	bge.n	801a256 <__kernel_cos+0x26>
 801a246:	ee10 0a10 	vmov	r0, s0
 801a24a:	4639      	mov	r1, r7
 801a24c:	f7e6 fc76 	bl	8000b3c <__aeabi_d2iz>
 801a250:	2800      	cmp	r0, #0
 801a252:	f000 8088 	beq.w	801a366 <__kernel_cos+0x136>
 801a256:	4632      	mov	r2, r6
 801a258:	463b      	mov	r3, r7
 801a25a:	4630      	mov	r0, r6
 801a25c:	4639      	mov	r1, r7
 801a25e:	f7e6 f9d3 	bl	8000608 <__aeabi_dmul>
 801a262:	4b51      	ldr	r3, [pc, #324]	; (801a3a8 <__kernel_cos+0x178>)
 801a264:	2200      	movs	r2, #0
 801a266:	4604      	mov	r4, r0
 801a268:	460d      	mov	r5, r1
 801a26a:	f7e6 f9cd 	bl	8000608 <__aeabi_dmul>
 801a26e:	a340      	add	r3, pc, #256	; (adr r3, 801a370 <__kernel_cos+0x140>)
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	4682      	mov	sl, r0
 801a276:	468b      	mov	fp, r1
 801a278:	4620      	mov	r0, r4
 801a27a:	4629      	mov	r1, r5
 801a27c:	f7e6 f9c4 	bl	8000608 <__aeabi_dmul>
 801a280:	a33d      	add	r3, pc, #244	; (adr r3, 801a378 <__kernel_cos+0x148>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	f7e6 f809 	bl	800029c <__adddf3>
 801a28a:	4622      	mov	r2, r4
 801a28c:	462b      	mov	r3, r5
 801a28e:	f7e6 f9bb 	bl	8000608 <__aeabi_dmul>
 801a292:	a33b      	add	r3, pc, #236	; (adr r3, 801a380 <__kernel_cos+0x150>)
 801a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a298:	f7e5 fffe 	bl	8000298 <__aeabi_dsub>
 801a29c:	4622      	mov	r2, r4
 801a29e:	462b      	mov	r3, r5
 801a2a0:	f7e6 f9b2 	bl	8000608 <__aeabi_dmul>
 801a2a4:	a338      	add	r3, pc, #224	; (adr r3, 801a388 <__kernel_cos+0x158>)
 801a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2aa:	f7e5 fff7 	bl	800029c <__adddf3>
 801a2ae:	4622      	mov	r2, r4
 801a2b0:	462b      	mov	r3, r5
 801a2b2:	f7e6 f9a9 	bl	8000608 <__aeabi_dmul>
 801a2b6:	a336      	add	r3, pc, #216	; (adr r3, 801a390 <__kernel_cos+0x160>)
 801a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2bc:	f7e5 ffec 	bl	8000298 <__aeabi_dsub>
 801a2c0:	4622      	mov	r2, r4
 801a2c2:	462b      	mov	r3, r5
 801a2c4:	f7e6 f9a0 	bl	8000608 <__aeabi_dmul>
 801a2c8:	a333      	add	r3, pc, #204	; (adr r3, 801a398 <__kernel_cos+0x168>)
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	f7e5 ffe5 	bl	800029c <__adddf3>
 801a2d2:	4622      	mov	r2, r4
 801a2d4:	462b      	mov	r3, r5
 801a2d6:	f7e6 f997 	bl	8000608 <__aeabi_dmul>
 801a2da:	4622      	mov	r2, r4
 801a2dc:	462b      	mov	r3, r5
 801a2de:	f7e6 f993 	bl	8000608 <__aeabi_dmul>
 801a2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	460d      	mov	r5, r1
 801a2ea:	4630      	mov	r0, r6
 801a2ec:	4639      	mov	r1, r7
 801a2ee:	f7e6 f98b 	bl	8000608 <__aeabi_dmul>
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	4602      	mov	r2, r0
 801a2f6:	4629      	mov	r1, r5
 801a2f8:	4620      	mov	r0, r4
 801a2fa:	f7e5 ffcd 	bl	8000298 <__aeabi_dsub>
 801a2fe:	4b2b      	ldr	r3, [pc, #172]	; (801a3ac <__kernel_cos+0x17c>)
 801a300:	4598      	cmp	r8, r3
 801a302:	4606      	mov	r6, r0
 801a304:	460f      	mov	r7, r1
 801a306:	dc10      	bgt.n	801a32a <__kernel_cos+0xfa>
 801a308:	4602      	mov	r2, r0
 801a30a:	460b      	mov	r3, r1
 801a30c:	4650      	mov	r0, sl
 801a30e:	4659      	mov	r1, fp
 801a310:	f7e5 ffc2 	bl	8000298 <__aeabi_dsub>
 801a314:	460b      	mov	r3, r1
 801a316:	4926      	ldr	r1, [pc, #152]	; (801a3b0 <__kernel_cos+0x180>)
 801a318:	4602      	mov	r2, r0
 801a31a:	2000      	movs	r0, #0
 801a31c:	f7e5 ffbc 	bl	8000298 <__aeabi_dsub>
 801a320:	ec41 0b10 	vmov	d0, r0, r1
 801a324:	b003      	add	sp, #12
 801a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32a:	4b22      	ldr	r3, [pc, #136]	; (801a3b4 <__kernel_cos+0x184>)
 801a32c:	4920      	ldr	r1, [pc, #128]	; (801a3b0 <__kernel_cos+0x180>)
 801a32e:	4598      	cmp	r8, r3
 801a330:	bfcc      	ite	gt
 801a332:	4d21      	ldrgt	r5, [pc, #132]	; (801a3b8 <__kernel_cos+0x188>)
 801a334:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a338:	2400      	movs	r4, #0
 801a33a:	4622      	mov	r2, r4
 801a33c:	462b      	mov	r3, r5
 801a33e:	2000      	movs	r0, #0
 801a340:	f7e5 ffaa 	bl	8000298 <__aeabi_dsub>
 801a344:	4622      	mov	r2, r4
 801a346:	4680      	mov	r8, r0
 801a348:	4689      	mov	r9, r1
 801a34a:	462b      	mov	r3, r5
 801a34c:	4650      	mov	r0, sl
 801a34e:	4659      	mov	r1, fp
 801a350:	f7e5 ffa2 	bl	8000298 <__aeabi_dsub>
 801a354:	4632      	mov	r2, r6
 801a356:	463b      	mov	r3, r7
 801a358:	f7e5 ff9e 	bl	8000298 <__aeabi_dsub>
 801a35c:	4602      	mov	r2, r0
 801a35e:	460b      	mov	r3, r1
 801a360:	4640      	mov	r0, r8
 801a362:	4649      	mov	r1, r9
 801a364:	e7da      	b.n	801a31c <__kernel_cos+0xec>
 801a366:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a3a0 <__kernel_cos+0x170>
 801a36a:	e7db      	b.n	801a324 <__kernel_cos+0xf4>
 801a36c:	f3af 8000 	nop.w
 801a370:	be8838d4 	.word	0xbe8838d4
 801a374:	bda8fae9 	.word	0xbda8fae9
 801a378:	bdb4b1c4 	.word	0xbdb4b1c4
 801a37c:	3e21ee9e 	.word	0x3e21ee9e
 801a380:	809c52ad 	.word	0x809c52ad
 801a384:	3e927e4f 	.word	0x3e927e4f
 801a388:	19cb1590 	.word	0x19cb1590
 801a38c:	3efa01a0 	.word	0x3efa01a0
 801a390:	16c15177 	.word	0x16c15177
 801a394:	3f56c16c 	.word	0x3f56c16c
 801a398:	5555554c 	.word	0x5555554c
 801a39c:	3fa55555 	.word	0x3fa55555
 801a3a0:	00000000 	.word	0x00000000
 801a3a4:	3ff00000 	.word	0x3ff00000
 801a3a8:	3fe00000 	.word	0x3fe00000
 801a3ac:	3fd33332 	.word	0x3fd33332
 801a3b0:	3ff00000 	.word	0x3ff00000
 801a3b4:	3fe90000 	.word	0x3fe90000
 801a3b8:	3fd20000 	.word	0x3fd20000
 801a3bc:	00000000 	.word	0x00000000

0801a3c0 <__kernel_sin>:
 801a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3c4:	ed2d 8b04 	vpush	{d8-d9}
 801a3c8:	eeb0 8a41 	vmov.f32	s16, s2
 801a3cc:	eef0 8a61 	vmov.f32	s17, s3
 801a3d0:	ec55 4b10 	vmov	r4, r5, d0
 801a3d4:	b083      	sub	sp, #12
 801a3d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a3da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a3de:	9001      	str	r0, [sp, #4]
 801a3e0:	da06      	bge.n	801a3f0 <__kernel_sin+0x30>
 801a3e2:	ee10 0a10 	vmov	r0, s0
 801a3e6:	4629      	mov	r1, r5
 801a3e8:	f7e6 fba8 	bl	8000b3c <__aeabi_d2iz>
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d051      	beq.n	801a494 <__kernel_sin+0xd4>
 801a3f0:	4622      	mov	r2, r4
 801a3f2:	462b      	mov	r3, r5
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	4629      	mov	r1, r5
 801a3f8:	f7e6 f906 	bl	8000608 <__aeabi_dmul>
 801a3fc:	4682      	mov	sl, r0
 801a3fe:	468b      	mov	fp, r1
 801a400:	4602      	mov	r2, r0
 801a402:	460b      	mov	r3, r1
 801a404:	4620      	mov	r0, r4
 801a406:	4629      	mov	r1, r5
 801a408:	f7e6 f8fe 	bl	8000608 <__aeabi_dmul>
 801a40c:	a341      	add	r3, pc, #260	; (adr r3, 801a514 <__kernel_sin+0x154>)
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	4680      	mov	r8, r0
 801a414:	4689      	mov	r9, r1
 801a416:	4650      	mov	r0, sl
 801a418:	4659      	mov	r1, fp
 801a41a:	f7e6 f8f5 	bl	8000608 <__aeabi_dmul>
 801a41e:	a33f      	add	r3, pc, #252	; (adr r3, 801a51c <__kernel_sin+0x15c>)
 801a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a424:	f7e5 ff38 	bl	8000298 <__aeabi_dsub>
 801a428:	4652      	mov	r2, sl
 801a42a:	465b      	mov	r3, fp
 801a42c:	f7e6 f8ec 	bl	8000608 <__aeabi_dmul>
 801a430:	a33c      	add	r3, pc, #240	; (adr r3, 801a524 <__kernel_sin+0x164>)
 801a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a436:	f7e5 ff31 	bl	800029c <__adddf3>
 801a43a:	4652      	mov	r2, sl
 801a43c:	465b      	mov	r3, fp
 801a43e:	f7e6 f8e3 	bl	8000608 <__aeabi_dmul>
 801a442:	a33a      	add	r3, pc, #232	; (adr r3, 801a52c <__kernel_sin+0x16c>)
 801a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a448:	f7e5 ff26 	bl	8000298 <__aeabi_dsub>
 801a44c:	4652      	mov	r2, sl
 801a44e:	465b      	mov	r3, fp
 801a450:	f7e6 f8da 	bl	8000608 <__aeabi_dmul>
 801a454:	a337      	add	r3, pc, #220	; (adr r3, 801a534 <__kernel_sin+0x174>)
 801a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a45a:	f7e5 ff1f 	bl	800029c <__adddf3>
 801a45e:	9b01      	ldr	r3, [sp, #4]
 801a460:	4606      	mov	r6, r0
 801a462:	460f      	mov	r7, r1
 801a464:	b9eb      	cbnz	r3, 801a4a2 <__kernel_sin+0xe2>
 801a466:	4602      	mov	r2, r0
 801a468:	460b      	mov	r3, r1
 801a46a:	4650      	mov	r0, sl
 801a46c:	4659      	mov	r1, fp
 801a46e:	f7e6 f8cb 	bl	8000608 <__aeabi_dmul>
 801a472:	a325      	add	r3, pc, #148	; (adr r3, 801a508 <__kernel_sin+0x148>)
 801a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a478:	f7e5 ff0e 	bl	8000298 <__aeabi_dsub>
 801a47c:	4642      	mov	r2, r8
 801a47e:	464b      	mov	r3, r9
 801a480:	f7e6 f8c2 	bl	8000608 <__aeabi_dmul>
 801a484:	4602      	mov	r2, r0
 801a486:	460b      	mov	r3, r1
 801a488:	4620      	mov	r0, r4
 801a48a:	4629      	mov	r1, r5
 801a48c:	f7e5 ff06 	bl	800029c <__adddf3>
 801a490:	4604      	mov	r4, r0
 801a492:	460d      	mov	r5, r1
 801a494:	ec45 4b10 	vmov	d0, r4, r5
 801a498:	b003      	add	sp, #12
 801a49a:	ecbd 8b04 	vpop	{d8-d9}
 801a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a2:	4b1b      	ldr	r3, [pc, #108]	; (801a510 <__kernel_sin+0x150>)
 801a4a4:	ec51 0b18 	vmov	r0, r1, d8
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	f7e6 f8ad 	bl	8000608 <__aeabi_dmul>
 801a4ae:	4632      	mov	r2, r6
 801a4b0:	ec41 0b19 	vmov	d9, r0, r1
 801a4b4:	463b      	mov	r3, r7
 801a4b6:	4640      	mov	r0, r8
 801a4b8:	4649      	mov	r1, r9
 801a4ba:	f7e6 f8a5 	bl	8000608 <__aeabi_dmul>
 801a4be:	4602      	mov	r2, r0
 801a4c0:	460b      	mov	r3, r1
 801a4c2:	ec51 0b19 	vmov	r0, r1, d9
 801a4c6:	f7e5 fee7 	bl	8000298 <__aeabi_dsub>
 801a4ca:	4652      	mov	r2, sl
 801a4cc:	465b      	mov	r3, fp
 801a4ce:	f7e6 f89b 	bl	8000608 <__aeabi_dmul>
 801a4d2:	ec53 2b18 	vmov	r2, r3, d8
 801a4d6:	f7e5 fedf 	bl	8000298 <__aeabi_dsub>
 801a4da:	a30b      	add	r3, pc, #44	; (adr r3, 801a508 <__kernel_sin+0x148>)
 801a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4e0:	4606      	mov	r6, r0
 801a4e2:	460f      	mov	r7, r1
 801a4e4:	4640      	mov	r0, r8
 801a4e6:	4649      	mov	r1, r9
 801a4e8:	f7e6 f88e 	bl	8000608 <__aeabi_dmul>
 801a4ec:	4602      	mov	r2, r0
 801a4ee:	460b      	mov	r3, r1
 801a4f0:	4630      	mov	r0, r6
 801a4f2:	4639      	mov	r1, r7
 801a4f4:	f7e5 fed2 	bl	800029c <__adddf3>
 801a4f8:	4602      	mov	r2, r0
 801a4fa:	460b      	mov	r3, r1
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	4629      	mov	r1, r5
 801a500:	f7e5 feca 	bl	8000298 <__aeabi_dsub>
 801a504:	e7c4      	b.n	801a490 <__kernel_sin+0xd0>
 801a506:	bf00      	nop
 801a508:	55555549 	.word	0x55555549
 801a50c:	3fc55555 	.word	0x3fc55555
 801a510:	3fe00000 	.word	0x3fe00000
 801a514:	5acfd57c 	.word	0x5acfd57c
 801a518:	3de5d93a 	.word	0x3de5d93a
 801a51c:	8a2b9ceb 	.word	0x8a2b9ceb
 801a520:	3e5ae5e6 	.word	0x3e5ae5e6
 801a524:	57b1fe7d 	.word	0x57b1fe7d
 801a528:	3ec71de3 	.word	0x3ec71de3
 801a52c:	19c161d5 	.word	0x19c161d5
 801a530:	3f2a01a0 	.word	0x3f2a01a0
 801a534:	1110f8a6 	.word	0x1110f8a6
 801a538:	3f811111 	.word	0x3f811111
 801a53c:	00000000 	.word	0x00000000

0801a540 <__ieee754_rem_pio2>:
 801a540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a544:	ed2d 8b02 	vpush	{d8}
 801a548:	ec55 4b10 	vmov	r4, r5, d0
 801a54c:	4bca      	ldr	r3, [pc, #808]	; (801a878 <__ieee754_rem_pio2+0x338>)
 801a54e:	b08b      	sub	sp, #44	; 0x2c
 801a550:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801a554:	4598      	cmp	r8, r3
 801a556:	4682      	mov	sl, r0
 801a558:	9502      	str	r5, [sp, #8]
 801a55a:	dc08      	bgt.n	801a56e <__ieee754_rem_pio2+0x2e>
 801a55c:	2200      	movs	r2, #0
 801a55e:	2300      	movs	r3, #0
 801a560:	ed80 0b00 	vstr	d0, [r0]
 801a564:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a568:	f04f 0b00 	mov.w	fp, #0
 801a56c:	e028      	b.n	801a5c0 <__ieee754_rem_pio2+0x80>
 801a56e:	4bc3      	ldr	r3, [pc, #780]	; (801a87c <__ieee754_rem_pio2+0x33c>)
 801a570:	4598      	cmp	r8, r3
 801a572:	dc78      	bgt.n	801a666 <__ieee754_rem_pio2+0x126>
 801a574:	9b02      	ldr	r3, [sp, #8]
 801a576:	4ec2      	ldr	r6, [pc, #776]	; (801a880 <__ieee754_rem_pio2+0x340>)
 801a578:	2b00      	cmp	r3, #0
 801a57a:	ee10 0a10 	vmov	r0, s0
 801a57e:	a3b0      	add	r3, pc, #704	; (adr r3, 801a840 <__ieee754_rem_pio2+0x300>)
 801a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a584:	4629      	mov	r1, r5
 801a586:	dd39      	ble.n	801a5fc <__ieee754_rem_pio2+0xbc>
 801a588:	f7e5 fe86 	bl	8000298 <__aeabi_dsub>
 801a58c:	45b0      	cmp	r8, r6
 801a58e:	4604      	mov	r4, r0
 801a590:	460d      	mov	r5, r1
 801a592:	d01b      	beq.n	801a5cc <__ieee754_rem_pio2+0x8c>
 801a594:	a3ac      	add	r3, pc, #688	; (adr r3, 801a848 <__ieee754_rem_pio2+0x308>)
 801a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a59a:	f7e5 fe7d 	bl	8000298 <__aeabi_dsub>
 801a59e:	4602      	mov	r2, r0
 801a5a0:	460b      	mov	r3, r1
 801a5a2:	e9ca 2300 	strd	r2, r3, [sl]
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	4629      	mov	r1, r5
 801a5aa:	f7e5 fe75 	bl	8000298 <__aeabi_dsub>
 801a5ae:	a3a6      	add	r3, pc, #664	; (adr r3, 801a848 <__ieee754_rem_pio2+0x308>)
 801a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b4:	f7e5 fe70 	bl	8000298 <__aeabi_dsub>
 801a5b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a5bc:	f04f 0b01 	mov.w	fp, #1
 801a5c0:	4658      	mov	r0, fp
 801a5c2:	b00b      	add	sp, #44	; 0x2c
 801a5c4:	ecbd 8b02 	vpop	{d8}
 801a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5cc:	a3a0      	add	r3, pc, #640	; (adr r3, 801a850 <__ieee754_rem_pio2+0x310>)
 801a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d2:	f7e5 fe61 	bl	8000298 <__aeabi_dsub>
 801a5d6:	a3a0      	add	r3, pc, #640	; (adr r3, 801a858 <__ieee754_rem_pio2+0x318>)
 801a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5dc:	4604      	mov	r4, r0
 801a5de:	460d      	mov	r5, r1
 801a5e0:	f7e5 fe5a 	bl	8000298 <__aeabi_dsub>
 801a5e4:	4602      	mov	r2, r0
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	e9ca 2300 	strd	r2, r3, [sl]
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	4629      	mov	r1, r5
 801a5f0:	f7e5 fe52 	bl	8000298 <__aeabi_dsub>
 801a5f4:	a398      	add	r3, pc, #608	; (adr r3, 801a858 <__ieee754_rem_pio2+0x318>)
 801a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5fa:	e7db      	b.n	801a5b4 <__ieee754_rem_pio2+0x74>
 801a5fc:	f7e5 fe4e 	bl	800029c <__adddf3>
 801a600:	45b0      	cmp	r8, r6
 801a602:	4604      	mov	r4, r0
 801a604:	460d      	mov	r5, r1
 801a606:	d016      	beq.n	801a636 <__ieee754_rem_pio2+0xf6>
 801a608:	a38f      	add	r3, pc, #572	; (adr r3, 801a848 <__ieee754_rem_pio2+0x308>)
 801a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60e:	f7e5 fe45 	bl	800029c <__adddf3>
 801a612:	4602      	mov	r2, r0
 801a614:	460b      	mov	r3, r1
 801a616:	e9ca 2300 	strd	r2, r3, [sl]
 801a61a:	4620      	mov	r0, r4
 801a61c:	4629      	mov	r1, r5
 801a61e:	f7e5 fe3b 	bl	8000298 <__aeabi_dsub>
 801a622:	a389      	add	r3, pc, #548	; (adr r3, 801a848 <__ieee754_rem_pio2+0x308>)
 801a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a628:	f7e5 fe38 	bl	800029c <__adddf3>
 801a62c:	f04f 3bff 	mov.w	fp, #4294967295
 801a630:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a634:	e7c4      	b.n	801a5c0 <__ieee754_rem_pio2+0x80>
 801a636:	a386      	add	r3, pc, #536	; (adr r3, 801a850 <__ieee754_rem_pio2+0x310>)
 801a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63c:	f7e5 fe2e 	bl	800029c <__adddf3>
 801a640:	a385      	add	r3, pc, #532	; (adr r3, 801a858 <__ieee754_rem_pio2+0x318>)
 801a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a646:	4604      	mov	r4, r0
 801a648:	460d      	mov	r5, r1
 801a64a:	f7e5 fe27 	bl	800029c <__adddf3>
 801a64e:	4602      	mov	r2, r0
 801a650:	460b      	mov	r3, r1
 801a652:	e9ca 2300 	strd	r2, r3, [sl]
 801a656:	4620      	mov	r0, r4
 801a658:	4629      	mov	r1, r5
 801a65a:	f7e5 fe1d 	bl	8000298 <__aeabi_dsub>
 801a65e:	a37e      	add	r3, pc, #504	; (adr r3, 801a858 <__ieee754_rem_pio2+0x318>)
 801a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a664:	e7e0      	b.n	801a628 <__ieee754_rem_pio2+0xe8>
 801a666:	4b87      	ldr	r3, [pc, #540]	; (801a884 <__ieee754_rem_pio2+0x344>)
 801a668:	4598      	cmp	r8, r3
 801a66a:	f300 80d8 	bgt.w	801a81e <__ieee754_rem_pio2+0x2de>
 801a66e:	f000 f96d 	bl	801a94c <fabs>
 801a672:	ec55 4b10 	vmov	r4, r5, d0
 801a676:	ee10 0a10 	vmov	r0, s0
 801a67a:	a379      	add	r3, pc, #484	; (adr r3, 801a860 <__ieee754_rem_pio2+0x320>)
 801a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a680:	4629      	mov	r1, r5
 801a682:	f7e5 ffc1 	bl	8000608 <__aeabi_dmul>
 801a686:	4b80      	ldr	r3, [pc, #512]	; (801a888 <__ieee754_rem_pio2+0x348>)
 801a688:	2200      	movs	r2, #0
 801a68a:	f7e5 fe07 	bl	800029c <__adddf3>
 801a68e:	f7e6 fa55 	bl	8000b3c <__aeabi_d2iz>
 801a692:	4683      	mov	fp, r0
 801a694:	f7e5 ff4e 	bl	8000534 <__aeabi_i2d>
 801a698:	4602      	mov	r2, r0
 801a69a:	460b      	mov	r3, r1
 801a69c:	ec43 2b18 	vmov	d8, r2, r3
 801a6a0:	a367      	add	r3, pc, #412	; (adr r3, 801a840 <__ieee754_rem_pio2+0x300>)
 801a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a6:	f7e5 ffaf 	bl	8000608 <__aeabi_dmul>
 801a6aa:	4602      	mov	r2, r0
 801a6ac:	460b      	mov	r3, r1
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	4629      	mov	r1, r5
 801a6b2:	f7e5 fdf1 	bl	8000298 <__aeabi_dsub>
 801a6b6:	a364      	add	r3, pc, #400	; (adr r3, 801a848 <__ieee754_rem_pio2+0x308>)
 801a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6bc:	4606      	mov	r6, r0
 801a6be:	460f      	mov	r7, r1
 801a6c0:	ec51 0b18 	vmov	r0, r1, d8
 801a6c4:	f7e5 ffa0 	bl	8000608 <__aeabi_dmul>
 801a6c8:	f1bb 0f1f 	cmp.w	fp, #31
 801a6cc:	4604      	mov	r4, r0
 801a6ce:	460d      	mov	r5, r1
 801a6d0:	dc0d      	bgt.n	801a6ee <__ieee754_rem_pio2+0x1ae>
 801a6d2:	4b6e      	ldr	r3, [pc, #440]	; (801a88c <__ieee754_rem_pio2+0x34c>)
 801a6d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6dc:	4543      	cmp	r3, r8
 801a6de:	d006      	beq.n	801a6ee <__ieee754_rem_pio2+0x1ae>
 801a6e0:	4622      	mov	r2, r4
 801a6e2:	462b      	mov	r3, r5
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	4639      	mov	r1, r7
 801a6e8:	f7e5 fdd6 	bl	8000298 <__aeabi_dsub>
 801a6ec:	e00e      	b.n	801a70c <__ieee754_rem_pio2+0x1cc>
 801a6ee:	462b      	mov	r3, r5
 801a6f0:	4622      	mov	r2, r4
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	4639      	mov	r1, r7
 801a6f6:	f7e5 fdcf 	bl	8000298 <__aeabi_dsub>
 801a6fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a6fe:	9303      	str	r3, [sp, #12]
 801a700:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a704:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a708:	2b10      	cmp	r3, #16
 801a70a:	dc02      	bgt.n	801a712 <__ieee754_rem_pio2+0x1d2>
 801a70c:	e9ca 0100 	strd	r0, r1, [sl]
 801a710:	e039      	b.n	801a786 <__ieee754_rem_pio2+0x246>
 801a712:	a34f      	add	r3, pc, #316	; (adr r3, 801a850 <__ieee754_rem_pio2+0x310>)
 801a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a718:	ec51 0b18 	vmov	r0, r1, d8
 801a71c:	f7e5 ff74 	bl	8000608 <__aeabi_dmul>
 801a720:	4604      	mov	r4, r0
 801a722:	460d      	mov	r5, r1
 801a724:	4602      	mov	r2, r0
 801a726:	460b      	mov	r3, r1
 801a728:	4630      	mov	r0, r6
 801a72a:	4639      	mov	r1, r7
 801a72c:	f7e5 fdb4 	bl	8000298 <__aeabi_dsub>
 801a730:	4602      	mov	r2, r0
 801a732:	460b      	mov	r3, r1
 801a734:	4680      	mov	r8, r0
 801a736:	4689      	mov	r9, r1
 801a738:	4630      	mov	r0, r6
 801a73a:	4639      	mov	r1, r7
 801a73c:	f7e5 fdac 	bl	8000298 <__aeabi_dsub>
 801a740:	4622      	mov	r2, r4
 801a742:	462b      	mov	r3, r5
 801a744:	f7e5 fda8 	bl	8000298 <__aeabi_dsub>
 801a748:	a343      	add	r3, pc, #268	; (adr r3, 801a858 <__ieee754_rem_pio2+0x318>)
 801a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74e:	4604      	mov	r4, r0
 801a750:	460d      	mov	r5, r1
 801a752:	ec51 0b18 	vmov	r0, r1, d8
 801a756:	f7e5 ff57 	bl	8000608 <__aeabi_dmul>
 801a75a:	4622      	mov	r2, r4
 801a75c:	462b      	mov	r3, r5
 801a75e:	f7e5 fd9b 	bl	8000298 <__aeabi_dsub>
 801a762:	4602      	mov	r2, r0
 801a764:	460b      	mov	r3, r1
 801a766:	4604      	mov	r4, r0
 801a768:	460d      	mov	r5, r1
 801a76a:	4640      	mov	r0, r8
 801a76c:	4649      	mov	r1, r9
 801a76e:	f7e5 fd93 	bl	8000298 <__aeabi_dsub>
 801a772:	9a03      	ldr	r2, [sp, #12]
 801a774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a778:	1ad3      	subs	r3, r2, r3
 801a77a:	2b31      	cmp	r3, #49	; 0x31
 801a77c:	dc24      	bgt.n	801a7c8 <__ieee754_rem_pio2+0x288>
 801a77e:	e9ca 0100 	strd	r0, r1, [sl]
 801a782:	4646      	mov	r6, r8
 801a784:	464f      	mov	r7, r9
 801a786:	e9da 8900 	ldrd	r8, r9, [sl]
 801a78a:	4630      	mov	r0, r6
 801a78c:	4642      	mov	r2, r8
 801a78e:	464b      	mov	r3, r9
 801a790:	4639      	mov	r1, r7
 801a792:	f7e5 fd81 	bl	8000298 <__aeabi_dsub>
 801a796:	462b      	mov	r3, r5
 801a798:	4622      	mov	r2, r4
 801a79a:	f7e5 fd7d 	bl	8000298 <__aeabi_dsub>
 801a79e:	9b02      	ldr	r3, [sp, #8]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a7a6:	f6bf af0b 	bge.w	801a5c0 <__ieee754_rem_pio2+0x80>
 801a7aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a7ae:	f8ca 3004 	str.w	r3, [sl, #4]
 801a7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7b6:	f8ca 8000 	str.w	r8, [sl]
 801a7ba:	f8ca 0008 	str.w	r0, [sl, #8]
 801a7be:	f8ca 300c 	str.w	r3, [sl, #12]
 801a7c2:	f1cb 0b00 	rsb	fp, fp, #0
 801a7c6:	e6fb      	b.n	801a5c0 <__ieee754_rem_pio2+0x80>
 801a7c8:	a327      	add	r3, pc, #156	; (adr r3, 801a868 <__ieee754_rem_pio2+0x328>)
 801a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ce:	ec51 0b18 	vmov	r0, r1, d8
 801a7d2:	f7e5 ff19 	bl	8000608 <__aeabi_dmul>
 801a7d6:	4604      	mov	r4, r0
 801a7d8:	460d      	mov	r5, r1
 801a7da:	4602      	mov	r2, r0
 801a7dc:	460b      	mov	r3, r1
 801a7de:	4640      	mov	r0, r8
 801a7e0:	4649      	mov	r1, r9
 801a7e2:	f7e5 fd59 	bl	8000298 <__aeabi_dsub>
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	4606      	mov	r6, r0
 801a7ec:	460f      	mov	r7, r1
 801a7ee:	4640      	mov	r0, r8
 801a7f0:	4649      	mov	r1, r9
 801a7f2:	f7e5 fd51 	bl	8000298 <__aeabi_dsub>
 801a7f6:	4622      	mov	r2, r4
 801a7f8:	462b      	mov	r3, r5
 801a7fa:	f7e5 fd4d 	bl	8000298 <__aeabi_dsub>
 801a7fe:	a31c      	add	r3, pc, #112	; (adr r3, 801a870 <__ieee754_rem_pio2+0x330>)
 801a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a804:	4604      	mov	r4, r0
 801a806:	460d      	mov	r5, r1
 801a808:	ec51 0b18 	vmov	r0, r1, d8
 801a80c:	f7e5 fefc 	bl	8000608 <__aeabi_dmul>
 801a810:	4622      	mov	r2, r4
 801a812:	462b      	mov	r3, r5
 801a814:	f7e5 fd40 	bl	8000298 <__aeabi_dsub>
 801a818:	4604      	mov	r4, r0
 801a81a:	460d      	mov	r5, r1
 801a81c:	e760      	b.n	801a6e0 <__ieee754_rem_pio2+0x1a0>
 801a81e:	4b1c      	ldr	r3, [pc, #112]	; (801a890 <__ieee754_rem_pio2+0x350>)
 801a820:	4598      	cmp	r8, r3
 801a822:	dd37      	ble.n	801a894 <__ieee754_rem_pio2+0x354>
 801a824:	ee10 2a10 	vmov	r2, s0
 801a828:	462b      	mov	r3, r5
 801a82a:	4620      	mov	r0, r4
 801a82c:	4629      	mov	r1, r5
 801a82e:	f7e5 fd33 	bl	8000298 <__aeabi_dsub>
 801a832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a836:	e9ca 0100 	strd	r0, r1, [sl]
 801a83a:	e695      	b.n	801a568 <__ieee754_rem_pio2+0x28>
 801a83c:	f3af 8000 	nop.w
 801a840:	54400000 	.word	0x54400000
 801a844:	3ff921fb 	.word	0x3ff921fb
 801a848:	1a626331 	.word	0x1a626331
 801a84c:	3dd0b461 	.word	0x3dd0b461
 801a850:	1a600000 	.word	0x1a600000
 801a854:	3dd0b461 	.word	0x3dd0b461
 801a858:	2e037073 	.word	0x2e037073
 801a85c:	3ba3198a 	.word	0x3ba3198a
 801a860:	6dc9c883 	.word	0x6dc9c883
 801a864:	3fe45f30 	.word	0x3fe45f30
 801a868:	2e000000 	.word	0x2e000000
 801a86c:	3ba3198a 	.word	0x3ba3198a
 801a870:	252049c1 	.word	0x252049c1
 801a874:	397b839a 	.word	0x397b839a
 801a878:	3fe921fb 	.word	0x3fe921fb
 801a87c:	4002d97b 	.word	0x4002d97b
 801a880:	3ff921fb 	.word	0x3ff921fb
 801a884:	413921fb 	.word	0x413921fb
 801a888:	3fe00000 	.word	0x3fe00000
 801a88c:	0801d5f0 	.word	0x0801d5f0
 801a890:	7fefffff 	.word	0x7fefffff
 801a894:	ea4f 5628 	mov.w	r6, r8, asr #20
 801a898:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801a89c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	f7e6 f94a 	bl	8000b3c <__aeabi_d2iz>
 801a8a8:	f7e5 fe44 	bl	8000534 <__aeabi_i2d>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	460b      	mov	r3, r1
 801a8b0:	4620      	mov	r0, r4
 801a8b2:	4629      	mov	r1, r5
 801a8b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a8b8:	f7e5 fcee 	bl	8000298 <__aeabi_dsub>
 801a8bc:	4b21      	ldr	r3, [pc, #132]	; (801a944 <__ieee754_rem_pio2+0x404>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	f7e5 fea2 	bl	8000608 <__aeabi_dmul>
 801a8c4:	460d      	mov	r5, r1
 801a8c6:	4604      	mov	r4, r0
 801a8c8:	f7e6 f938 	bl	8000b3c <__aeabi_d2iz>
 801a8cc:	f7e5 fe32 	bl	8000534 <__aeabi_i2d>
 801a8d0:	4602      	mov	r2, r0
 801a8d2:	460b      	mov	r3, r1
 801a8d4:	4620      	mov	r0, r4
 801a8d6:	4629      	mov	r1, r5
 801a8d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a8dc:	f7e5 fcdc 	bl	8000298 <__aeabi_dsub>
 801a8e0:	4b18      	ldr	r3, [pc, #96]	; (801a944 <__ieee754_rem_pio2+0x404>)
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	f7e5 fe90 	bl	8000608 <__aeabi_dmul>
 801a8e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a8ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a8f0:	2703      	movs	r7, #3
 801a8f2:	2400      	movs	r4, #0
 801a8f4:	2500      	movs	r5, #0
 801a8f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801a8fa:	4622      	mov	r2, r4
 801a8fc:	462b      	mov	r3, r5
 801a8fe:	46b9      	mov	r9, r7
 801a900:	3f01      	subs	r7, #1
 801a902:	f7e6 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 801a906:	2800      	cmp	r0, #0
 801a908:	d1f5      	bne.n	801a8f6 <__ieee754_rem_pio2+0x3b6>
 801a90a:	4b0f      	ldr	r3, [pc, #60]	; (801a948 <__ieee754_rem_pio2+0x408>)
 801a90c:	9301      	str	r3, [sp, #4]
 801a90e:	2302      	movs	r3, #2
 801a910:	9300      	str	r3, [sp, #0]
 801a912:	4632      	mov	r2, r6
 801a914:	464b      	mov	r3, r9
 801a916:	4651      	mov	r1, sl
 801a918:	a804      	add	r0, sp, #16
 801a91a:	f000 f821 	bl	801a960 <__kernel_rem_pio2>
 801a91e:	9b02      	ldr	r3, [sp, #8]
 801a920:	2b00      	cmp	r3, #0
 801a922:	4683      	mov	fp, r0
 801a924:	f6bf ae4c 	bge.w	801a5c0 <__ieee754_rem_pio2+0x80>
 801a928:	e9da 2100 	ldrd	r2, r1, [sl]
 801a92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a930:	e9ca 2300 	strd	r2, r3, [sl]
 801a934:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801a938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a93c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801a940:	e73f      	b.n	801a7c2 <__ieee754_rem_pio2+0x282>
 801a942:	bf00      	nop
 801a944:	41700000 	.word	0x41700000
 801a948:	0801d670 	.word	0x0801d670

0801a94c <fabs>:
 801a94c:	ec51 0b10 	vmov	r0, r1, d0
 801a950:	ee10 2a10 	vmov	r2, s0
 801a954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a958:	ec43 2b10 	vmov	d0, r2, r3
 801a95c:	4770      	bx	lr
	...

0801a960 <__kernel_rem_pio2>:
 801a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a964:	ed2d 8b02 	vpush	{d8}
 801a968:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801a96c:	f112 0f14 	cmn.w	r2, #20
 801a970:	9306      	str	r3, [sp, #24]
 801a972:	9104      	str	r1, [sp, #16]
 801a974:	4bc2      	ldr	r3, [pc, #776]	; (801ac80 <__kernel_rem_pio2+0x320>)
 801a976:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801a978:	9009      	str	r0, [sp, #36]	; 0x24
 801a97a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a97e:	9300      	str	r3, [sp, #0]
 801a980:	9b06      	ldr	r3, [sp, #24]
 801a982:	f103 33ff 	add.w	r3, r3, #4294967295
 801a986:	bfa8      	it	ge
 801a988:	1ed4      	subge	r4, r2, #3
 801a98a:	9305      	str	r3, [sp, #20]
 801a98c:	bfb2      	itee	lt
 801a98e:	2400      	movlt	r4, #0
 801a990:	2318      	movge	r3, #24
 801a992:	fb94 f4f3 	sdivge	r4, r4, r3
 801a996:	f06f 0317 	mvn.w	r3, #23
 801a99a:	fb04 3303 	mla	r3, r4, r3, r3
 801a99e:	eb03 0a02 	add.w	sl, r3, r2
 801a9a2:	9b00      	ldr	r3, [sp, #0]
 801a9a4:	9a05      	ldr	r2, [sp, #20]
 801a9a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801ac70 <__kernel_rem_pio2+0x310>
 801a9aa:	eb03 0802 	add.w	r8, r3, r2
 801a9ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a9b0:	1aa7      	subs	r7, r4, r2
 801a9b2:	ae20      	add	r6, sp, #128	; 0x80
 801a9b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a9b8:	2500      	movs	r5, #0
 801a9ba:	4545      	cmp	r5, r8
 801a9bc:	dd13      	ble.n	801a9e6 <__kernel_rem_pio2+0x86>
 801a9be:	9b06      	ldr	r3, [sp, #24]
 801a9c0:	aa20      	add	r2, sp, #128	; 0x80
 801a9c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a9c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801a9ca:	f04f 0800 	mov.w	r8, #0
 801a9ce:	9b00      	ldr	r3, [sp, #0]
 801a9d0:	4598      	cmp	r8, r3
 801a9d2:	dc31      	bgt.n	801aa38 <__kernel_rem_pio2+0xd8>
 801a9d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801ac70 <__kernel_rem_pio2+0x310>
 801a9d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a9dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9e0:	462f      	mov	r7, r5
 801a9e2:	2600      	movs	r6, #0
 801a9e4:	e01b      	b.n	801aa1e <__kernel_rem_pio2+0xbe>
 801a9e6:	42ef      	cmn	r7, r5
 801a9e8:	d407      	bmi.n	801a9fa <__kernel_rem_pio2+0x9a>
 801a9ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a9ee:	f7e5 fda1 	bl	8000534 <__aeabi_i2d>
 801a9f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a9f6:	3501      	adds	r5, #1
 801a9f8:	e7df      	b.n	801a9ba <__kernel_rem_pio2+0x5a>
 801a9fa:	ec51 0b18 	vmov	r0, r1, d8
 801a9fe:	e7f8      	b.n	801a9f2 <__kernel_rem_pio2+0x92>
 801aa00:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aa04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801aa08:	f7e5 fdfe 	bl	8000608 <__aeabi_dmul>
 801aa0c:	4602      	mov	r2, r0
 801aa0e:	460b      	mov	r3, r1
 801aa10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aa14:	f7e5 fc42 	bl	800029c <__adddf3>
 801aa18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aa1c:	3601      	adds	r6, #1
 801aa1e:	9b05      	ldr	r3, [sp, #20]
 801aa20:	429e      	cmp	r6, r3
 801aa22:	f1a7 0708 	sub.w	r7, r7, #8
 801aa26:	ddeb      	ble.n	801aa00 <__kernel_rem_pio2+0xa0>
 801aa28:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa2c:	f108 0801 	add.w	r8, r8, #1
 801aa30:	ecab 7b02 	vstmia	fp!, {d7}
 801aa34:	3508      	adds	r5, #8
 801aa36:	e7ca      	b.n	801a9ce <__kernel_rem_pio2+0x6e>
 801aa38:	9b00      	ldr	r3, [sp, #0]
 801aa3a:	aa0c      	add	r2, sp, #48	; 0x30
 801aa3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aa40:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801aa44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801aa48:	9c00      	ldr	r4, [sp, #0]
 801aa4a:	930a      	str	r3, [sp, #40]	; 0x28
 801aa4c:	00e3      	lsls	r3, r4, #3
 801aa4e:	9308      	str	r3, [sp, #32]
 801aa50:	ab98      	add	r3, sp, #608	; 0x260
 801aa52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aa56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801aa5a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801aa5e:	ab70      	add	r3, sp, #448	; 0x1c0
 801aa60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801aa64:	46c3      	mov	fp, r8
 801aa66:	46a1      	mov	r9, r4
 801aa68:	f1b9 0f00 	cmp.w	r9, #0
 801aa6c:	f1a5 0508 	sub.w	r5, r5, #8
 801aa70:	dc77      	bgt.n	801ab62 <__kernel_rem_pio2+0x202>
 801aa72:	ec47 6b10 	vmov	d0, r6, r7
 801aa76:	4650      	mov	r0, sl
 801aa78:	f000 fac2 	bl	801b000 <scalbn>
 801aa7c:	ec57 6b10 	vmov	r6, r7, d0
 801aa80:	2200      	movs	r2, #0
 801aa82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801aa86:	ee10 0a10 	vmov	r0, s0
 801aa8a:	4639      	mov	r1, r7
 801aa8c:	f7e5 fdbc 	bl	8000608 <__aeabi_dmul>
 801aa90:	ec41 0b10 	vmov	d0, r0, r1
 801aa94:	f000 fb34 	bl	801b100 <floor>
 801aa98:	4b7a      	ldr	r3, [pc, #488]	; (801ac84 <__kernel_rem_pio2+0x324>)
 801aa9a:	ec51 0b10 	vmov	r0, r1, d0
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	f7e5 fdb2 	bl	8000608 <__aeabi_dmul>
 801aaa4:	4602      	mov	r2, r0
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	4639      	mov	r1, r7
 801aaac:	f7e5 fbf4 	bl	8000298 <__aeabi_dsub>
 801aab0:	460f      	mov	r7, r1
 801aab2:	4606      	mov	r6, r0
 801aab4:	f7e6 f842 	bl	8000b3c <__aeabi_d2iz>
 801aab8:	9002      	str	r0, [sp, #8]
 801aaba:	f7e5 fd3b 	bl	8000534 <__aeabi_i2d>
 801aabe:	4602      	mov	r2, r0
 801aac0:	460b      	mov	r3, r1
 801aac2:	4630      	mov	r0, r6
 801aac4:	4639      	mov	r1, r7
 801aac6:	f7e5 fbe7 	bl	8000298 <__aeabi_dsub>
 801aaca:	f1ba 0f00 	cmp.w	sl, #0
 801aace:	4606      	mov	r6, r0
 801aad0:	460f      	mov	r7, r1
 801aad2:	dd6d      	ble.n	801abb0 <__kernel_rem_pio2+0x250>
 801aad4:	1e61      	subs	r1, r4, #1
 801aad6:	ab0c      	add	r3, sp, #48	; 0x30
 801aad8:	9d02      	ldr	r5, [sp, #8]
 801aada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aade:	f1ca 0018 	rsb	r0, sl, #24
 801aae2:	fa43 f200 	asr.w	r2, r3, r0
 801aae6:	4415      	add	r5, r2
 801aae8:	4082      	lsls	r2, r0
 801aaea:	1a9b      	subs	r3, r3, r2
 801aaec:	aa0c      	add	r2, sp, #48	; 0x30
 801aaee:	9502      	str	r5, [sp, #8]
 801aaf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aaf4:	f1ca 0217 	rsb	r2, sl, #23
 801aaf8:	fa43 fb02 	asr.w	fp, r3, r2
 801aafc:	f1bb 0f00 	cmp.w	fp, #0
 801ab00:	dd65      	ble.n	801abce <__kernel_rem_pio2+0x26e>
 801ab02:	9b02      	ldr	r3, [sp, #8]
 801ab04:	2200      	movs	r2, #0
 801ab06:	3301      	adds	r3, #1
 801ab08:	9302      	str	r3, [sp, #8]
 801ab0a:	4615      	mov	r5, r2
 801ab0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801ab10:	4294      	cmp	r4, r2
 801ab12:	f300 809f 	bgt.w	801ac54 <__kernel_rem_pio2+0x2f4>
 801ab16:	f1ba 0f00 	cmp.w	sl, #0
 801ab1a:	dd07      	ble.n	801ab2c <__kernel_rem_pio2+0x1cc>
 801ab1c:	f1ba 0f01 	cmp.w	sl, #1
 801ab20:	f000 80c1 	beq.w	801aca6 <__kernel_rem_pio2+0x346>
 801ab24:	f1ba 0f02 	cmp.w	sl, #2
 801ab28:	f000 80c7 	beq.w	801acba <__kernel_rem_pio2+0x35a>
 801ab2c:	f1bb 0f02 	cmp.w	fp, #2
 801ab30:	d14d      	bne.n	801abce <__kernel_rem_pio2+0x26e>
 801ab32:	4632      	mov	r2, r6
 801ab34:	463b      	mov	r3, r7
 801ab36:	4954      	ldr	r1, [pc, #336]	; (801ac88 <__kernel_rem_pio2+0x328>)
 801ab38:	2000      	movs	r0, #0
 801ab3a:	f7e5 fbad 	bl	8000298 <__aeabi_dsub>
 801ab3e:	4606      	mov	r6, r0
 801ab40:	460f      	mov	r7, r1
 801ab42:	2d00      	cmp	r5, #0
 801ab44:	d043      	beq.n	801abce <__kernel_rem_pio2+0x26e>
 801ab46:	4650      	mov	r0, sl
 801ab48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801ac78 <__kernel_rem_pio2+0x318>
 801ab4c:	f000 fa58 	bl	801b000 <scalbn>
 801ab50:	4630      	mov	r0, r6
 801ab52:	4639      	mov	r1, r7
 801ab54:	ec53 2b10 	vmov	r2, r3, d0
 801ab58:	f7e5 fb9e 	bl	8000298 <__aeabi_dsub>
 801ab5c:	4606      	mov	r6, r0
 801ab5e:	460f      	mov	r7, r1
 801ab60:	e035      	b.n	801abce <__kernel_rem_pio2+0x26e>
 801ab62:	4b4a      	ldr	r3, [pc, #296]	; (801ac8c <__kernel_rem_pio2+0x32c>)
 801ab64:	2200      	movs	r2, #0
 801ab66:	4630      	mov	r0, r6
 801ab68:	4639      	mov	r1, r7
 801ab6a:	f7e5 fd4d 	bl	8000608 <__aeabi_dmul>
 801ab6e:	f7e5 ffe5 	bl	8000b3c <__aeabi_d2iz>
 801ab72:	f7e5 fcdf 	bl	8000534 <__aeabi_i2d>
 801ab76:	4602      	mov	r2, r0
 801ab78:	460b      	mov	r3, r1
 801ab7a:	ec43 2b18 	vmov	d8, r2, r3
 801ab7e:	4b44      	ldr	r3, [pc, #272]	; (801ac90 <__kernel_rem_pio2+0x330>)
 801ab80:	2200      	movs	r2, #0
 801ab82:	f7e5 fd41 	bl	8000608 <__aeabi_dmul>
 801ab86:	4602      	mov	r2, r0
 801ab88:	460b      	mov	r3, r1
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	4639      	mov	r1, r7
 801ab8e:	f7e5 fb83 	bl	8000298 <__aeabi_dsub>
 801ab92:	f7e5 ffd3 	bl	8000b3c <__aeabi_d2iz>
 801ab96:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab9a:	f84b 0b04 	str.w	r0, [fp], #4
 801ab9e:	ec51 0b18 	vmov	r0, r1, d8
 801aba2:	f7e5 fb7b 	bl	800029c <__adddf3>
 801aba6:	f109 39ff 	add.w	r9, r9, #4294967295
 801abaa:	4606      	mov	r6, r0
 801abac:	460f      	mov	r7, r1
 801abae:	e75b      	b.n	801aa68 <__kernel_rem_pio2+0x108>
 801abb0:	d106      	bne.n	801abc0 <__kernel_rem_pio2+0x260>
 801abb2:	1e63      	subs	r3, r4, #1
 801abb4:	aa0c      	add	r2, sp, #48	; 0x30
 801abb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801abba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801abbe:	e79d      	b.n	801aafc <__kernel_rem_pio2+0x19c>
 801abc0:	4b34      	ldr	r3, [pc, #208]	; (801ac94 <__kernel_rem_pio2+0x334>)
 801abc2:	2200      	movs	r2, #0
 801abc4:	f7e5 ffa6 	bl	8000b14 <__aeabi_dcmpge>
 801abc8:	2800      	cmp	r0, #0
 801abca:	d140      	bne.n	801ac4e <__kernel_rem_pio2+0x2ee>
 801abcc:	4683      	mov	fp, r0
 801abce:	2200      	movs	r2, #0
 801abd0:	2300      	movs	r3, #0
 801abd2:	4630      	mov	r0, r6
 801abd4:	4639      	mov	r1, r7
 801abd6:	f7e5 ff7f 	bl	8000ad8 <__aeabi_dcmpeq>
 801abda:	2800      	cmp	r0, #0
 801abdc:	f000 80c1 	beq.w	801ad62 <__kernel_rem_pio2+0x402>
 801abe0:	1e65      	subs	r5, r4, #1
 801abe2:	462b      	mov	r3, r5
 801abe4:	2200      	movs	r2, #0
 801abe6:	9900      	ldr	r1, [sp, #0]
 801abe8:	428b      	cmp	r3, r1
 801abea:	da6d      	bge.n	801acc8 <__kernel_rem_pio2+0x368>
 801abec:	2a00      	cmp	r2, #0
 801abee:	f000 808a 	beq.w	801ad06 <__kernel_rem_pio2+0x3a6>
 801abf2:	ab0c      	add	r3, sp, #48	; 0x30
 801abf4:	f1aa 0a18 	sub.w	sl, sl, #24
 801abf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	f000 80ae 	beq.w	801ad5e <__kernel_rem_pio2+0x3fe>
 801ac02:	4650      	mov	r0, sl
 801ac04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801ac78 <__kernel_rem_pio2+0x318>
 801ac08:	f000 f9fa 	bl	801b000 <scalbn>
 801ac0c:	1c6b      	adds	r3, r5, #1
 801ac0e:	00da      	lsls	r2, r3, #3
 801ac10:	9205      	str	r2, [sp, #20]
 801ac12:	ec57 6b10 	vmov	r6, r7, d0
 801ac16:	aa70      	add	r2, sp, #448	; 0x1c0
 801ac18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801ac8c <__kernel_rem_pio2+0x32c>
 801ac1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801ac20:	462c      	mov	r4, r5
 801ac22:	f04f 0800 	mov.w	r8, #0
 801ac26:	2c00      	cmp	r4, #0
 801ac28:	f280 80d4 	bge.w	801add4 <__kernel_rem_pio2+0x474>
 801ac2c:	462c      	mov	r4, r5
 801ac2e:	2c00      	cmp	r4, #0
 801ac30:	f2c0 8102 	blt.w	801ae38 <__kernel_rem_pio2+0x4d8>
 801ac34:	4b18      	ldr	r3, [pc, #96]	; (801ac98 <__kernel_rem_pio2+0x338>)
 801ac36:	461e      	mov	r6, r3
 801ac38:	ab70      	add	r3, sp, #448	; 0x1c0
 801ac3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801ac3e:	1b2b      	subs	r3, r5, r4
 801ac40:	f04f 0900 	mov.w	r9, #0
 801ac44:	f04f 0a00 	mov.w	sl, #0
 801ac48:	2700      	movs	r7, #0
 801ac4a:	9306      	str	r3, [sp, #24]
 801ac4c:	e0e6      	b.n	801ae1c <__kernel_rem_pio2+0x4bc>
 801ac4e:	f04f 0b02 	mov.w	fp, #2
 801ac52:	e756      	b.n	801ab02 <__kernel_rem_pio2+0x1a2>
 801ac54:	f8d8 3000 	ldr.w	r3, [r8]
 801ac58:	bb05      	cbnz	r5, 801ac9c <__kernel_rem_pio2+0x33c>
 801ac5a:	b123      	cbz	r3, 801ac66 <__kernel_rem_pio2+0x306>
 801ac5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ac60:	f8c8 3000 	str.w	r3, [r8]
 801ac64:	2301      	movs	r3, #1
 801ac66:	3201      	adds	r2, #1
 801ac68:	f108 0804 	add.w	r8, r8, #4
 801ac6c:	461d      	mov	r5, r3
 801ac6e:	e74f      	b.n	801ab10 <__kernel_rem_pio2+0x1b0>
	...
 801ac7c:	3ff00000 	.word	0x3ff00000
 801ac80:	0801d7b8 	.word	0x0801d7b8
 801ac84:	40200000 	.word	0x40200000
 801ac88:	3ff00000 	.word	0x3ff00000
 801ac8c:	3e700000 	.word	0x3e700000
 801ac90:	41700000 	.word	0x41700000
 801ac94:	3fe00000 	.word	0x3fe00000
 801ac98:	0801d778 	.word	0x0801d778
 801ac9c:	1acb      	subs	r3, r1, r3
 801ac9e:	f8c8 3000 	str.w	r3, [r8]
 801aca2:	462b      	mov	r3, r5
 801aca4:	e7df      	b.n	801ac66 <__kernel_rem_pio2+0x306>
 801aca6:	1e62      	subs	r2, r4, #1
 801aca8:	ab0c      	add	r3, sp, #48	; 0x30
 801acaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801acb2:	a90c      	add	r1, sp, #48	; 0x30
 801acb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801acb8:	e738      	b.n	801ab2c <__kernel_rem_pio2+0x1cc>
 801acba:	1e62      	subs	r2, r4, #1
 801acbc:	ab0c      	add	r3, sp, #48	; 0x30
 801acbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acc2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801acc6:	e7f4      	b.n	801acb2 <__kernel_rem_pio2+0x352>
 801acc8:	a90c      	add	r1, sp, #48	; 0x30
 801acca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801acce:	3b01      	subs	r3, #1
 801acd0:	430a      	orrs	r2, r1
 801acd2:	e788      	b.n	801abe6 <__kernel_rem_pio2+0x286>
 801acd4:	3301      	adds	r3, #1
 801acd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801acda:	2900      	cmp	r1, #0
 801acdc:	d0fa      	beq.n	801acd4 <__kernel_rem_pio2+0x374>
 801acde:	9a08      	ldr	r2, [sp, #32]
 801ace0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801ace4:	446a      	add	r2, sp
 801ace6:	3a98      	subs	r2, #152	; 0x98
 801ace8:	9208      	str	r2, [sp, #32]
 801acea:	9a06      	ldr	r2, [sp, #24]
 801acec:	a920      	add	r1, sp, #128	; 0x80
 801acee:	18a2      	adds	r2, r4, r2
 801acf0:	18e3      	adds	r3, r4, r3
 801acf2:	f104 0801 	add.w	r8, r4, #1
 801acf6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801acfa:	9302      	str	r3, [sp, #8]
 801acfc:	9b02      	ldr	r3, [sp, #8]
 801acfe:	4543      	cmp	r3, r8
 801ad00:	da04      	bge.n	801ad0c <__kernel_rem_pio2+0x3ac>
 801ad02:	461c      	mov	r4, r3
 801ad04:	e6a2      	b.n	801aa4c <__kernel_rem_pio2+0xec>
 801ad06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e7e4      	b.n	801acd6 <__kernel_rem_pio2+0x376>
 801ad0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801ad12:	f7e5 fc0f 	bl	8000534 <__aeabi_i2d>
 801ad16:	e8e5 0102 	strd	r0, r1, [r5], #8
 801ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad1c:	46ab      	mov	fp, r5
 801ad1e:	461c      	mov	r4, r3
 801ad20:	f04f 0900 	mov.w	r9, #0
 801ad24:	2600      	movs	r6, #0
 801ad26:	2700      	movs	r7, #0
 801ad28:	9b05      	ldr	r3, [sp, #20]
 801ad2a:	4599      	cmp	r9, r3
 801ad2c:	dd06      	ble.n	801ad3c <__kernel_rem_pio2+0x3dc>
 801ad2e:	9b08      	ldr	r3, [sp, #32]
 801ad30:	e8e3 6702 	strd	r6, r7, [r3], #8
 801ad34:	f108 0801 	add.w	r8, r8, #1
 801ad38:	9308      	str	r3, [sp, #32]
 801ad3a:	e7df      	b.n	801acfc <__kernel_rem_pio2+0x39c>
 801ad3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ad40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ad44:	f7e5 fc60 	bl	8000608 <__aeabi_dmul>
 801ad48:	4602      	mov	r2, r0
 801ad4a:	460b      	mov	r3, r1
 801ad4c:	4630      	mov	r0, r6
 801ad4e:	4639      	mov	r1, r7
 801ad50:	f7e5 faa4 	bl	800029c <__adddf3>
 801ad54:	f109 0901 	add.w	r9, r9, #1
 801ad58:	4606      	mov	r6, r0
 801ad5a:	460f      	mov	r7, r1
 801ad5c:	e7e4      	b.n	801ad28 <__kernel_rem_pio2+0x3c8>
 801ad5e:	3d01      	subs	r5, #1
 801ad60:	e747      	b.n	801abf2 <__kernel_rem_pio2+0x292>
 801ad62:	ec47 6b10 	vmov	d0, r6, r7
 801ad66:	f1ca 0000 	rsb	r0, sl, #0
 801ad6a:	f000 f949 	bl	801b000 <scalbn>
 801ad6e:	ec57 6b10 	vmov	r6, r7, d0
 801ad72:	4ba0      	ldr	r3, [pc, #640]	; (801aff4 <__kernel_rem_pio2+0x694>)
 801ad74:	ee10 0a10 	vmov	r0, s0
 801ad78:	2200      	movs	r2, #0
 801ad7a:	4639      	mov	r1, r7
 801ad7c:	f7e5 feca 	bl	8000b14 <__aeabi_dcmpge>
 801ad80:	b1f8      	cbz	r0, 801adc2 <__kernel_rem_pio2+0x462>
 801ad82:	4b9d      	ldr	r3, [pc, #628]	; (801aff8 <__kernel_rem_pio2+0x698>)
 801ad84:	2200      	movs	r2, #0
 801ad86:	4630      	mov	r0, r6
 801ad88:	4639      	mov	r1, r7
 801ad8a:	f7e5 fc3d 	bl	8000608 <__aeabi_dmul>
 801ad8e:	f7e5 fed5 	bl	8000b3c <__aeabi_d2iz>
 801ad92:	4680      	mov	r8, r0
 801ad94:	f7e5 fbce 	bl	8000534 <__aeabi_i2d>
 801ad98:	4b96      	ldr	r3, [pc, #600]	; (801aff4 <__kernel_rem_pio2+0x694>)
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	f7e5 fc34 	bl	8000608 <__aeabi_dmul>
 801ada0:	460b      	mov	r3, r1
 801ada2:	4602      	mov	r2, r0
 801ada4:	4639      	mov	r1, r7
 801ada6:	4630      	mov	r0, r6
 801ada8:	f7e5 fa76 	bl	8000298 <__aeabi_dsub>
 801adac:	f7e5 fec6 	bl	8000b3c <__aeabi_d2iz>
 801adb0:	1c65      	adds	r5, r4, #1
 801adb2:	ab0c      	add	r3, sp, #48	; 0x30
 801adb4:	f10a 0a18 	add.w	sl, sl, #24
 801adb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801adbc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801adc0:	e71f      	b.n	801ac02 <__kernel_rem_pio2+0x2a2>
 801adc2:	4630      	mov	r0, r6
 801adc4:	4639      	mov	r1, r7
 801adc6:	f7e5 feb9 	bl	8000b3c <__aeabi_d2iz>
 801adca:	ab0c      	add	r3, sp, #48	; 0x30
 801adcc:	4625      	mov	r5, r4
 801adce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801add2:	e716      	b.n	801ac02 <__kernel_rem_pio2+0x2a2>
 801add4:	ab0c      	add	r3, sp, #48	; 0x30
 801add6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801adda:	f7e5 fbab 	bl	8000534 <__aeabi_i2d>
 801adde:	4632      	mov	r2, r6
 801ade0:	463b      	mov	r3, r7
 801ade2:	f7e5 fc11 	bl	8000608 <__aeabi_dmul>
 801ade6:	4642      	mov	r2, r8
 801ade8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801adec:	464b      	mov	r3, r9
 801adee:	4630      	mov	r0, r6
 801adf0:	4639      	mov	r1, r7
 801adf2:	f7e5 fc09 	bl	8000608 <__aeabi_dmul>
 801adf6:	3c01      	subs	r4, #1
 801adf8:	4606      	mov	r6, r0
 801adfa:	460f      	mov	r7, r1
 801adfc:	e713      	b.n	801ac26 <__kernel_rem_pio2+0x2c6>
 801adfe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801ae02:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801ae06:	f7e5 fbff 	bl	8000608 <__aeabi_dmul>
 801ae0a:	4602      	mov	r2, r0
 801ae0c:	460b      	mov	r3, r1
 801ae0e:	4648      	mov	r0, r9
 801ae10:	4651      	mov	r1, sl
 801ae12:	f7e5 fa43 	bl	800029c <__adddf3>
 801ae16:	3701      	adds	r7, #1
 801ae18:	4681      	mov	r9, r0
 801ae1a:	468a      	mov	sl, r1
 801ae1c:	9b00      	ldr	r3, [sp, #0]
 801ae1e:	429f      	cmp	r7, r3
 801ae20:	dc02      	bgt.n	801ae28 <__kernel_rem_pio2+0x4c8>
 801ae22:	9b06      	ldr	r3, [sp, #24]
 801ae24:	429f      	cmp	r7, r3
 801ae26:	ddea      	ble.n	801adfe <__kernel_rem_pio2+0x49e>
 801ae28:	9a06      	ldr	r2, [sp, #24]
 801ae2a:	ab48      	add	r3, sp, #288	; 0x120
 801ae2c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801ae30:	e9c6 9a00 	strd	r9, sl, [r6]
 801ae34:	3c01      	subs	r4, #1
 801ae36:	e6fa      	b.n	801ac2e <__kernel_rem_pio2+0x2ce>
 801ae38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801ae3a:	2b02      	cmp	r3, #2
 801ae3c:	dc0b      	bgt.n	801ae56 <__kernel_rem_pio2+0x4f6>
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	dc39      	bgt.n	801aeb6 <__kernel_rem_pio2+0x556>
 801ae42:	d05d      	beq.n	801af00 <__kernel_rem_pio2+0x5a0>
 801ae44:	9b02      	ldr	r3, [sp, #8]
 801ae46:	f003 0007 	and.w	r0, r3, #7
 801ae4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801ae4e:	ecbd 8b02 	vpop	{d8}
 801ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801ae58:	2b03      	cmp	r3, #3
 801ae5a:	d1f3      	bne.n	801ae44 <__kernel_rem_pio2+0x4e4>
 801ae5c:	9b05      	ldr	r3, [sp, #20]
 801ae5e:	9500      	str	r5, [sp, #0]
 801ae60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801ae64:	eb0d 0403 	add.w	r4, sp, r3
 801ae68:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801ae6c:	46a2      	mov	sl, r4
 801ae6e:	9b00      	ldr	r3, [sp, #0]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	f1aa 0a08 	sub.w	sl, sl, #8
 801ae76:	dc69      	bgt.n	801af4c <__kernel_rem_pio2+0x5ec>
 801ae78:	46aa      	mov	sl, r5
 801ae7a:	f1ba 0f01 	cmp.w	sl, #1
 801ae7e:	f1a4 0408 	sub.w	r4, r4, #8
 801ae82:	f300 8083 	bgt.w	801af8c <__kernel_rem_pio2+0x62c>
 801ae86:	9c05      	ldr	r4, [sp, #20]
 801ae88:	ab48      	add	r3, sp, #288	; 0x120
 801ae8a:	441c      	add	r4, r3
 801ae8c:	2000      	movs	r0, #0
 801ae8e:	2100      	movs	r1, #0
 801ae90:	2d01      	cmp	r5, #1
 801ae92:	f300 809a 	bgt.w	801afca <__kernel_rem_pio2+0x66a>
 801ae96:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801ae9a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801ae9e:	f1bb 0f00 	cmp.w	fp, #0
 801aea2:	f040 8098 	bne.w	801afd6 <__kernel_rem_pio2+0x676>
 801aea6:	9b04      	ldr	r3, [sp, #16]
 801aea8:	e9c3 7800 	strd	r7, r8, [r3]
 801aeac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801aeb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801aeb4:	e7c6      	b.n	801ae44 <__kernel_rem_pio2+0x4e4>
 801aeb6:	9e05      	ldr	r6, [sp, #20]
 801aeb8:	ab48      	add	r3, sp, #288	; 0x120
 801aeba:	441e      	add	r6, r3
 801aebc:	462c      	mov	r4, r5
 801aebe:	2000      	movs	r0, #0
 801aec0:	2100      	movs	r1, #0
 801aec2:	2c00      	cmp	r4, #0
 801aec4:	da33      	bge.n	801af2e <__kernel_rem_pio2+0x5ce>
 801aec6:	f1bb 0f00 	cmp.w	fp, #0
 801aeca:	d036      	beq.n	801af3a <__kernel_rem_pio2+0x5da>
 801aecc:	4602      	mov	r2, r0
 801aece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aed2:	9c04      	ldr	r4, [sp, #16]
 801aed4:	e9c4 2300 	strd	r2, r3, [r4]
 801aed8:	4602      	mov	r2, r0
 801aeda:	460b      	mov	r3, r1
 801aedc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801aee0:	f7e5 f9da 	bl	8000298 <__aeabi_dsub>
 801aee4:	ae4a      	add	r6, sp, #296	; 0x128
 801aee6:	2401      	movs	r4, #1
 801aee8:	42a5      	cmp	r5, r4
 801aeea:	da29      	bge.n	801af40 <__kernel_rem_pio2+0x5e0>
 801aeec:	f1bb 0f00 	cmp.w	fp, #0
 801aef0:	d002      	beq.n	801aef8 <__kernel_rem_pio2+0x598>
 801aef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aef6:	4619      	mov	r1, r3
 801aef8:	9b04      	ldr	r3, [sp, #16]
 801aefa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801aefe:	e7a1      	b.n	801ae44 <__kernel_rem_pio2+0x4e4>
 801af00:	9c05      	ldr	r4, [sp, #20]
 801af02:	ab48      	add	r3, sp, #288	; 0x120
 801af04:	441c      	add	r4, r3
 801af06:	2000      	movs	r0, #0
 801af08:	2100      	movs	r1, #0
 801af0a:	2d00      	cmp	r5, #0
 801af0c:	da09      	bge.n	801af22 <__kernel_rem_pio2+0x5c2>
 801af0e:	f1bb 0f00 	cmp.w	fp, #0
 801af12:	d002      	beq.n	801af1a <__kernel_rem_pio2+0x5ba>
 801af14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af18:	4619      	mov	r1, r3
 801af1a:	9b04      	ldr	r3, [sp, #16]
 801af1c:	e9c3 0100 	strd	r0, r1, [r3]
 801af20:	e790      	b.n	801ae44 <__kernel_rem_pio2+0x4e4>
 801af22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801af26:	f7e5 f9b9 	bl	800029c <__adddf3>
 801af2a:	3d01      	subs	r5, #1
 801af2c:	e7ed      	b.n	801af0a <__kernel_rem_pio2+0x5aa>
 801af2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801af32:	f7e5 f9b3 	bl	800029c <__adddf3>
 801af36:	3c01      	subs	r4, #1
 801af38:	e7c3      	b.n	801aec2 <__kernel_rem_pio2+0x562>
 801af3a:	4602      	mov	r2, r0
 801af3c:	460b      	mov	r3, r1
 801af3e:	e7c8      	b.n	801aed2 <__kernel_rem_pio2+0x572>
 801af40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801af44:	f7e5 f9aa 	bl	800029c <__adddf3>
 801af48:	3401      	adds	r4, #1
 801af4a:	e7cd      	b.n	801aee8 <__kernel_rem_pio2+0x588>
 801af4c:	e9da 8900 	ldrd	r8, r9, [sl]
 801af50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801af54:	9b00      	ldr	r3, [sp, #0]
 801af56:	3b01      	subs	r3, #1
 801af58:	9300      	str	r3, [sp, #0]
 801af5a:	4632      	mov	r2, r6
 801af5c:	463b      	mov	r3, r7
 801af5e:	4640      	mov	r0, r8
 801af60:	4649      	mov	r1, r9
 801af62:	f7e5 f99b 	bl	800029c <__adddf3>
 801af66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801af6a:	4602      	mov	r2, r0
 801af6c:	460b      	mov	r3, r1
 801af6e:	4640      	mov	r0, r8
 801af70:	4649      	mov	r1, r9
 801af72:	f7e5 f991 	bl	8000298 <__aeabi_dsub>
 801af76:	4632      	mov	r2, r6
 801af78:	463b      	mov	r3, r7
 801af7a:	f7e5 f98f 	bl	800029c <__adddf3>
 801af7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801af82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801af86:	ed8a 7b00 	vstr	d7, [sl]
 801af8a:	e770      	b.n	801ae6e <__kernel_rem_pio2+0x50e>
 801af8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801af90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801af94:	4640      	mov	r0, r8
 801af96:	4632      	mov	r2, r6
 801af98:	463b      	mov	r3, r7
 801af9a:	4649      	mov	r1, r9
 801af9c:	f7e5 f97e 	bl	800029c <__adddf3>
 801afa0:	e9cd 0100 	strd	r0, r1, [sp]
 801afa4:	4602      	mov	r2, r0
 801afa6:	460b      	mov	r3, r1
 801afa8:	4640      	mov	r0, r8
 801afaa:	4649      	mov	r1, r9
 801afac:	f7e5 f974 	bl	8000298 <__aeabi_dsub>
 801afb0:	4632      	mov	r2, r6
 801afb2:	463b      	mov	r3, r7
 801afb4:	f7e5 f972 	bl	800029c <__adddf3>
 801afb8:	ed9d 7b00 	vldr	d7, [sp]
 801afbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801afc0:	ed84 7b00 	vstr	d7, [r4]
 801afc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801afc8:	e757      	b.n	801ae7a <__kernel_rem_pio2+0x51a>
 801afca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801afce:	f7e5 f965 	bl	800029c <__adddf3>
 801afd2:	3d01      	subs	r5, #1
 801afd4:	e75c      	b.n	801ae90 <__kernel_rem_pio2+0x530>
 801afd6:	9b04      	ldr	r3, [sp, #16]
 801afd8:	9a04      	ldr	r2, [sp, #16]
 801afda:	601f      	str	r7, [r3, #0]
 801afdc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801afe0:	605c      	str	r4, [r3, #4]
 801afe2:	609d      	str	r5, [r3, #8]
 801afe4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801afe8:	60d3      	str	r3, [r2, #12]
 801afea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801afee:	6110      	str	r0, [r2, #16]
 801aff0:	6153      	str	r3, [r2, #20]
 801aff2:	e727      	b.n	801ae44 <__kernel_rem_pio2+0x4e4>
 801aff4:	41700000 	.word	0x41700000
 801aff8:	3e700000 	.word	0x3e700000
 801affc:	00000000 	.word	0x00000000

0801b000 <scalbn>:
 801b000:	b570      	push	{r4, r5, r6, lr}
 801b002:	ec55 4b10 	vmov	r4, r5, d0
 801b006:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b00a:	4606      	mov	r6, r0
 801b00c:	462b      	mov	r3, r5
 801b00e:	b999      	cbnz	r1, 801b038 <scalbn+0x38>
 801b010:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b014:	4323      	orrs	r3, r4
 801b016:	d03f      	beq.n	801b098 <scalbn+0x98>
 801b018:	4b35      	ldr	r3, [pc, #212]	; (801b0f0 <scalbn+0xf0>)
 801b01a:	4629      	mov	r1, r5
 801b01c:	ee10 0a10 	vmov	r0, s0
 801b020:	2200      	movs	r2, #0
 801b022:	f7e5 faf1 	bl	8000608 <__aeabi_dmul>
 801b026:	4b33      	ldr	r3, [pc, #204]	; (801b0f4 <scalbn+0xf4>)
 801b028:	429e      	cmp	r6, r3
 801b02a:	4604      	mov	r4, r0
 801b02c:	460d      	mov	r5, r1
 801b02e:	da10      	bge.n	801b052 <scalbn+0x52>
 801b030:	a327      	add	r3, pc, #156	; (adr r3, 801b0d0 <scalbn+0xd0>)
 801b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b036:	e01f      	b.n	801b078 <scalbn+0x78>
 801b038:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b03c:	4291      	cmp	r1, r2
 801b03e:	d10c      	bne.n	801b05a <scalbn+0x5a>
 801b040:	ee10 2a10 	vmov	r2, s0
 801b044:	4620      	mov	r0, r4
 801b046:	4629      	mov	r1, r5
 801b048:	f7e5 f928 	bl	800029c <__adddf3>
 801b04c:	4604      	mov	r4, r0
 801b04e:	460d      	mov	r5, r1
 801b050:	e022      	b.n	801b098 <scalbn+0x98>
 801b052:	460b      	mov	r3, r1
 801b054:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b058:	3936      	subs	r1, #54	; 0x36
 801b05a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b05e:	4296      	cmp	r6, r2
 801b060:	dd0d      	ble.n	801b07e <scalbn+0x7e>
 801b062:	2d00      	cmp	r5, #0
 801b064:	a11c      	add	r1, pc, #112	; (adr r1, 801b0d8 <scalbn+0xd8>)
 801b066:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b06a:	da02      	bge.n	801b072 <scalbn+0x72>
 801b06c:	a11c      	add	r1, pc, #112	; (adr r1, 801b0e0 <scalbn+0xe0>)
 801b06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b072:	a319      	add	r3, pc, #100	; (adr r3, 801b0d8 <scalbn+0xd8>)
 801b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b078:	f7e5 fac6 	bl	8000608 <__aeabi_dmul>
 801b07c:	e7e6      	b.n	801b04c <scalbn+0x4c>
 801b07e:	1872      	adds	r2, r6, r1
 801b080:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b084:	428a      	cmp	r2, r1
 801b086:	dcec      	bgt.n	801b062 <scalbn+0x62>
 801b088:	2a00      	cmp	r2, #0
 801b08a:	dd08      	ble.n	801b09e <scalbn+0x9e>
 801b08c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b090:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b094:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b098:	ec45 4b10 	vmov	d0, r4, r5
 801b09c:	bd70      	pop	{r4, r5, r6, pc}
 801b09e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b0a2:	da08      	bge.n	801b0b6 <scalbn+0xb6>
 801b0a4:	2d00      	cmp	r5, #0
 801b0a6:	a10a      	add	r1, pc, #40	; (adr r1, 801b0d0 <scalbn+0xd0>)
 801b0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0ac:	dac0      	bge.n	801b030 <scalbn+0x30>
 801b0ae:	a10e      	add	r1, pc, #56	; (adr r1, 801b0e8 <scalbn+0xe8>)
 801b0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0b4:	e7bc      	b.n	801b030 <scalbn+0x30>
 801b0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b0ba:	3236      	adds	r2, #54	; 0x36
 801b0bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b0c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b0c4:	4620      	mov	r0, r4
 801b0c6:	4b0c      	ldr	r3, [pc, #48]	; (801b0f8 <scalbn+0xf8>)
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	e7d5      	b.n	801b078 <scalbn+0x78>
 801b0cc:	f3af 8000 	nop.w
 801b0d0:	c2f8f359 	.word	0xc2f8f359
 801b0d4:	01a56e1f 	.word	0x01a56e1f
 801b0d8:	8800759c 	.word	0x8800759c
 801b0dc:	7e37e43c 	.word	0x7e37e43c
 801b0e0:	8800759c 	.word	0x8800759c
 801b0e4:	fe37e43c 	.word	0xfe37e43c
 801b0e8:	c2f8f359 	.word	0xc2f8f359
 801b0ec:	81a56e1f 	.word	0x81a56e1f
 801b0f0:	43500000 	.word	0x43500000
 801b0f4:	ffff3cb0 	.word	0xffff3cb0
 801b0f8:	3c900000 	.word	0x3c900000
 801b0fc:	00000000 	.word	0x00000000

0801b100 <floor>:
 801b100:	ec51 0b10 	vmov	r0, r1, d0
 801b104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b10c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801b110:	2e13      	cmp	r6, #19
 801b112:	ee10 5a10 	vmov	r5, s0
 801b116:	ee10 8a10 	vmov	r8, s0
 801b11a:	460c      	mov	r4, r1
 801b11c:	dc31      	bgt.n	801b182 <floor+0x82>
 801b11e:	2e00      	cmp	r6, #0
 801b120:	da14      	bge.n	801b14c <floor+0x4c>
 801b122:	a333      	add	r3, pc, #204	; (adr r3, 801b1f0 <floor+0xf0>)
 801b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b128:	f7e5 f8b8 	bl	800029c <__adddf3>
 801b12c:	2200      	movs	r2, #0
 801b12e:	2300      	movs	r3, #0
 801b130:	f7e5 fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 801b134:	b138      	cbz	r0, 801b146 <floor+0x46>
 801b136:	2c00      	cmp	r4, #0
 801b138:	da53      	bge.n	801b1e2 <floor+0xe2>
 801b13a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801b13e:	4325      	orrs	r5, r4
 801b140:	d052      	beq.n	801b1e8 <floor+0xe8>
 801b142:	4c2d      	ldr	r4, [pc, #180]	; (801b1f8 <floor+0xf8>)
 801b144:	2500      	movs	r5, #0
 801b146:	4621      	mov	r1, r4
 801b148:	4628      	mov	r0, r5
 801b14a:	e024      	b.n	801b196 <floor+0x96>
 801b14c:	4f2b      	ldr	r7, [pc, #172]	; (801b1fc <floor+0xfc>)
 801b14e:	4137      	asrs	r7, r6
 801b150:	ea01 0307 	and.w	r3, r1, r7
 801b154:	4303      	orrs	r3, r0
 801b156:	d01e      	beq.n	801b196 <floor+0x96>
 801b158:	a325      	add	r3, pc, #148	; (adr r3, 801b1f0 <floor+0xf0>)
 801b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15e:	f7e5 f89d 	bl	800029c <__adddf3>
 801b162:	2200      	movs	r2, #0
 801b164:	2300      	movs	r3, #0
 801b166:	f7e5 fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 801b16a:	2800      	cmp	r0, #0
 801b16c:	d0eb      	beq.n	801b146 <floor+0x46>
 801b16e:	2c00      	cmp	r4, #0
 801b170:	bfbe      	ittt	lt
 801b172:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b176:	4133      	asrlt	r3, r6
 801b178:	18e4      	addlt	r4, r4, r3
 801b17a:	ea24 0407 	bic.w	r4, r4, r7
 801b17e:	2500      	movs	r5, #0
 801b180:	e7e1      	b.n	801b146 <floor+0x46>
 801b182:	2e33      	cmp	r6, #51	; 0x33
 801b184:	dd0b      	ble.n	801b19e <floor+0x9e>
 801b186:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b18a:	d104      	bne.n	801b196 <floor+0x96>
 801b18c:	ee10 2a10 	vmov	r2, s0
 801b190:	460b      	mov	r3, r1
 801b192:	f7e5 f883 	bl	800029c <__adddf3>
 801b196:	ec41 0b10 	vmov	d0, r0, r1
 801b19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b19e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801b1a2:	f04f 37ff 	mov.w	r7, #4294967295
 801b1a6:	40df      	lsrs	r7, r3
 801b1a8:	4238      	tst	r0, r7
 801b1aa:	d0f4      	beq.n	801b196 <floor+0x96>
 801b1ac:	a310      	add	r3, pc, #64	; (adr r3, 801b1f0 <floor+0xf0>)
 801b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b2:	f7e5 f873 	bl	800029c <__adddf3>
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	f7e5 fcb5 	bl	8000b28 <__aeabi_dcmpgt>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d0c1      	beq.n	801b146 <floor+0x46>
 801b1c2:	2c00      	cmp	r4, #0
 801b1c4:	da0a      	bge.n	801b1dc <floor+0xdc>
 801b1c6:	2e14      	cmp	r6, #20
 801b1c8:	d101      	bne.n	801b1ce <floor+0xce>
 801b1ca:	3401      	adds	r4, #1
 801b1cc:	e006      	b.n	801b1dc <floor+0xdc>
 801b1ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b1d2:	2301      	movs	r3, #1
 801b1d4:	40b3      	lsls	r3, r6
 801b1d6:	441d      	add	r5, r3
 801b1d8:	45a8      	cmp	r8, r5
 801b1da:	d8f6      	bhi.n	801b1ca <floor+0xca>
 801b1dc:	ea25 0507 	bic.w	r5, r5, r7
 801b1e0:	e7b1      	b.n	801b146 <floor+0x46>
 801b1e2:	2500      	movs	r5, #0
 801b1e4:	462c      	mov	r4, r5
 801b1e6:	e7ae      	b.n	801b146 <floor+0x46>
 801b1e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b1ec:	e7ab      	b.n	801b146 <floor+0x46>
 801b1ee:	bf00      	nop
 801b1f0:	8800759c 	.word	0x8800759c
 801b1f4:	7e37e43c 	.word	0x7e37e43c
 801b1f8:	bff00000 	.word	0xbff00000
 801b1fc:	000fffff 	.word	0x000fffff

0801b200 <_init>:
 801b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b202:	bf00      	nop
 801b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b206:	bc08      	pop	{r3}
 801b208:	469e      	mov	lr, r3
 801b20a:	4770      	bx	lr

0801b20c <_fini>:
 801b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b20e:	bf00      	nop
 801b210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b212:	bc08      	pop	{r3}
 801b214:	469e      	mov	lr, r3
 801b216:	4770      	bx	lr
